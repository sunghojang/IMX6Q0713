cscope 15 $HOME/MANGO-BOARD/mango-imx6/mango-imx6-kernel-3.10.53-android/work/kernel_imx/drivers/gpio               0001021210
	@devres.c

17 
	~<löux/moduÀ.h
>

18 
	~<löux/gpio.h
>

19 
	~<löux/devi˚.h
>

20 
	~<löux/gÂ.h
>

22 
	$devm_gpio_ªÀa£
(
devi˚
 *
dev
, *
ªs
)

24 *
gpio
 = 
ªs
;

26 
	`gpio_‰ì
(*
gpio
);

27 
	}
}

29 
	$devm_gpio_m©ch
(
devi˚
 *
dev
, *
ªs
, *
d©a
)

31 *
this
 = 
ªs
, *
gpio
 = 
d©a
;

33  *
this
 =*
gpio
;

34 
	}
}

51 
	$devm_gpio_ªque°
(
devi˚
 *
dev
, 
gpio
, c⁄° *
œbñ
)

53 *
dr
;

54 
rc
;

56 
dr
 = 
	`devªs_Æloc
(
devm_gpio_ªÀa£
, (), 
GFP_KERNEL
);

57 i‡(!
dr
)

58  -
ENOMEM
;

60 
rc
 = 
	`gpio_ªque°
(
gpio
, 
œbñ
);

61 i‡(
rc
) {

62 
	`devªs_‰ì
(
dr
);

63  
rc
;

66 *
dr
 = 
gpio
;

67 
	`devªs_add
(
dev
, 
dr
);

70 
	}
}

71 
EXPORT_SYMBOL
(
devm_gpio_ªque°
);

80 
	$devm_gpio_ªque°_⁄e
(
devi˚
 *
dev
, 
gpio
,

81 
Êags
, c⁄° *
œbñ
)

83 *
dr
;

84 
rc
;

86 
dr
 = 
	`devªs_Æloc
(
devm_gpio_ªÀa£
, (), 
GFP_KERNEL
);

87 i‡(!
dr
)

88  -
ENOMEM
;

90 
rc
 = 
	`gpio_ªque°_⁄e
(
gpio
, 
Êags
, 
œbñ
);

91 i‡(
rc
) {

92 
	`devªs_‰ì
(
dr
);

93  
rc
;

96 *
dr
 = 
gpio
;

97 
	`devªs_add
(
dev
, 
dr
);

100 
	}
}

101 
EXPORT_SYMBOL
(
devm_gpio_ªque°_⁄e
);

113 
	$devm_gpio_‰ì
(
devi˚
 *
dev
, 
gpio
)

116 
	`WARN_ON
(
	`devªs_ªÀa£
(
dev
, 
devm_gpio_ªÀa£
, 
devm_gpio_m©ch
,

117 &
gpio
));

118 
	}
}

119 
EXPORT_SYMBOL
(
devm_gpio_‰ì
);

	@gpio-74x164.c

12 
	~<löux/öô.h
>

13 
	~<löux/muãx.h
>

14 
	~<löux/•i/•i.h
>

15 
	~<löux/•i/74x164.h
>

16 
	~<löux/gpio.h
>

17 
	~<löux/of_gpio.h
>

18 
	~<löux/¶ab.h
>

19 
	~<löux/moduÀ.h
>

21 
	#GEN_74X164_NUMBER_GPIOS
 8

	)

23 
	sgí_74x164_chù
 {

24 
•i_devi˚
 *
	m•i
;

25 
u8
 *
	mbuf„r
;

26 
gpio_chù
 
	mgpio_chù
;

27 
muãx
 
	mlock
;

28 
u32
 
	mªgi°îs
;

31 
gí_74x164_chù
 *
	$gpio_to_74x164_chù
(
gpio_chù
 *
gc
)

33  
	`c⁄èöî_of
(
gc
, 
gí_74x164_chù
, 
gpio_chù
);

34 
	}
}

36 
	$__gí_74x164_wrôe_c⁄fig
(
gí_74x164_chù
 *
chù
)

38 
•i_mesßge
 
mesßge
;

39 
•i_å™s„r
 *
msg_buf
;

40 
i
, 
ªt
 = 0;

42 
msg_buf
 = 
	`kzÆloc
(
chù
->
ªgi°îs
 * (
•i_å™s„r
),

43 
GFP_KERNEL
);

44 i‡(!
msg_buf
)

45  -
ENOMEM
;

47 
	`•i_mesßge_öô
(&
mesßge
);

57 
i
 = 
chù
->
ªgi°îs
 - 1; i >= 0; i--) {

58 
msg_buf
[
i
].
tx_buf
 = 
chù
->
buf„r
 +i;

59 
msg_buf
[
i
].
Àn
 = (
u8
);

60 
	`•i_mesßge_add_èû
(
msg_buf
 + 
i
, &
mesßge
);

63 
ªt
 = 
	`•i_sync
(
chù
->
•i
, &
mesßge
);

65 
	`k‰ì
(
msg_buf
);

67  
ªt
;

68 
	}
}

70 
	$gí_74x164_gë_vÆue
(
gpio_chù
 *
gc
, 
off£t
)

72 
gí_74x164_chù
 *
chù
 = 
	`gpio_to_74x164_chù
(
gc
);

73 
u8
 
b™k
 = 
off£t
 / 8;

74 
u8
 
pö
 = 
off£t
 % 8;

75 
ªt
;

77 
	`muãx_lock
(&
chù
->
lock
);

78 
ªt
 = (
chù
->
buf„r
[
b™k
] >> 
pö
) & 0x1;

79 
	`muãx_u∆ock
(&
chù
->
lock
);

81  
ªt
;

82 
	}
}

84 
	$gí_74x164_£t_vÆue
(
gpio_chù
 *
gc
,

85 
off£t
, 
vÆ
)

87 
gí_74x164_chù
 *
chù
 = 
	`gpio_to_74x164_chù
(
gc
);

88 
u8
 
b™k
 = 
off£t
 / 8;

89 
u8
 
pö
 = 
off£t
 % 8;

91 
	`muãx_lock
(&
chù
->
lock
);

92 i‡(
vÆ
)

93 
chù
->
buf„r
[
b™k
] |(1 << 
pö
);

95 
chù
->
buf„r
[
b™k
] &~(1 << 
pö
);

97 
	`__gí_74x164_wrôe_c⁄fig
(
chù
);

98 
	`muãx_u∆ock
(&
chù
->
lock
);

99 
	}
}

101 
	$gí_74x164_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
,

102 
off£t
, 
vÆ
)

104 
	`gí_74x164_£t_vÆue
(
gc
, 
off£t
, 
vÆ
);

106 
	}
}

108 
	$gí_74x164_¥obe
(
•i_devi˚
 *
•i
)

110 
gí_74x164_chù
 *
chù
;

111 
gí_74x164_chù_∂©f‹m_d©a
 *
pd©a
;

112 
ªt
;

114 i‡(!
•i
->
dev
.
of_node
) {

115 
	`dev_îr
(&
•i
->
dev
, "No deviceÅree dataávailable.\n");

116  -
EINVAL
;

122 
•i
->
bôs_≥r_w‹d
 = 8;

124 
ªt
 = 
	`•i_£tup
(
•i
);

125 i‡(
ªt
 < 0)

126  
ªt
;

128 
chù
 = 
	`devm_kzÆloc
(&
•i
->
dev
, (*chù), 
GFP_KERNEL
);

129 i‡(!
chù
)

130  -
ENOMEM
;

132 
pd©a
 = 
•i
->
dev
.
∂©f‹m_d©a
;

133 i‡(
pd©a
 &&Öd©a->
ba£
)

134 
chù
->
gpio_chù
.
ba£
 = 
pd©a
->base;

136 
chù
->
gpio_chù
.
ba£
 = -1;

138 
	`muãx_öô
(&
chù
->
lock
);

140 
	`•i_£t_drvd©a
(
•i
, 
chù
);

142 
chù
->
•i
 = spi;

144 
chù
->
gpio_chù
.
œbñ
 = 
•i
->
modÆüs
;

145 
chù
->
gpio_chù
.
dúe˘i⁄_ouçut
 = 
gí_74x164_dúe˘i⁄_ouçut
;

146 
chù
->
gpio_chù
.
gë
 = 
gí_74x164_gë_vÆue
;

147 
chù
->
gpio_chù
.
£t
 = 
gí_74x164_£t_vÆue
;

149 i‡(
	`of_¥›îty_ªad_u32
(
•i
->
dev
.
of_node
, "ªgi°îs-numbî", &
chù
->
ªgi°îs
)) {

150 
	`dev_îr
(&
•i
->
dev
, "MissingÑegisters-numberÖroperty inÅhe DT.\n");

151 
ªt
 = -
EINVAL
;

152 
exô_de°roy
;

155 
chù
->
gpio_chù
.
ngpio
 = 
GEN_74X164_NUMBER_GPIOS
 * chù->
ªgi°îs
;

156 
chù
->
buf„r
 = 
	`devm_kzÆloc
(&
•i
->
dev
, chù->
ªgi°îs
, 
GFP_KERNEL
);

157 i‡(!
chù
->
buf„r
) {

158 
ªt
 = -
ENOMEM
;

159 
exô_de°roy
;

162 
chù
->
gpio_chù
.
ˇn_¶ìp
 = 1;

163 
chù
->
gpio_chù
.
dev
 = &
•i
->dev;

164 
chù
->
gpio_chù
.
ow√r
 = 
THIS_MODULE
;

166 
ªt
 = 
	`__gí_74x164_wrôe_c⁄fig
(
chù
);

167 i‡(
ªt
) {

168 
	`dev_îr
(&
•i
->
dev
, "Faûed wrôög: %d\n", 
ªt
);

169 
exô_de°roy
;

172 
ªt
 = 
	`gpiochù_add
(&
chù
->
gpio_chù
);

173 i‡(
ªt
)

174 
exô_de°roy
;

176  
ªt
;

178 
exô_de°roy
:

179 
	`•i_£t_drvd©a
(
•i
, 
NULL
);

180 
	`muãx_de°roy
(&
chù
->
lock
);

181  
ªt
;

182 
	}
}

184 
	$gí_74x164_ªmove
(
•i_devi˚
 *
•i
)

186 
gí_74x164_chù
 *
chù
;

187 
ªt
;

189 
chù
 = 
	`•i_gë_drvd©a
(
•i
);

190 i‡(
chù
 =
NULL
)

191  -
ENODEV
;

193 
	`•i_£t_drvd©a
(
•i
, 
NULL
);

195 
ªt
 = 
	`gpiochù_ªmove
(&
chù
->
gpio_chù
);

196 i‡(!
ªt
)

197 
	`muãx_de°roy
(&
chù
->
lock
);

199 
	`dev_îr
(&
•i
->
dev
, "FailedÅoÑemoveÅhe GPIO controller: %d\n",

200 
ªt
);

202  
ªt
;

203 
	}
}

205 c⁄° 
of_devi˚_id
 
	ggí_74x164_dt_ids
[] = {

206 { .
com∑tibÀ
 = "fairchild,74hc595" },

209 
MODULE_DEVICE_TABLE
(
of
, 
gí_74x164_dt_ids
);

211 
•i_drivî
 
	ggí_74x164_drivî
 = {

212 .
drivî
 = {

213 .
«me
 = "74x164",

214 .
	gow√r
 = 
THIS_MODULE
,

215 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
gí_74x164_dt_ids
),

217 .
	g¥obe
 = 
gí_74x164_¥obe
,

218 .
	gªmove
 = 
gí_74x164_ªmove
,

220 
moduÀ_•i_drivî
(
gí_74x164_drivî
);

222 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

223 
MODULE_AUTHOR
("Miguel Gaio <miguel.gaio@efixo.com>");

224 
MODULE_DESCRIPTION
("GPIOÉxpander driver for 74X164 8-bits shiftÑegister");

225 
MODULE_LICENSE
("GPL v2");

	@gpio-adnp.c

9 
	~<löux/gpio.h
>

10 
	~<löux/i2c.h
>

11 
	~<löux/öãºu±.h
>

12 
	~<löux/úqdomaö.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/of_úq.h
>

15 
	~<löux/£q_fûe.h
>

16 
	~<löux/¶ab.h
>

18 
	#GPIO_DDR
(
gpio
Ë(0x00 << (gpio)->
ªg_shi·
)

	)

19 
	#GPIO_PLR
(
gpio
Ë(0x01 << (gpio)->
ªg_shi·
)

	)

20 
	#GPIO_IER
(
gpio
Ë(0x02 << (gpio)->
ªg_shi·
)

	)

21 
	#GPIO_ISR
(
gpio
Ë(0x03 << (gpio)->
ªg_shi·
)

	)

22 
	#GPIO_PTR
(
gpio
Ë(0x04 << (gpio)->
ªg_shi·
)

	)

24 
	sad≈
 {

25 
i2c_˛õ¡
 *
	m˛õ¡
;

26 
gpio_chù
 
	mgpio
;

27 
	mªg_shi·
;

29 
muãx
 
	mi2c_lock
;

31 
úq_domaö
 *
	mdomaö
;

32 
muãx
 
	múq_lock
;

34 
u8
 *
	múq_íabÀ
;

35 
u8
 *
	múq_Àvñ
;

36 
u8
 *
	múq_ri£
;

37 
u8
 *
	múq_ÁŒ
;

38 
u8
 *
	múq_high
;

39 
u8
 *
	múq_low
;

42 
ölöe
 
ad≈
 *
	$to_ad≈
(
gpio_chù
 *
chù
)

44  
	`c⁄èöî_of
(
chù
, 
ad≈
, 
gpio
);

45 
	}
}

47 
	$ad≈_ªad
(
ad≈
 *ad≈, 
off£t
, 
uöt8_t
 *
vÆue
)

49 
îr
;

51 
îr
 = 
	`i2c_smbus_ªad_byã_d©a
(
ad≈
->
˛õ¡
, 
off£t
);

52 i‡(
îr
 < 0) {

53 
	`dev_îr
(
ad≈
->
gpio
.
dev
, "%s failed: %d\n",

54 "i2c_smbus_ªad_byã_d©a()", 
îr
);

55  
îr
;

58 *
vÆue
 = 
îr
;

60 
	}
}

62 
	$ad≈_wrôe
(
ad≈
 *ad≈, 
off£t
, 
uöt8_t
 
vÆue
)

64 
îr
;

66 
îr
 = 
	`i2c_smbus_wrôe_byã_d©a
(
ad≈
->
˛õ¡
, 
off£t
, 
vÆue
);

67 i‡(
îr
 < 0) {

68 
	`dev_îr
(
ad≈
->
gpio
.
dev
, "%s failed: %d\n",

69 "i2c_smbus_wrôe_byã_d©a()", 
îr
);

70  
îr
;

74 
	}
}

76 
	$ad≈_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

78 
ad≈
 *ad≈ = 
	`to_ad≈
(
chù
);

79 
ªg
 = 
off£t
 >> 
ad≈
->
ªg_shi·
;

80 
pos
 = 
off£t
 & 7;

81 
u8
 
vÆue
;

82 
îr
;

84 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_PLR
◊d≈Ë+ 
ªg
, &
vÆue
);

85 i‡(
îr
 < 0)

86  
îr
;

88  (
vÆue
 & 
	`BIT
(
pos
)) ? 1 : 0;

89 
	}
}

91 
	$__ad≈_gpio_£t
(
ad≈
 *ad≈, 
off£t
, 
vÆue
)

93 
ªg
 = 
off£t
 >> 
ad≈
->
ªg_shi·
;

94 
pos
 = 
off£t
 & 7;

95 
îr
;

96 
u8
 
vÆ
;

98 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_PLR
◊d≈Ë+ 
ªg
, &
vÆ
);

99 i‡(
îr
 < 0)

102 i‡(
vÆue
)

103 
vÆ
 |
	`BIT
(
pos
);

105 
vÆ
 &~
	`BIT
(
pos
);

107 
	`ad≈_wrôe
(
ad≈
, 
	`GPIO_PLR
◊d≈Ë+ 
ªg
, 
vÆ
);

108 
	}
}

110 
	$ad≈_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

112 
ad≈
 *ad≈ = 
	`to_ad≈
(
chù
);

114 
	`muãx_lock
(&
ad≈
->
i2c_lock
);

115 
	`__ad≈_gpio_£t
(
ad≈
, 
off£t
, 
vÆue
);

116 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

117 
	}
}

119 
	$ad≈_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

121 
ad≈
 *ad≈ = 
	`to_ad≈
(
chù
);

122 
ªg
 = 
off£t
 >> 
ad≈
->
ªg_shi·
;

123 
pos
 = 
off£t
 & 7;

124 
u8
 
vÆue
;

125 
îr
;

127 
	`muãx_lock
(&
ad≈
->
i2c_lock
);

129 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_DDR
◊d≈Ë+ 
ªg
, &
vÆue
);

130 i‡(
îr
 < 0)

131 
out
;

133 
vÆue
 &~
	`BIT
(
pos
);

135 
îr
 = 
	`ad≈_wrôe
(
ad≈
, 
	`GPIO_DDR
◊d≈Ë+ 
ªg
, 
vÆue
);

136 i‡(
îr
 < 0)

137 
out
;

139 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_DDR
◊d≈Ë+ 
ªg
, &
vÆue
);

140 i‡(
îr
 < 0)

141 
out
;

143 i‡(
îr
 & 
	`BIT
(
pos
))

144 
îr
 = -
EACCES
;

146 
îr
 = 0;

148 
out
:

149 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

150  
îr
;

151 
	}
}

153 
	$ad≈_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
,

154 
vÆue
)

156 
ad≈
 *ad≈ = 
	`to_ad≈
(
chù
);

157 
ªg
 = 
off£t
 >> 
ad≈
->
ªg_shi·
;

158 
pos
 = 
off£t
 & 7;

159 
îr
;

160 
u8
 
vÆ
;

162 
	`muãx_lock
(&
ad≈
->
i2c_lock
);

164 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_DDR
◊d≈Ë+ 
ªg
, &
vÆ
);

165 i‡(
îr
 < 0)

166 
out
;

168 
vÆ
 |
	`BIT
(
pos
);

170 
îr
 = 
	`ad≈_wrôe
(
ad≈
, 
	`GPIO_DDR
◊d≈Ë+ 
ªg
, 
vÆ
);

171 i‡(
îr
 < 0)

172 
out
;

174 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_DDR
◊d≈Ë+ 
ªg
, &
vÆ
);

175 i‡(
îr
 < 0)

176 
out
;

178 i‡(!(
vÆ
 & 
	`BIT
(
pos
))) {

179 
îr
 = -
EPERM
;

180 
out
;

183 
	`__ad≈_gpio_£t
(
ad≈
, 
off£t
, 
vÆue
);

184 
îr
 = 0;

186 
out
:

187 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

188  
îr
;

189 
	}
}

191 
	$ad≈_gpio_dbg_show
(
£q_fûe
 *
s
, 
gpio_chù
 *
chù
)

193 
ad≈
 *ad≈ = 
	`to_ad≈
(
chù
);

194 
num_ªgs
 = 1 << 
ad≈
->
ªg_shi·
, 
i
, 
j
;

195 
îr
;

197 
i
 = 0; i < 
num_ªgs
; i++) {

198 
u8
 
ddr
, 
∂r
, 
õr
, 
i§
;

200 
	`muãx_lock
(&
ad≈
->
i2c_lock
);

202 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_DDR
◊d≈Ë+ 
i
, &
ddr
);

203 i‡(
îr
 < 0) {

204 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

208 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_PLR
◊d≈Ë+ 
i
, &
∂r
);

209 i‡(
îr
 < 0) {

210 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

214 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_IER
◊d≈Ë+ 
i
, &
õr
);

215 i‡(
îr
 < 0) {

216 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

220 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_ISR
◊d≈Ë+ 
i
, &
i§
);

221 i‡(
îr
 < 0) {

222 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

226 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

228 
j
 = 0; j < 8; j++) {

229 
bô
 = (
i
 << 
ad≈
->
ªg_shi·
Ë+ 
j
;

230 c⁄° *
dúe˘i⁄
 = "input ";

231 c⁄° *
Àvñ
 = "low ";

232 c⁄° *
öãºu±
 = "disabled";

233 c⁄° *
≥ndög
 = "";

235 i‡(
ddr
 & 
	`BIT
(
j
))

236 
dúe˘i⁄
 = "output";

238 i‡(
∂r
 & 
	`BIT
(
j
))

239 
Àvñ
 = "high";

241 i‡(
õr
 & 
	`BIT
(
j
))

242 
öãºu±
 = "enabled ";

244 i‡(
i§
 & 
	`BIT
(
j
))

245 
≥ndög
 = "pending";

247 
	`£q_¥ötf
(
s
, "%2u: %†%†IRQ %†%s\n", 
bô
,

248 
dúe˘i⁄
, 
Àvñ
, 
öãºu±
, 
≥ndög
);

251 
	}
}

253 
	$ad≈_gpio_£tup
(
ad≈
 *ad≈, 
num_gpios
)

255 
gpio_chù
 *
chù
 = &
ad≈
->
gpio
;

257 
ad≈
->
ªg_shi·
 = 
	`gë_cou¡_‹dî
(
num_gpios
) - 3;

259 
chù
->
dúe˘i⁄_öput
 = 
ad≈_gpio_dúe˘i⁄_öput
;

260 
chù
->
dúe˘i⁄_ouçut
 = 
ad≈_gpio_dúe˘i⁄_ouçut
;

261 
chù
->
gë
 = 
ad≈_gpio_gë
;

262 
chù
->
£t
 = 
ad≈_gpio_£t
;

263 
chù
->
ˇn_¶ìp
 = 1;

265 i‡(
	`IS_ENABLED
(
CONFIG_DEBUG_FS
))

266 
chù
->
dbg_show
 = 
ad≈_gpio_dbg_show
;

268 
chù
->
ba£
 = -1;

269 
chù
->
ngpio
 = 
num_gpios
;

270 
chù
->
œbñ
 = 
ad≈
->
˛õ¡
->
«me
;

271 
chù
->
dev
 = &
ad≈
->
˛õ¡
->dev;

272 
chù
->
of_node
 = chù->
dev
->of_node;

273 
chù
->
ow√r
 = 
THIS_MODULE
;

276 
	}
}

278 
úqªtu∫_t
 
	$ad≈_úq
(
úq
, *
d©a
)

280 
ad≈
 *ad≈ = 
d©a
;

281 
num_ªgs
, 
i
;

283 
num_ªgs
 = 1 << 
ad≈
->
ªg_shi·
;

285 
i
 = 0; i < 
num_ªgs
; i++) {

286 
ba£
 = 
i
 << 
ad≈
->
ªg_shi·
, 
bô
;

287 
u8
 
ch™ged
, 
Àvñ
, 
i§
, 
õr
;

288 
≥ndög
;

289 
îr
;

291 
	`muãx_lock
(&
ad≈
->
i2c_lock
);

293 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_PLR
◊d≈Ë+ 
i
, &
Àvñ
);

294 i‡(
îr
 < 0) {

295 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

299 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_ISR
◊d≈Ë+ 
i
, &
i§
);

300 i‡(
îr
 < 0) {

301 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

305 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_IER
◊d≈Ë+ 
i
, &
õr
);

306 i‡(
îr
 < 0) {

307 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

311 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

314 
ch™ged
 = 
Àvñ
 ^ 
ad≈
->
úq_Àvñ
[
i
];

317 
≥ndög
 = 
ch™ged
 & ((
ad≈
->
úq_ÁŒ
[
i
] & ~
Àvñ
) |

318 (
ad≈
->
úq_ri£
[
i
] & 
Àvñ
));

321 
≥ndög
 |(
ad≈
->
úq_high
[
i
] & 
Àvñ
) |

322 (
ad≈
->
úq_low
[
i
] & ~
Àvñ
);

325 
≥ndög
 &
i§
 & 
õr
;

327 
	`f‹_óch_£t_bô
(
bô
, &
≥ndög
, 8) {

328 
vúq
;

329 
vúq
 = 
	`úq_föd_m≠pög
(
ad≈
->
domaö
, 
ba£
 + 
bô
);

330 
	`h™dÀ_√°ed_úq
(
vúq
);

334  
IRQ_HANDLED
;

335 
	}
}

337 
	$ad≈_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

339 
ad≈
 *ad≈ = 
	`to_ad≈
(
chù
);

340  
	`úq_¸óã_m≠pög
(
ad≈
->
domaö
, 
off£t
);

341 
	}
}

343 
	$ad≈_úq_mask
(
úq_d©a
 *
d©a
)

345 
ad≈
 *ad≈ = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

346 
ªg
 = 
d©a
->
hwúq
 >> 
ad≈
->
ªg_shi·
;

347 
pos
 = 
d©a
->
hwúq
 & 7;

349 
ad≈
->
úq_íabÀ
[
ªg
] &~
	`BIT
(
pos
);

350 
	}
}

352 
	$ad≈_úq_unmask
(
úq_d©a
 *
d©a
)

354 
ad≈
 *ad≈ = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

355 
ªg
 = 
d©a
->
hwúq
 >> 
ad≈
->
ªg_shi·
;

356 
pos
 = 
d©a
->
hwúq
 & 7;

358 
ad≈
->
úq_íabÀ
[
ªg
] |
	`BIT
(
pos
);

359 
	}
}

361 
	$ad≈_úq_£t_ty≥
(
úq_d©a
 *
d©a
, 
ty≥
)

363 
ad≈
 *ad≈ = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

364 
ªg
 = 
d©a
->
hwúq
 >> 
ad≈
->
ªg_shi·
;

365 
pos
 = 
d©a
->
hwúq
 & 7;

367 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_RISING
)

368 
ad≈
->
úq_ri£
[
ªg
] |
	`BIT
(
pos
);

370 
ad≈
->
úq_ri£
[
ªg
] &~
	`BIT
(
pos
);

372 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_FALLING
)

373 
ad≈
->
úq_ÁŒ
[
ªg
] |
	`BIT
(
pos
);

375 
ad≈
->
úq_ÁŒ
[
ªg
] &~
	`BIT
(
pos
);

377 i‡(
ty≥
 & 
IRQ_TYPE_LEVEL_HIGH
)

378 
ad≈
->
úq_high
[
ªg
] |
	`BIT
(
pos
);

380 
ad≈
->
úq_high
[
ªg
] &~
	`BIT
(
pos
);

382 i‡(
ty≥
 & 
IRQ_TYPE_LEVEL_LOW
)

383 
ad≈
->
úq_low
[
ªg
] |
	`BIT
(
pos
);

385 
ad≈
->
úq_low
[
ªg
] &~
	`BIT
(
pos
);

388 
	}
}

390 
	$ad≈_úq_bus_lock
(
úq_d©a
 *
d©a
)

392 
ad≈
 *ad≈ = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

394 
	`muãx_lock
(&
ad≈
->
úq_lock
);

395 
	}
}

397 
	$ad≈_úq_bus_u∆ock
(
úq_d©a
 *
d©a
)

399 
ad≈
 *ad≈ = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

400 
num_ªgs
 = 1 << 
ad≈
->
ªg_shi·
, 
i
;

402 
	`muãx_lock
(&
ad≈
->
i2c_lock
);

404 
i
 = 0; i < 
num_ªgs
; i++)

405 
	`ad≈_wrôe
(
ad≈
, 
	`GPIO_IER
◊d≈Ë+ 
i
,ád≈->
úq_íabÀ
[i]);

407 
	`muãx_u∆ock
(&
ad≈
->
i2c_lock
);

408 
	`muãx_u∆ock
(&
ad≈
->
úq_lock
);

409 
	}
}

411 
úq_chù
 
	gad≈_úq_chù
 = {

412 .
«me
 = "gpio-adnp",

413 .
	gúq_mask
 = 
ad≈_úq_mask
,

414 .
	gúq_unmask
 = 
ad≈_úq_unmask
,

415 .
	gúq_£t_ty≥
 = 
ad≈_úq_£t_ty≥
,

416 .
	gúq_bus_lock
 = 
ad≈_úq_bus_lock
,

417 .
	gúq_bus_sync_u∆ock
 = 
ad≈_úq_bus_u∆ock
,

420 
	$ad≈_úq_m≠
(
úq_domaö
 *
domaö
, 
úq
,

421 
úq_hw_numbî_t
 
hwúq
)

423 
	`úq_£t_chù_d©a
(
úq
, 
domaö
->
ho°_d©a
);

424 
	`úq_£t_chù
(
úq
, &
ad≈_úq_chù
);

425 
	`úq_£t_√°ed_thªad
(
úq
, 
åue
);

427 #ifde‡
CONFIG_ARM


428 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

430 
	`úq_£t_n›robe
(
úq
);

434 
	}
}

436 c⁄° 
úq_domaö_›s
 
	gad≈_úq_domaö_›s
 = {

437 .
m≠
 = 
ad≈_úq_m≠
,

438 .
	gxœã
 = 
úq_domaö_xœã_two˚Œ
,

441 
	$ad≈_úq_£tup
(
ad≈
 *adnp)

443 
num_ªgs
 = 1 << 
ad≈
->
ªg_shi·
, 
i
;

444 
gpio_chù
 *
chù
 = &
ad≈
->
gpio
;

445 
îr
;

447 
	`muãx_öô
(&
ad≈
->
úq_lock
);

457 
ad≈
->
úq_íabÀ
 = 
	`devm_kzÆloc
(
chù
->
dev
, 
num_ªgs
 * 6, 
GFP_KERNEL
);

458 i‡(!
ad≈
->
úq_íabÀ
)

459  -
ENOMEM
;

461 
ad≈
->
úq_Àvñ
 =ád≈->
úq_íabÀ
 + (
num_ªgs
 * 1);

462 
ad≈
->
úq_ri£
 =ád≈->
úq_íabÀ
 + (
num_ªgs
 * 2);

463 
ad≈
->
úq_ÁŒ
 =ád≈->
úq_íabÀ
 + (
num_ªgs
 * 3);

464 
ad≈
->
úq_high
 =ád≈->
úq_íabÀ
 + (
num_ªgs
 * 4);

465 
ad≈
->
úq_low
 =ád≈->
úq_íabÀ
 + (
num_ªgs
 * 5);

467 
i
 = 0; i < 
num_ªgs
; i++) {

472 
îr
 = 
	`ad≈_ªad
(
ad≈
, 
	`GPIO_PLR
◊d≈Ë+ 
i
, &ad≈->
úq_Àvñ
[i]);

473 i‡(
îr
 < 0)

474  
îr
;

477 
îr
 = 
	`ad≈_wrôe
(
ad≈
, 
	`GPIO_IER
◊d≈Ë+ 
i
, 0);

478 i‡(
îr
 < 0)

479  
îr
;

481 
ad≈
->
úq_íabÀ
[
i
] = 0x00;

484 
ad≈
->
domaö
 = 
	`úq_domaö_add_löór
(
chù
->
of_node
, chù->
ngpio
,

485 &
ad≈_úq_domaö_›s
, 
ad≈
);

487 
îr
 = 
	`ªque°_thªaded_úq
(
ad≈
->
˛õ¡
->
úq
, 
NULL
, 
ad≈_úq
,

488 
IRQF_TRIGGER_RISING
 | 
IRQF_ONESHOT
,

489 
	`dev_«me
(
chù
->
dev
), 
ad≈
);

490 i‡(
îr
 != 0) {

491 
	`dev_îr
(
chù
->
dev
, "can'tÑequest IRQ#%d: %d\n",

492 
ad≈
->
˛õ¡
->
úq
, 
îr
);

493 
îr‹
;

496 
chù
->
to_úq
 = 
ad≈_gpio_to_úq
;

499 
îr‹
:

500 
	`úq_domaö_ªmove
(
ad≈
->
domaö
);

501  
îr
;

502 
	}
}

504 
	$ad≈_úq_ã¨down
(
ad≈
 *adnp)

506 
úq
, 
i
;

508 
	`‰ì_úq
(
ad≈
->
˛õ¡
->
úq
,ádnp);

510 
i
 = 0; i < 
ad≈
->
gpio
.
ngpio
; i++) {

511 
úq
 = 
	`úq_föd_m≠pög
(
ad≈
->
domaö
, 
i
);

512 i‡(
úq
 > 0)

513 
	`úq_di•o£_m≠pög
(
úq
);

516 
	`úq_domaö_ªmove
(
ad≈
->
domaö
);

517 
	}
}

519 
	$ad≈_i2c_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

520 c⁄° 
i2c_devi˚_id
 *
id
)

522 
devi˚_node
 *
≈
 = 
˛õ¡
->
dev
.
of_node
;

523 
ad≈
 *adnp;

524 
u32
 
num_gpios
;

525 
îr
;

527 
îr
 = 
	`of_¥›îty_ªad_u32
(
≈
, "ƒ-gpios", &
num_gpios
);

528 i‡(
îr
 < 0)

529  
îr
;

531 
˛õ¡
->
úq
 = 
	`úq_of_∑r£_™d_m≠
(
≈
, 0);

532 i‡(!
˛õ¡
->
úq
)

533  -
EPROBE_DEFER
;

535 
ad≈
 = 
	`devm_kzÆloc
(&
˛õ¡
->
dev
, (*ad≈), 
GFP_KERNEL
);

536 i‡(!
ad≈
)

537  -
ENOMEM
;

539 
	`muãx_öô
(&
ad≈
->
i2c_lock
);

540 
ad≈
->
˛õ¡
 = client;

542 
îr
 = 
	`ad≈_gpio_£tup
(
ad≈
, 
num_gpios
);

543 i‡(
îr
 < 0)

544  
îr
;

546 i‡(
	`of_föd_¥›îty
(
≈
, "öãºu±-c⁄åﬁÀr", 
NULL
)) {

547 
îr
 = 
	`ad≈_úq_£tup
(
ad≈
);

548 i‡(
îr
 < 0)

549 
ã¨down
;

552 
îr
 = 
	`gpiochù_add
(&
ad≈
->
gpio
);

553 i‡(
îr
 < 0)

554 
ã¨down
;

556 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
ad≈
);

559 
ã¨down
:

560 i‡(
	`of_föd_¥›îty
(
≈
, "öãºu±-c⁄åﬁÀr", 
NULL
))

561 
	`ad≈_úq_ã¨down
(
ad≈
);

563  
îr
;

564 
	}
}

566 
	$ad≈_i2c_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

568 
ad≈
 *ad≈ = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

569 
devi˚_node
 *
≈
 = 
˛õ¡
->
dev
.
of_node
;

570 
îr
;

572 
îr
 = 
	`gpiochù_ªmove
(&
ad≈
->
gpio
);

573 i‡(
îr
 < 0) {

574 
	`dev_îr
(&
˛õ¡
->
dev
, "%s failed: %d\n", "gpiochip_remove()",

575 
îr
);

576  
îr
;

579 i‡(
	`of_föd_¥›îty
(
≈
, "öãºu±-c⁄åﬁÀr", 
NULL
))

580 
	`ad≈_úq_ã¨down
(
ad≈
);

583 
	}
}

585 c⁄° 
i2c_devi˚_id
 
	gad≈_i2c_id
[] = {

589 
MODULE_DEVICE_TABLE
(
i2c
, 
ad≈_i2c_id
);

591 c⁄° 
of_devi˚_id
 
	gad≈_of_m©ch
[] = {

592 { .
com∑tibÀ
 = "ad,gpio-adnp", },

595 
MODULE_DEVICE_TABLE
(
of
, 
ad≈_of_m©ch
);

597 
i2c_drivî
 
	gad≈_i2c_drivî
 = {

598 .
drivî
 = {

599 .
«me
 = "gpio-adnp",

600 .
	gow√r
 = 
THIS_MODULE
,

601 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
ad≈_of_m©ch
),

603 .
	g¥obe
 = 
ad≈_i2c_¥obe
,

604 .
	gªmove
 = 
ad≈_i2c_ªmove
,

605 .
	gid_èbÀ
 = 
ad≈_i2c_id
,

607 
moduÀ_i2c_drivî
(
ad≈_i2c_drivî
);

609 
MODULE_DESCRIPTION
("Avionic Design N-bit GPIOÉxpander");

610 
MODULE_AUTHOR
("Thierry Reding <thierry.reding@avionic-design.de>");

611 
MODULE_LICENSE
("GPL");

	@gpio-adp5520.c

9 
	~<löux/moduÀ.h
>

10 
	~<löux/¶ab.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/mfd/adp5520.h
>

16 
	~<löux/gpio.h
>

18 
	sadp5520_gpio
 {

19 
devi˚
 *
	mma°î
;

20 
gpio_chù
 
	mgpio_chù
;

21 
	mlut
[
ADP5520_MAXGPIOS
];

22 
	mouçut
;

25 
	$adp5520_gpio_gë_vÆue
(
gpio_chù
 *
chù
, 
off
)

27 
adp5520_gpio
 *
dev
;

28 
uöt8_t
 
ªg_vÆ
;

30 
dev
 = 
	`c⁄èöî_of
(
chù
, 
adp5520_gpio
, 
gpio_chù
);

37 i‡(
	`ã°_bô
(
off
, &
dev
->
ouçut
))

38 
	`adp5520_ªad
(
dev
->
ma°î
, 
ADP5520_GPIO_OUT
, &
ªg_vÆ
);

40 
	`adp5520_ªad
(
dev
->
ma°î
, 
ADP5520_GPIO_IN
, &
ªg_vÆ
);

42  !!(
ªg_vÆ
 & 
dev
->
lut
[
off
]);

43 
	}
}

45 
	$adp5520_gpio_£t_vÆue
(
gpio_chù
 *
chù
,

46 
off
, 
vÆ
)

48 
adp5520_gpio
 *
dev
;

49 
dev
 = 
	`c⁄èöî_of
(
chù
, 
adp5520_gpio
, 
gpio_chù
);

51 i‡(
vÆ
)

52 
	`adp5520_£t_bôs
(
dev
->
ma°î
, 
ADP5520_GPIO_OUT
, dev->
lut
[
off
]);

54 
	`adp5520_˛r_bôs
(
dev
->
ma°î
, 
ADP5520_GPIO_OUT
, dev->
lut
[
off
]);

55 
	}
}

57 
	$adp5520_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off
)

59 
adp5520_gpio
 *
dev
;

60 
dev
 = 
	`c⁄èöî_of
(
chù
, 
adp5520_gpio
, 
gpio_chù
);

62 
	`˛ór_bô
(
off
, &
dev
->
ouçut
);

64  
	`adp5520_˛r_bôs
(
dev
->
ma°î
, 
ADP5520_GPIO_CFG_2
,

65 
dev
->
lut
[
off
]);

66 
	}
}

68 
	$adp5520_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

69 
off
, 
vÆ
)

71 
adp5520_gpio
 *
dev
;

72 
ªt
 = 0;

73 
dev
 = 
	`c⁄èöî_of
(
chù
, 
adp5520_gpio
, 
gpio_chù
);

75 
	`£t_bô
(
off
, &
dev
->
ouçut
);

77 i‡(
vÆ
)

78 
ªt
 |
	`adp5520_£t_bôs
(
dev
->
ma°î
, 
ADP5520_GPIO_OUT
,

79 
dev
->
lut
[
off
]);

81 
ªt
 |
	`adp5520_˛r_bôs
(
dev
->
ma°î
, 
ADP5520_GPIO_OUT
,

82 
dev
->
lut
[
off
]);

84 
ªt
 |
	`adp5520_£t_bôs
(
dev
->
ma°î
, 
ADP5520_GPIO_CFG_2
,

85 
dev
->
lut
[
off
]);

87  
ªt
;

88 
	}
}

90 
	$adp5520_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

92 
adp5520_gpio_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

93 
adp5520_gpio
 *
dev
;

94 
gpio_chù
 *
gc
;

95 
ªt
, 
i
, 
gpios
;

96 
˘l_mask
 = 0;

98 i‡(
pd©a
 =
NULL
) {

99 
	`dev_îr
(&
pdev
->
dev
, "missingÖlatform data\n");

100  -
ENODEV
;

103 i‡(
pdev
->
id
 !
ID_ADP5520
) {

104 
	`dev_îr
(&
pdev
->
dev
, "only ADP5520 supports GPIO\n");

105  -
ENODEV
;

108 
dev
 = 
	`devm_kzÆloc
(&
pdev
->dev, (*dev), 
GFP_KERNEL
);

109 i‡(
dev
 =
NULL
) {

110 
	`dev_îr
(&
pdev
->
dev
, "failedÅoálloc memory\n");

111  -
ENOMEM
;

114 
dev
->
ma°î
 = 
pdev
->dev.
∑ª¡
;

116 
gpios
 = 0, 
i
 = 0; i < 
ADP5520_MAXGPIOS
; i++)

117 i‡(
pd©a
->
gpio_í_mask
 & (1 << 
i
))

118 
dev
->
lut
[
gpios
++] = 1 << 
i
;

120 i‡(
gpios
 < 1) {

121 
ªt
 = -
EINVAL
;

122 
îr
;

125 
gc
 = &
dev
->
gpio_chù
;

126 
gc
->
dúe˘i⁄_öput
 = 
adp5520_gpio_dúe˘i⁄_öput
;

127 
gc
->
dúe˘i⁄_ouçut
 = 
adp5520_gpio_dúe˘i⁄_ouçut
;

128 
gc
->
gë
 = 
adp5520_gpio_gë_vÆue
;

129 
gc
->
£t
 = 
adp5520_gpio_£t_vÆue
;

130 
gc
->
ˇn_¶ìp
 = 1;

132 
gc
->
ba£
 = 
pd©a
->
gpio_°¨t
;

133 
gc
->
ngpio
 = 
gpios
;

134 
gc
->
œbñ
 = 
pdev
->
«me
;

135 
gc
->
ow√r
 = 
THIS_MODULE
;

137 
ªt
 = 
	`adp5520_˛r_bôs
(
dev
->
ma°î
, 
ADP5520_GPIO_CFG_1
,

138 
pd©a
->
gpio_í_mask
);

140 i‡(
pd©a
->
gpio_í_mask
 & 
ADP5520_GPIO_C3
)

141 
˘l_mask
 |
ADP5520_C3_MODE
;

143 i‡(
pd©a
->
gpio_í_mask
 & 
ADP5520_GPIO_R3
)

144 
˘l_mask
 |
ADP5520_R3_MODE
;

146 i‡(
˘l_mask
)

147 
ªt
 = 
	`adp5520_£t_bôs
(
dev
->
ma°î
, 
ADP5520_LED_CONTROL
,

148 
˘l_mask
);

150 
ªt
 |
	`adp5520_£t_bôs
(
dev
->
ma°î
, 
ADP5520_GPIO_PULLUP
,

151 
pd©a
->
gpio_puŒup_mask
);

153 i‡(
ªt
) {

154 
	`dev_îr
(&
pdev
->
dev
, "failedÅo write\n");

155 
îr
;

158 
ªt
 = 
	`gpiochù_add
(&
dev
->
gpio_chù
);

159 i‡(
ªt
)

160 
îr
;

162 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
dev
);

165 
îr
:

166  
ªt
;

167 
	}
}

169 
	$adp5520_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

171 
adp5520_gpio
 *
dev
;

172 
ªt
;

174 
dev
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

175 
ªt
 = 
	`gpiochù_ªmove
(&
dev
->
gpio_chù
);

176 i‡(
ªt
) {

177 
	`dev_îr
(&
pdev
->
dev
, "%s failed, %d\n",

178 "gpiochù_ªmove()", 
ªt
);

179  
ªt
;

183 
	}
}

185 
∂©f‹m_drivî
 
	gadp5520_gpio_drivî
 = {

186 .
drivî
 = {

187 .
«me
 = "adp5520-gpio",

188 .
	gow√r
 = 
THIS_MODULE
,

190 .
	g¥obe
 = 
adp5520_gpio_¥obe
,

191 .
	gªmove
 = 
adp5520_gpio_ªmove
,

194 
moduÀ_∂©f‹m_drivî
(
adp5520_gpio_drivî
);

196 
MODULE_AUTHOR
("Michael Hennerich <hennerich@blackfin.uclinux.org>");

197 
MODULE_DESCRIPTION
("GPIO ADP5520 Driver");

198 
MODULE_LICENSE
("GPL");

199 
MODULE_ALIAS
("platform:adp5520-gpio");

	@gpio-adp5588.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/¶ab.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/i2c.h
>

15 
	~<löux/gpio.h
>

16 
	~<löux/öãºu±.h
>

17 
	~<löux/úq.h
>

19 
	~<löux/i2c/adp5588.h
>

21 
	#DRV_NAME
 "adp5588-gpio"

	)

28 
	#WA_DELAYED_READOUT_REVID
(
ªv
Ë(‘evË< 4)

	)

30 
	sadp5588_gpio
 {

31 
i2c_˛õ¡
 *
	m˛õ¡
;

32 
gpio_chù
 
	mgpio_chù
;

33 
muãx
 
	mlock
;

35 
muãx
 
	múq_lock
;

36 
	mgpio_°¨t
;

37 
	múq_ba£
;

38 
uöt8_t
 
	md©_out
[3];

39 
uöt8_t
 
	mdú
[3];

40 
uöt8_t
 
	möt_lvl
[3];

41 
uöt8_t
 
	möt_í
[3];

42 
uöt8_t
 
	múq_mask
[3];

43 
uöt8_t
 
	múq_°©
[3];

46 
	$adp5588_gpio_ªad
(
i2c_˛õ¡
 *
˛õ¡
, 
u8
 
ªg
)

48 
ªt
 = 
	`i2c_smbus_ªad_byã_d©a
(
˛õ¡
, 
ªg
);

50 i‡(
ªt
 < 0)

51 
	`dev_îr
(&
˛õ¡
->
dev
, "Read Error\n");

53  
ªt
;

54 
	}
}

56 
	$adp5588_gpio_wrôe
(
i2c_˛õ¡
 *
˛õ¡
, 
u8
 
ªg
, u8 
vÆ
)

58 
ªt
 = 
	`i2c_smbus_wrôe_byã_d©a
(
˛õ¡
, 
ªg
, 
vÆ
);

60 i‡(
ªt
 < 0)

61 
	`dev_îr
(&
˛õ¡
->
dev
, "Write Error\n");

63  
ªt
;

64 
	}
}

66 
	$adp5588_gpio_gë_vÆue
(
gpio_chù
 *
chù
, 
off
)

68 
adp5588_gpio
 *
dev
 =

69 
	`c⁄èöî_of
(
chù
, 
adp5588_gpio
, 
gpio_chù
);

71  !!(
	`adp5588_gpio_ªad
(
dev
->
˛õ¡
,

72 
GPIO_DAT_STAT1
 + 
	`ADP5588_BANK
(
off
)Ë& 
	`ADP5588_BIT
(off));

73 
	}
}

75 
	$adp5588_gpio_£t_vÆue
(
gpio_chù
 *
chù
,

76 
off
, 
vÆ
)

78 
b™k
, 
bô
;

79 
adp5588_gpio
 *
dev
 =

80 
	`c⁄èöî_of
(
chù
, 
adp5588_gpio
, 
gpio_chù
);

82 
b™k
 = 
	`ADP5588_BANK
(
off
);

83 
bô
 = 
	`ADP5588_BIT
(
off
);

85 
	`muãx_lock
(&
dev
->
lock
);

86 i‡(
vÆ
)

87 
dev
->
d©_out
[
b™k
] |
bô
;

89 
dev
->
d©_out
[
b™k
] &~
bô
;

91 
	`adp5588_gpio_wrôe
(
dev
->
˛õ¡
, 
GPIO_DAT_OUT1
 + 
b™k
,

92 
dev
->
d©_out
[
b™k
]);

93 
	`muãx_u∆ock
(&
dev
->
lock
);

94 
	}
}

96 
	$adp5588_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off
)

98 
ªt
;

99 
b™k
;

100 
adp5588_gpio
 *
dev
 =

101 
	`c⁄èöî_of
(
chù
, 
adp5588_gpio
, 
gpio_chù
);

103 
b™k
 = 
	`ADP5588_BANK
(
off
);

105 
	`muãx_lock
(&
dev
->
lock
);

106 
dev
->
dú
[
b™k
] &~
	`ADP5588_BIT
(
off
);

107 
ªt
 = 
	`adp5588_gpio_wrôe
(
dev
->
˛õ¡
, 
GPIO_DIR1
 + 
b™k
, dev->
dú
[bank]);

108 
	`muãx_u∆ock
(&
dev
->
lock
);

110  
ªt
;

111 
	}
}

113 
	$adp5588_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

114 
off
, 
vÆ
)

116 
ªt
;

117 
b™k
, 
bô
;

118 
adp5588_gpio
 *
dev
 =

119 
	`c⁄èöî_of
(
chù
, 
adp5588_gpio
, 
gpio_chù
);

121 
b™k
 = 
	`ADP5588_BANK
(
off
);

122 
bô
 = 
	`ADP5588_BIT
(
off
);

124 
	`muãx_lock
(&
dev
->
lock
);

125 
dev
->
dú
[
b™k
] |
bô
;

127 i‡(
vÆ
)

128 
dev
->
d©_out
[
b™k
] |
bô
;

130 
dev
->
d©_out
[
b™k
] &~
bô
;

132 
ªt
 = 
	`adp5588_gpio_wrôe
(
dev
->
˛õ¡
, 
GPIO_DAT_OUT1
 + 
b™k
,

133 
dev
->
d©_out
[
b™k
]);

134 
ªt
 |
	`adp5588_gpio_wrôe
(
dev
->
˛õ¡
, 
GPIO_DIR1
 + 
b™k
,

135 
dev
->
dú
[
b™k
]);

136 
	`muãx_u∆ock
(&
dev
->
lock
);

138  
ªt
;

139 
	}
}

141 #ifde‡
CONFIG_GPIO_ADP5588_IRQ


142 
	$adp5588_gpio_to_úq
(
gpio_chù
 *
chù
, 
off
)

144 
adp5588_gpio
 *
dev
 =

145 
	`c⁄èöî_of
(
chù
, 
adp5588_gpio
, 
gpio_chù
);

146  
dev
->
úq_ba£
 + 
off
;

147 
	}
}

149 
	$adp5588_úq_bus_lock
(
úq_d©a
 *
d
)

151 
adp5588_gpio
 *
dev
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

153 
	`muãx_lock
(&
dev
->
úq_lock
);

154 
	}
}

164 
	$adp5588_úq_bus_sync_u∆ock
(
úq_d©a
 *
d
)

166 
adp5588_gpio
 *
dev
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

167 
i
;

169 
i
 = 0; i <
	`ADP5588_BANK
(
ADP5588_MAXGPIO
); i++)

170 i‡(
dev
->
öt_í
[
i
] ^ dev->
úq_mask
[i]) {

171 
dev
->
öt_í
[
i
] = dev->
úq_mask
[i];

172 
	`adp5588_gpio_wrôe
(
dev
->
˛õ¡
, 
GPIO_INT_EN1
 + 
i
,

173 
dev
->
öt_í
[
i
]);

176 
	`muãx_u∆ock
(&
dev
->
úq_lock
);

177 
	}
}

179 
	$adp5588_úq_mask
(
úq_d©a
 *
d
)

181 
adp5588_gpio
 *
dev
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

182 
gpio
 = 
d
->
úq
 - 
dev
->
úq_ba£
;

184 
dev
->
úq_mask
[
	`ADP5588_BANK
(
gpio
)] &~
	`ADP5588_BIT
(gpio);

185 
	}
}

187 
	$adp5588_úq_unmask
(
úq_d©a
 *
d
)

189 
adp5588_gpio
 *
dev
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

190 
gpio
 = 
d
->
úq
 - 
dev
->
úq_ba£
;

192 
dev
->
úq_mask
[
	`ADP5588_BANK
(
gpio
)] |
	`ADP5588_BIT
(gpio);

193 
	}
}

195 
	$adp5588_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

197 
adp5588_gpio
 *
dev
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

198 
uöt16_t
 
gpio
 = 
d
->
úq
 - 
dev
->
úq_ba£
;

199 
b™k
, 
bô
;

201 i‡((
ty≥
 & 
IRQ_TYPE_EDGE_BOTH
)) {

202 
	`dev_îr
(&
dev
->
˛õ¡
->dev, "irq %d: unsupportedÅype %d\n",

203 
d
->
úq
, 
ty≥
);

204  -
EINVAL
;

207 
b™k
 = 
	`ADP5588_BANK
(
gpio
);

208 
bô
 = 
	`ADP5588_BIT
(
gpio
);

210 i‡(
ty≥
 & 
IRQ_TYPE_LEVEL_HIGH
)

211 
dev
->
öt_lvl
[
b™k
] |
bô
;

212 i‡(
ty≥
 & 
IRQ_TYPE_LEVEL_LOW
)

213 
dev
->
öt_lvl
[
b™k
] &~
bô
;

215  -
EINVAL
;

217 
	`adp5588_gpio_dúe˘i⁄_öput
(&
dev
->
gpio_chù
, 
gpio
);

218 
	`adp5588_gpio_wrôe
(
dev
->
˛õ¡
, 
GPIO_INT_LVL1
 + 
b™k
,

219 
dev
->
öt_lvl
[
b™k
]);

222 
	}
}

224 
úq_chù
 
	gadp5588_úq_chù
 = {

225 .
«me
 = "adp5588",

226 .
	gúq_mask
 = 
adp5588_úq_mask
,

227 .
	gúq_unmask
 = 
adp5588_úq_unmask
,

228 .
	gúq_bus_lock
 = 
adp5588_úq_bus_lock
,

229 .
	gúq_bus_sync_u∆ock
 = 
adp5588_úq_bus_sync_u∆ock
,

230 .
	gúq_£t_ty≥
 = 
adp5588_úq_£t_ty≥
,

233 
	$adp5588_gpio_ªad_öt°©
(
i2c_˛õ¡
 *
˛õ¡
, 
u8
 *
buf
)

235 
ªt
 = 
	`i2c_smbus_ªad_i2c_block_d©a
(
˛õ¡
, 
GPIO_INT_STAT1
, 3, 
buf
);

237 i‡(
ªt
 < 0)

238 
	`dev_îr
(&
˛õ¡
->
dev
, "Read INT_STAT Error\n");

240  
ªt
;

241 
	}
}

243 
úqªtu∫_t
 
	$adp5588_úq_h™dÀr
(
úq
, *
devid
)

245 
adp5588_gpio
 *
dev
 = 
devid
;

246 
°©us
, 
b™k
, 
bô
, 
≥ndög
;

247 
ªt
;

248 
°©us
 = 
	`adp5588_gpio_ªad
(
dev
->
˛õ¡
, 
INT_STAT
);

250 i‡(
°©us
 & 
ADP5588_GPI_INT
) {

251 
ªt
 = 
	`adp5588_gpio_ªad_öt°©
(
dev
->
˛õ¡
, dev->
úq_°©
);

252 i‡(
ªt
 < 0)

253 
	`mem£t
(
dev
->
úq_°©
, 0, 
	`ARRAY_SIZE
(dev->irq_stat));

255 
b™k
 = 0, 
bô
 = 0; b™k <
	`ADP5588_BANK
(
ADP5588_MAXGPIO
);

256 
b™k
++, 
bô
 = 0) {

257 
≥ndög
 = 
dev
->
úq_°©
[
b™k
] & dev->
úq_mask
[bank];

259 
≥ndög
) {

260 i‡(
≥ndög
 & (1 << 
bô
)) {

261 
	`h™dÀ_√°ed_úq
(
dev
->
úq_ba£
 +

262 (
b™k
 << 3Ë+ 
bô
);

263 
≥ndög
 &~(1 << 
bô
);

266 
bô
++;

271 
	`adp5588_gpio_wrôe
(
dev
->
˛õ¡
, 
INT_STAT
, 
°©us
);

273  
IRQ_HANDLED
;

274 
	}
}

276 
	$adp5588_úq_£tup
(
adp5588_gpio
 *
dev
)

278 
i2c_˛õ¡
 *
˛õ¡
 = 
dev
->client;

279 
adp5588_gpio_∂©f‹m_d©a
 *
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

280 
gpio
;

281 
ªt
;

283 
	`adp5588_gpio_wrôe
(
˛õ¡
, 
CFG
, 
ADP5588_AUTO_INC
);

284 
	`adp5588_gpio_wrôe
(
˛õ¡
, 
INT_STAT
, -1);

285 
	`adp5588_gpio_ªad_öt°©
(
˛õ¡
, 
dev
->
úq_°©
);

287 
dev
->
úq_ba£
 = 
pd©a
->irq_base;

288 
	`muãx_öô
(&
dev
->
úq_lock
);

290 
gpio
 = 0; gpiÿ< 
dev
->
gpio_chù
.
ngpio
; gpio++) {

291 
úq
 = 
gpio
 + 
dev
->
úq_ba£
;

292 
	`úq_£t_chù_d©a
(
úq
, 
dev
);

293 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
adp5588_úq_chù
,

294 
h™dÀ_Àvñ_úq
);

295 
	`úq_£t_√°ed_thªad
(
úq
, 1);

296 #ifde‡
CONFIG_ARM


301 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

303 
	`úq_£t_n›robe
(
úq
);

307 
ªt
 = 
	`ªque°_thªaded_úq
(
˛õ¡
->
úq
,

308 
NULL
,

309 
adp5588_úq_h™dÀr
,

310 
IRQF_TRIGGER_FALLING
 | 
IRQF_ONESHOT
,

311 
	`dev_«me
(&
˛õ¡
->
dev
), dev);

312 i‡(
ªt
) {

313 
	`dev_îr
(&
˛õ¡
->
dev
, "failedÅoÑequest irq %d\n",

314 
˛õ¡
->
úq
);

315 
out
;

318 
dev
->
gpio_chù
.
to_úq
 = 
adp5588_gpio_to_úq
;

319 
	`adp5588_gpio_wrôe
(
˛õ¡
, 
CFG
,

320 
ADP5588_AUTO_INC
 | 
ADP5588_INT_CFG
 | 
ADP5588_GPI_INT
);

324 
out
:

325 
dev
->
úq_ba£
 = 0;

326  
ªt
;

327 
	}
}

329 
	$adp5588_úq_ã¨down
(
adp5588_gpio
 *
dev
)

331 i‡(
dev
->
úq_ba£
)

332 
	`‰ì_úq
(
dev
->
˛õ¡
->
úq
, dev);

333 
	}
}

336 
	$adp5588_úq_£tup
(
adp5588_gpio
 *
dev
)

338 
i2c_˛õ¡
 *
˛õ¡
 = 
dev
->client;

339 
	`dev_w¨n
(&
˛õ¡
->
dev
, "interrupt supportÇot compiled in\n");

342 
	}
}

344 
	$adp5588_úq_ã¨down
(
adp5588_gpio
 *
dev
)

346 
	}
}

349 
	$adp5588_gpio_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

350 c⁄° 
i2c_devi˚_id
 *
id
)

352 
adp5588_gpio_∂©f‹m_d©a
 *
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

353 
adp5588_gpio
 *
dev
;

354 
gpio_chù
 *
gc
;

355 
ªt
, 
i
, 
ªvid
;

357 i‡(
pd©a
 =
NULL
) {

358 
	`dev_îr
(&
˛õ¡
->
dev
, "missingÖlatform data\n");

359  -
ENODEV
;

362 i‡(!
	`i2c_check_fun˘i⁄Æôy
(
˛õ¡
->
ad≠ãr
,

363 
I2C_FUNC_SMBUS_BYTE_DATA
)) {

364 
	`dev_îr
(&
˛õ¡
->
dev
, "SMBUS Byte DataÇot Supported\n");

365  -
EIO
;

368 
dev
 = 
	`kzÆloc
((*dev), 
GFP_KERNEL
);

369 i‡(
dev
 =
NULL
) {

370 
	`dev_îr
(&
˛õ¡
->
dev
, "failedÅoálloc memory\n");

371  -
ENOMEM
;

374 
dev
->
˛õ¡
 = client;

376 
gc
 = &
dev
->
gpio_chù
;

377 
gc
->
dúe˘i⁄_öput
 = 
adp5588_gpio_dúe˘i⁄_öput
;

378 
gc
->
dúe˘i⁄_ouçut
 = 
adp5588_gpio_dúe˘i⁄_ouçut
;

379 
gc
->
gë
 = 
adp5588_gpio_gë_vÆue
;

380 
gc
->
£t
 = 
adp5588_gpio_£t_vÆue
;

381 
gc
->
ˇn_¶ìp
 = 1;

383 
gc
->
ba£
 = 
pd©a
->
gpio_°¨t
;

384 
gc
->
ngpio
 = 
ADP5588_MAXGPIO
;

385 
gc
->
œbñ
 = 
˛õ¡
->
«me
;

386 
gc
->
ow√r
 = 
THIS_MODULE
;

388 
	`muãx_öô
(&
dev
->
lock
);

390 
ªt
 = 
	`adp5588_gpio_ªad
(
dev
->
˛õ¡
, 
DEV_ID
);

391 i‡(
ªt
 < 0)

392 
îr
;

394 
ªvid
 = 
ªt
 & 
ADP5588_DEVICE_ID_MASK
;

396 
i
 = 0, 
ªt
 = 0; i <
	`ADP5588_BANK
(
ADP5588_MAXGPIO
); i++) {

397 
dev
->
d©_out
[
i
] = 
	`adp5588_gpio_ªad
(
˛õ¡
, 
GPIO_DAT_OUT1
 + i);

398 
dev
->
dú
[
i
] = 
	`adp5588_gpio_ªad
(
˛õ¡
, 
GPIO_DIR1
 + i);

399 
ªt
 |
	`adp5588_gpio_wrôe
(
˛õ¡
, 
KP_GPIO1
 + 
i
, 0);

400 
ªt
 |
	`adp5588_gpio_wrôe
(
˛õ¡
, 
GPIO_PULL1
 + 
i
,

401 (
pd©a
->
puŒup_dis_mask
 >> (8 * 
i
)) & 0xFF);

402 
ªt
 |
	`adp5588_gpio_wrôe
(
˛õ¡
, 
GPIO_INT_EN1
 + 
i
, 0);

403 i‡(
ªt
)

404 
îr
;

407 i‡(
pd©a
->
úq_ba£
) {

408 i‡(
	`WA_DELAYED_READOUT_REVID
(
ªvid
)) {

409 
	`dev_w¨n
(&
˛õ¡
->
dev
, "GPIO intÇot supported\n");

411 
ªt
 = 
	`adp5588_úq_£tup
(
dev
);

412 i‡(
ªt
)

413 
îr
;

417 
ªt
 = 
	`gpiochù_add
(&
dev
->
gpio_chù
);

418 i‡(
ªt
)

419 
îr_úq
;

421 
	`dev_öfo
(&
˛õ¡
->
dev
, "IRQ Base: %d Rev.: %d\n",

422 
pd©a
->
úq_ba£
, 
ªvid
);

424 i‡(
pd©a
->
£tup
) {

425 
ªt
 = 
pd©a
->
	`£tup
(
˛õ¡
, 
gc
->
ba£
, gc->
ngpio
,Öd©a->
c⁄ãxt
);

426 i‡(
ªt
 < 0)

427 
	`dev_w¨n
(&
˛õ¡
->
dev
, "£tu∞Áûed, %d\n", 
ªt
);

430 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
dev
);

434 
îr_úq
:

435 
	`adp5588_úq_ã¨down
(
dev
);

436 
îr
:

437 
	`k‰ì
(
dev
);

438  
ªt
;

439 
	}
}

441 
	$adp5588_gpio_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

443 
adp5588_gpio_∂©f‹m_d©a
 *
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

444 
adp5588_gpio
 *
dev
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

445 
ªt
;

447 i‡(
pd©a
->
ã¨down
) {

448 
ªt
 = 
pd©a
->
	`ã¨down
(
˛õ¡
,

449 
dev
->
gpio_chù
.
ba£
, dev->gpio_chù.
ngpio
,

450 
pd©a
->
c⁄ãxt
);

451 i‡(
ªt
 < 0) {

452 
	`dev_îr
(&
˛õ¡
->
dev
, "ã¨dow¿Áûed %d\n", 
ªt
);

453  
ªt
;

457 i‡(
dev
->
úq_ba£
)

458 
	`‰ì_úq
(
dev
->
˛õ¡
->
úq
, dev);

460 
ªt
 = 
	`gpiochù_ªmove
(&
dev
->
gpio_chù
);

461 i‡(
ªt
) {

462 
	`dev_îr
(&
˛õ¡
->
dev
, "gpiochù_ªmovêÁûed %d\n", 
ªt
);

463  
ªt
;

466 
	`k‰ì
(
dev
);

468 
	}
}

470 c⁄° 
i2c_devi˚_id
 
	gadp5588_gpio_id
[] = {

471 {
DRV_NAME
, 0},

475 
MODULE_DEVICE_TABLE
(
i2c
, 
adp5588_gpio_id
);

477 
i2c_drivî
 
	gadp5588_gpio_drivî
 = {

478 .
drivî
 = {

479 .
«me
 = 
DRV_NAME
,

481 .
	g¥obe
 = 
adp5588_gpio_¥obe
,

482 .
	gªmove
 = 
adp5588_gpio_ªmove
,

483 .
	gid_èbÀ
 = 
adp5588_gpio_id
,

486 
moduÀ_i2c_drivî
(
adp5588_gpio_drivî
);

488 
MODULE_AUTHOR
("Michael Hennerich <hennerich@blackfin.uclinux.org>");

489 
MODULE_DESCRIPTION
("GPIO ADP5588 Driver");

490 
MODULE_LICENSE
("GPL");

	@gpio-amd8111.c

28 
	~<löux/moduÀ.h
>

29 
	~<löux/kî√l.h
>

30 
	~<löux/gpio.h
>

31 
	~<löux/pci.h
>

32 
	~<löux/•ölock.h
>

34 
	#PMBASE_OFFSET
 0xb0

	)

35 
	#PMBASE_SIZE
 0x30

	)

37 
	#AMD_REG_GPIO
(
i
Ë(0x10 + (i))

	)

39 
	#AMD_GPIO_LTCH_STS
 0x40

	)

40 
	#AMD_GPIO_RTIN
 0x20

	)

41 
	#AMD_GPIO_DEBOUNCE
 0x10

	)

42 
	#AMD_GPIO_MODE_MASK
 0x0¯

	)

43 
	#AMD_GPIO_MODE_IN
 0x00

	)

44 
	#AMD_GPIO_MODE_OUT
 0x04

	)

46 
	#AMD_GPIO_MODE_ALTFN
 0x08

	)

47 
	#AMD_GPIO_X_MASK
 0x03

	)

48 
	#AMD_GPIO_X_IN_ACTIVEHI
 0x01

	)

49 
	#AMD_GPIO_X_IN_LATCH
 0x02

	)

50 
	#AMD_GPIO_X_OUT_LOW
 0x00

	)

51 
	#AMD_GPIO_X_OUT_HI
 0x01

	)

52 
	#AMD_GPIO_X_OUT_CLK0
 0x02

	)

53 
	#AMD_GPIO_X_OUT_CLK1
 0x03

	)

63 
DEFINE_PCI_DEVICE_TABLE
(
pci_tbl
) = {

64 { 
PCI_DEVICE
(
PCI_VENDOR_ID_AMD
, 
PCI_DEVICE_ID_AMD_8111_SMBUS
), 0 },

67 
MODULE_DEVICE_TABLE
(
pci
, 
pci_tbl
);

69 
	samd_gpio
 {

70 
gpio_chù
 
	mchù
;

71 
u32
 
	mpmba£
;

72 
__iomem
 *
	mpm
;

73 
pci_dev
 *
	mpdev
;

74 
•ölock_t
 
	mlock
;

75 
u8
 
	m‹ig
[32];

78 
	#to_agp
(
chù
Ë
	`c⁄èöî_of
(chù, 
amd_gpio
, chù)

	)

80 
	$amd_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

82 
amd_gpio
 *
agp
 = 
	`to_agp
(
chù
);

84 
agp
->
‹ig
[
off£t
] = 
	`i‹ód8
◊gp->
pm
 + 
	`AMD_REG_GPIO
(offset)) &

85 (
AMD_GPIO_DEBOUNCE
 | 
AMD_GPIO_MODE_MASK
 | 
AMD_GPIO_X_MASK
);

87 
	`dev_dbg
(&
agp
->
pdev
->
dev
, "Reque°ed gpiÿ%d, d©®%x\n", 
off£t
,ágp->
‹ig
[offset]);

90 
	}
}

92 
	$amd_gpio_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

94 
amd_gpio
 *
agp
 = 
	`to_agp
(
chù
);

96 
	`dev_dbg
(&
agp
->
pdev
->
dev
, "Fªed gpiÿ%d, d©®%x\n", 
off£t
,ágp->
‹ig
[offset]);

98 
	`iowrôe8
(
agp
->
‹ig
[
off£t
],ágp->
pm
 + 
	`AMD_REG_GPIO
(offset));

99 
	}
}

101 
	$amd_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

103 
amd_gpio
 *
agp
 = 
	`to_agp
(
chù
);

104 
u8
 
ãmp
;

105 
Êags
;

107 
	`•ö_lock_úqßve
(&
agp
->
lock
, 
Êags
);

108 
ãmp
 = 
	`i‹ód8
(
agp
->
pm
 + 
	`AMD_REG_GPIO
(
off£t
));

109 
ãmp
 = (ãm∞& 
AMD_GPIO_DEBOUNCE
Ë| 
AMD_GPIO_MODE_OUT
 | (
vÆue
 ? 
AMD_GPIO_X_OUT_HI
 : 
AMD_GPIO_X_OUT_LOW
);

110 
	`iowrôe8
(
ãmp
, 
agp
->
pm
 + 
	`AMD_REG_GPIO
(
off£t
));

111 
	`•ö_u∆ock_úqª°‹e
(&
agp
->
lock
, 
Êags
);

113 
	`dev_dbg
(&
agp
->
pdev
->
dev
, "Sëtög gpiÿ%d, vÆuê%d,Ñeg=%02x\n", 
off£t
, !!
vÆue
, 
ãmp
);

114 
	}
}

116 
	$amd_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

118 
amd_gpio
 *
agp
 = 
	`to_agp
(
chù
);

119 
u8
 
ãmp
;

121 
ãmp
 = 
	`i‹ód8
(
agp
->
pm
 + 
	`AMD_REG_GPIO
(
off£t
));

123 
	`dev_dbg
(&
agp
->
pdev
->
dev
, "Gëtög gpiÿ%d,Ñeg=%02x\n", 
off£t
, 
ãmp
);

125  (
ãmp
 & 
AMD_GPIO_RTIN
) ? 1 : 0;

126 
	}
}

128 
	$amd_gpio_dúout
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

130 
amd_gpio
 *
agp
 = 
	`to_agp
(
chù
);

131 
u8
 
ãmp
;

132 
Êags
;

134 
	`•ö_lock_úqßve
(&
agp
->
lock
, 
Êags
);

135 
ãmp
 = 
	`i‹ód8
(
agp
->
pm
 + 
	`AMD_REG_GPIO
(
off£t
));

136 
ãmp
 = (ãm∞& 
AMD_GPIO_DEBOUNCE
Ë| 
AMD_GPIO_MODE_OUT
 | (
vÆue
 ? 
AMD_GPIO_X_OUT_HI
 : 
AMD_GPIO_X_OUT_LOW
);

137 
	`iowrôe8
(
ãmp
, 
agp
->
pm
 + 
	`AMD_REG_GPIO
(
off£t
));

138 
	`•ö_u∆ock_úqª°‹e
(&
agp
->
lock
, 
Êags
);

140 
	`dev_dbg
(&
agp
->
pdev
->
dev
, "Dúouàgpiÿ%d, vÆuê%d,Ñeg=%02x\n", 
off£t
, !!
vÆue
, 
ãmp
);

143 
	}
}

145 
	$amd_gpio_dúö
(
gpio_chù
 *
chù
, 
off£t
)

147 
amd_gpio
 *
agp
 = 
	`to_agp
(
chù
);

148 
u8
 
ãmp
;

149 
Êags
;

151 
	`•ö_lock_úqßve
(&
agp
->
lock
, 
Êags
);

152 
ãmp
 = 
	`i‹ód8
(
agp
->
pm
 + 
	`AMD_REG_GPIO
(
off£t
));

153 
ãmp
 = (ãm∞& 
AMD_GPIO_DEBOUNCE
Ë| 
AMD_GPIO_MODE_IN
;

154 
	`iowrôe8
(
ãmp
, 
agp
->
pm
 + 
	`AMD_REG_GPIO
(
off£t
));

155 
	`•ö_u∆ock_úqª°‹e
(&
agp
->
lock
, 
Êags
);

157 
	`dev_dbg
(&
agp
->
pdev
->
dev
, "Dúö gpiÿ%d,Ñeg=%02x\n", 
off£t
, 
ãmp
);

160 
	}
}

162 
amd_gpio
 
	ggp
 = {

163 .
chù
 = {

164 .
œbñ
 = "AMD GPIO",

165 .
	gow√r
 = 
THIS_MODULE
,

166 .
	gba£
 = -1,

167 .
	gngpio
 = 32,

168 .
	gªque°
 = 
amd_gpio_ªque°
,

169 .
	g‰ì
 = 
amd_gpio_‰ì
,

170 .
	g£t
 = 
amd_gpio_£t
,

171 .
	ggë
 = 
amd_gpio_gë
,

172 .
	gdúe˘i⁄_ouçut
 = 
amd_gpio_dúout
,

173 .
	gdúe˘i⁄_öput
 = 
amd_gpio_dúö
,

177 
__öô
 
	$amd_gpio_öô
()

179 
îr
 = -
ENODEV
;

180 
pci_dev
 *
pdev
 = 
NULL
;

181 c⁄° 
pci_devi˚_id
 *
ít
;

193 
	`f‹_óch_pci_dev
(
pdev
) {

194 
ít
 = 
	`pci_m©ch_id
(
pci_tbl
, 
pdev
);

195 i‡(
ít
)

196 
found
;

199 
out
;

201 
found
:

202 
îr
 = 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 0x58, &
gp
.
pmba£
);

203 i‡(
îr
)

204 
out
;

205 
îr
 = -
EIO
;

206 
gp
.
pmba£
 &= 0x0000FF00;

207 i‡(
gp
.
pmba£
 == 0)

208 
out
;

209 i‡(!
	`ªque°_ªgi⁄
(
gp
.
pmba£
 + 
PMBASE_OFFSET
, 
PMBASE_SIZE
, "AMD GPIO")) {

210 
	`dev_îr
(&
pdev
->
dev
, "AMD GPIOÑegion 0x%xálready in use!\n",

211 
gp
.
pmba£
 + 
PMBASE_OFFSET
);

212 
îr
 = -
EBUSY
;

213 
out
;

215 
gp
.
pm
 = 
	`i›‹t_m≠
(gp.
pmba£
 + 
PMBASE_OFFSET
, 
PMBASE_SIZE
);

216 
gp
.
pdev
 =Ödev;

217 
gp
.
chù
.
dev
 = &
pdev
->dev;

219 
	`•ö_lock_öô
(&
gp
.
lock
);

221 
	`¥ötk
(
KERN_INFO
 "AMD-8111 GPIO detected\n");

222 
îr
 = 
	`gpiochù_add
(&
gp
.
chù
);

223 i‡(
îr
) {

224 
	`¥ötk
(
KERN_ERR
 "GPIOÑegistering failed (%d)\n",

225 
îr
);

226 
	`ªÀa£_ªgi⁄
(
gp
.
pmba£
 + 
PMBASE_OFFSET
, 
PMBASE_SIZE
);

227 
out
;

229 
out
:

230  
îr
;

231 
	}
}

233 
__exô
 
	$amd_gpio_exô
()

235 
îr
 = 
	`gpiochù_ªmove
(&
gp
.
chù
);

236 
	`WARN_ON
(
îr
);

237 
	`i›‹t_unm≠
(
gp
.
pm
);

238 
	`ªÀa£_ªgi⁄
(
gp
.
pmba£
 + 
PMBASE_OFFSET
, 
PMBASE_SIZE
);

239 
	}
}

241 
moduÀ_öô
(
amd_gpio_öô
);

242 
moduÀ_exô
(
amd_gpio_exô
);

244 
MODULE_AUTHOR
("The Linux KernelÅeam");

245 
MODULE_DESCRIPTION
("GPIO driver for AMD chipsets");

246 
MODULE_LICENSE
("GPL");

	@gpio-arizona.c

15 
	~<löux/kî√l.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/gpio.h
>

19 
	~<löux/∂©f‹m_devi˚.h
>

20 
	~<löux/£q_fûe.h
>

22 
	~<löux/mfd/¨iz⁄a/c‹e.h
>

23 
	~<löux/mfd/¨iz⁄a/pd©a.h
>

24 
	~<löux/mfd/¨iz⁄a/ªgi°îs.h
>

26 
	s¨iz⁄a_gpio
 {

27 
¨iz⁄a
 *
	m¨iz⁄a
;

28 
gpio_chù
 
	mgpio_chù
;

31 
ölöe
 
¨iz⁄a_gpio
 *
	$to_¨iz⁄a_gpio
(
gpio_chù
 *
chù
)

33  
	`c⁄èöî_of
(
chù
, 
¨iz⁄a_gpio
, 
gpio_chù
);

34 
	}
}

36 
	$¨iz⁄a_gpio_dúe˘i⁄_ö
(
gpio_chù
 *
chù
, 
off£t
)

38 
¨iz⁄a_gpio
 *¨iz⁄a_gpiÿ
	`to_¨iz⁄a_gpio
(
chù
);

39 
¨iz⁄a
 *¨iz⁄®
¨iz⁄a_gpio
->arizona;

41  
	`ªgm≠_upd©e_bôs
(
¨iz⁄a
->
ªgm≠
, 
ARIZONA_GPIO1_CTRL
 + 
off£t
,

42 
ARIZONA_GPN_DIR
, ARIZONA_GPN_DIR);

43 
	}
}

45 
	$¨iz⁄a_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

47 
¨iz⁄a_gpio
 *¨iz⁄a_gpiÿ
	`to_¨iz⁄a_gpio
(
chù
);

48 
¨iz⁄a
 *¨iz⁄®
¨iz⁄a_gpio
->arizona;

49 
vÆ
;

50 
ªt
;

52 
ªt
 = 
	`ªgm≠_ªad
(
¨iz⁄a
->
ªgm≠
, 
ARIZONA_GPIO1_CTRL
 + 
off£t
, &
vÆ
);

53 i‡(
ªt
 < 0)

54  
ªt
;

56 i‡(
vÆ
 & 
ARIZONA_GPN_LVL
)

60 
	}
}

62 
	$¨iz⁄a_gpio_dúe˘i⁄_out
(
gpio_chù
 *
chù
,

63 
off£t
, 
vÆue
)

65 
¨iz⁄a_gpio
 *¨iz⁄a_gpiÿ
	`to_¨iz⁄a_gpio
(
chù
);

66 
¨iz⁄a
 *¨iz⁄®
¨iz⁄a_gpio
->arizona;

68 i‡(
vÆue
)

69 
vÆue
 = 
ARIZONA_GPN_LVL
;

71  
	`ªgm≠_upd©e_bôs
(
¨iz⁄a
->
ªgm≠
, 
ARIZONA_GPIO1_CTRL
 + 
off£t
,

72 
ARIZONA_GPN_DIR
 | 
ARIZONA_GPN_LVL
, 
vÆue
);

73 
	}
}

75 
	$¨iz⁄a_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

77 
¨iz⁄a_gpio
 *¨iz⁄a_gpiÿ
	`to_¨iz⁄a_gpio
(
chù
);

78 
¨iz⁄a
 *¨iz⁄®
¨iz⁄a_gpio
->arizona;

80 i‡(
vÆue
)

81 
vÆue
 = 
ARIZONA_GPN_LVL
;

83 
	`ªgm≠_upd©e_bôs
(
¨iz⁄a
->
ªgm≠
, 
ARIZONA_GPIO1_CTRL
 + 
off£t
,

84 
ARIZONA_GPN_LVL
, 
vÆue
);

85 
	}
}

87 
gpio_chù
 
	gãm∂©e_chù
 = {

88 .
œbñ
 = "arizona",

89 .
	gow√r
 = 
THIS_MODULE
,

90 .
	gdúe˘i⁄_öput
 = 
¨iz⁄a_gpio_dúe˘i⁄_ö
,

91 .
	ggë
 = 
¨iz⁄a_gpio_gë
,

92 .
	gdúe˘i⁄_ouçut
 = 
¨iz⁄a_gpio_dúe˘i⁄_out
,

93 .
	g£t
 = 
¨iz⁄a_gpio_£t
,

94 .
	gˇn_¶ìp
 = 1,

97 
	$¨iz⁄a_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

99 
¨iz⁄a
 *¨iz⁄®
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

100 
¨iz⁄a_pd©a
 *
pd©a
 = 
¨iz⁄a
->
dev
->
∂©f‹m_d©a
;

101 
¨iz⁄a_gpio
 *arizona_gpio;

102 
ªt
;

104 
¨iz⁄a_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*arizona_gpio),

105 
GFP_KERNEL
);

106 i‡(
¨iz⁄a_gpio
 =
NULL
)

107  -
ENOMEM
;

109 
¨iz⁄a_gpio
->
¨iz⁄a
 =árizona;

110 
¨iz⁄a_gpio
->
gpio_chù
 = 
ãm∂©e_chù
;

111 
¨iz⁄a_gpio
->
gpio_chù
.
dev
 = &
pdev
->dev;

113 
¨iz⁄a
->
ty≥
) {

114 
WM5102
:

115 
WM5110
:

116 
¨iz⁄a_gpio
->
gpio_chù
.
ngpio
 = 5;

119 
	`dev_îr
(&
pdev
->
dev
, "Unknown chip variant %d\n",

120 
¨iz⁄a
->
ty≥
);

121  -
EINVAL
;

124 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

125 
¨iz⁄a_gpio
->
gpio_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

127 
¨iz⁄a_gpio
->
gpio_chù
.
ba£
 = -1;

129 
ªt
 = 
	`gpiochù_add
(&
¨iz⁄a_gpio
->
gpio_chù
);

130 i‡(
ªt
 < 0) {

131 
	`dev_îr
(&
pdev
->
dev
, "CouldÇotÑegister gpiochip, %d\n",

132 
ªt
);

133 
îr
;

136 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
¨iz⁄a_gpio
);

138  
ªt
;

140 
îr
:

141  
ªt
;

142 
	}
}

144 
	$¨iz⁄a_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

146 
¨iz⁄a_gpio
 *¨iz⁄a_gpiÿ
	`∂©f‹m_gë_drvd©a
(
pdev
);

148  
	`gpiochù_ªmove
(&
¨iz⁄a_gpio
->
gpio_chù
);

149 
	}
}

151 
∂©f‹m_drivî
 
	g¨iz⁄a_gpio_drivî
 = {

152 .
drivî
.
«me
 = "arizona-gpio",

153 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

154 .
	g¥obe
 = 
¨iz⁄a_gpio_¥obe
,

155 .
	gªmove
 = 
¨iz⁄a_gpio_ªmove
,

158 
moduÀ_∂©f‹m_drivî
(
¨iz⁄a_gpio_drivî
);

160 
MODULE_AUTHOR
("Mark Brown <broonie@opensource.wolfsonmicro.com>");

161 
MODULE_DESCRIPTION
("GPIO interface for Arizona devices");

162 
MODULE_LICENSE
("GPL");

163 
MODULE_ALIAS
("platform:arizona-gpio");

	@gpio-bt8xx.c

46 
	~<löux/moduÀ.h
>

47 
	~<löux/pci.h
>

48 
	~<löux/•ölock.h
>

49 
	~<löux/gpio.h
>

50 
	~<löux/¶ab.h
>

53 
	~"../medü/pci/bt8xx/bt848.h
"

56 
	#BT8XXGPIO_NR_GPIOS
 24

	)

59 
	sbt8xxgpio
 {

60 
•ölock_t
 
	mlock
;

62 
__iomem
 *
	mmmio
;

63 
pci_dev
 *
	mpdev
;

64 
gpio_chù
 
	mgpio
;

66 #ifde‡
CONFIG_PM


67 
u32
 
	mßved_ouãn
;

68 
u32
 
	mßved_d©a
;

72 
	#bgwrôe
(
d©
, 
adr
Ë
	`wrôñ
((d©), 
bg
->
mmio
+◊dr))

	)

73 
	#bgªad
(
adr
Ë
	`ªadl
(
bg
->
mmio
+◊dr))

	)

76 
	gmod∑øm_gpioba£
 = -1 ;

77 
moduÀ_∑øm_«med
(
gpioba£
, 
mod∑øm_gpioba£
, , 0444);

78 
MODULE_PARM_DESC
(
gpioba£
, "The GPIOÇumber base. -1 means dynamic, which isÅhe default.");

81 
	$bt8xxgpio_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gpio
, 
ƒ
)

83 
bt8xxgpio
 *
bg
 = 
	`c⁄èöî_of
(
gpio
, bt8xxgpio, gpio);

84 
Êags
;

85 
u32
 
ouãn
, 
d©a
;

87 
	`•ö_lock_úqßve
(&
bg
->
lock
, 
Êags
);

89 
d©a
 = 
	`bgªad
(
BT848_GPIO_DATA
);

90 
d©a
 &~(1 << 
ƒ
);

91 
	`bgwrôe
(
d©a
, 
BT848_GPIO_DATA
);

93 
ouãn
 = 
	`bgªad
(
BT848_GPIO_OUT_EN
);

94 
ouãn
 &~(1 << 
ƒ
);

95 
	`bgwrôe
(
ouãn
, 
BT848_GPIO_OUT_EN
);

97 
	`•ö_u∆ock_úqª°‹e
(&
bg
->
lock
, 
Êags
);

100 
	}
}

102 
	$bt8xxgpio_gpio_gë
(
gpio_chù
 *
gpio
, 
ƒ
)

104 
bt8xxgpio
 *
bg
 = 
	`c⁄èöî_of
(
gpio
, bt8xxgpio, gpio);

105 
Êags
;

106 
u32
 
vÆ
;

108 
	`•ö_lock_úqßve
(&
bg
->
lock
, 
Êags
);

109 
vÆ
 = 
	`bgªad
(
BT848_GPIO_DATA
);

110 
	`•ö_u∆ock_úqª°‹e
(&
bg
->
lock
, 
Êags
);

112  !!(
vÆ
 & (1 << 
ƒ
));

113 
	}
}

115 
	$bt8xxgpio_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gpio
,

116 
ƒ
, 
vÆ
)

118 
bt8xxgpio
 *
bg
 = 
	`c⁄èöî_of
(
gpio
, bt8xxgpio, gpio);

119 
Êags
;

120 
u32
 
ouãn
, 
d©a
;

122 
	`•ö_lock_úqßve
(&
bg
->
lock
, 
Êags
);

124 
ouãn
 = 
	`bgªad
(
BT848_GPIO_OUT_EN
);

125 
ouãn
 |(1 << 
ƒ
);

126 
	`bgwrôe
(
ouãn
, 
BT848_GPIO_OUT_EN
);

128 
d©a
 = 
	`bgªad
(
BT848_GPIO_DATA
);

129 i‡(
vÆ
)

130 
d©a
 |(1 << 
ƒ
);

132 
d©a
 &~(1 << 
ƒ
);

133 
	`bgwrôe
(
d©a
, 
BT848_GPIO_DATA
);

135 
	`•ö_u∆ock_úqª°‹e
(&
bg
->
lock
, 
Êags
);

138 
	}
}

140 
	$bt8xxgpio_gpio_£t
(
gpio_chù
 *
gpio
,

141 
ƒ
, 
vÆ
)

143 
bt8xxgpio
 *
bg
 = 
	`c⁄èöî_of
(
gpio
, bt8xxgpio, gpio);

144 
Êags
;

145 
u32
 
d©a
;

147 
	`•ö_lock_úqßve
(&
bg
->
lock
, 
Êags
);

149 
d©a
 = 
	`bgªad
(
BT848_GPIO_DATA
);

150 i‡(
vÆ
)

151 
d©a
 |(1 << 
ƒ
);

153 
d©a
 &~(1 << 
ƒ
);

154 
	`bgwrôe
(
d©a
, 
BT848_GPIO_DATA
);

156 
	`•ö_u∆ock_úqª°‹e
(&
bg
->
lock
, 
Êags
);

157 
	}
}

159 
	$bt8xxgpio_gpio_£tup
(
bt8xxgpio
 *
bg
)

161 
gpio_chù
 *
c
 = &
bg
->
gpio
;

163 
c
->
œbñ
 = 
	`dev_«me
(&
bg
->
pdev
->
dev
);

164 
c
->
ow√r
 = 
THIS_MODULE
;

165 
c
->
dúe˘i⁄_öput
 = 
bt8xxgpio_gpio_dúe˘i⁄_öput
;

166 
c
->
gë
 = 
bt8xxgpio_gpio_gë
;

167 
c
->
dúe˘i⁄_ouçut
 = 
bt8xxgpio_gpio_dúe˘i⁄_ouçut
;

168 
c
->
£t
 = 
bt8xxgpio_gpio_£t
;

169 
c
->
dbg_show
 = 
NULL
;

170 
c
->
ba£
 = 
mod∑øm_gpioba£
;

171 
c
->
ngpio
 = 
BT8XXGPIO_NR_GPIOS
;

172 
c
->
ˇn_¶ìp
 = 0;

173 
	}
}

175 
	$bt8xxgpio_¥obe
(
pci_dev
 *
dev
,

176 c⁄° 
pci_devi˚_id
 *
pci_id
)

178 
bt8xxgpio
 *
bg
;

179 
îr
;

181 
bg
 = 
	`kzÆloc
((*bg), 
GFP_KERNEL
);

182 i‡(!
bg
)

183  -
ENOMEM
;

185 
bg
->
pdev
 = 
dev
;

186 
	`•ö_lock_öô
(&
bg
->
lock
);

188 
îr
 = 
	`pci_íabÀ_devi˚
(
dev
);

189 i‡(
îr
) {

190 
	`¥ötk
(
KERN_ERR
 "bt8xxgpio: Can'tÉnable device.\n");

191 
îr_‰ìbg
;

193 i‡(!
	`ªque°_mem_ªgi⁄
(
	`pci_ªsour˚_°¨t
(
dev
, 0),

194 
	`pci_ªsour˚_Àn
(
dev
, 0),

196 
	`¥ötk
(
KERN_WARNING
 "bt8xxgpio: Can'tÑequest iomem (0x%llx).\n",

197 ()
	`pci_ªsour˚_°¨t
(
dev
, 0));

198 
îr
 = -
EBUSY
;

199 
îr_dißbÀ
;

201 
	`pci_£t_ma°î
(
dev
);

202 
	`pci_£t_drvd©a
(
dev
, 
bg
);

204 
bg
->
mmio
 = 
	`i‹em≠
(
	`pci_ªsour˚_°¨t
(
dev
, 0), 0x1000);

205 i‡(!
bg
->
mmio
) {

206 
	`¥ötk
(
KERN_ERR
 "bt8xxgpio: ioremap() failed\n");

207 
îr
 = -
EIO
;

208 
îr_ªÀa£_mem
;

212 
	`bgwrôe
(0, 
BT848_INT_MASK
);

215 
	`bgwrôe
(0, 
BT848_GPIO_DMA_CTL
);

216 
	`bgwrôe
(0, 
BT848_GPIO_REG_INP
);

217 
	`bgwrôe
(0, 
BT848_GPIO_OUT_EN
);

219 
	`bt8xxgpio_gpio_£tup
(
bg
);

220 
îr
 = 
	`gpiochù_add
(&
bg
->
gpio
);

221 i‡(
îr
) {

222 
	`¥ötk
(
KERN_ERR
 "bt8xxgpio: FailedÅoÑegister GPIOs\n");

223 
îr_ªÀa£_mem
;

228 
îr_ªÀa£_mem
:

229 
	`ªÀa£_mem_ªgi⁄
(
	`pci_ªsour˚_°¨t
(
dev
, 0),

230 
	`pci_ªsour˚_Àn
(
dev
, 0));

231 
	`pci_£t_drvd©a
(
dev
, 
NULL
);

232 
îr_dißbÀ
:

233 
	`pci_dißbÀ_devi˚
(
dev
);

234 
îr_‰ìbg
:

235 
	`k‰ì
(
bg
);

237  
îr
;

238 
	}
}

240 
	$bt8xxgpio_ªmove
(
pci_dev
 *
pdev
)

242 
bt8xxgpio
 *
bg
 = 
	`pci_gë_drvd©a
(
pdev
);

244 
	`gpiochù_ªmove
(&
bg
->
gpio
);

246 
	`bgwrôe
(0, 
BT848_INT_MASK
);

247 
	`bgwrôe
(~0x0, 
BT848_INT_STAT
);

248 
	`bgwrôe
(0x0, 
BT848_GPIO_OUT_EN
);

250 
	`iounm≠
(
bg
->
mmio
);

251 
	`ªÀa£_mem_ªgi⁄
(
	`pci_ªsour˚_°¨t
(
pdev
, 0),

252 
	`pci_ªsour˚_Àn
(
pdev
, 0));

253 
	`pci_dißbÀ_devi˚
(
pdev
);

255 
	`pci_£t_drvd©a
(
pdev
, 
NULL
);

256 
	`k‰ì
(
bg
);

257 
	}
}

259 #ifde‡
CONFIG_PM


260 
	$bt8xxgpio_su•íd
(
pci_dev
 *
pdev
, 
pm_mesßge_t
 
°©e
)

262 
bt8xxgpio
 *
bg
 = 
	`pci_gë_drvd©a
(
pdev
);

263 
Êags
;

265 
	`•ö_lock_úqßve
(&
bg
->
lock
, 
Êags
);

267 
bg
->
ßved_ouãn
 = 
	`bgªad
(
BT848_GPIO_OUT_EN
);

268 
bg
->
ßved_d©a
 = 
	`bgªad
(
BT848_GPIO_DATA
);

270 
	`bgwrôe
(0, 
BT848_INT_MASK
);

271 
	`bgwrôe
(~0x0, 
BT848_INT_STAT
);

272 
	`bgwrôe
(0x0, 
BT848_GPIO_OUT_EN
);

274 
	`•ö_u∆ock_úqª°‹e
(&
bg
->
lock
, 
Êags
);

276 
	`pci_ßve_°©e
(
pdev
);

277 
	`pci_dißbÀ_devi˚
(
pdev
);

278 
	`pci_£t_powî_°©e
(
pdev
, 
	`pci_choo£_°©e
’dev, 
°©e
));

281 
	}
}

283 
	$bt8xxgpio_ªsume
(
pci_dev
 *
pdev
)

285 
bt8xxgpio
 *
bg
 = 
	`pci_gë_drvd©a
(
pdev
);

286 
Êags
;

287 
îr
;

289 
	`pci_£t_powî_°©e
(
pdev
, 0);

290 
îr
 = 
	`pci_íabÀ_devi˚
(
pdev
);

291 i‡(
îr
)

292  
îr
;

293 
	`pci_ª°‹e_°©e
(
pdev
);

295 
	`•ö_lock_úqßve
(&
bg
->
lock
, 
Êags
);

297 
	`bgwrôe
(0, 
BT848_INT_MASK
);

298 
	`bgwrôe
(0, 
BT848_GPIO_DMA_CTL
);

299 
	`bgwrôe
(0, 
BT848_GPIO_REG_INP
);

300 
	`bgwrôe
(
bg
->
ßved_ouãn
, 
BT848_GPIO_OUT_EN
);

301 
	`bgwrôe
(
bg
->
ßved_d©a
 & bg->
ßved_ouãn
,

302 
BT848_GPIO_DATA
);

304 
	`•ö_u∆ock_úqª°‹e
(&
bg
->
lock
, 
Êags
);

307 
	}
}

309 
	#bt8xxgpio_su•íd
 
NULL


	)

310 
	#bt8xxgpio_ªsume
 
NULL


	)

313 
DEFINE_PCI_DEVICE_TABLE
(
bt8xxgpio_pci_tbl
) = {

314 { 
PCI_DEVICE
(
PCI_VENDOR_ID_BROOKTREE
, 
PCI_DEVICE_ID_BT848
) },

315 { 
PCI_DEVICE
(
PCI_VENDOR_ID_BROOKTREE
, 
PCI_DEVICE_ID_BT849
) },

316 { 
PCI_DEVICE
(
PCI_VENDOR_ID_BROOKTREE
, 
PCI_DEVICE_ID_BT878
) },

317 { 
PCI_DEVICE
(
PCI_VENDOR_ID_BROOKTREE
, 
PCI_DEVICE_ID_BT879
) },

320 
MODULE_DEVICE_TABLE
(
pci
, 
bt8xxgpio_pci_tbl
);

322 
pci_drivî
 
	gbt8xxgpio_pci_drivî
 = {

323 .
«me
 = "bt8xxgpio",

324 .
	gid_èbÀ
 = 
bt8xxgpio_pci_tbl
,

325 .
	g¥obe
 = 
bt8xxgpio_¥obe
,

326 .
	gªmove
 = 
bt8xxgpio_ªmove
,

327 .
	gsu•íd
 = 
bt8xxgpio_su•íd
,

328 .
	gªsume
 = 
bt8xxgpio_ªsume
,

331 
moduÀ_pci_drivî
(
bt8xxgpio_pci_drivî
);

333 
MODULE_LICENSE
("GPL");

334 
MODULE_AUTHOR
("Michael Buesch");

335 
MODULE_DESCRIPTION
("Abuseá BT8xx framegrabber cardás generic GPIO card");

	@gpio-clps711x.c

12 
	~<löux/io.h
>

13 
	~<löux/¶ab.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/•ölock.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<mach/h¨dw¨e.h
>

21 
	#CLPS711X_GPIO_PORTS
 5

	)

22 
	#CLPS711X_GPIO_NAME
 "gpio-˛ps711x"

	)

24 
	s˛ps711x_gpio
 {

25 
gpio_chù
 
	mchù
[
CLPS711X_GPIO_PORTS
];

26 
•ölock_t
 
	mlock
;

29 
__iomem
 *
	g˛ps711x_p‹ts
[] = {

30 
CLPS711X_VIRT_BASE
 + 
PADR
,

31 
CLPS711X_VIRT_BASE
 + 
PBDR
,

32 
CLPS711X_VIRT_BASE
 + 
PCDR
,

33 
CLPS711X_VIRT_BASE
 + 
PDDR
,

34 
CLPS711X_VIRT_BASE
 + 
PEDR
,

37 
__iomem
 *
	g˛ps711x_pdús
[] = {

38 
CLPS711X_VIRT_BASE
 + 
PADDR
,

39 
CLPS711X_VIRT_BASE
 + 
PBDDR
,

40 
CLPS711X_VIRT_BASE
 + 
PCDDR
,

41 
CLPS711X_VIRT_BASE
 + 
PDDDR
,

42 
CLPS711X_VIRT_BASE
 + 
PEDDR
,

45 
	#˛ps711x_p‹t
(
x
Ë
˛ps711x_p‹ts
[x->
ba£
 / 8]

	)

46 
	#˛ps711x_pdú
(
x
Ë
˛ps711x_pdús
[x->
ba£
 / 8]

	)

48 
	$gpio_˛ps711x_gë
(
gpio_chù
 *
chù
, 
off£t
)

50  !!(
	`ªadb
(
	`˛ps711x_p‹t
(
chù
)Ë& (1 << 
off£t
));

51 
	}
}

53 
	$gpio_˛ps711x_£t
(
gpio_chù
 *
chù
, 
off£t
,

54 
vÆue
)

56 
tmp
;

57 
Êags
;

58 
˛ps711x_gpio
 *
gpio
 = 
	`dev_gë_drvd©a
(
chù
->
dev
);

60 
	`•ö_lock_úqßve
(&
gpio
->
lock
, 
Êags
);

61 
tmp
 = 
	`ªadb
(
	`˛ps711x_p‹t
(
chù
)Ë& ~(1 << 
off£t
);

62 i‡(
vÆue
)

63 
tmp
 |1 << 
off£t
;

64 
	`wrôeb
(
tmp
, 
	`˛ps711x_p‹t
(
chù
));

65 
	`•ö_u∆ock_úqª°‹e
(&
gpio
->
lock
, 
Êags
);

66 
	}
}

68 
	$gpio_˛ps711x_dú_ö
(
gpio_chù
 *
chù
, 
off£t
)

70 
tmp
;

71 
Êags
;

72 
˛ps711x_gpio
 *
gpio
 = 
	`dev_gë_drvd©a
(
chù
->
dev
);

74 
	`•ö_lock_úqßve
(&
gpio
->
lock
, 
Êags
);

75 
tmp
 = 
	`ªadb
(
	`˛ps711x_pdú
(
chù
)Ë& ~(1 << 
off£t
);

76 
	`wrôeb
(
tmp
, 
	`˛ps711x_pdú
(
chù
));

77 
	`•ö_u∆ock_úqª°‹e
(&
gpio
->
lock
, 
Êags
);

80 
	}
}

82 
	$gpio_˛ps711x_dú_out
(
gpio_chù
 *
chù
, 
off£t
,

83 
vÆue
)

85 
tmp
;

86 
Êags
;

87 
˛ps711x_gpio
 *
gpio
 = 
	`dev_gë_drvd©a
(
chù
->
dev
);

89 
	`•ö_lock_úqßve
(&
gpio
->
lock
, 
Êags
);

90 
tmp
 = 
	`ªadb
(
	`˛ps711x_pdú
(
chù
)Ë| (1 << 
off£t
);

91 
	`wrôeb
(
tmp
, 
	`˛ps711x_pdú
(
chù
));

92 
tmp
 = 
	`ªadb
(
	`˛ps711x_p‹t
(
chù
)Ë& ~(1 << 
off£t
);

93 i‡(
vÆue
)

94 
tmp
 |1 << 
off£t
;

95 
	`wrôeb
(
tmp
, 
	`˛ps711x_p‹t
(
chù
));

96 
	`•ö_u∆ock_úqª°‹e
(&
gpio
->
lock
, 
Êags
);

99 
	}
}

101 
	$gpio_˛ps711x_dú_ö_öv
(
gpio_chù
 *
chù
, 
off£t
)

103 
tmp
;

104 
Êags
;

105 
˛ps711x_gpio
 *
gpio
 = 
	`dev_gë_drvd©a
(
chù
->
dev
);

107 
	`•ö_lock_úqßve
(&
gpio
->
lock
, 
Êags
);

108 
tmp
 = 
	`ªadb
(
	`˛ps711x_pdú
(
chù
)Ë| (1 << 
off£t
);

109 
	`wrôeb
(
tmp
, 
	`˛ps711x_pdú
(
chù
));

110 
	`•ö_u∆ock_úqª°‹e
(&
gpio
->
lock
, 
Êags
);

113 
	}
}

115 
	$gpio_˛ps711x_dú_out_öv
(
gpio_chù
 *
chù
, 
off£t
,

116 
vÆue
)

118 
tmp
;

119 
Êags
;

120 
˛ps711x_gpio
 *
gpio
 = 
	`dev_gë_drvd©a
(
chù
->
dev
);

122 
	`•ö_lock_úqßve
(&
gpio
->
lock
, 
Êags
);

123 
tmp
 = 
	`ªadb
(
	`˛ps711x_pdú
(
chù
)Ë& ~(1 << 
off£t
);

124 
	`wrôeb
(
tmp
, 
	`˛ps711x_pdú
(
chù
));

125 
tmp
 = 
	`ªadb
(
	`˛ps711x_p‹t
(
chù
)Ë& ~(1 << 
off£t
);

126 i‡(
vÆue
)

127 
tmp
 |1 << 
off£t
;

128 
	`wrôeb
(
tmp
, 
	`˛ps711x_p‹t
(
chù
));

129 
	`•ö_u∆ock_úqª°‹e
(&
gpio
->
lock
, 
Êags
);

132 
	}
}

135 *
	m«me
;

136 
	mƒ
;

137 
	möv_dú
;

138 } 
	g˛ps711x_gpio_p‹ts
[] 
	g__öôc⁄°
 = {

146 
__öô
 
	$gpio_˛ps711x_öô
()

148 
i
;

149 
∂©f‹m_devi˚
 *
pdev
;

150 
˛ps711x_gpio
 *
gpio
;

152 
pdev
 = 
	`∂©f‹m_devi˚_Æloc
(
CLPS711X_GPIO_NAME
, 0);

153 i‡(!
pdev
) {

154 
	`¥_îr
("Cannot createÖlatform device: %s\n",

155 
CLPS711X_GPIO_NAME
);

156  -
ENOMEM
;

159 
	`∂©f‹m_devi˚_add
(
pdev
);

161 
gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (
˛ps711x_gpio
),

162 
GFP_KERNEL
);

163 i‡(!
gpio
) {

164 
	`dev_îr
(&
pdev
->
dev
, "GPIOállocating memoryÉrror\n");

165 
	`∂©f‹m_devi˚_uƒegi°î
(
pdev
);

166  -
ENOMEM
;

169 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
gpio
);

171 
	`•ö_lock_öô
(&
gpio
->
lock
);

173 
i
 = 0; i < 
CLPS711X_GPIO_PORTS
; i++) {

174 
gpio
->
chù
[
i
].
ow√r
 = 
THIS_MODULE
;

175 
gpio
->
chù
[
i
].
dev
 = &
pdev
->dev;

176 
gpio
->
chù
[
i
].
œbñ
 = 
˛ps711x_gpio_p‹ts
[i].
«me
;

177 
gpio
->
chù
[
i
].
ba£
 = i * 8;

178 
gpio
->
chù
[
i
].
ngpio
 = 
˛ps711x_gpio_p‹ts
[i].
ƒ
;

179 
gpio
->
chù
[
i
].
gë
 = 
gpio_˛ps711x_gë
;

180 
gpio
->
chù
[
i
].
£t
 = 
gpio_˛ps711x_£t
;

181 i‡(!
˛ps711x_gpio_p‹ts
[
i
].
öv_dú
) {

182 
gpio
->
chù
[
i
].
dúe˘i⁄_öput
 = 
gpio_˛ps711x_dú_ö
;

183 
gpio
->
chù
[
i
].
dúe˘i⁄_ouçut
 = 
gpio_˛ps711x_dú_out
;

185 
gpio
->
chù
[
i
].
dúe˘i⁄_öput
 = 
gpio_˛ps711x_dú_ö_öv
;

186 
gpio
->
chù
[
i
].
dúe˘i⁄_ouçut
 = 
gpio_˛ps711x_dú_out_öv
;

188 
	`WARN_ON
(
	`gpiochù_add
(&
gpio
->
chù
[
i
]));

191 
	`dev_öfo
(&
pdev
->
dev
, "GPIO driver initialized\n");

194 
	}
}

195 
¨ch_öôˇŒ
(
gpio_˛ps711x_öô
);

197 
MODULE_LICENSE
("GPL v2");

198 
MODULE_AUTHOR
("Alexander Shiyan <shc_work@mail.ru>");

199 
MODULE_DESCRIPTION
("CLPS711X GPIO driver");

	@gpio-cs5535.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/•ölock.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/gpio.h
>

16 
	~<löux/io.h
>

17 
	~<löux/cs5535.h
>

18 
	~<asm/m§.h
>

20 
	#DRV_NAME
 "cs5535-gpio"

	)

39 
	#GPIO_DEFAULT_MASK
 0x0F7FFFFF

	)

41 
ul⁄g
 
	gmask
 = 
GPIO_DEFAULT_MASK
;

42 
moduÀ_∑øm_«med
(
mask
, mask, 
ul⁄g
, 0444);

43 
MODULE_PARM_DESC
(
mask
, "GPIO channel mask.");

45 
	scs5535_gpio_chù
 {

46 
gpio_chù
 
	mchù
;

47 
ªsour˚_size_t
 
	mba£
;

49 
∂©f‹m_devi˚
 *
	mpdev
;

50 
•ölock_t
 
	mlock
;

51 } 
	gcs5535_gpio_chù
;

59 
	$îøè_oué
(
cs5535_gpio_chù
 *
chù
, 
u32
 
vÆ
,

60 
ªg
)

62 
addr
 = 
chù
->
ba£
 + 0x80 + 
ªg
;

73 i‡(
ªg
 !
GPIO_POSITIVE_EDGE_STS
 &&Ñeg !
GPIO_NEGATIVE_EDGE_STS
) {

74 i‡(
vÆ
 & 0xffff)

75 
vÆ
 |(
	`öl
(
addr
) & 0xffff);

77 
vÆ
 |(
	`öl
(
addr
) ^ (val >> 16));

79 
	`oué
(
vÆ
, 
addr
);

80 
	}
}

82 
	$__cs5535_gpio_£t
(
cs5535_gpio_chù
 *
chù
, 
off£t
,

83 
ªg
)

85 i‡(
off£t
 < 16)

87 
	`oué
(1 << 
off£t
, 
chù
->
ba£
 + 
ªg
);

90 
	`îøè_oué
(
chù
, 1 << (
off£t
 - 16), 
ªg
);

91 
	}
}

93 
	$cs5535_gpio_£t
(
off£t
, 
ªg
)

95 
cs5535_gpio_chù
 *
chù
 = &cs5535_gpio_chip;

96 
Êags
;

98 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

99 
	`__cs5535_gpio_£t
(
chù
, 
off£t
, 
ªg
);

100 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

101 
	}
}

102 
EXPORT_SYMBOL_GPL
(
cs5535_gpio_£t
);

104 
	$__cs5535_gpio_˛ór
(
cs5535_gpio_chù
 *
chù
, 
off£t
,

105 
ªg
)

107 i‡(
off£t
 < 16)

109 
	`oué
(1 << (
off£t
 + 16), 
chù
->
ba£
 + 
ªg
);

112 
	`îøè_oué
(
chù
, 1 << 
off£t
, 
ªg
);

113 
	}
}

115 
	$cs5535_gpio_˛ór
(
off£t
, 
ªg
)

117 
cs5535_gpio_chù
 *
chù
 = &cs5535_gpio_chip;

118 
Êags
;

120 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

121 
	`__cs5535_gpio_˛ór
(
chù
, 
off£t
, 
ªg
);

122 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

123 
	}
}

124 
EXPORT_SYMBOL_GPL
(
cs5535_gpio_˛ór
);

126 
	$cs5535_gpio_is£t
(
off£t
, 
ªg
)

128 
cs5535_gpio_chù
 *
chù
 = &cs5535_gpio_chip;

129 
Êags
;

130 
vÆ
;

132 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

133 i‡(
off£t
 < 16)

135 
vÆ
 = 
	`öl
(
chù
->
ba£
 + 
ªg
);

138 
vÆ
 = 
	`öl
(
chù
->
ba£
 + 0x80 + 
ªg
);

139 
off£t
 -= 16;

141 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

143  (
vÆ
 & (1 << 
off£t
)) ? 1 : 0;

144 
	}
}

145 
EXPORT_SYMBOL_GPL
(
cs5535_gpio_is£t
);

147 
	$cs5535_gpio_£t_úq
(
group
, 
úq
)

149 
uöt32_t
 
lo
, 
hi
;

151 i‡(
group
 > 7 || 
úq
 > 15)

152  -
EINVAL
;

154 
	`rdm§
(
MSR_PIC_ZSEL_HIGH
, 
lo
, 
hi
);

156 
lo
 &~(0xF << (
group
 * 4));

157 
lo
 |(
úq
 & 0xFË<< (
group
 * 4);

159 
	`wrm§
(
MSR_PIC_ZSEL_HIGH
, 
lo
, 
hi
);

161 
	}
}

162 
EXPORT_SYMBOL_GPL
(
cs5535_gpio_£t_úq
);

164 
	$cs5535_gpio_£tup_evít
(
off£t
, 
∑ú
, 
pme
)

166 
cs5535_gpio_chù
 *
chù
 = &cs5535_gpio_chip;

167 
uöt32_t
 
shi·
 = (
off£t
 % 8) * 4;

168 
Êags
;

169 
uöt32_t
 
vÆ
;

171 i‡(
off£t
 >= 24)

172 
off£t
 = 
GPIO_MAP_W
;

173 i‡(
off£t
 >= 16)

174 
off£t
 = 
GPIO_MAP_Z
;

175 i‡(
off£t
 >= 8)

176 
off£t
 = 
GPIO_MAP_Y
;

178 
off£t
 = 
GPIO_MAP_X
;

180 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

181 
vÆ
 = 
	`öl
(
chù
->
ba£
 + 
off£t
);

184 
vÆ
 &~(0xF << 
shi·
);

187 
vÆ
 |((
∑ú
 & 7Ë<< 
shi·
);

190 i‡(
pme
)

191 
vÆ
 |(1 << (
shi·
 + 3));

193 
	`oué
(
vÆ
, 
chù
->
ba£
 + 
off£t
);

194 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

195 
	}
}

196 
EXPORT_SYMBOL_GPL
(
cs5535_gpio_£tup_evít
);

202 
	$chù_gpio_ªque°
(
gpio_chù
 *
c
, 
off£t
)

204 
cs5535_gpio_chù
 *
chù
 = (cs5535_gpio_chù *Ë
c
;

205 
Êags
;

207 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

210 i‡((
mask
 & (1 << 
off£t
)) == 0) {

211 
	`dev_öfo
(&
chù
->
pdev
->
dev
,

212 "pö %u i†nŸávaûabÀ (check mask)\n", 
off£t
);

213 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

214  -
EINVAL
;

218 
	`__cs5535_gpio_˛ór
(
chù
, 
off£t
, 
GPIO_OUTPUT_AUX1
);

219 
	`__cs5535_gpio_˛ór
(
chù
, 
off£t
, 
GPIO_OUTPUT_AUX2
);

222 
	`__cs5535_gpio_˛ór
(
chù
, 
off£t
, 
GPIO_INPUT_AUX1
);

224 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

227 
	}
}

229 
	$chù_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

231  
	`cs5535_gpio_is£t
(
off£t
, 
GPIO_READ_BACK
);

232 
	}
}

234 
	$chù_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆ
)

236 i‡(
vÆ
)

237 
	`cs5535_gpio_£t
(
off£t
, 
GPIO_OUTPUT_VAL
);

239 
	`cs5535_gpio_˛ór
(
off£t
, 
GPIO_OUTPUT_VAL
);

240 
	}
}

242 
	$chù_dúe˘i⁄_öput
(
gpio_chù
 *
c
, 
off£t
)

244 
cs5535_gpio_chù
 *
chù
 = (cs5535_gpio_chù *Ë
c
;

245 
Êags
;

247 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

248 
	`__cs5535_gpio_£t
(
chù
, 
off£t
, 
GPIO_INPUT_ENABLE
);

249 
	`__cs5535_gpio_˛ór
(
chù
, 
off£t
, 
GPIO_OUTPUT_ENABLE
);

250 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

253 
	}
}

255 
	$chù_dúe˘i⁄_ouçut
(
gpio_chù
 *
c
, 
off£t
, 
vÆ
)

257 
cs5535_gpio_chù
 *
chù
 = (cs5535_gpio_chù *Ë
c
;

258 
Êags
;

260 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

262 
	`__cs5535_gpio_£t
(
chù
, 
off£t
, 
GPIO_INPUT_ENABLE
);

263 
	`__cs5535_gpio_£t
(
chù
, 
off£t
, 
GPIO_OUTPUT_ENABLE
);

264 i‡(
vÆ
)

265 
	`__cs5535_gpio_£t
(
chù
, 
off£t
, 
GPIO_OUTPUT_VAL
);

267 
	`__cs5535_gpio_˛ór
(
chù
, 
off£t
, 
GPIO_OUTPUT_VAL
);

269 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

272 
	}
}

274 c⁄° * c⁄° 
	gcs5535_gpio_«mes
[] = {

280 "GPIO20", "GPIO21", "GPIO22", 
NULL
,

282 "GPIO28", 
NULL
, NULL, NULL,

285 
cs5535_gpio_chù
 
	gcs5535_gpio_chù
 = {

286 .
chù
 = {

287 .
ow√r
 = 
THIS_MODULE
,

288 .
	gœbñ
 = 
DRV_NAME
,

290 .
	gba£
 = 0,

291 .
	gngpio
 = 32,

292 .
	g«mes
 = 
cs5535_gpio_«mes
,

293 .
	gªque°
 = 
chù_gpio_ªque°
,

295 .
	ggë
 = 
chù_gpio_gë
,

296 .
	g£t
 = 
chù_gpio_£t
,

298 .
	gdúe˘i⁄_öput
 = 
chù_dúe˘i⁄_öput
,

299 .
	gdúe˘i⁄_ouçut
 = 
chù_dúe˘i⁄_ouçut
,

303 
	$cs5535_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

305 
ªsour˚
 *
ªs
;

306 
îr
 = -
EIO
;

307 
ul⁄g
 
mask_‹ig
 = 
mask
;

316 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 0);

317 i‡(!
ªs
) {

318 
	`dev_îr
(&
pdev
->
dev
, "can't fetch deviceÑesource info\n");

319 
d⁄e
;

322 i‡(!
	`ªque°_ªgi⁄
(
ªs
->
°¨t
, 
	`ªsour˚_size
‘es), 
pdev
->
«me
)) {

323 
	`dev_îr
(&
pdev
->
dev
, "can'tÑequestÑegion\n");

324 
d⁄e
;

328 
cs5535_gpio_chù
.
ba£
 = 
ªs
->
°¨t
;

329 
cs5535_gpio_chù
.
pdev
 =Ödev;

330 
	`•ö_lock_öô
(&
cs5535_gpio_chù
.
lock
);

332 
	`dev_öfo
(&
pdev
->
dev
, "ª£rvedÑesour˚Ñegi⁄ %pR\n", 
ªs
);

335 
mask
 &= 0x1F7FFFFF;

339 
mask
 &= ~(1 << 28);

341 i‡(
mask_‹ig
 !
mask
)

342 
	`dev_öfo
(&
pdev
->
dev
, "mask changed from 0x%08lXÅo 0x%08lX\n",

343 
mask_‹ig
, 
mask
);

346 
îr
 = 
	`gpiochù_add
(&
cs5535_gpio_chù
.
chù
);

347 i‡(
îr
)

348 
ªÀa£_ªgi⁄
;

352 
ªÀa£_ªgi⁄
:

353 
	`ªÀa£_ªgi⁄
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

354 
d⁄e
:

355  
îr
;

356 
	}
}

358 
	$cs5535_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

360 
ªsour˚
 *
r
;

361 
îr
;

363 
îr
 = 
	`gpiochù_ªmove
(&
cs5535_gpio_chù
.
chù
);

364 i‡(
îr
) {

366 
	`dev_îr
(&
pdev
->
dev
, "unableÅoÑemove gpio_chip?\n");

367  
îr
;

370 
r
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 0);

371 
	`ªÀa£_ªgi⁄
(
r
->
°¨t
, 
	`ªsour˚_size
(r));

373 
	}
}

375 
∂©f‹m_drivî
 
	gcs5535_gpio_drivî
 = {

376 .
drivî
 = {

377 .
«me
 = 
DRV_NAME
,

378 .
	gow√r
 = 
THIS_MODULE
,

380 .
	g¥obe
 = 
cs5535_gpio_¥obe
,

381 .
	gªmove
 = 
cs5535_gpio_ªmove
,

384 
moduÀ_∂©f‹m_drivî
(
cs5535_gpio_drivî
);

386 
MODULE_AUTHOR
("Andres Salomon <dilinger@queued.net>");

387 
MODULE_DESCRIPTION
("AMD CS5535/CS5536 GPIO driver");

388 
MODULE_LICENSE
("GPL");

389 
MODULE_ALIAS
("∂©f‹m:" 
DRV_NAME
);

	@gpio-da9052.c

14 
	~<löux/moduÀ.h
>

15 
	~<löux/fs.h
>

16 
	~<löux/uac˚ss.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/gpio.h
>

19 
	~<löux/sysˇŒs.h
>

20 
	~<löux/£q_fûe.h
>

22 
	~<löux/mfd/da9052/da9052.h
>

23 
	~<löux/mfd/da9052/ªg.h
>

24 
	~<löux/mfd/da9052/pd©a.h
>

26 
	#DA9052_INPUT
 1

	)

27 
	#DA9052_OUTPUT_OPENDRAIN
 2

	)

28 
	#DA9052_OUTPUT_PUSHPULL
 3

	)

30 
	#DA9052_SUPPLY_VDD_IO1
 0

	)

32 
	#DA9052_DEBOUNCING_OFF
 0

	)

33 
	#DA9052_DEBOUNCING_ON
 1

	)

35 
	#DA9052_OUTPUT_LOWLEVEL
 0

	)

37 
	#DA9052_ACTIVE_LOW
 0

	)

38 
	#DA9052_ACTIVE_HIGH
 1

	)

40 
	#DA9052_GPIO_MAX_PORTS_PER_REGISTER
 8

	)

41 
	#DA9052_GPIO_SHIFT_COUNT
(
no
Ë“o%8)

	)

42 
	#DA9052_GPIO_MASK_UPPER_NIBBLE
 0xF0

	)

43 
	#DA9052_GPIO_MASK_LOWER_NIBBLE
 0x0F

	)

44 
	#DA9052_GPIO_NIBBLE_SHIFT
 4

	)

45 
	#DA9052_IRQ_GPI0
 16

	)

46 
	#DA9052_GPIO_ODD_SHIFT
 7

	)

47 
	#DA9052_GPIO_EVEN_SHIFT
 3

	)

49 
	sda9052_gpio
 {

50 
da9052
 *
	mda9052
;

51 
gpio_chù
 
	mgp
;

54 
ölöe
 
da9052_gpio
 *
	$to_da9052_gpio
(
gpio_chù
 *
chù
)

56  
	`c⁄èöî_of
(
chù
, 
da9052_gpio
, 
gp
);

57 
	}
}

59 
	$da9052_gpio_p‹t_odd
(
off£t
)

61  
off£t
 % 2;

62 
	}
}

64 
	$da9052_gpio_gë
(
gpio_chù
 *
gc
, 
off£t
)

66 
da9052_gpio
 *
gpio
 = 
	`to_da9052_gpio
(
gc
);

67 
da9052_p‹t_dúe˘i⁄
 = 0;

68 
ªt
;

70 
ªt
 = 
	`da9052_ªg_ªad
(
gpio
->
da9052
,

71 
DA9052_GPIO_0_1_REG
 + (
off£t
 >> 1));

72 i‡(
ªt
 < 0)

73  
ªt
;

75 i‡(
	`da9052_gpio_p‹t_odd
(
off£t
)) {

76 
da9052_p‹t_dúe˘i⁄
 = 
ªt
 & 
DA9052_GPIO_ODD_PORT_PIN
;

77 
da9052_p‹t_dúe˘i⁄
 >>= 4;

79 
da9052_p‹t_dúe˘i⁄
 = 
ªt
 & 
DA9052_GPIO_EVEN_PORT_PIN
;

82 
da9052_p‹t_dúe˘i⁄
) {

83 
DA9052_INPUT
:

84 i‡(
off£t
 < 
DA9052_GPIO_MAX_PORTS_PER_REGISTER
)

85 
ªt
 = 
	`da9052_ªg_ªad
(
gpio
->
da9052
,

86 
DA9052_STATUS_C_REG
);

88 
ªt
 = 
	`da9052_ªg_ªad
(
gpio
->
da9052
,

89 
DA9052_STATUS_D_REG
);

90 i‡(
ªt
 < 0)

91  
ªt
;

92 i‡(
ªt
 & (1 << 
	`DA9052_GPIO_SHIFT_COUNT
(
off£t
)))

96 
DA9052_OUTPUT_PUSHPULL
:

97 i‡(
	`da9052_gpio_p‹t_odd
(
off£t
))

98  
ªt
 & 
DA9052_GPIO_ODD_PORT_MODE
;

100  
ªt
 & 
DA9052_GPIO_EVEN_PORT_MODE
;

102  -
EINVAL
;

104 
	}
}

106 
	$da9052_gpio_£t
(
gpio_chù
 *
gc
, 
off£t
, 
vÆue
)

108 
da9052_gpio
 *
gpio
 = 
	`to_da9052_gpio
(
gc
);

109 
ªt
;

111 i‡(
	`da9052_gpio_p‹t_odd
(
off£t
)) {

112 
ªt
 = 
	`da9052_ªg_upd©e
(
gpio
->
da9052
, (
off£t
 >> 1) +

113 
DA9052_GPIO_0_1_REG
,

114 
DA9052_GPIO_ODD_PORT_MODE
,

115 
vÆue
 << 
DA9052_GPIO_ODD_SHIFT
);

116 i‡(
ªt
 != 0)

117 
	`dev_îr
(
gpio
->
da9052
->
dev
,

119 
ªt
);

121 
ªt
 = 
	`da9052_ªg_upd©e
(
gpio
->
da9052
, (
off£t
 >> 1) +

122 
DA9052_GPIO_0_1_REG
,

123 
DA9052_GPIO_EVEN_PORT_MODE
,

124 
vÆue
 << 
DA9052_GPIO_EVEN_SHIFT
);

125 i‡(
ªt
 != 0)

126 
	`dev_îr
(
gpio
->
da9052
->
dev
,

128 
ªt
);

130 
	}
}

132 
	$da9052_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gc
, 
off£t
)

134 
da9052_gpio
 *
gpio
 = 
	`to_da9052_gpio
(
gc
);

135 
ªgi°î_vÆue
;

136 
ªt
;

139 
ªgi°î_vÆue
 = 
DA9052_INPUT
 | 
DA9052_ACTIVE_LOW
 << 2 |

140 
DA9052_DEBOUNCING_ON
 << 3;

142 i‡(
	`da9052_gpio_p‹t_odd
(
off£t
))

143 
ªt
 = 
	`da9052_ªg_upd©e
(
gpio
->
da9052
, (
off£t
 >> 1) +

144 
DA9052_GPIO_0_1_REG
,

145 
DA9052_GPIO_MASK_UPPER_NIBBLE
,

146 (
ªgi°î_vÆue
 <<

147 
DA9052_GPIO_NIBBLE_SHIFT
));

149 
ªt
 = 
	`da9052_ªg_upd©e
(
gpio
->
da9052
, (
off£t
 >> 1) +

150 
DA9052_GPIO_0_1_REG
,

151 
DA9052_GPIO_MASK_LOWER_NIBBLE
,

152 
ªgi°î_vÆue
);

154  
ªt
;

155 
	}
}

157 
	$da9052_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
,

158 
off£t
, 
vÆue
)

160 
da9052_gpio
 *
gpio
 = 
	`to_da9052_gpio
(
gc
);

161 
ªgi°î_vÆue
;

162 
ªt
;

165 
ªgi°î_vÆue
 = 
DA9052_OUTPUT_PUSHPULL
 | 
DA9052_SUPPLY_VDD_IO1
 << 2 |

166 
vÆue
 << 3;

168 i‡(
	`da9052_gpio_p‹t_odd
(
off£t
))

169 
ªt
 = 
	`da9052_ªg_upd©e
(
gpio
->
da9052
, (
off£t
 >> 1) +

170 
DA9052_GPIO_0_1_REG
,

171 
DA9052_GPIO_MASK_UPPER_NIBBLE
,

172 (
ªgi°î_vÆue
 <<

173 
DA9052_GPIO_NIBBLE_SHIFT
));

175 
ªt
 = 
	`da9052_ªg_upd©e
(
gpio
->
da9052
, (
off£t
 >> 1) +

176 
DA9052_GPIO_0_1_REG
,

177 
DA9052_GPIO_MASK_LOWER_NIBBLE
,

178 
ªgi°î_vÆue
);

180  
ªt
;

181 
	}
}

183 
	$da9052_gpio_to_úq
(
gpio_chù
 *
gc
, 
u32
 
off£t
)

185 
da9052_gpio
 *
gpio
 = 
	`to_da9052_gpio
(
gc
);

186 
da9052
 *da9052 = 
gpio
->da9052;

188 
úq
;

190 
úq
 = 
	`ªgm≠_úq_gë_vúq
(
da9052
->
úq_d©a
, 
DA9052_IRQ_GPI0
 + 
off£t
);

192  
úq
;

193 
	}
}

195 
gpio_chù
 
	gª„ªn˚_gp
 = {

196 .
œbñ
 = "da9052-gpio",

197 .
	gow√r
 = 
THIS_MODULE
,

198 .
	ggë
 = 
da9052_gpio_gë
,

199 .
	g£t
 = 
da9052_gpio_£t
,

200 .
	gdúe˘i⁄_öput
 = 
da9052_gpio_dúe˘i⁄_öput
,

201 .
	gdúe˘i⁄_ouçut
 = 
da9052_gpio_dúe˘i⁄_ouçut
,

202 .
	gto_úq
 = 
da9052_gpio_to_úq
,

203 .
	gˇn_¶ìp
 = 1,

204 .
	gngpio
 = 16,

205 .
	gba£
 = -1,

208 
	$da9052_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

210 
da9052_gpio
 *
gpio
;

211 
da9052_pd©a
 *
pd©a
;

212 
ªt
;

214 
gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*gpio), 
GFP_KERNEL
);

215 i‡(
gpio
 =
NULL
)

216  -
ENOMEM
;

218 
gpio
->
da9052
 = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

219 
pd©a
 = 
gpio
->
da9052
->
dev
->
∂©f‹m_d©a
;

221 
gpio
->
gp
 = 
ª„ªn˚_gp
;

222 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

223 
gpio
->
gp
.
ba£
 = 
pd©a
->
gpio_ba£
;

225 
ªt
 = 
	`gpiochù_add
(&
gpio
->
gp
);

226 i‡(
ªt
 < 0) {

227 
	`dev_îr
(&
pdev
->
dev
, "CouldÇŸÑegi°î gpiochù, %d\n", 
ªt
);

228  
ªt
;

231 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
gpio
);

234 
	}
}

236 
	$da9052_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

238 
da9052_gpio
 *
gpio
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

240  
	`gpiochù_ªmove
(&
gpio
->
gp
);

241 
	}
}

243 
∂©f‹m_drivî
 
	gda9052_gpio_drivî
 = {

244 .
¥obe
 = 
da9052_gpio_¥obe
,

245 .
	gªmove
 = 
da9052_gpio_ªmove
,

246 .
	gdrivî
 = {

247 .
«me
 = "da9052-gpio",

248 .
	gow√r
 = 
THIS_MODULE
,

252 
moduÀ_∂©f‹m_drivî
(
da9052_gpio_drivî
);

254 
MODULE_AUTHOR
("David Dajun Chen <dchen@diasemi.com>");

255 
MODULE_DESCRIPTION
("DA9052 GPIO Device Driver");

256 
MODULE_LICENSE
("GPL");

257 
MODULE_ALIAS
("platform:da9052-gpio");

	@gpio-da9055.c

14 
	~<löux/moduÀ.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/gpio.h
>

18 
	~<löux/mfd/da9055/c‹e.h
>

19 
	~<löux/mfd/da9055/ªg.h
>

20 
	~<löux/mfd/da9055/pd©a.h
>

22 
	#DA9055_VDD_IO
 0x0

	)

23 
	#DA9055_PUSH_PULL
 0x3

	)

24 
	#DA9055_ACT_LOW
 0x0

	)

25 
	#DA9055_GPI
 0x1

	)

26 
	#DA9055_PORT_MASK
 0x3

	)

27 
	#DA9055_PORT_SHIFT
(
off£t
Ë(4 * (off£à% 2))

	)

29 
	#DA9055_INPUT
 
DA9055_GPI


	)

30 
	#DA9055_OUTPUT
 
DA9055_PUSH_PULL


	)

31 
	#DA9055_IRQ_GPI0
 3

	)

33 
	sda9055_gpio
 {

34 
da9055
 *
	mda9055
;

35 
gpio_chù
 
	mgp
;

38 
ölöe
 
da9055_gpio
 *
	$to_da9055_gpio
(
gpio_chù
 *
chù
)

40  
	`c⁄èöî_of
(
chù
, 
da9055_gpio
, 
gp
);

41 
	}
}

43 
	$da9055_gpio_gë
(
gpio_chù
 *
gc
, 
off£t
)

45 
da9055_gpio
 *
gpio
 = 
	`to_da9055_gpio
(
gc
);

46 
gpio_dúe˘i⁄
 = 0;

47 
ªt
;

50 
ªt
 = 
	`da9055_ªg_ªad
(
gpio
->
da9055
, (
off£t
 >> 1Ë+ 
DA9055_REG_GPIO0_1
);

51 i‡(
ªt
 < 0)

52  
ªt
;

54 
gpio_dúe˘i⁄
 = 
ªt
 & (
DA9055_PORT_MASK
Ë<< 
	`DA9055_PORT_SHIFT
(
off£t
);

55 
gpio_dúe˘i⁄
 >>
	`DA9055_PORT_SHIFT
(
off£t
);

56 
gpio_dúe˘i⁄
) {

57 
DA9055_INPUT
:

58 
ªt
 = 
	`da9055_ªg_ªad
(
gpio
->
da9055
, 
DA9055_REG_STATUS_B
);

59 i‡(
ªt
 < 0)

60  
ªt
;

62 
DA9055_OUTPUT
:

63 
ªt
 = 
	`da9055_ªg_ªad
(
gpio
->
da9055
, 
DA9055_REG_GPIO_MODE0_2
);

64 i‡(
ªt
 < 0)

65  
ªt
;

68  
ªt
 & (1 << 
off£t
);

70 
	}
}

72 
	$da9055_gpio_£t
(
gpio_chù
 *
gc
, 
off£t
, 
vÆue
)

74 
da9055_gpio
 *
gpio
 = 
	`to_da9055_gpio
(
gc
);

76 
	`da9055_ªg_upd©e
(
gpio
->
da9055
,

77 
DA9055_REG_GPIO_MODE0_2
,

78 1 << 
off£t
,

79 
vÆue
 << 
off£t
);

80 
	}
}

82 
	$da9055_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gc
, 
off£t
)

84 
da9055_gpio
 *
gpio
 = 
	`to_da9055_gpio
(
gc
);

85 
ªg_byã
;

87 
ªg_byã
 = (
DA9055_ACT_LOW
 | 
DA9055_GPI
)

88 << 
	`DA9055_PORT_SHIFT
(
off£t
);

90  
	`da9055_ªg_upd©e
(
gpio
->
da9055
, (
off£t
 >> 1) +

91 
DA9055_REG_GPIO0_1
,

92 
DA9055_PORT_MASK
 <<

93 
	`DA9055_PORT_SHIFT
(
off£t
),

94 
ªg_byã
);

95 
	}
}

97 
	$da9055_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
,

98 
off£t
, 
vÆue
)

100 
da9055_gpio
 *
gpio
 = 
	`to_da9055_gpio
(
gc
);

101 
ªg_byã
;

102 
ªt
;

104 
ªg_byã
 = (
DA9055_VDD_IO
 | 
DA9055_PUSH_PULL
)

105 << 
	`DA9055_PORT_SHIFT
(
off£t
);

107 
ªt
 = 
	`da9055_ªg_upd©e
(
gpio
->
da9055
, (
off£t
 >> 1) +

108 
DA9055_REG_GPIO0_1
,

109 
DA9055_PORT_MASK
 <<

110 
	`DA9055_PORT_SHIFT
(
off£t
),

111 
ªg_byã
);

112 i‡(
ªt
 < 0)

113  
ªt
;

115 
	`da9055_gpio_£t
(
gc
, 
off£t
, 
vÆue
);

118 
	}
}

120 
	$da9055_gpio_to_úq
(
gpio_chù
 *
gc
, 
u32
 
off£t
)

122 
da9055_gpio
 *
gpio
 = 
	`to_da9055_gpio
(
gc
);

123 
da9055
 *da9055 = 
gpio
->da9055;

125  
	`ªgm≠_úq_gë_vúq
(
da9055
->
úq_d©a
,

126 
DA9055_IRQ_GPI0
 + 
off£t
);

127 
	}
}

129 
gpio_chù
 
	gª„ªn˚_gp
 = {

130 .
œbñ
 = "da9055-gpio",

131 .
	gow√r
 = 
THIS_MODULE
,

132 .
	ggë
 = 
da9055_gpio_gë
,

133 .
	g£t
 = 
da9055_gpio_£t
,

134 .
	gdúe˘i⁄_öput
 = 
da9055_gpio_dúe˘i⁄_öput
,

135 .
	gdúe˘i⁄_ouçut
 = 
da9055_gpio_dúe˘i⁄_ouçut
,

136 .
	gto_úq
 = 
da9055_gpio_to_úq
,

137 .
	gˇn_¶ìp
 = 1,

138 .
	gngpio
 = 3,

139 .
	gba£
 = -1,

142 
	$da9055_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

144 
da9055_gpio
 *
gpio
;

145 
da9055_pd©a
 *
pd©a
;

146 
ªt
;

148 
gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*gpio), 
GFP_KERNEL
);

149 i‡(
gpio
 =
NULL
)

150  -
ENOMEM
;

152 
gpio
->
da9055
 = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

153 
pd©a
 = 
gpio
->
da9055
->
dev
->
∂©f‹m_d©a
;

155 
gpio
->
gp
 = 
ª„ªn˚_gp
;

156 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

157 
gpio
->
gp
.
ba£
 = 
pd©a
->
gpio_ba£
;

159 
ªt
 = 
	`gpiochù_add
(&
gpio
->
gp
);

160 i‡(
ªt
 < 0) {

161 
	`dev_îr
(&
pdev
->
dev
, "CouldÇŸÑegi°î gpiochù, %d\n", 
ªt
);

162 
îr_mem
;

165 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
gpio
);

169 
îr_mem
:

170  
ªt
;

171 
	}
}

173 
	$da9055_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

175 
da9055_gpio
 *
gpio
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

177  
	`gpiochù_ªmove
(&
gpio
->
gp
);

178 
	}
}

180 
∂©f‹m_drivî
 
	gda9055_gpio_drivî
 = {

181 .
¥obe
 = 
da9055_gpio_¥obe
,

182 .
	gªmove
 = 
da9055_gpio_ªmove
,

183 .
	gdrivî
 = {

184 .
«me
 = "da9055-gpio",

185 .
	gow√r
 = 
THIS_MODULE
,

189 
__öô
 
	$da9055_gpio_öô
()

191  
	`∂©f‹m_drivî_ªgi°î
(&
da9055_gpio_drivî
);

192 
	}
}

193 
subsys_öôˇŒ
(
da9055_gpio_öô
);

195 
__exô
 
	$da9055_gpio_exô
()

197 
	`∂©f‹m_drivî_uƒegi°î
(&
da9055_gpio_drivî
);

198 
	}
}

199 
moduÀ_exô
(
da9055_gpio_exô
);

201 
MODULE_AUTHOR
("David Dajun Chen <dchen@diasemi.com>");

202 
MODULE_DESCRIPTION
("DA9055 GPIO Device Driver");

203 
MODULE_LICENSE
("GPL");

204 
MODULE_ALIAS
("platform:da9055-gpio");

	@gpio-davinci.c

12 
	~<löux/gpio.h
>

13 
	~<löux/î∫o.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/˛k.h
>

16 
	~<löux/îr.h
>

17 
	~<löux/io.h
>

19 
	~<asm/mach/úq.h
>

21 
	sdavöci_gpio_ªgs
 {

22 
u32
 
	mdú
;

23 
u32
 
	mout_d©a
;

24 
u32
 
	m£t_d©a
;

25 
u32
 
	m˛r_d©a
;

26 
u32
 
	mö_d©a
;

27 
u32
 
	m£t_risög
;

28 
u32
 
	m˛r_risög
;

29 
u32
 
	m£t_ÁŒög
;

30 
u32
 
	m˛r_ÁŒög
;

31 
u32
 
	möt°©
;

34 
	#chù2c⁄åﬁÀr
(
chù
) \

35 
	`c⁄èöî_of
(
chù
, 
davöci_gpio_c⁄åﬁÀr
, chù)

	)

37 
davöci_gpio_c⁄åﬁÀr
 
	gchùs
[
DIV_ROUND_UP
(
DAVINCI_N_GPIO
, 32)];

38 
__iomem
 *
	ggpio_ba£
;

40 
davöci_gpio_ªgs
 
__iomem
 
__öô
 *
	$gpio2ªgs
(
gpio
)

42 
__iomem
 *
±r
;

44 i‡(
gpio
 < 32 * 1)

45 
±r
 = 
gpio_ba£
 + 0x10;

46 i‡(
gpio
 < 32 * 2)

47 
±r
 = 
gpio_ba£
 + 0x38;

48 i‡(
gpio
 < 32 * 3)

49 
±r
 = 
gpio_ba£
 + 0x60;

50 i‡(
gpio
 < 32 * 4)

51 
±r
 = 
gpio_ba£
 + 0x88;

52 i‡(
gpio
 < 32 * 5)

53 
±r
 = 
gpio_ba£
 + 0xb0;

55 
±r
 = 
NULL
;

56  
±r
;

57 
	}
}

59 
ölöe
 
davöci_gpio_ªgs
 
__iomem
 *
	$úq2ªgs
(
úq
)

61 
davöci_gpio_ªgs
 
__iomem
 *
g
;

63 
g
 = (
__f‹˚
 
davöci_gpio_ªgs
 
__iomem
 *)
	`úq_gë_chù_d©a
(
úq
);

65  
g
;

66 
	}
}

68 
__öô
 
davöci_gpio_úq_£tup
();

73 
ölöe
 
	$__davöci_dúe˘i⁄
(
gpio_chù
 *
chù
,

74 
off£t
, 
boﬁ
 
out
, 
vÆue
)

76 
davöci_gpio_c⁄åﬁÀr
 *
d
 = 
	`chù2c⁄åﬁÀr
(
chù
);

77 
davöci_gpio_ªgs
 
__iomem
 *
g
 = 
d
->
ªgs
;

78 
Êags
;

79 
u32
 
ãmp
;

80 
u32
 
mask
 = 1 << 
off£t
;

82 
	`•ö_lock_úqßve
(&
d
->
lock
, 
Êags
);

83 
ãmp
 = 
	`__øw_ªadl
(&
g
->
dú
);

84 i‡(
out
) {

85 
ãmp
 &~
mask
;

86 
	`__øw_wrôñ
(
mask
, 
vÆue
 ? &
g
->
£t_d©a
 : &g->
˛r_d©a
);

88 
ãmp
 |
mask
;

90 
	`__øw_wrôñ
(
ãmp
, &
g
->
dú
);

91 
	`•ö_u∆ock_úqª°‹e
(&
d
->
lock
, 
Êags
);

94 
	}
}

96 
	$davöci_dúe˘i⁄_ö
(
gpio_chù
 *
chù
, 
off£t
)

98  
	`__davöci_dúe˘i⁄
(
chù
, 
off£t
, 
Ál£
, 0);

99 
	}
}

102 
	$davöci_dúe˘i⁄_out
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

104  
	`__davöci_dúe˘i⁄
(
chù
, 
off£t
, 
åue
, 
vÆue
);

105 
	}
}

114 
	$davöci_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

116 
davöci_gpio_c⁄åﬁÀr
 *
d
 = 
	`chù2c⁄åﬁÀr
(
chù
);

117 
davöci_gpio_ªgs
 
__iomem
 *
g
 = 
d
->
ªgs
;

119  (1 << 
off£t
Ë& 
	`__øw_ªadl
(&
g
->
ö_d©a
);

120 
	}
}

126 
	$davöci_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

128 
davöci_gpio_c⁄åﬁÀr
 *
d
 = 
	`chù2c⁄åﬁÀr
(
chù
);

129 
davöci_gpio_ªgs
 
__iomem
 *
g
 = 
d
->
ªgs
;

131 
	`__øw_wrôñ
((1 << 
off£t
), 
vÆue
 ? &
g
->
£t_d©a
 : &g->
˛r_d©a
);

132 
	}
}

134 
__öô
 
	$davöci_gpio_£tup
()

136 
i
, 
ba£
;

137 
ngpio
;

138 
davöci_soc_öfo
 *
soc_öfo
 = &davinci_soc_info;

139 
davöci_gpio_ªgs
 *
ªgs
;

141 i‡(
soc_öfo
->
gpio_ty≥
 !
GPIO_TYPE_DAVINCI
)

149 
ngpio
 = 
soc_öfo
->
gpio_num
;

150 i‡(
ngpio
 == 0) {

151 
	`¥_îr
("GPIO setup: how many GPIOs?\n");

152  -
EINVAL
;

155 i‡(
	`WARN_ON
(
DAVINCI_N_GPIO
 < 
ngpio
))

156 
ngpio
 = 
DAVINCI_N_GPIO
;

158 
gpio_ba£
 = 
	`i‹em≠
(
soc_öfo
->gpio_ba£, 
SZ_4K
);

159 i‡(
	`WARN_ON
(!
gpio_ba£
))

160  -
ENOMEM
;

162 
i
 = 0, 
ba£
 = 0; ba£ < 
ngpio
; i++, base += 32) {

163 
chùs
[
i
].
chù
.
œbñ
 = "DaVinci";

165 
chùs
[
i
].
chù
.
dúe˘i⁄_öput
 = 
davöci_dúe˘i⁄_ö
;

166 
chùs
[
i
].
chù
.
gë
 = 
davöci_gpio_gë
;

167 
chùs
[
i
].
chù
.
dúe˘i⁄_ouçut
 = 
davöci_dúe˘i⁄_out
;

168 
chùs
[
i
].
chù
.
£t
 = 
davöci_gpio_£t
;

170 
chùs
[
i
].
chù
.
ba£
 = base;

171 
chùs
[
i
].
chù
.
ngpio
 =Çgpiÿ- 
ba£
;

172 i‡(
chùs
[
i
].
chù
.
ngpio
 > 32)

173 
chùs
[
i
].
chù
.
ngpio
 = 32;

175 
	`•ö_lock_öô
(&
chùs
[
i
].
lock
);

177 
ªgs
 = 
	`gpio2ªgs
(
ba£
);

178 
chùs
[
i
].
ªgs
 =Ñegs;

179 
chùs
[
i
].
£t_d©a
 = &
ªgs
->set_data;

180 
chùs
[
i
].
˛r_d©a
 = &
ªgs
->clr_data;

181 
chùs
[
i
].
ö_d©a
 = &
ªgs
->in_data;

183 
	`gpiochù_add
(&
chùs
[
i
].
chù
);

186 
soc_öfo
->
gpio_˘Ãs
 = 
chùs
;

187 
soc_öfo
->
gpio_˘Ãs_num
 = 
	`DIV_ROUND_UP
(
ngpio
, 32);

189 
	`davöci_gpio_úq_£tup
();

191 
	}
}

192 
puª_öôˇŒ
(
davöci_gpio_£tup
);

206 
	$gpio_úq_dißbÀ
(
úq_d©a
 *
d
)

208 
davöci_gpio_ªgs
 
__iomem
 *
g
 = 
	`úq2ªgs
(
d
->
úq
);

209 
u32
 
mask
 = (u32Ë
	`úq_d©a_gë_úq_h™dÀr_d©a
(
d
);

211 
	`__øw_wrôñ
(
mask
, &
g
->
˛r_ÁŒög
);

212 
	`__øw_wrôñ
(
mask
, &
g
->
˛r_risög
);

213 
	}
}

215 
	$gpio_úq_íabÀ
(
úq_d©a
 *
d
)

217 
davöci_gpio_ªgs
 
__iomem
 *
g
 = 
	`úq2ªgs
(
d
->
úq
);

218 
u32
 
mask
 = (u32Ë
	`úq_d©a_gë_úq_h™dÀr_d©a
(
d
);

219 
°©us
 = 
	`úqd_gë_åiggî_ty≥
(
d
);

221 
°©us
 &
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
;

222 i‡(!
°©us
)

223 
°©us
 = 
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
;

225 i‡(
°©us
 & 
IRQ_TYPE_EDGE_FALLING
)

226 
	`__øw_wrôñ
(
mask
, &
g
->
£t_ÁŒög
);

227 i‡(
°©us
 & 
IRQ_TYPE_EDGE_RISING
)

228 
	`__øw_wrôñ
(
mask
, &
g
->
£t_risög
);

229 
	}
}

231 
	$gpio_úq_ty≥
(
úq_d©a
 *
d
, 
åiggî
)

233 i‡(
åiggî
 & ~(
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
))

234  -
EINVAL
;

237 
	}
}

239 
úq_chù
 
	ggpio_úqchù
 = {

240 .
«me
 = "GPIO",

241 .
	gúq_íabÀ
 = 
gpio_úq_íabÀ
,

242 .
	gúq_dißbÀ
 = 
gpio_úq_dißbÀ
,

243 .
	gúq_£t_ty≥
 = 
gpio_úq_ty≥
,

244 .
	gÊags
 = 
IRQCHIP_SET_TYPE_MASKED
,

248 
	$gpio_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

250 
davöci_gpio_ªgs
 
__iomem
 *
g
;

251 
u32
 
mask
 = 0xffff;

252 
davöci_gpio_c⁄åﬁÀr
 *
d
;

254 
d
 = (
davöci_gpio_c⁄åﬁÀr
 *)
	`úq_desc_gë_h™dÀr_d©a
(
desc
);

255 
g
 = (
davöci_gpio_ªgs
 
__iomem
 *)
d
->
ªgs
;

258 i‡(
úq
 & 1)

259 
mask
 <<= 16;

262 
desc
->
úq_d©a
.
chù
->
	`úq_mask
(&desc->irq_data);

263 
desc
->
úq_d©a
.
chù
->
	`úq_ack
(&desc->irq_data);

265 
u32
 
°©us
;

266 
n
;

267 
ªs
;

270 
°©us
 = 
	`__øw_ªadl
(&
g
->
öt°©
Ë& 
mask
;

271 i‡(!
°©us
)

273 
	`__øw_wrôñ
(
°©us
, &
g
->
öt°©
);

276 
n
 = 
d
->
úq_ba£
;

277 i‡(
úq
 & 1) {

278 
n
 += 16;

279 
°©us
 >>= 16;

282 
°©us
) {

283 
ªs
 = 
	`ffs
(
°©us
);

284 
n
 +
ªs
;

285 
	`gíîic_h™dÀ_úq
(
n
 - 1);

286 
°©us
 >>
ªs
;

289 
desc
->
úq_d©a
.
chù
->
	`úq_unmask
(&desc->irq_data);

291 
	}
}

293 
	$gpio_to_úq_b™ked
(
gpio_chù
 *
chù
, 
off£t
)

295 
davöci_gpio_c⁄åﬁÀr
 *
d
 = 
	`chù2c⁄åﬁÀr
(
chù
);

297 i‡(
d
->
úq_ba£
 >= 0)

298  
d
->
úq_ba£
 + 
off£t
;

300  -
ENODEV
;

301 
	}
}

303 
	$gpio_to_úq_unb™ked
(
gpio_chù
 *
chù
, 
off£t
)

305 
davöci_soc_öfo
 *
soc_öfo
 = &davinci_soc_info;

310 i‡(
off£t
 < 
soc_öfo
->
gpio_unb™ked
)

311  
soc_öfo
->
gpio_úq
 + 
off£t
;

313  -
ENODEV
;

314 
	}
}

316 
	$gpio_úq_ty≥_unb™ked
(
úq_d©a
 *
d©a
, 
åiggî
)

318 
davöci_gpio_c⁄åﬁÀr
 *
d
;

319 
davöci_gpio_ªgs
 
__iomem
 *
g
;

320 
davöci_soc_öfo
 *
soc_öfo
 = &davinci_soc_info;

321 
u32
 
mask
;

323 
d
 = (
davöci_gpio_c⁄åﬁÀr
 *)
d©a
->
h™dÀr_d©a
;

324 
g
 = (
davöci_gpio_ªgs
 
__iomem
 *)
d
->
ªgs
;

325 
mask
 = 
	`__gpio_mask
(
d©a
->
úq
 - 
soc_öfo
->
gpio_úq
);

327 i‡(
åiggî
 & ~(
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
))

328  -
EINVAL
;

330 
	`__øw_wrôñ
(
mask
, (
åiggî
 & 
IRQ_TYPE_EDGE_FALLING
)

331 ? &
g
->
£t_ÁŒög
 : &g->
˛r_ÁŒög
);

332 
	`__øw_wrôñ
(
mask
, (
åiggî
 & 
IRQ_TYPE_EDGE_RISING
)

333 ? &
g
->
£t_risög
 : &g->
˛r_risög
);

336 
	}
}

346 
__öô
 
	$davöci_gpio_úq_£tup
()

348 
gpio
, 
úq
, 
b™k
;

349 
˛k
 *clk;

350 
u32
 
böãn
 = 0;

351 
ngpio
, 
b™k_úq
;

352 
davöci_soc_öfo
 *
soc_öfo
 = &davinci_soc_info;

353 
davöci_gpio_ªgs
 
__iomem
 *
g
;

355 
ngpio
 = 
soc_öfo
->
gpio_num
;

357 
b™k_úq
 = 
soc_öfo
->
gpio_úq
;

358 i‡(
b™k_úq
 == 0) {

359 
	`¥ötk
(
KERN_ERR
 "Don't know first GPIO bank IRQ.\n");

360  -
EINVAL
;

363 
˛k
 = 
	`˛k_gë
(
NULL
, "gpio");

364 i‡(
	`IS_ERR
(
˛k
)) {

365 
	`¥ötk
(
KERN_ERR
 "Error %ld getting gpio clock?\n",

366 
	`PTR_ERR
(
˛k
));

367  
	`PTR_ERR
(
˛k
);

369 
	`˛k_¥ï¨e_íabÀ
(
˛k
);

376 
gpio
 = 0, 
b™k
 = 0; gpiÿ< 
ngpio
; bank++, gpio += 32) {

377 
chùs
[
b™k
].
chù
.
to_úq
 = 
gpio_to_úq_b™ked
;

378 
chùs
[
b™k
].
úq_ba£
 = 
soc_öfo
->
gpio_unb™ked


379 ? -
EINVAL


380 : (
soc_öfo
->
ötc_úq_num
 + 
gpio
);

388 i‡(
soc_öfo
->
gpio_unb™ked
) {

389 
úq_chù_ty≥
 
gpio_unb™ked
;

392 
chùs
[0].
chù
.
to_úq
 = 
gpio_to_úq_unb™ked
;

393 
böãn
 = 
	`BIT
(0);

396 
úq
 = 
b™k_úq
;

397 
gpio_unb™ked
 = *
	`c⁄èöî_of
(
	`úq_gë_chù
(
úq
),

398 
úq_chù_ty≥
, 
chù
);

399 
gpio_unb™ked
.
chù
.
«me
 = "GPIO-AINTC";

400 
gpio_unb™ked
.
chù
.
úq_£t_ty≥
 = 
gpio_úq_ty≥_unb™ked
;

403 
g
 = 
	`gpio2ªgs
(0);

404 
	`__øw_wrôñ
(~0, &
g
->
£t_ÁŒög
);

405 
	`__øw_wrôñ
(~0, &
g
->
£t_risög
);

408 
gpio
 = 0; gpiÿ< 
soc_öfo
->
gpio_unb™ked
; gpio++, 
úq
++) {

409 
	`úq_£t_chù
(
úq
, &
gpio_unb™ked
.
chù
);

410 
	`úq_£t_h™dÀr_d©a
(
úq
, &
chùs
[
gpio
 / 32]);

411 
	`úq_£t_°©us_Êags
(
úq
, 
IRQ_TYPE_EDGE_BOTH
);

414 
d⁄e
;

421 
gpio
 = 0, 
úq
 = 
	`gpio_to_úq
(0), 
b™k
 = 0;

422 
gpio
 < 
ngpio
;

423 
b™k
++, 
b™k_úq
++) {

424 
i
;

427 
g
 = 
	`gpio2ªgs
(
gpio
);

428 
	`__øw_wrôñ
(~0, &
g
->
˛r_ÁŒög
);

429 
	`__øw_wrôñ
(~0, &
g
->
˛r_risög
);

432 
	`úq_£t_chaöed_h™dÀr
(
b™k_úq
, 
gpio_úq_h™dÀr
);

439 
	`úq_£t_h™dÀr_d©a
(
b™k_úq
, &
chùs
[
gpio
 / 32]);

441 
i
 = 0; i < 16 && 
gpio
 < 
ngpio
; i++, 
úq
++, gpio++) {

442 
	`úq_£t_chù
(
úq
, &
gpio_úqchù
);

443 
	`úq_£t_chù_d©a
(
úq
, (
__f‹˚
 *)
g
);

444 
	`úq_£t_h™dÀr_d©a
(
úq
, (*)
	`__gpio_mask
(
gpio
));

445 
	`úq_£t_h™dÀr
(
úq
, 
h™dÀ_sim∂e_úq
);

446 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

449 
böãn
 |
	`BIT
(
b™k
);

452 
d⁄e
:

456 
	`__øw_wrôñ
(
böãn
, 
gpio_ba£
 + 0x08);

458 
	`¥ötk
(
KERN_INFO
 "DaVöci: %d gpiÿúqs\n", 
úq
 - 
	`gpio_to_úq
(0));

461 
	}
}

	@gpio-em.c

20 
	~<löux/öô.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/•ölock.h
>

23 
	~<löux/öãºu±.h
>

24 
	~<löux/i›‹t.h
>

25 
	~<löux/io.h
>

26 
	~<löux/úq.h
>

27 
	~<löux/úqdomaö.h
>

28 
	~<löux/bô›s.h
>

29 
	~<löux/îr.h
>

30 
	~<löux/gpio.h
>

31 
	~<löux/¶ab.h
>

32 
	~<löux/moduÀ.h
>

33 
	~<löux/∂©f‹m_d©a/gpio-em.h
>

35 
	sem_gio_¥iv
 {

36 
__iomem
 *
	mba£0
;

37 
__iomem
 *
	mba£1
;

38 
•ölock_t
 
	m£n£_lock
;

39 
∂©f‹m_devi˚
 *
	mpdev
;

40 
gpio_chù
 
	mgpio_chù
;

41 
úq_chù
 
	múq_chù
;

42 
úq_domaö
 *
	múq_domaö
;

45 
	#GIO_E1
 0x00

	)

46 
	#GIO_E0
 0x04

	)

47 
	#GIO_EM
 0x04

	)

48 
	#GIO_OL
 0x08

	)

49 
	#GIO_OH
 0x0c

	)

50 
	#GIO_I
 0x10

	)

51 
	#GIO_IIA
 0x14

	)

52 
	#GIO_IEN
 0x18

	)

53 
	#GIO_IDS
 0x1c

	)

54 
	#GIO_IIM
 0x1c

	)

55 
	#GIO_RAW
 0x20

	)

56 
	#GIO_MST
 0x24

	)

57 
	#GIO_IIR
 0x28

	)

59 
	#GIO_IDT0
 0x40

	)

60 
	#GIO_IDT1
 0x44

	)

61 
	#GIO_IDT2
 0x48

	)

62 
	#GIO_IDT3
 0x4c

	)

63 
	#GIO_RAWBL
 0x50

	)

64 
	#GIO_RAWBH
 0x54

	)

65 
	#GIO_IRBL
 0x58

	)

66 
	#GIO_IRBH
 0x5c

	)

68 
	#GIO_IDT
(
n
Ë(
GIO_IDT0
 + (“Ë* 4))

	)

70 
ölöe
 
	$em_gio_ªad
(
em_gio_¥iv
 *
p
, 
offs
)

72 i‡(
offs
 < 
GIO_IDT0
)

73  
	`i‹ód32
(
p
->
ba£0
 + 
offs
);

75  
	`i‹ód32
(
p
->
ba£1
 + (
offs
 - 
GIO_IDT0
));

76 
	}
}

78 
ölöe
 
	$em_gio_wrôe
(
em_gio_¥iv
 *
p
, 
offs
,

79 
vÆue
)

81 i‡(
offs
 < 
GIO_IDT0
)

82 
	`iowrôe32
(
vÆue
, 
p
->
ba£0
 + 
offs
);

84 
	`iowrôe32
(
vÆue
, 
p
->
ba£1
 + (
offs
 - 
GIO_IDT0
));

85 
	}
}

87 
	$em_gio_úq_dißbÀ
(
úq_d©a
 *
d
)

89 
em_gio_¥iv
 *
p
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

91 
	`em_gio_wrôe
(
p
, 
GIO_IDS
, 
	`BIT
(
	`úqd_to_hwúq
(
d
)));

92 
	}
}

94 
	$em_gio_úq_íabÀ
(
úq_d©a
 *
d
)

96 
em_gio_¥iv
 *
p
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

98 
	`em_gio_wrôe
(
p
, 
GIO_IEN
, 
	`BIT
(
	`úqd_to_hwúq
(
d
)));

99 
	}
}

101 
	#GIO_ASYNC
(
x
Ë(x + 8)

	)

103 
	gem_gio_£n£_èbÀ
[
IRQ_TYPE_SENSE_MASK
 + 1] = {

104 [
IRQ_TYPE_EDGE_RISING
] = 
GIO_ASYNC
(0x00),

105 [
IRQ_TYPE_EDGE_FALLING
] = 
GIO_ASYNC
(0x01),

106 [
IRQ_TYPE_LEVEL_HIGH
] = 
GIO_ASYNC
(0x02),

107 [
IRQ_TYPE_LEVEL_LOW
] = 
GIO_ASYNC
(0x03),

108 [
IRQ_TYPE_EDGE_BOTH
] = 
GIO_ASYNC
(0x04),

111 
	$em_gio_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

113 
vÆue
 = 
em_gio_£n£_èbÀ
[
ty≥
 & 
IRQ_TYPE_SENSE_MASK
];

114 
em_gio_¥iv
 *
p
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

115 
ªg
, 
off£t
, 
shi·
;

116 
Êags
;

117 
tmp
;

119 i‡(!
vÆue
)

120  -
EINVAL
;

122 
off£t
 = 
	`úqd_to_hwúq
(
d
);

124 
	`¥_debug
("gio: sí£ irq = %d, modê%d\n", 
off£t
, 
vÆue
);

127 
ªg
 = 
	`GIO_IDT
(
off£t
 >> 3);

128 
shi·
 = (
off£t
 & 0x07) << 4;

130 
	`•ö_lock_úqßve
(&
p
->
£n£_lock
, 
Êags
);

133 
tmp
 = 
	`em_gio_ªad
(
p
, 
GIO_IIA
);

134 
tmp
 &~
	`BIT
(
off£t
);

135 
	`em_gio_wrôe
(
p
, 
GIO_IIA
, 
tmp
);

138 
tmp
 = 
	`em_gio_ªad
(
p
, 
ªg
);

139 
tmp
 &~(0x‡<< 
shi·
);

140 
tmp
 |
vÆue
 << 
shi·
;

141 
	`em_gio_wrôe
(
p
, 
ªg
, 
tmp
);

144 
	`em_gio_wrôe
(
p
, 
GIO_IIR
, 
	`BIT
(
off£t
));

147 
tmp
 = 
	`em_gio_ªad
(
p
, 
GIO_IIA
);

148 
tmp
 |
	`BIT
(
off£t
);

149 
	`em_gio_wrôe
(
p
, 
GIO_IIA
, 
tmp
);

151 
	`•ö_u∆ock_úqª°‹e
(&
p
->
£n£_lock
, 
Êags
);

154 
	}
}

156 
úqªtu∫_t
 
	$em_gio_úq_h™dÀr
(
úq
, *
dev_id
)

158 
em_gio_¥iv
 *
p
 = 
dev_id
;

159 
≥ndög
;

160 
off£t
, 
úqs_h™dÀd
 = 0;

162 (
≥ndög
 = 
	`em_gio_ªad
(
p
, 
GIO_MST
))) {

163 
off£t
 = 
	`__ffs
(
≥ndög
);

164 
	`em_gio_wrôe
(
p
, 
GIO_IIR
, 
	`BIT
(
off£t
));

165 
	`gíîic_h™dÀ_úq
(
	`úq_föd_m≠pög
(
p
->
úq_domaö
, 
off£t
));

166 
úqs_h™dÀd
++;

169  
úqs_h™dÀd
 ? 
IRQ_HANDLED
 : 
IRQ_NONE
;

170 
	}
}

172 
ölöe
 
em_gio_¥iv
 *
	$gpio_to_¥iv
(
gpio_chù
 *
chù
)

174  
	`c⁄èöî_of
(
chù
, 
em_gio_¥iv
, 
gpio_chù
);

175 
	}
}

177 
	$em_gio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

179 
	`em_gio_wrôe
(
	`gpio_to_¥iv
(
chù
), 
GIO_E0
, 
	`BIT
(
off£t
));

181 
	}
}

183 
	$em_gio_gë
(
gpio_chù
 *
chù
, 
off£t
)

185  ()(
	`em_gio_ªad
(
	`gpio_to_¥iv
(
chù
), 
GIO_I
Ë& 
	`BIT
(
off£t
));

186 
	}
}

188 
	$__em_gio_£t
(
gpio_chù
 *
chù
, 
ªg
,

189 
shi·
, 
vÆue
)

192 
	`em_gio_wrôe
(
	`gpio_to_¥iv
(
chù
), 
ªg
,

193 (1 << (
shi·
 + 16)Ë| (
vÆue
 << shift));

194 
	}
}

196 
	$em_gio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

199 i‡(
off£t
 < 16)

200 
	`__em_gio_£t
(
chù
, 
GIO_OL
, 
off£t
, 
vÆue
);

202 
	`__em_gio_£t
(
chù
, 
GIO_OH
, 
off£t
 - 16, 
vÆue
);

203 
	}
}

205 
	$em_gio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
,

206 
vÆue
)

209 
	`em_gio_£t
(
chù
, 
off£t
, 
vÆue
);

210 
	`em_gio_wrôe
(
	`gpio_to_¥iv
(
chù
), 
GIO_E1
, 
	`BIT
(
off£t
));

212 
	}
}

214 
	$em_gio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

216  
	`úq_¸óã_m≠pög
(
	`gpio_to_¥iv
(
chù
)->
úq_domaö
, 
off£t
);

217 
	}
}

219 
	$em_gio_úq_domaö_m≠
(
úq_domaö
 *
h
, 
vúq
,

220 
úq_hw_numbî_t
 
hw
)

222 
em_gio_¥iv
 *
p
 = 
h
->
ho°_d©a
;

224 
	`¥_debug
("gio: m≠ hw irq = %d, vúq = %d\n", ()
hw
, 
vúq
);

226 
	`úq_£t_chù_d©a
(
vúq
, 
h
->
ho°_d©a
);

227 
	`úq_£t_chù_™d_h™dÀr
(
vúq
, &
p
->
úq_chù
, 
h™dÀ_Àvñ_úq
);

228 
	`£t_úq_Êags
(
vúq
, 
IRQF_VALID
);

230 
	}
}

232 
úq_domaö_›s
 
	gem_gio_úq_domaö_›s
 = {

233 .
m≠
 = 
em_gio_úq_domaö_m≠
,

234 .
	gxœã
 = 
úq_domaö_xœã_two˚Œ
,

237 
	$em_gio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

239 
gpio_em_c⁄fig
 
pd©a_dt
;

240 
gpio_em_c⁄fig
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

241 
em_gio_¥iv
 *
p
;

242 
ªsour˚
 *
io
[2], *
úq
[2];

243 
gpio_chù
 *gpio_chip;

244 
úq_chù
 *irq_chip;

245 c⁄° *
«me
 = 
	`dev_«me
(&
pdev
->
dev
);

246 
ªt
;

248 
p
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*p), 
GFP_KERNEL
);

249 i‡(!
p
) {

250 
	`dev_îr
(&
pdev
->
dev
, "failedÅoállocate driver data\n");

251 
ªt
 = -
ENOMEM
;

252 
îr0
;

255 
p
->
pdev
 =Ödev;

256 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
p
);

257 
	`•ö_lock_öô
(&
p
->
£n£_lock
);

259 
io
[0] = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

260 
io
[1] = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 1);

261 
úq
[0] = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

262 
úq
[1] = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 1);

264 i‡(!
io
[0] || !io[1] || !
úq
[0] || !irq[1]) {

265 
	`dev_îr
(&
pdev
->
dev
, "missing IRQ or IOMEM\n");

266 
ªt
 = -
EINVAL
;

267 
îr0
;

270 
p
->
ba£0
 = 
	`devm_i‹em≠_noˇche
(&
pdev
->
dev
, 
io
[0]->
°¨t
,

271 
	`ªsour˚_size
(
io
[0]));

272 i‡(!
p
->
ba£0
) {

273 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑemapÜow I/O memory\n");

274 
ªt
 = -
ENXIO
;

275 
îr0
;

278 
p
->
ba£1
 = 
	`devm_i‹em≠_noˇche
(&
pdev
->
dev
, 
io
[1]->
°¨t
,

279 
	`ªsour˚_size
(
io
[1]));

280 i‡(!
p
->
ba£1
) {

281 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑemap high I/O memory\n");

282 
ªt
 = -
ENXIO
;

283 
îr0
;

286 i‡(!
pd©a
) {

287 
	`mem£t
(&
pd©a_dt
, 0, (pdata_dt));

288 
pd©a
 = &
pd©a_dt
;

290 i‡(
	`of_¥›îty_ªad_u32
(
pdev
->
dev
.
of_node
, "ngpios",

291 &
pd©a
->
numbî_of_pös
)) {

292 
	`dev_îr
(&
pdev
->
dev
, "MissingÇgpios OFÖroperty\n");

293 
ªt
 = -
EINVAL
;

294 
îr0
;

297 
ªt
 = 
	`of_Æüs_gë_id
(
pdev
->
dev
.
of_node
, "gpio");

298 i‡(
ªt
 < 0) {

299 
	`dev_îr
(&
pdev
->
dev
, "Couldn't get OF id\n");

300 
îr0
;

302 
pd©a
->
gpio_ba£
 = 
ªt
 * 32;

305 
gpio_chù
 = &
p
->gpio_chip;

306 
gpio_chù
->
dúe˘i⁄_öput
 = 
em_gio_dúe˘i⁄_öput
;

307 
gpio_chù
->
gë
 = 
em_gio_gë
;

308 
gpio_chù
->
dúe˘i⁄_ouçut
 = 
em_gio_dúe˘i⁄_ouçut
;

309 
gpio_chù
->
£t
 = 
em_gio_£t
;

310 
gpio_chù
->
to_úq
 = 
em_gio_to_úq
;

311 
gpio_chù
->
œbñ
 = 
«me
;

312 
gpio_chù
->
ow√r
 = 
THIS_MODULE
;

313 
gpio_chù
->
ba£
 = 
pd©a
->
gpio_ba£
;

314 
gpio_chù
->
ngpio
 = 
pd©a
->
numbî_of_pös
;

316 
úq_chù
 = &
p
->irq_chip;

317 
úq_chù
->
«me
 =Çame;

318 
úq_chù
->
úq_mask
 = 
em_gio_úq_dißbÀ
;

319 
úq_chù
->
úq_unmask
 = 
em_gio_úq_íabÀ
;

320 
úq_chù
->
úq_íabÀ
 = 
em_gio_úq_íabÀ
;

321 
úq_chù
->
úq_dißbÀ
 = 
em_gio_úq_dißbÀ
;

322 
úq_chù
->
úq_£t_ty≥
 = 
em_gio_úq_£t_ty≥
;

323 
úq_chù
->
Êags
 = 
IRQCHIP_SKIP_SET_WAKE
;

325 
p
->
úq_domaö
 = 
	`úq_domaö_add_sim∂e
(
pdev
->
dev
.
of_node
,

326 
pd©a
->
numbî_of_pös
,

327 
pd©a
->
úq_ba£
,

328 &
em_gio_úq_domaö_›s
, 
p
);

329 i‡(!
p
->
úq_domaö
) {

330 
ªt
 = -
ENXIO
;

331 
	`dev_îr
(&
pdev
->
dev
, "cannot initialize irq domain\n");

332 
îr0
;

335 i‡(
	`devm_ªque°_úq
(&
pdev
->
dev
, 
úq
[0]->
°¨t
,

336 
em_gio_úq_h™dÀr
, 0, 
«me
, 
p
)) {

337 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑequestÜow IRQ\n");

338 
ªt
 = -
ENOENT
;

339 
îr1
;

342 i‡(
	`devm_ªque°_úq
(&
pdev
->
dev
, 
úq
[1]->
°¨t
,

343 
em_gio_úq_h™dÀr
, 0, 
«me
, 
p
)) {

344 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑequest high IRQ\n");

345 
ªt
 = -
ENOENT
;

346 
îr1
;

349 
ªt
 = 
	`gpiochù_add
(
gpio_chù
);

350 i‡(
ªt
) {

351 
	`dev_îr
(&
pdev
->
dev
, "failedÅoádd GPIO controller\n");

352 
îr1
;

356 
îr1
:

357 
	`úq_domaö_ªmove
(
p
->
úq_domaö
);

358 
îr0
:

359  
ªt
;

360 
	}
}

362 
	$em_gio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

364 
em_gio_¥iv
 *
p
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

365 
ªt
;

367 
ªt
 = 
	`gpiochù_ªmove
(&
p
->
gpio_chù
);

368 i‡(
ªt
)

369  
ªt
;

371 
	`úq_domaö_ªmove
(
p
->
úq_domaö
);

373 
	}
}

375 c⁄° 
of_devi˚_id
 
	gem_gio_dt_ids
[] = {

376 { .
com∑tibÀ
 = "renesas,em-gio", },

379 
MODULE_DEVICE_TABLE
(
of
, 
em_gio_dt_ids
);

381 
∂©f‹m_drivî
 
	gem_gio_devi˚_drivî
 = {

382 .
¥obe
 = 
em_gio_¥obe
,

383 .
	gªmove
 = 
em_gio_ªmove
,

384 .
	gdrivî
 = {

385 .
«me
 = "em_gio",

386 .
	gof_m©ch_èbÀ
 = 
em_gio_dt_ids
,

387 .
	gow√r
 = 
THIS_MODULE
,

391 
__öô
 
	$em_gio_öô
()

393  
	`∂©f‹m_drivî_ªgi°î
(&
em_gio_devi˚_drivî
);

394 
	}
}

395 
po°c‹e_öôˇŒ
(
em_gio_öô
);

397 
__exô
 
	$em_gio_exô
()

399 
	`∂©f‹m_drivî_uƒegi°î
(&
em_gio_devi˚_drivî
);

400 
	}
}

401 
moduÀ_exô
(
em_gio_exô
);

403 
MODULE_AUTHOR
("Magnus Damm");

404 
MODULE_DESCRIPTION
("Renesas Emma Mobile GIO Driver");

405 
MODULE_LICENSE
("GPL v2");

	@gpio-ep93xx.c

15 
	~<löux/öô.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/io.h
>

19 
	~<löux/gpio.h
>

20 
	~<löux/úq.h
>

21 
	~<löux/¶ab.h
>

22 
	~<löux/basic_mmio_gpio.h
>

24 
	~<mach/h¨dw¨e.h
>

25 
	~<mach/gpio-ï93xx.h
>

27 
	#úq_to_gpio
(
úq
Ë((úqË- 
	`gpio_to_úq
(0))

	)

29 
	sï93xx_gpio
 {

30 
__iomem
 *
	mmmio_ba£
;

31 
bgpio_chù
 
	mbgc
[8];

37 
	ggpio_öt_unmasked
[3];

38 
	ggpio_öt_íabÀd
[3];

39 
	ggpio_öt_ty≥1
[3];

40 
	ggpio_öt_ty≥2
[3];

41 
	ggpio_öt_deboun˚
[3];

44 c⁄° 
u8
 
	göt_ty≥1_ªgi°î_off£t
[3] = { 0x90, 0xac, 0x4c };

45 c⁄° 
u8
 
	göt_ty≥2_ªgi°î_off£t
[3] = { 0x94, 0xb0, 0x50 };

46 c⁄° 
u8
 
	geoi_ªgi°î_off£t
[3] = { 0x98, 0xb4, 0x54 };

47 c⁄° 
u8
 
	göt_í_ªgi°î_off£t
[3] = { 0x9c, 0xb8, 0x58 };

48 c⁄° 
u8
 
	göt_deboun˚_ªgi°î_off£t
[3] = { 0xa8, 0xc4, 0x64 };

50 
	$ï93xx_gpio_upd©e_öt_∑øms
(
p‹t
)

52 
	`BUG_ON
(
p‹t
 > 2);

54 
	`__øw_wrôeb
(0, 
	`EP93XX_GPIO_REG
(
öt_í_ªgi°î_off£t
[
p‹t
]));

56 
	`__øw_wrôeb
(
gpio_öt_ty≥2
[
p‹t
],

57 
	`EP93XX_GPIO_REG
(
öt_ty≥2_ªgi°î_off£t
[
p‹t
]));

59 
	`__øw_wrôeb
(
gpio_öt_ty≥1
[
p‹t
],

60 
	`EP93XX_GPIO_REG
(
öt_ty≥1_ªgi°î_off£t
[
p‹t
]));

62 
	`__øw_wrôeb
(
gpio_öt_unmasked
[
p‹t
] & 
gpio_öt_íabÀd
[port],

63 
	`EP93XX_GPIO_REG
(
öt_í_ªgi°î_off£t
[
p‹t
]));

64 
	}
}

66 
	$ï93xx_gpio_öt_deboun˚
(
úq
, 
boﬁ
 
íabÀ
)

68 
löe
 = 
	`úq_to_gpio
(
úq
);

69 
p‹t
 = 
löe
 >> 3;

70 
p‹t_mask
 = 1 << (
löe
 & 7);

72 i‡(
íabÀ
)

73 
gpio_öt_deboun˚
[
p‹t
] |
p‹t_mask
;

75 
gpio_öt_deboun˚
[
p‹t
] &~
p‹t_mask
;

77 
	`__øw_wrôeb
(
gpio_öt_deboun˚
[
p‹t
],

78 
	`EP93XX_GPIO_REG
(
öt_deboun˚_ªgi°î_off£t
[
p‹t
]));

79 
	}
}

81 
	$ï93xx_gpio_ab_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

83 
°©us
;

84 
i
;

86 
°©us
 = 
	`__øw_ªadb
(
EP93XX_GPIO_A_INT_STATUS
);

87 
i
 = 0; i < 8; i++) {

88 i‡(
°©us
 & (1 << 
i
)) {

89 
gpio_úq
 = 
	`gpio_to_úq
(
	`EP93XX_GPIO_LINE_A
(0)Ë+ 
i
;

90 
	`gíîic_h™dÀ_úq
(
gpio_úq
);

94 
°©us
 = 
	`__øw_ªadb
(
EP93XX_GPIO_B_INT_STATUS
);

95 
i
 = 0; i < 8; i++) {

96 i‡(
°©us
 & (1 << 
i
)) {

97 
gpio_úq
 = 
	`gpio_to_úq
(
	`EP93XX_GPIO_LINE_B
(0)Ë+ 
i
;

98 
	`gíîic_h™dÀ_úq
(
gpio_úq
);

101 
	}
}

103 
	$ï93xx_gpio_f_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

110 
p‹t_f_idx
 = ((
úq
 + 1) & 7) ^ 4;

111 
gpio_úq
 = 
	`gpio_to_úq
(
	`EP93XX_GPIO_LINE_F
(0)Ë+ 
p‹t_f_idx
;

113 
	`gíîic_h™dÀ_úq
(
gpio_úq
);

114 
	}
}

116 
	$ï93xx_gpio_úq_ack
(
úq_d©a
 *
d
)

118 
löe
 = 
	`úq_to_gpio
(
d
->
úq
);

119 
p‹t
 = 
löe
 >> 3;

120 
p‹t_mask
 = 1 << (
löe
 & 7);

122 i‡(
	`úqd_gë_åiggî_ty≥
(
d
Ë=
IRQ_TYPE_EDGE_BOTH
) {

123 
gpio_öt_ty≥2
[
p‹t
] ^
p‹t_mask
;

124 
	`ï93xx_gpio_upd©e_öt_∑øms
(
p‹t
);

127 
	`__øw_wrôeb
(
p‹t_mask
, 
	`EP93XX_GPIO_REG
(
eoi_ªgi°î_off£t
[
p‹t
]));

128 
	}
}

130 
	$ï93xx_gpio_úq_mask_ack
(
úq_d©a
 *
d
)

132 
löe
 = 
	`úq_to_gpio
(
d
->
úq
);

133 
p‹t
 = 
löe
 >> 3;

134 
p‹t_mask
 = 1 << (
löe
 & 7);

136 i‡(
	`úqd_gë_åiggî_ty≥
(
d
Ë=
IRQ_TYPE_EDGE_BOTH
)

137 
gpio_öt_ty≥2
[
p‹t
] ^
p‹t_mask
;

139 
gpio_öt_unmasked
[
p‹t
] &~
p‹t_mask
;

140 
	`ï93xx_gpio_upd©e_öt_∑øms
(
p‹t
);

142 
	`__øw_wrôeb
(
p‹t_mask
, 
	`EP93XX_GPIO_REG
(
eoi_ªgi°î_off£t
[
p‹t
]));

143 
	}
}

145 
	$ï93xx_gpio_úq_mask
(
úq_d©a
 *
d
)

147 
löe
 = 
	`úq_to_gpio
(
d
->
úq
);

148 
p‹t
 = 
löe
 >> 3;

150 
gpio_öt_unmasked
[
p‹t
] &~(1 << (
löe
 & 7));

151 
	`ï93xx_gpio_upd©e_öt_∑øms
(
p‹t
);

152 
	}
}

154 
	$ï93xx_gpio_úq_unmask
(
úq_d©a
 *
d
)

156 
löe
 = 
	`úq_to_gpio
(
d
->
úq
);

157 
p‹t
 = 
löe
 >> 3;

159 
gpio_öt_unmasked
[
p‹t
] |1 << (
löe
 & 7);

160 
	`ï93xx_gpio_upd©e_öt_∑øms
(
p‹t
);

161 
	}
}

168 
	$ï93xx_gpio_úq_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

170 c⁄° 
gpio
 = 
	`úq_to_gpio
(
d
->
úq
);

171 c⁄° 
p‹t
 = 
gpio
 >> 3;

172 c⁄° 
p‹t_mask
 = 1 << (
gpio
 & 7);

173 
úq_Êow_h™dÀr_t
 
h™dÀr
;

175 
	`gpio_dúe˘i⁄_öput
(
gpio
);

177 
ty≥
) {

178 
IRQ_TYPE_EDGE_RISING
:

179 
gpio_öt_ty≥1
[
p‹t
] |
p‹t_mask
;

180 
gpio_öt_ty≥2
[
p‹t
] |
p‹t_mask
;

181 
h™dÀr
 = 
h™dÀ_edge_úq
;

183 
IRQ_TYPE_EDGE_FALLING
:

184 
gpio_öt_ty≥1
[
p‹t
] |
p‹t_mask
;

185 
gpio_öt_ty≥2
[
p‹t
] &~
p‹t_mask
;

186 
h™dÀr
 = 
h™dÀ_edge_úq
;

188 
IRQ_TYPE_LEVEL_HIGH
:

189 
gpio_öt_ty≥1
[
p‹t
] &~
p‹t_mask
;

190 
gpio_öt_ty≥2
[
p‹t
] |
p‹t_mask
;

191 
h™dÀr
 = 
h™dÀ_Àvñ_úq
;

193 
IRQ_TYPE_LEVEL_LOW
:

194 
gpio_öt_ty≥1
[
p‹t
] &~
p‹t_mask
;

195 
gpio_öt_ty≥2
[
p‹t
] &~
p‹t_mask
;

196 
h™dÀr
 = 
h™dÀ_Àvñ_úq
;

198 
IRQ_TYPE_EDGE_BOTH
:

199 
gpio_öt_ty≥1
[
p‹t
] |
p‹t_mask
;

201 i‡(
	`gpio_gë_vÆue
(
gpio
))

202 
gpio_öt_ty≥2
[
p‹t
] &~
p‹t_mask
;

204 
gpio_öt_ty≥2
[
p‹t
] |
p‹t_mask
;

205 
h™dÀr
 = 
h™dÀ_edge_úq
;

208  -
EINVAL
;

211 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀr
);

213 
gpio_öt_íabÀd
[
p‹t
] |
p‹t_mask
;

215 
	`ï93xx_gpio_upd©e_öt_∑øms
(
p‹t
);

218 
	}
}

220 
úq_chù
 
	gï93xx_gpio_úq_chù
 = {

221 .
«me
 = "GPIO",

222 .
	gúq_ack
 = 
ï93xx_gpio_úq_ack
,

223 .
	gúq_mask_ack
 = 
ï93xx_gpio_úq_mask_ack
,

224 .
	gúq_mask
 = 
ï93xx_gpio_úq_mask
,

225 .
	gúq_unmask
 = 
ï93xx_gpio_úq_unmask
,

226 .
	gúq_£t_ty≥
 = 
ï93xx_gpio_úq_ty≥
,

229 
	$ï93xx_gpio_öô_úq
()

231 
gpio_úq
;

233 
gpio_úq
 = 
	`gpio_to_úq
(0);

234 
gpio_úq
 <
	`gpio_to_úq
(
EP93XX_GPIO_LINE_MAX_IRQ
); ++gpio_irq) {

235 
	`úq_£t_chù_™d_h™dÀr
(
gpio_úq
, &
ï93xx_gpio_úq_chù
,

236 
h™dÀ_Àvñ_úq
);

237 
	`£t_úq_Êags
(
gpio_úq
, 
IRQF_VALID
);

240 
	`úq_£t_chaöed_h™dÀr
(
IRQ_EP93XX_GPIO_AB
,

241 
ï93xx_gpio_ab_úq_h™dÀr
);

242 
	`úq_£t_chaöed_h™dÀr
(
IRQ_EP93XX_GPIO0MUX
,

243 
ï93xx_gpio_f_úq_h™dÀr
);

244 
	`úq_£t_chaöed_h™dÀr
(
IRQ_EP93XX_GPIO1MUX
,

245 
ï93xx_gpio_f_úq_h™dÀr
);

246 
	`úq_£t_chaöed_h™dÀr
(
IRQ_EP93XX_GPIO2MUX
,

247 
ï93xx_gpio_f_úq_h™dÀr
);

248 
	`úq_£t_chaöed_h™dÀr
(
IRQ_EP93XX_GPIO3MUX
,

249 
ï93xx_gpio_f_úq_h™dÀr
);

250 
	`úq_£t_chaöed_h™dÀr
(
IRQ_EP93XX_GPIO4MUX
,

251 
ï93xx_gpio_f_úq_h™dÀr
);

252 
	`úq_£t_chaöed_h™dÀr
(
IRQ_EP93XX_GPIO5MUX
,

253 
ï93xx_gpio_f_úq_h™dÀr
);

254 
	`úq_£t_chaöed_h™dÀr
(
IRQ_EP93XX_GPIO6MUX
,

255 
ï93xx_gpio_f_úq_h™dÀr
);

256 
	`úq_£t_chaöed_h™dÀr
(
IRQ_EP93XX_GPIO7MUX
,

257 
ï93xx_gpio_f_úq_h™dÀr
);

258 
	}
}

264 
	sï93xx_gpio_b™k
 {

265 c⁄° *
	mœbñ
;

266 
	md©a
;

267 
	mdú
;

268 
	mba£
;

269 
boﬁ
 
	mhas_deboun˚
;

272 
	#EP93XX_GPIO_BANK
(
_œbñ
, 
_d©a
, 
_dú
, 
_ba£
, 
_deboun˚
) \

274 .
œbñ
 = 
_œbñ
, \

275 .
d©a
 = 
_d©a
, \

276 .
dú
 = 
_dú
, \

277 .
ba£
 = 
_ba£
, \

278 .
has_deboun˚
 = 
_deboun˚
, \

279 }

	)

281 
ï93xx_gpio_b™k
 
	gï93xx_gpio_b™ks
[] = {

282 
EP93XX_GPIO_BANK
("A", 0x00, 0x10, 0, 
åue
),

283 
EP93XX_GPIO_BANK
("B", 0x04, 0x14, 8, 
åue
),

284 
EP93XX_GPIO_BANK
("C", 0x08, 0x18, 40, 
Ál£
),

285 
EP93XX_GPIO_BANK
("D", 0x0c, 0x1c, 24, 
Ál£
),

286 
EP93XX_GPIO_BANK
("E", 0x20, 0x24, 32, 
Ál£
),

287 
EP93XX_GPIO_BANK
("F", 0x30, 0x34, 16, 
åue
),

288 
EP93XX_GPIO_BANK
("G", 0x38, 0x3c, 48, 
Ál£
),

289 
EP93XX_GPIO_BANK
("H", 0x40, 0x44, 56, 
Ál£
),

292 
	$ï93xx_gpio_£t_deboun˚
(
gpio_chù
 *
chù
,

293 
off£t
, 
deboun˚
)

295 
gpio
 = 
chù
->
ba£
 + 
off£t
;

296 
úq
 = 
	`gpio_to_úq
(
gpio
);

298 i‡(
úq
 < 0)

299  -
EINVAL
;

301 
	`ï93xx_gpio_öt_deboun˚
(
úq
, 
deboun˚
 ? 
åue
 : 
Ál£
);

304 
	}
}

311 
	$ï93xx_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

313 
gpio
 = 
chù
->
ba£
 + 
off£t
;

315 i‡(
gpio
 > 
EP93XX_GPIO_LINE_MAX_IRQ
)

316  -
EINVAL
;

318  64 + 
gpio
;

319 
	}
}

321 
	$ï93xx_gpio_add_b™k
(
bgpio_chù
 *
bgc
, 
devi˚
 *
dev
,

322 
__iomem
 *
mmio_ba£
, 
ï93xx_gpio_b™k
 *
b™k
)

324 
__iomem
 *
d©a
 = 
mmio_ba£
 + 
b™k
->data;

325 
__iomem
 *
dú
 = 
mmio_ba£
 + 
b™k
->dir;

326 
îr
;

328 
îr
 = 
	`bgpio_öô
(
bgc
, 
dev
, 1, 
d©a
, 
NULL
, NULL, 
dú
, NULL, 0);

329 i‡(
îr
)

330  
îr
;

332 
bgc
->
gc
.
œbñ
 = 
b™k
->label;

333 
bgc
->
gc
.
ba£
 = 
b™k
->base;

335 i‡(
b™k
->
has_deboun˚
) {

336 
bgc
->
gc
.
£t_deboun˚
 = 
ï93xx_gpio_£t_deboun˚
;

337 
bgc
->
gc
.
to_úq
 = 
ï93xx_gpio_to_úq
;

340  
	`gpiochù_add
(&
bgc
->
gc
);

341 
	}
}

343 
	$ï93xx_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

345 
ï93xx_gpio
 *ep93xx_gpio;

346 
ªsour˚
 *
ªs
;

347 
__iomem
 *
mmio
;

348 
i
;

349 
ªt
;

351 
ï93xx_gpio
 = 
	`kzÆloc
((*ï93xx_gpio), 
GFP_KERNEL
);

352 i‡(!
ï93xx_gpio
)

353  -
ENOMEM
;

355 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

356 i‡(!
ªs
) {

357 
ªt
 = -
ENXIO
;

358 
exô_‰ì
;

361 i‡(!
	`ªque°_mem_ªgi⁄
(
ªs
->
°¨t
, 
	`ªsour˚_size
‘es), 
pdev
->
«me
)) {

362 
ªt
 = -
EBUSY
;

363 
exô_‰ì
;

366 
mmio
 = 
	`i‹em≠
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

367 i‡(!
mmio
) {

368 
ªt
 = -
ENXIO
;

369 
exô_ªÀa£
;

371 
ï93xx_gpio
->
mmio_ba£
 = 
mmio
;

373 
i
 = 0; i < 
	`ARRAY_SIZE
(
ï93xx_gpio_b™ks
); i++) {

374 
bgpio_chù
 *
bgc
 = &
ï93xx_gpio
->bgc[
i
];

375 
ï93xx_gpio_b™k
 *
b™k
 = &
ï93xx_gpio_b™ks
[
i
];

377 i‡(
	`ï93xx_gpio_add_b™k
(
bgc
, &
pdev
->
dev
, 
mmio
, 
b™k
))

378 
	`dev_w¨n
(&
pdev
->
dev
, "UnableÅoádd gpio bank %s\n",

379 
b™k
->
œbñ
);

382 
	`ï93xx_gpio_öô_úq
();

386 
exô_ªÀa£
:

387 
	`ªÀa£_mem_ªgi⁄
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

388 
exô_‰ì
:

389 
	`k‰ì
(
ï93xx_gpio
);

390 
	`dev_öfo
(&
pdev
->
dev
, "%†Áûed wôhÉºnÿ%d\n", 
__func__
, 
ªt
);

391  
ªt
;

392 
	}
}

394 
∂©f‹m_drivî
 
	gï93xx_gpio_drivî
 = {

395 .
drivî
 = {

396 .
«me
 = "gpio-ep93xx",

397 .
	gow√r
 = 
THIS_MODULE
,

399 .
	g¥obe
 = 
ï93xx_gpio_¥obe
,

402 
__öô
 
	$ï93xx_gpio_öô
()

404  
	`∂©f‹m_drivî_ªgi°î
(&
ï93xx_gpio_drivî
);

405 
	}
}

406 
po°c‹e_öôˇŒ
(
ï93xx_gpio_öô
);

408 
MODULE_AUTHOR
("Ryan Mallon <ryan@bluewatersys.com> "

410 
MODULE_DESCRIPTION
("EP93XX GPIO driver");

411 
MODULE_LICENSE
("GPL");

	@gpio-ge.c

20 
	~<löux/kî√l.h
>

21 
	~<löux/compûî.h
>

22 
	~<löux/öô.h
>

23 
	~<löux/io.h
>

24 
	~<löux/of.h
>

25 
	~<löux/of_devi˚.h
>

26 
	~<löux/of_∂©f‹m.h
>

27 
	~<löux/of_gpio.h
>

28 
	~<löux/gpio.h
>

29 
	~<löux/¶ab.h
>

30 
	~<löux/moduÀ.h
>

32 
	#GEF_GPIO_DIRECT
 0x00

	)

33 
	#GEF_GPIO_IN
 0x04

	)

34 
	#GEF_GPIO_OUT
 0x08

	)

35 
	#GEF_GPIO_TRIG
 0x0C

	)

36 
	#GEF_GPIO_POLAR_A
 0x10

	)

37 
	#GEF_GPIO_POLAR_B
 0x14

	)

38 
	#GEF_GPIO_INT_STAT
 0x18

	)

39 
	#GEF_GPIO_OVERRUN
 0x1C

	)

40 
	#GEF_GPIO_MODE
 0x20

	)

42 
	$_gef_gpio_£t
(
__iomem
 *
ªg
, 
off£t
, 
vÆue
)

44 
d©a
;

46 
d©a
 = 
	`i‹ód32be
(
ªg
);

48 i‡(
vÆue
 & 0x1)

49 
d©a
 = d©®| (0x1 << 
off£t
);

51 
d©a
 = d©®& ~(0x1 << 
off£t
);

53 
	`iowrôe32be
(
d©a
, 
ªg
);

54 
	}
}

57 
	$gef_gpio_dú_ö
(
gpio_chù
 *
chù
, 
off£t
)

59 
d©a
;

60 
of_mm_gpio_chù
 *
mmchù
 = 
	`to_of_mm_gpio_chù
(
chù
);

62 
d©a
 = 
	`i‹ód32be
(
mmchù
->
ªgs
 + 
GEF_GPIO_DIRECT
);

63 
d©a
 = d©®| (0x1 << 
off£t
);

64 
	`iowrôe32be
(
d©a
, 
mmchù
->
ªgs
 + 
GEF_GPIO_DIRECT
);

67 
	}
}

69 
	$gef_gpio_dú_out
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

71 
d©a
;

72 
of_mm_gpio_chù
 *
mmchù
 = 
	`to_of_mm_gpio_chù
(
chù
);

75 
	`_gef_gpio_£t
(
mmchù
->
ªgs
 + 
GEF_GPIO_OUT
, 
off£t
, 
vÆue
);

77 
d©a
 = 
	`i‹ód32be
(
mmchù
->
ªgs
 + 
GEF_GPIO_DIRECT
);

78 
d©a
 = d©®& ~(0x1 << 
off£t
);

79 
	`iowrôe32be
(
d©a
, 
mmchù
->
ªgs
 + 
GEF_GPIO_DIRECT
);

82 
	}
}

84 
	$gef_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

86 
d©a
;

87 
°©e
 = 0;

88 
of_mm_gpio_chù
 *
mmchù
 = 
	`to_of_mm_gpio_chù
(
chù
);

90 
d©a
 = 
	`i‹ód32be
(
mmchù
->
ªgs
 + 
GEF_GPIO_IN
);

91 
°©e
 = ()((
d©a
 >> 
off£t
) & 0x1);

93  
°©e
;

94 
	}
}

96 
	$gef_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

98 
of_mm_gpio_chù
 *
mmchù
 = 
	`to_of_mm_gpio_chù
(
chù
);

100 
	`_gef_gpio_£t
(
mmchù
->
ªgs
 + 
GEF_GPIO_OUT
, 
off£t
, 
vÆue
);

101 
	}
}

103 
__öô
 
	$gef_gpio_öô
()

105 
devi˚_node
 *
≈
;

106 
ªtvÆ
;

107 
of_mm_gpio_chù
 *
gef_gpio_chù
;

109 
	`f‹_óch_com∑tibÀ_node
(
≈
, 
NULL
, "gef,sbc610-gpio") {

111 
	`¥_debug
("%s: Inôülisög GEF GPIO\n", 
≈
->
fuŒ_«me
);

114 
gef_gpio_chù
 = 
	`kzÆloc
((*gef_gpio_chù), 
GFP_KERNEL
);

115 i‡(!
gef_gpio_chù
) {

116 
	`¥_îr
("%s: UnableÅoállocate structure\n",

117 
≈
->
fuŒ_«me
);

122 
gef_gpio_chù
->
gc
.
of_gpio_n_˚Œs
 = 2;

123 
gef_gpio_chù
->
gc
.
ngpio
 = 19;

124 
gef_gpio_chù
->
gc
.
dúe˘i⁄_öput
 = 
gef_gpio_dú_ö
;

125 
gef_gpio_chù
->
gc
.
dúe˘i⁄_ouçut
 = 
gef_gpio_dú_out
;

126 
gef_gpio_chù
->
gc
.
gë
 = 
gef_gpio_gë
;

127 
gef_gpio_chù
->
gc
.
£t
 = 
gef_gpio_£t
;

130 
ªtvÆ
 = 
	`of_mm_gpiochù_add
(
≈
, 
gef_gpio_chù
);

131 i‡(
ªtvÆ
) {

132 
	`k‰ì
(
gef_gpio_chù
);

133 
	`¥_îr
("%s: U«bÀÅÿadd GPIO\n", 
≈
->
fuŒ_«me
);

137 
	`f‹_óch_com∑tibÀ_node
(
≈
, 
NULL
, "gef,sbc310-gpio") {

139 
	`¥_debug
("%s: Inôülisög GEF GPIO\n", 
≈
->
fuŒ_«me
);

142 
gef_gpio_chù
 = 
	`kzÆloc
((*gef_gpio_chù), 
GFP_KERNEL
);

143 i‡(!
gef_gpio_chù
) {

144 
	`¥_îr
("%s: UnableÅoállocate structure\n",

145 
≈
->
fuŒ_«me
);

150 
gef_gpio_chù
->
gc
.
of_gpio_n_˚Œs
 = 2;

151 
gef_gpio_chù
->
gc
.
ngpio
 = 6;

152 
gef_gpio_chù
->
gc
.
dúe˘i⁄_öput
 = 
gef_gpio_dú_ö
;

153 
gef_gpio_chù
->
gc
.
dúe˘i⁄_ouçut
 = 
gef_gpio_dú_out
;

154 
gef_gpio_chù
->
gc
.
gë
 = 
gef_gpio_gë
;

155 
gef_gpio_chù
->
gc
.
£t
 = 
gef_gpio_£t
;

158 
ªtvÆ
 = 
	`of_mm_gpiochù_add
(
≈
, 
gef_gpio_chù
);

159 i‡(
ªtvÆ
) {

160 
	`k‰ì
(
gef_gpio_chù
);

161 
	`¥_îr
("%s: U«bÀÅÿadd GPIO\n", 
≈
->
fuŒ_«me
);

165 
	`f‹_óch_com∑tibÀ_node
(
≈
, 
NULL
, "ge,imp3a-gpio") {

167 
	`¥_debug
("%s: Inôülisög GE GPIO\n", 
≈
->
fuŒ_«me
);

170 
gef_gpio_chù
 = 
	`kzÆloc
((*gef_gpio_chù), 
GFP_KERNEL
);

171 i‡(!
gef_gpio_chù
) {

172 
	`¥_îr
("%s: UnableÅoállocate structure\n",

173 
≈
->
fuŒ_«me
);

178 
gef_gpio_chù
->
gc
.
of_gpio_n_˚Œs
 = 2;

179 
gef_gpio_chù
->
gc
.
ngpio
 = 16;

180 
gef_gpio_chù
->
gc
.
dúe˘i⁄_öput
 = 
gef_gpio_dú_ö
;

181 
gef_gpio_chù
->
gc
.
dúe˘i⁄_ouçut
 = 
gef_gpio_dú_out
;

182 
gef_gpio_chù
->
gc
.
gë
 = 
gef_gpio_gë
;

183 
gef_gpio_chù
->
gc
.
£t
 = 
gef_gpio_£t
;

186 
ªtvÆ
 = 
	`of_mm_gpiochù_add
(
≈
, 
gef_gpio_chù
);

187 i‡(
ªtvÆ
) {

188 
	`k‰ì
(
gef_gpio_chù
);

189 
	`¥_îr
("%s: U«bÀÅÿadd GPIO\n", 
≈
->
fuŒ_«me
);

194 
	}
};

195 
¨ch_öôˇŒ
(
gef_gpio_öô
);

197 
MODULE_DESCRIPTION
("GE I/O FPGA GPIO driver");

198 
MODULE_AUTHOR
("Martyn Welch <martyn.welch@ge.com");

199 
MODULE_LICENSE
("GPL");

	@gpio-generic.c

47 
	~<löux/öô.h
>

48 
	~<löux/îr.h
>

49 
	~<löux/bug.h
>

50 
	~<löux/kî√l.h
>

51 
	~<löux/moduÀ.h
>

52 
	~<löux/•ölock.h
>

53 
	~<löux/compûî.h
>

54 
	~<löux/ty≥s.h
>

55 
	~<löux/î∫o.h
>

56 
	~<löux/log2.h
>

57 
	~<löux/i›‹t.h
>

58 
	~<löux/io.h
>

59 
	~<löux/gpio.h
>

60 
	~<löux/¶ab.h
>

61 
	~<löux/∂©f‹m_devi˚.h
>

62 
	~<löux/mod_devi˚èbÀ.h
>

63 
	~<löux/basic_mmio_gpio.h
>

65 
	$bgpio_wrôe8
(
__iomem
 *
ªg
, 
d©a
)

67 
	`wrôeb
(
d©a
, 
ªg
);

68 
	}
}

70 
	$bgpio_ªad8
(
__iomem
 *
ªg
)

72  
	`ªadb
(
ªg
);

73 
	}
}

75 
	$bgpio_wrôe16
(
__iomem
 *
ªg
, 
d©a
)

77 
	`wrôew
(
d©a
, 
ªg
);

78 
	}
}

80 
	$bgpio_ªad16
(
__iomem
 *
ªg
)

82  
	`ªadw
(
ªg
);

83 
	}
}

85 
	$bgpio_wrôe32
(
__iomem
 *
ªg
, 
d©a
)

87 
	`wrôñ
(
d©a
, 
ªg
);

88 
	}
}

90 
	$bgpio_ªad32
(
__iomem
 *
ªg
)

92  
	`ªadl
(
ªg
);

93 
	}
}

95 #i‡
BITS_PER_LONG
 >= 64

96 
	$bgpio_wrôe64
(
__iomem
 *
ªg
, 
d©a
)

98 
	`wrôeq
(
d©a
, 
ªg
);

99 
	}
}

101 
	$bgpio_ªad64
(
__iomem
 *
ªg
)

103  
	`ªadq
(
ªg
);

104 
	}
}

107 
	$bgpio_wrôe16be
(
__iomem
 *
ªg
, 
d©a
)

109 
	`iowrôe16be
(
d©a
, 
ªg
);

110 
	}
}

112 
	$bgpio_ªad16be
(
__iomem
 *
ªg
)

114  
	`i‹ód16be
(
ªg
);

115 
	}
}

117 
	$bgpio_wrôe32be
(
__iomem
 *
ªg
, 
d©a
)

119 
	`iowrôe32be
(
d©a
, 
ªg
);

120 
	}
}

122 
	$bgpio_ªad32be
(
__iomem
 *
ªg
)

124  
	`i‹ód32be
(
ªg
);

125 
	}
}

127 
	$bgpio_pö2mask
(
bgpio_chù
 *
bgc
, 
pö
)

129  1 << 
pö
;

130 
	}
}

132 
	$bgpio_pö2mask_be
(
bgpio_chù
 *
bgc
,

133 
pö
)

135  1 << (
bgc
->
bôs
 - 1 - 
pö
);

136 
	}
}

138 
	$bgpio_gë
(
gpio_chù
 *
gc
, 
gpio
)

140 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

142  
bgc
->
	`ªad_ªg
(bgc->
ªg_d©
Ë& bgc->
	`pö2mask
(bgc, 
gpio
);

143 
	}
}

145 
	$bgpio_£t
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

147 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

148 
mask
 = 
bgc
->
	`pö2mask
(bgc, 
gpio
);

149 
Êags
;

151 
	`•ö_lock_úqßve
(&
bgc
->
lock
, 
Êags
);

153 i‡(
vÆ
)

154 
bgc
->
d©a
 |
mask
;

156 
bgc
->
d©a
 &~
mask
;

158 
bgc
->
	`wrôe_ªg
(bgc->
ªg_d©
, bgc->
d©a
);

160 
	`•ö_u∆ock_úqª°‹e
(&
bgc
->
lock
, 
Êags
);

161 
	}
}

163 
	$bgpio_£t_wôh_˛ór
(
gpio_chù
 *
gc
, 
gpio
,

164 
vÆ
)

166 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

167 
mask
 = 
bgc
->
	`pö2mask
(bgc, 
gpio
);

169 i‡(
vÆ
)

170 
bgc
->
	`wrôe_ªg
(bgc->
ªg_£t
, 
mask
);

172 
bgc
->
	`wrôe_ªg
(bgc->
ªg_˛r
, 
mask
);

173 
	}
}

175 
	$bgpio_£t_£t
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

177 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

178 
mask
 = 
bgc
->
	`pö2mask
(bgc, 
gpio
);

179 
Êags
;

181 
	`•ö_lock_úqßve
(&
bgc
->
lock
, 
Êags
);

183 i‡(
vÆ
)

184 
bgc
->
d©a
 |
mask
;

186 
bgc
->
d©a
 &~
mask
;

188 
bgc
->
	`wrôe_ªg
(bgc->
ªg_£t
, bgc->
d©a
);

190 
	`•ö_u∆ock_úqª°‹e
(&
bgc
->
lock
, 
Êags
);

191 
	}
}

193 
	$bgpio_sim∂e_dú_ö
(
gpio_chù
 *
gc
, 
gpio
)

196 
	}
}

198 
	$bgpio_sim∂e_dú_out
(
gpio_chù
 *
gc
, 
gpio
,

199 
vÆ
)

201 
gc
->
	`£t
(gc, 
gpio
, 
vÆ
);

204 
	}
}

206 
	$bgpio_dú_ö
(
gpio_chù
 *
gc
, 
gpio
)

208 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

209 
Êags
;

211 
	`•ö_lock_úqßve
(&
bgc
->
lock
, 
Êags
);

213 
bgc
->
dú
 &~bgc->
	`pö2mask
(bgc, 
gpio
);

214 
bgc
->
	`wrôe_ªg
(bgc->
ªg_dú
, bgc->
dú
);

216 
	`•ö_u∆ock_úqª°‹e
(&
bgc
->
lock
, 
Êags
);

219 
	}
}

221 
	$bgpio_dú_out
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

223 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

224 
Êags
;

226 
gc
->
	`£t
(gc, 
gpio
, 
vÆ
);

228 
	`•ö_lock_úqßve
(&
bgc
->
lock
, 
Êags
);

230 
bgc
->
dú
 |bgc->
	`pö2mask
(bgc, 
gpio
);

231 
bgc
->
	`wrôe_ªg
(bgc->
ªg_dú
, bgc->
dú
);

233 
	`•ö_u∆ock_úqª°‹e
(&
bgc
->
lock
, 
Êags
);

236 
	}
}

238 
	$bgpio_dú_ö_öv
(
gpio_chù
 *
gc
, 
gpio
)

240 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

241 
Êags
;

243 
	`•ö_lock_úqßve
(&
bgc
->
lock
, 
Êags
);

245 
bgc
->
dú
 |bgc->
	`pö2mask
(bgc, 
gpio
);

246 
bgc
->
	`wrôe_ªg
(bgc->
ªg_dú
, bgc->
dú
);

248 
	`•ö_u∆ock_úqª°‹e
(&
bgc
->
lock
, 
Êags
);

251 
	}
}

253 
	$bgpio_dú_out_öv
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

255 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

256 
Êags
;

258 
gc
->
	`£t
(gc, 
gpio
, 
vÆ
);

260 
	`•ö_lock_úqßve
(&
bgc
->
lock
, 
Êags
);

262 
bgc
->
dú
 &~bgc->
	`pö2mask
(bgc, 
gpio
);

263 
bgc
->
	`wrôe_ªg
(bgc->
ªg_dú
, bgc->
dú
);

265 
	`•ö_u∆ock_úqª°‹e
(&
bgc
->
lock
, 
Êags
);

268 
	}
}

270 
	$bgpio_£tup_ac˚ss‹s
(
devi˚
 *
dev
,

271 
bgpio_chù
 *
bgc
,

272 
boﬁ
 
bô_be
,

273 
boﬁ
 
byã_be
)

276 
bgc
->
bôs
) {

278 
bgc
->
ªad_ªg
 = 
bgpio_ªad8
;

279 
bgc
->
wrôe_ªg
 = 
bgpio_wrôe8
;

282 i‡(
byã_be
) {

283 
bgc
->
ªad_ªg
 = 
bgpio_ªad16be
;

284 
bgc
->
wrôe_ªg
 = 
bgpio_wrôe16be
;

286 
bgc
->
ªad_ªg
 = 
bgpio_ªad16
;

287 
bgc
->
wrôe_ªg
 = 
bgpio_wrôe16
;

291 i‡(
byã_be
) {

292 
bgc
->
ªad_ªg
 = 
bgpio_ªad32be
;

293 
bgc
->
wrôe_ªg
 = 
bgpio_wrôe32be
;

295 
bgc
->
ªad_ªg
 = 
bgpio_ªad32
;

296 
bgc
->
wrôe_ªg
 = 
bgpio_wrôe32
;

299 #i‡
BITS_PER_LONG
 >= 64

301 i‡(
byã_be
) {

302 
	`dev_îr
(
dev
,

304  -
EINVAL
;

306 
bgc
->
ªad_ªg
 = 
bgpio_ªad64
;

307 
bgc
->
wrôe_ªg
 = 
bgpio_wrôe64
;

312 
	`dev_îr
(
dev
, "unsuµ‹ãd d©®width %u bôs\n", 
bgc
->
bôs
);

313  -
EINVAL
;

316 
bgc
->
pö2mask
 = 
bô_be
 ? 
bgpio_pö2mask_be
 : 
bgpio_pö2mask
;

319 
	}
}

343 
	$bgpio_£tup_io
(
bgpio_chù
 *
bgc
,

344 
__iomem
 *
d©
,

345 
__iomem
 *
£t
,

346 
__iomem
 *
˛r
)

349 
bgc
->
ªg_d©
 = 
d©
;

350 i‡(!
bgc
->
ªg_d©
)

351  -
EINVAL
;

353 i‡(
£t
 && 
˛r
) {

354 
bgc
->
ªg_£t
 = 
£t
;

355 
bgc
->
ªg_˛r
 = 
˛r
;

356 
bgc
->
gc
.
£t
 = 
bgpio_£t_wôh_˛ór
;

357 } i‡(
£t
 && !
˛r
) {

358 
bgc
->
ªg_£t
 = 
£t
;

359 
bgc
->
gc
.
£t
 = 
bgpio_£t_£t
;

361 
bgc
->
gc
.
£t
 = 
bgpio_£t
;

364 
bgc
->
gc
.
gë
 = 
bgpio_gë
;

367 
	}
}

369 
	$bgpio_£tup_dúe˘i⁄
(
bgpio_chù
 *
bgc
,

370 
__iomem
 *
dúout
,

371 
__iomem
 *
dúö
)

373 i‡(
dúout
 && 
dúö
) {

374  -
EINVAL
;

375 } i‡(
dúout
) {

376 
bgc
->
ªg_dú
 = 
dúout
;

377 
bgc
->
gc
.
dúe˘i⁄_ouçut
 = 
bgpio_dú_out
;

378 
bgc
->
gc
.
dúe˘i⁄_öput
 = 
bgpio_dú_ö
;

379 } i‡(
dúö
) {

380 
bgc
->
ªg_dú
 = 
dúö
;

381 
bgc
->
gc
.
dúe˘i⁄_ouçut
 = 
bgpio_dú_out_öv
;

382 
bgc
->
gc
.
dúe˘i⁄_öput
 = 
bgpio_dú_ö_öv
;

384 
bgc
->
gc
.
dúe˘i⁄_ouçut
 = 
bgpio_sim∂e_dú_out
;

385 
bgc
->
gc
.
dúe˘i⁄_öput
 = 
bgpio_sim∂e_dú_ö
;

389 
	}
}

391 
	$bgpio_ªmove
(
bgpio_chù
 *
bgc
)

393  
	`gpiochù_ªmove
(&
bgc
->
gc
);

394 
	}
}

395 
EXPORT_SYMBOL_GPL
(
bgpio_ªmove
);

397 
	$bgpio_öô
(
bgpio_chù
 *
bgc
, 
devi˚
 *
dev
,

398 
sz
, 
__iomem
 *
d©
, __iomem *
£t
,

399 
__iomem
 *
˛r
, __iomem *
dúout
, __iomem *
dúö
,

400 
Êags
)

402 
ªt
;

404 i‡(!
	`is_powî_of_2
(
sz
))

405  -
EINVAL
;

407 
bgc
->
bôs
 = 
sz
 * 8;

408 i‡(
bgc
->
bôs
 > 
BITS_PER_LONG
)

409  -
EINVAL
;

411 
	`•ö_lock_öô
(&
bgc
->
lock
);

412 
bgc
->
gc
.
dev
 = dev;

413 
bgc
->
gc
.
œbñ
 = 
	`dev_«me
(
dev
);

414 
bgc
->
gc
.
ba£
 = -1;

415 
bgc
->
gc
.
ngpio
 = bgc->
bôs
;

417 
ªt
 = 
	`bgpio_£tup_io
(
bgc
, 
d©
, 
£t
, 
˛r
);

418 i‡(
ªt
)

419  
ªt
;

421 
ªt
 = 
	`bgpio_£tup_ac˚ss‹s
(
dev
, 
bgc
, 
Êags
 & 
BGPIOF_BIG_ENDIAN
,

422 
Êags
 & 
BGPIOF_BIG_ENDIAN_BYTE_ORDER
);

423 i‡(
ªt
)

424  
ªt
;

426 
ªt
 = 
	`bgpio_£tup_dúe˘i⁄
(
bgc
, 
dúout
, 
dúö
);

427 i‡(
ªt
)

428  
ªt
;

430 
bgc
->
d©a
 = bgc->
	`ªad_ªg
(bgc->
ªg_d©
);

431 i‡(
bgc
->
gc
.
£t
 =
bgpio_£t_£t
 &&

432 !(
Êags
 & 
BGPIOF_UNREADABLE_REG_SET
))

433 
bgc
->
d©a
 = bgc->
	`ªad_ªg
(bgc->
ªg_£t
);

434 i‡(
bgc
->
ªg_dú
 && !(
Êags
 & 
BGPIOF_UNREADABLE_REG_DIR
))

435 
bgc
->
dú
 = bgc->
	`ªad_ªg
(bgc->
ªg_dú
);

437  
ªt
;

438 
	}
}

439 
EXPORT_SYMBOL_GPL
(
bgpio_öô
);

441 #ifde‡
CONFIG_GPIO_GENERIC_PLATFORM


443 
__iomem
 *
	$bgpio_m≠
(
∂©f‹m_devi˚
 *
pdev
,

444 c⁄° *
«me
,

445 
ªsour˚_size_t
 
ß√_sz
,

446 *
îr
)

448 
devi˚
 *
dev
 = &
pdev
->dev;

449 
ªsour˚
 *
r
;

450 
ªsour˚_size_t
 
°¨t
;

451 
ªsour˚_size_t
 
sz
;

452 
__iomem
 *
ªt
;

454 *
îr
 = 0;

456 
r
 = 
	`∂©f‹m_gë_ªsour˚_by«me
(
pdev
, 
IORESOURCE_MEM
, 
«me
);

457 i‡(!
r
)

458  
NULL
;

460 
sz
 = 
	`ªsour˚_size
(
r
);

461 i‡(
sz
 !
ß√_sz
) {

462 *
îr
 = -
EINVAL
;

463  
NULL
;

466 
°¨t
 = 
r
->start;

467 i‡(!
	`devm_ªque°_mem_ªgi⁄
(
dev
, 
°¨t
, 
sz
, 
r
->
«me
)) {

468 *
îr
 = -
EBUSY
;

469  
NULL
;

472 
ªt
 = 
	`devm_i‹em≠
(
dev
, 
°¨t
, 
sz
);

473 i‡(!
ªt
) {

474 *
îr
 = -
ENOMEM
;

475  
NULL
;

478  
ªt
;

479 
	}
}

481 
	$bgpio_pdev_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

483 
devi˚
 *
dev
 = &
pdev
->dev;

484 
ªsour˚
 *
r
;

485 
__iomem
 *
d©
;

486 
__iomem
 *
£t
;

487 
__iomem
 *
˛r
;

488 
__iomem
 *
dúout
;

489 
__iomem
 *
dúö
;

490 
sz
;

491 
Êags
 = 0;

492 
îr
;

493 
bgpio_chù
 *
bgc
;

494 
bgpio_pd©a
 *
pd©a
 = 
	`dev_gë_∂©d©a
(
dev
);

496 
r
 = 
	`∂©f‹m_gë_ªsour˚_by«me
(
pdev
, 
IORESOURCE_MEM
, "dat");

497 i‡(!
r
)

498  -
EINVAL
;

500 
sz
 = 
	`ªsour˚_size
(
r
);

502 
d©
 = 
	`bgpio_m≠
(
pdev
, "d©", 
sz
, &
îr
);

503 i‡(!
d©
)

504  
îr
 ?Éº : -
EINVAL
;

506 
£t
 = 
	`bgpio_m≠
(
pdev
, "£t", 
sz
, &
îr
);

507 i‡(
îr
)

508  
îr
;

510 
˛r
 = 
	`bgpio_m≠
(
pdev
, "˛r", 
sz
, &
îr
);

511 i‡(
îr
)

512  
îr
;

514 
dúout
 = 
	`bgpio_m≠
(
pdev
, "dúout", 
sz
, &
îr
);

515 i‡(
îr
)

516  
îr
;

518 
dúö
 = 
	`bgpio_m≠
(
pdev
, "dúö", 
sz
, &
îr
);

519 i‡(
îr
)

520  
îr
;

522 i‡(!
	`°rcmp
(
	`∂©f‹m_gë_devi˚_id
(
pdev
)->
«me
, "basic-mmio-gpio-be"))

523 
Êags
 |
BGPIOF_BIG_ENDIAN
;

525 
bgc
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*bgc), 
GFP_KERNEL
);

526 i‡(!
bgc
)

527  -
ENOMEM
;

529 
îr
 = 
	`bgpio_öô
(
bgc
, 
dev
, 
sz
, 
d©
, 
£t
, 
˛r
, 
dúout
, 
dúö
, 
Êags
);

530 i‡(
îr
)

531  
îr
;

533 i‡(
pd©a
) {

534 
bgc
->
gc
.
ba£
 = 
pd©a
->base;

535 i‡(
pd©a
->
ngpio
 > 0)

536 
bgc
->
gc
.
ngpio
 = 
pd©a
->ngpio;

539 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
bgc
);

541  
	`gpiochù_add
(&
bgc
->
gc
);

542 
	}
}

544 
	$bgpio_pdev_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

546 
bgpio_chù
 *
bgc
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

548  
	`bgpio_ªmove
(
bgc
);

549 
	}
}

551 c⁄° 
∂©f‹m_devi˚_id
 
	gbgpio_id_èbÀ
[] = {

556 
MODULE_DEVICE_TABLE
(
∂©f‹m
, 
bgpio_id_èbÀ
);

558 
∂©f‹m_drivî
 
	gbgpio_drivî
 = {

559 .
drivî
 = {

560 .
«me
 = "basic-mmio-gpio",

562 .
	gid_èbÀ
 = 
bgpio_id_èbÀ
,

563 .
	g¥obe
 = 
bgpio_pdev_¥obe
,

564 .
	gªmove
 = 
bgpio_pdev_ªmove
,

567 
moduÀ_∂©f‹m_drivî
(
bgpio_drivî
);

571 
MODULE_DESCRIPTION
("Driver for basic memory-mapped GPIO controllers");

572 
MODULE_AUTHOR
("Anton Vorontsov <cbouatmailru@gmail.com>");

573 
MODULE_LICENSE
("GPL");

	@gpio-grgpio.c

23 
	~<löux/kî√l.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/öô.h
>

26 
	~<löux/•ölock.h
>

27 
	~<löux/io.h
>

28 
	~<löux/of.h
>

29 
	~<löux/of_gpio.h
>

30 
	~<löux/of_∂©f‹m.h
>

31 
	~<löux/gpio.h
>

32 
	~<löux/¶ab.h
>

33 
	~<löux/îr.h
>

34 
	~<löux/basic_mmio_gpio.h
>

35 
	~<löux/öãºu±.h
>

36 
	~<löux/úq.h
>

37 
	~<löux/úqdomaö.h
>

39 
	#GRGPIO_MAX_NGPIO
 32

	)

41 
	#GRGPIO_DATA
 0x00

	)

42 
	#GRGPIO_OUTPUT
 0x04

	)

43 
	#GRGPIO_DIR
 0x08

	)

44 
	#GRGPIO_IMASK
 0x0c

	)

45 
	#GRGPIO_IPOL
 0x10

	)

46 
	#GRGPIO_IEDGE
 0x14

	)

47 
	#GRGPIO_BYPASS
 0x18

	)

48 
	#GRGPIO_IMAP_BASE
 0x20

	)

51 
	sgrgpio_uúq
 {

52 
u8
 
	mªf˙t
;

53 
u8
 
	muúq
;

60 
	sgrgpio_lúq
 {

61 
s8
 
	mödex
;

62 
u8
 
	múq
;

65 
	sgrgpio_¥iv
 {

66 
bgpio_chù
 
	mbgc
;

67 
__iomem
 *
	mªgs
;

68 
devi˚
 *
	mdev
;

70 
u32
 
	mimask
;

78 
úq_domaö
 *
	mdomaö
;

84 
grgpio_uúq
 
	muúqs
[
GRGPIO_MAX_NGPIO
];

92 
grgpio_lúq
 
	mlúqs
[
GRGPIO_MAX_NGPIO
];

95 
ölöe
 
grgpio_¥iv
 *
	$grgpio_gc_to_¥iv
(
gpio_chù
 *
gc
)

97 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

99  
	`c⁄èöî_of
(
bgc
, 
grgpio_¥iv
, bgc);

100 
	}
}

102 
	$grgpio_£t_imask
(
grgpio_¥iv
 *
¥iv
, 
off£t
,

103 
vÆ
)

105 
bgpio_chù
 *
bgc
 = &
¥iv
->bgc;

106 
mask
 = 
bgc
->
	`pö2mask
(bgc, 
off£t
);

107 
Êags
;

109 
	`•ö_lock_úqßve
(&
bgc
->
lock
, 
Êags
);

111 i‡(
vÆ
)

112 
¥iv
->
imask
 |
mask
;

114 
¥iv
->
imask
 &~
mask
;

115 
bgc
->
	`wrôe_ªg
(
¥iv
->
ªgs
 + 
GRGPIO_IMASK
,Öriv->
imask
);

117 
	`•ö_u∆ock_úqª°‹e
(&
bgc
->
lock
, 
Êags
);

118 
	}
}

120 
	$grgpio_to_úq
(
gpio_chù
 *
gc
, 
off£t
)

122 
grgpio_¥iv
 *
¥iv
 = 
	`grgpio_gc_to_¥iv
(
gc
);

124 i‡(
off£t
 > 
gc
->
ngpio
)

125  -
ENXIO
;

127 i‡(
¥iv
->
lúqs
[
off£t
].
ödex
 < 0)

128  -
ENXIO
;

130  
	`úq_¸óã_m≠pög
(
¥iv
->
domaö
, 
off£t
);

131 
	}
}

135 
	$grgpio_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

137 
grgpio_¥iv
 *
¥iv
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

138 
Êags
;

139 
u32
 
mask
 = 
	`BIT
(
d
->
hwúq
);

140 
u32
 
ùﬁ
;

141 
u32
 
õdge
;

142 
u32
 
pﬁ
;

143 
u32
 
edge
;

145 
ty≥
) {

146 
IRQ_TYPE_LEVEL_LOW
:

147 
pﬁ
 = 0;

148 
edge
 = 0;

150 
IRQ_TYPE_LEVEL_HIGH
:

151 
pﬁ
 = 
mask
;

152 
edge
 = 0;

154 
IRQ_TYPE_EDGE_FALLING
:

155 
pﬁ
 = 0;

156 
edge
 = 
mask
;

158 
IRQ_TYPE_EDGE_RISING
:

159 
pﬁ
 = 
mask
;

160 
edge
 = 
mask
;

163  -
EINVAL
;

166 
	`•ö_lock_úqßve
(&
¥iv
->
bgc
.
lock
, 
Êags
);

168 
ùﬁ
 = 
¥iv
->
bgc
.
	`ªad_ªg
’riv->
ªgs
 + 
GRGPIO_IPOL
Ë& ~
mask
;

169 
õdge
 = 
¥iv
->
bgc
.
	`ªad_ªg
’riv->
ªgs
 + 
GRGPIO_IEDGE
Ë& ~
mask
;

171 
¥iv
->
bgc
.
	`wrôe_ªg
’riv->
ªgs
 + 
GRGPIO_IPOL
, 
ùﬁ
 | 
pﬁ
);

172 
¥iv
->
bgc
.
	`wrôe_ªg
’riv->
ªgs
 + 
GRGPIO_IEDGE
, 
õdge
 | 
edge
);

174 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
bgc
.
lock
, 
Êags
);

177 
	}
}

179 
	$grgpio_úq_mask
(
úq_d©a
 *
d
)

181 
grgpio_¥iv
 *
¥iv
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

182 
off£t
 = 
d
->
hwúq
;

184 
	`grgpio_£t_imask
(
¥iv
, 
off£t
, 0);

185 
	}
}

187 
	$grgpio_úq_unmask
(
úq_d©a
 *
d
)

189 
grgpio_¥iv
 *
¥iv
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

190 
off£t
 = 
d
->
hwúq
;

192 
	`grgpio_£t_imask
(
¥iv
, 
off£t
, 1);

193 
	}
}

195 
úq_chù
 
	ggrgpio_úq_chù
 = {

196 .
«me
 = "grgpio",

197 .
	gúq_mask
 = 
grgpio_úq_mask
,

198 .
	gúq_unmask
 = 
grgpio_úq_unmask
,

199 .
	gúq_£t_ty≥
 = 
grgpio_úq_£t_ty≥
,

202 
úqªtu∫_t
 
	$grgpio_úq_h™dÀr
(
úq
, *
dev
)

204 
grgpio_¥iv
 *
¥iv
 = 
dev
;

205 
ngpio
 = 
¥iv
->
bgc
.
gc
.ngpio;

206 
Êags
;

207 
i
;

208 
m©ch
 = 0;

210 
	`•ö_lock_úqßve
(&
¥iv
->
bgc
.
lock
, 
Êags
);

216 
i
 = 0; i < 
ngpio
; i++) {

217 
grgpio_lúq
 *
lúq
 = &
¥iv
->
lúqs
[
i
];

219 i‡(
¥iv
->
imask
 & 
	`BIT
(
i
Ë&& 
lúq
->
ödex
 >= 0 &&

220 
¥iv
->
uúqs
[
lúq
->
ödex
].
uúq
 =
úq
) {

221 
	`gíîic_h™dÀ_úq
(
lúq
->
úq
);

222 
m©ch
 = 1;

226 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
bgc
.
lock
, 
Êags
);

228 i‡(!
m©ch
)

229 
	`dev_w¨n
(
¥iv
->
dev
, "Nÿgpiÿlöêm©ched irq %d\n", 
úq
);

231  
IRQ_HANDLED
;

232 
	}
}

238 
	$grgpio_úq_m≠
(
úq_domaö
 *
d
, 
úq
,

239 
úq_hw_numbî_t
 
hwúq
)

241 
grgpio_¥iv
 *
¥iv
 = 
d
->
ho°_d©a
;

242 
grgpio_lúq
 *
lúq
;

243 
grgpio_uúq
 *
uúq
;

244 
Êags
;

245 
off£t
 = 
hwúq
;

246 
ªt
 = 0;

248 i‡(!
¥iv
)

249  -
EINVAL
;

251 
lúq
 = &
¥iv
->
lúqs
[
off£t
];

252 i‡(
lúq
->
ödex
 < 0)

253  -
EINVAL
;

255 
	`dev_dbg
(
¥iv
->
dev
, "Mapping irq %d for gpioÜine %d\n",

256 
úq
, 
off£t
);

258 
	`•ö_lock_úqßve
(&
¥iv
->
bgc
.
lock
, 
Êags
);

261 
lúq
->
úq
 = irq;

262 
uúq
 = &
¥iv
->
uúqs
[
lúq
->
ödex
];

263 i‡(
uúq
->
ªf˙t
 == 0) {

264 
ªt
 = 
	`ªque°_úq
(
uúq
->uúq, 
grgpio_úq_h™dÀr
, 0,

265 
	`dev_«me
(
¥iv
->
dev
),Öriv);

266 i‡(
ªt
) {

267 
	`dev_îr
(
¥iv
->
dev
,

269 
uúq
->uirq);

271 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
bgc
.
lock
, 
Êags
);

273  
ªt
;

276 
uúq
->
ªf˙t
++;

278 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
bgc
.
lock
, 
Êags
);

281 
	`úq_£t_chù_d©a
(
úq
, 
¥iv
);

282 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
grgpio_úq_chù
,

283 
h™dÀ_sim∂e_úq
);

284 
	`úq_˛ór_°©us_Êags
(
úq
, 
IRQ_NOREQUEST
);

285 #ifde‡
CONFIG_ARM


286 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

288 
	`úq_£t_n›robe
(
úq
);

291  
ªt
;

292 
	}
}

294 
	$grgpio_úq_unm≠
(
úq_domaö
 *
d
, 
úq
)

296 
grgpio_¥iv
 *
¥iv
 = 
d
->
ho°_d©a
;

297 
ödex
;

298 
grgpio_lúq
 *
lúq
;

299 
grgpio_uúq
 *
uúq
;

300 
Êags
;

301 
ngpio
 = 
¥iv
->
bgc
.
gc
.ngpio;

302 
i
;

304 #ifde‡
CONFIG_ARM


305 
	`£t_úq_Êags
(
úq
, 0);

307 
	`úq_£t_chù_™d_h™dÀr
(
úq
, 
NULL
, NULL);

308 
	`úq_£t_chù_d©a
(
úq
, 
NULL
);

310 
	`•ö_lock_úqßve
(&
¥iv
->
bgc
.
lock
, 
Êags
);

313 
ödex
 = -1;

314 
i
 = 0; i < 
ngpio
; i++) {

315 
lúq
 = &
¥iv
->
lúqs
[
i
];

316 i‡(
lúq
->
úq
 == irq) {

317 
	`grgpio_£t_imask
(
¥iv
, 
i
, 0);

318 
lúq
->
úq
 = 0;

319 
ödex
 = 
lúq
->index;

323 
	`WARN_ON
(
ödex
 < 0);

325 i‡(
ödex
 >= 0) {

326 
uúq
 = &
¥iv
->
uúqs
[
lúq
->
ödex
];

327 
uúq
->
ªf˙t
--;

328 i‡(
uúq
->
ªf˙t
 == 0)

329 
	`‰ì_úq
(
uúq
->uúq, 
¥iv
);

332 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
bgc
.
lock
, 
Êags
);

333 
	}
}

335 
úq_domaö_›s
 
	ggrgpio_úq_domaö_›s
 = {

336 .
m≠
 = 
grgpio_úq_m≠
,

337 .
	gunm≠
 = 
grgpio_úq_unm≠
,

342 
	$grgpio_¥obe
(
∂©f‹m_devi˚
 *
ofdev
)

344 
devi˚_node
 *
≈
 = 
ofdev
->
dev
.
of_node
;

345 
__iomem
 *
ªgs
;

346 
gpio_chù
 *
gc
;

347 
bgpio_chù
 *
bgc
;

348 
grgpio_¥iv
 *
¥iv
;

349 
ªsour˚
 *
ªs
;

350 
îr
;

351 
u32
 
¥›
;

352 
s32
 *
úqm≠
;

353 
size
;

354 
i
;

356 
¥iv
 = 
	`devm_kzÆloc
(&
ofdev
->
dev
, (*¥iv), 
GFP_KERNEL
);

357 i‡(!
¥iv
)

358  -
ENOMEM
;

360 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
ofdev
, 
IORESOURCE_MEM
, 0);

361 
ªgs
 = 
	`devm_i‹em≠_ªsour˚
(&
ofdev
->
dev
, 
ªs
);

362 i‡(
	`IS_ERR
(
ªgs
))

363  
	`PTR_ERR
(
ªgs
);

365 
bgc
 = &
¥iv
->bgc;

366 
îr
 = 
	`bgpio_öô
(
bgc
, &
ofdev
->
dev
, 4, 
ªgs
 + 
GRGPIO_DATA
,

367 
ªgs
 + 
GRGPIO_OUTPUT
, 
NULL
,Ñeg†+ 
GRGPIO_DIR
, NULL,

368 
BGPIOF_BIG_ENDIAN_BYTE_ORDER
);

369 i‡(
îr
) {

370 
	`dev_îr
(&
ofdev
->
dev
, "bgpio_init() failed\n");

371  
îr
;

374 
¥iv
->
ªgs
 =Ñegs;

375 
¥iv
->
imask
 = 
bgc
->
	`ªad_ªg
(
ªgs
 + 
GRGPIO_IMASK
);

376 
¥iv
->
dev
 = &
ofdev
->dev;

378 
gc
 = &
bgc
->gc;

379 
gc
->
of_node
 = 
≈
;

380 
gc
->
ow√r
 = 
THIS_MODULE
;

381 
gc
->
to_úq
 = 
grgpio_to_úq
;

382 
gc
->
œbñ
 = 
≈
->
fuŒ_«me
;

383 
gc
->
ba£
 = -1;

385 
îr
 = 
	`of_¥›îty_ªad_u32
(
≈
, "nbôs", &
¥›
);

386 i‡(
îr
 || 
¥›
 <0 ||Ör› > 
GRGPIO_MAX_NGPIO
) {

387 
gc
->
ngpio
 = 
GRGPIO_MAX_NGPIO
;

388 
	`dev_dbg
(&
ofdev
->
dev
,

389 "Nÿ‹ invÆidÇbô†¥›îty:ássumê%d\n", 
gc
->
ngpio
);

391 
gc
->
ngpio
 = 
¥›
;

398 
úqm≠
 = (
s32
 *)
	`of_gë_¥›îty
(
≈
, "úqm≠", &
size
);

399 i‡(
úqm≠
) {

400 i‡(
size
 < 
gc
->
ngpio
) {

401 
	`dev_îr
(&
ofdev
->
dev
,

403 
size
, 
gc
->
ngpio
);

404  -
EINVAL
;

407 
¥iv
->
domaö
 = 
	`úq_domaö_add_löór
(
≈
, 
gc
->
ngpio
,

408 &
grgpio_úq_domaö_›s
,

409 
¥iv
);

410 i‡(!
¥iv
->
domaö
) {

411 
	`dev_îr
(&
ofdev
->
dev
, "CouldÇotádd irq domain\n");

412  -
EINVAL
;

415 
i
 = 0; i < 
gc
->
ngpio
; i++) {

416 
grgpio_lúq
 *
lúq
;

417 
ªt
;

419 
lúq
 = &
¥iv
->
lúqs
[
i
];

420 
lúq
->
ödex
 = 
úqm≠
[
i
];

422 i‡(
lúq
->
ödex
 < 0)

425 
ªt
 = 
	`∂©f‹m_gë_úq
(
ofdev
, 
lúq
->
ödex
);

426 i‡(
ªt
 <= 0) {

431 
	`dev_îr
(
¥iv
->
dev
,

432 "FaûedÅÿgë irq f‹ off£à%d\n", 
i
);

435 
¥iv
->
uúqs
[
lúq
->
ödex
].
uúq
 = 
ªt
;

439 
	`∂©f‹m_£t_drvd©a
(
ofdev
, 
¥iv
);

441 
îr
 = 
	`gpiochù_add
(
gc
);

442 i‡(
îr
) {

443 
	`dev_îr
(&
ofdev
->
dev
, "CouldÇotádd gpiochip\n");

444  
îr
;

447 
	`dev_öfo
(&
ofdev
->
dev
, "regs=0x%p, base=%d,Çgpio=%d, irqs=%s\n",

448 
¥iv
->
ªgs
, 
gc
->
ba£
, gc->
ngpio
,Öriv->
domaö
 ? "on" : "off");

451 
	}
}

453 
	$grgpio_ªmove
(
∂©f‹m_devi˚
 *
ofdev
)

455 
grgpio_¥iv
 *
¥iv
 = 
	`∂©f‹m_gë_drvd©a
(
ofdev
);

456 
Êags
;

457 
i
;

458 
ªt
 = 0;

460 
	`•ö_lock_úqßve
(&
¥iv
->
bgc
.
lock
, 
Êags
);

462 i‡(
¥iv
->
domaö
) {

463 
i
 = 0; i < 
GRGPIO_MAX_NGPIO
; i++) {

464 i‡(
¥iv
->
uúqs
[
i
].
ªf˙t
 != 0) {

465 
ªt
 = -
EBUSY
;

466 
out
;

471 
ªt
 = 
	`gpiochù_ªmove
(&
¥iv
->
bgc
.
gc
);

472 i‡(
ªt
)

473 
out
;

475 i‡(
¥iv
->
domaö
)

476 
	`úq_domaö_ªmove
(
¥iv
->
domaö
);

478 
out
:

479 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
bgc
.
lock
, 
Êags
);

481  
ªt
;

482 
	}
}

484 
of_devi˚_id
 
	ggrgpio_m©ch
[] = {

485 {.
«me
 = "GAISLER_GPIO"},

486 {.
	g«me
 = "01_01a"},

490 
MODULE_DEVICE_TABLE
(
of
, 
grgpio_m©ch
);

492 
∂©f‹m_drivî
 
	ggrgpio_drivî
 = {

493 .
drivî
 = {

494 .
«me
 = "grgpio",

495 .
	gow√r
 = 
THIS_MODULE
,

496 .
	gof_m©ch_èbÀ
 = 
grgpio_m©ch
,

498 .
	g¥obe
 = 
grgpio_¥obe
,

499 .
	gªmove
 = 
grgpio_ªmove
,

501 
moduÀ_∂©f‹m_drivî
(
grgpio_drivî
);

503 
MODULE_AUTHOR
("Aeroflex Gaisler AB.");

504 
MODULE_DESCRIPTION
("Driver for Aeroflex Gaisler GRGPIO");

505 
MODULE_LICENSE
("GPL");

	@gpio-ich.c

21 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

23 
	~<löux/moduÀ.h
>

24 
	~<löux/pci.h
>

25 
	~<löux/gpio.h
>

26 
	~<löux/∂©f‹m_devi˚.h
>

27 
	~<löux/mfd/Õc_ich.h
>

29 
	#DRV_NAME
 "gpio_ich"

	)

40 
	eGPIO_REG
 {

41 
	mGPIO_USE_SEL
 = 0,

42 
	mGPIO_IO_SEL
,

43 
	mGPIO_LVL
,

46 c⁄° 
u8
 
	gichx_ªgs
[3][3] = {

52 c⁄° 
u8
 
	gichx_ªgÀn
[3] = {

56 
	#ICHX_WRITE
(
vÆ
, 
ªg
, 
ba£_ªs
Ë
	`oué
(vÆ, (ªgË+ (ba£_ªs)->
°¨t
)

	)

57 
	#ICHX_READ
(
ªg
, 
ba£_ªs
Ë
	`öl
(‘egË+ (ba£_ªs)->
°¨t
)

	)

59 
	sichx_desc
 {

61 
uöt
 
	mngpio
;

64 
boﬁ
 
	mu£s_g≥0
;

67 
u32
 
	mu£_£l_ign‹e
[3];

70 (*
	mªque°
)(
gpio_chù
 *
	mchù
, 
	moff£t
);

71 (*
	mgë
)(
gpio_chù
 *
	mchù
, 
	moff£t
);

75 
•ölock_t
 
	mlock
;

76 
∂©f‹m_devi˚
 *
	mdev
;

77 
gpio_chù
 
	mchù
;

78 
ªsour˚
 *
	mgpio_ba£
;

79 
ªsour˚
 *
	mpm_ba£
;

80 
ichx_desc
 *
	mdesc
;

81 
u32
 
	m‹ig_gpio_˘æ
;

82 
u8
 
	mu£_gpio
;

83 } 
	gichx_¥iv
;

85 
	gmod∑øm_gpioba£
 = -1;

86 
moduÀ_∑øm_«med
(
gpioba£
, 
mod∑øm_gpioba£
, , 0444);

87 
MODULE_PARM_DESC
(
gpioba£
, "The GPIOÇumber base. -1 means dynamic, "

90 
	$ichx_wrôe_bô
(
ªg
, 
ƒ
, 
vÆ
, 
vîify
)

92 
Êags
;

93 
u32
 
d©a
, 
tmp
;

94 
ªg_ƒ
 = 
ƒ
 / 32;

95 
bô
 = 
ƒ
 & 0x1f;

96 
ªt
 = 0;

98 
	`•ö_lock_úqßve
(&
ichx_¥iv
.
lock
, 
Êags
);

100 
d©a
 = 
	`ICHX_READ
(
ichx_ªgs
[
ªg
][
ªg_ƒ
], 
ichx_¥iv
.
gpio_ba£
);

101 i‡(
vÆ
)

102 
d©a
 |1 << 
bô
;

104 
d©a
 &~(1 << 
bô
);

105 
	`ICHX_WRITE
(
d©a
, 
ichx_ªgs
[
ªg
][
ªg_ƒ
], 
ichx_¥iv
.
gpio_ba£
);

106 
tmp
 = 
	`ICHX_READ
(
ichx_ªgs
[
ªg
][
ªg_ƒ
], 
ichx_¥iv
.
gpio_ba£
);

107 i‡(
vîify
 && 
d©a
 !
tmp
)

108 
ªt
 = -
EPERM
;

110 
	`•ö_u∆ock_úqª°‹e
(&
ichx_¥iv
.
lock
, 
Êags
);

112  
ªt
;

113 
	}
}

115 
	$ichx_ªad_bô
(
ªg
, 
ƒ
)

117 
Êags
;

118 
u32
 
d©a
;

119 
ªg_ƒ
 = 
ƒ
 / 32;

120 
bô
 = 
ƒ
 & 0x1f;

122 
	`•ö_lock_úqßve
(&
ichx_¥iv
.
lock
, 
Êags
);

124 
d©a
 = 
	`ICHX_READ
(
ichx_ªgs
[
ªg
][
ªg_ƒ
], 
ichx_¥iv
.
gpio_ba£
);

126 
	`•ö_u∆ock_úqª°‹e
(&
ichx_¥iv
.
lock
, 
Êags
);

128  
d©a
 & (1 << 
bô
) ? 1 : 0;

129 
	}
}

131 
boﬁ
 
	$ichx_gpio_check_avaûabÀ
(
gpio_chù
 *
gpio
, 
ƒ
)

133  !!(
ichx_¥iv
.
u£_gpio
 & (1 << (
ƒ
 / 32)));

134 
	}
}

136 
	$ichx_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gpio
, 
ƒ
)

142 i‡(
	`ichx_wrôe_bô
(
GPIO_IO_SEL
, 
ƒ
, 1, 1))

143  -
EINVAL
;

146 
	}
}

148 
	$ichx_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gpio
, 
ƒ
,

149 
vÆ
)

152 
	`ichx_wrôe_bô
(
GPIO_LVL
, 
ƒ
, 
vÆ
, 0);

158 i‡(
	`ichx_wrôe_bô
(
GPIO_IO_SEL
, 
ƒ
, 0, 1))

159  -
EINVAL
;

162 
	}
}

164 
	$ichx_gpio_gë
(
gpio_chù
 *
chù
, 
ƒ
)

166  
	`ichx_ªad_bô
(
GPIO_LVL
, 
ƒ
);

167 
	}
}

169 
	$ich6_gpio_gë
(
gpio_chù
 *
chù
, 
ƒ
)

171 
Êags
;

172 
u32
 
d©a
;

178 i‡(
ƒ
 < 16) {

179 i‡(!
ichx_¥iv
.
pm_ba£
)

180  -
ENXIO
;

182 
	`•ö_lock_úqßve
(&
ichx_¥iv
.
lock
, 
Êags
);

185 
	`ICHX_WRITE
(1 << (16 + 
ƒ
), 0, 
ichx_¥iv
.
pm_ba£
);

186 
d©a
 = 
	`ICHX_READ
(0, 
ichx_¥iv
.
pm_ba£
);

188 
	`•ö_u∆ock_úqª°‹e
(&
ichx_¥iv
.
lock
, 
Êags
);

190  (
d©a
 >> 16Ë& (1 << 
ƒ
) ? 1 : 0;

192  
	`ichx_gpio_gë
(
chù
, 
ƒ
);

194 
	}
}

196 
	$ichx_gpio_ªque°
(
gpio_chù
 *
chù
, 
ƒ
)

198 i‡(!
	`ichx_gpio_check_avaûabÀ
(
chù
, 
ƒ
))

199  -
ENXIO
;

207 i‡(
ichx_¥iv
.
desc
->
u£_£l_ign‹e
[
ƒ
 / 32] & (1 << (nr & 0x1f)))

210  
	`ichx_ªad_bô
(
GPIO_USE_SEL
, 
ƒ
Ë? 0 : -
ENODEV
;

211 
	}
}

213 
	$ich6_gpio_ªque°
(
gpio_chù
 *
chù
, 
ƒ
)

221 i‡(
ƒ
 == 16 ||Çr == 17)

222 
ƒ
 -= 16;

224  
	`ichx_gpio_ªque°
(
chù
, 
ƒ
);

225 
	}
}

227 
	$ichx_gpio_£t
(
gpio_chù
 *
chù
, 
ƒ
, 
vÆ
)

229 
	`ichx_wrôe_bô
(
GPIO_LVL
, 
ƒ
, 
vÆ
, 0);

230 
	}
}

232 
	$ichx_gpiﬁib_£tup
(
gpio_chù
 *
chù
)

234 
chù
->
ow√r
 = 
THIS_MODULE
;

235 
chù
->
œbñ
 = 
DRV_NAME
;

236 
chù
->
dev
 = &
ichx_¥iv
.dev->dev;

239 
chù
->
ªque°
 = 
ichx_¥iv
.
desc
->request ?

240 
ichx_¥iv
.
desc
->
ªque°
 : 
ichx_gpio_ªque°
;

241 
chù
->
gë
 = 
ichx_¥iv
.
desc
->get ?

242 
ichx_¥iv
.
desc
->
gë
 : 
ichx_gpio_gë
;

244 
chù
->
£t
 = 
ichx_gpio_£t
;

245 
chù
->
dúe˘i⁄_öput
 = 
ichx_gpio_dúe˘i⁄_öput
;

246 
chù
->
dúe˘i⁄_ouçut
 = 
ichx_gpio_dúe˘i⁄_ouçut
;

247 
chù
->
ba£
 = 
mod∑øm_gpioba£
;

248 
chù
->
ngpio
 = 
ichx_¥iv
.
desc
->ngpio;

249 
chù
->
ˇn_¶ìp
 = 0;

250 
chù
->
dbg_show
 = 
NULL
;

251 
	}
}

254 
ichx_desc
 
	gich6_desc
 = {

256 .
ªque°
 = 
ich6_gpio_ªque°
,

257 .
	ggë
 = 
ich6_gpio_gë
,

260 .
	gu£s_g≥0
 = 
åue
,

262 .
	gngpio
 = 50,

266 
ichx_desc
 
	gi3100_desc
 = {

272 .
u£_£l_ign‹e
 = {0x00130000, 0x00010000, 0x0},

275 .
	gªque°
 = 
ich6_gpio_ªque°
,

276 .
	ggë
 = 
ich6_gpio_gë
,

279 .
	gu£s_g≥0
 = 
åue
,

281 .
	gngpio
 = 50,

285 
ichx_desc
 
	gich7_desc
 = {

286 .
ngpio
 = 50,

290 
ichx_desc
 
	gich9_desc
 = {

291 .
ngpio
 = 61,

295 
ichx_desc
 
	gich10_c⁄s_desc
 = {

296 .
ngpio
 = 61,

298 
ichx_desc
 
	gich10_c‹p_desc
 = {

299 .
ngpio
 = 72,

303 
ichx_desc
 
	göãl5_desc
 = {

304 .
ngpio
 = 76,

307 
	$ichx_gpio_ªque°_ªgi⁄s
(
ªsour˚
 *
ªs_ba£
,

308 c⁄° *
«me
, 
u8
 
u£_gpio
)

310 
i
;

312 i‡(!
ªs_ba£
 || !ªs_ba£->
°¨t
 || !ªs_ba£->
íd
)

313  -
ENODEV
;

315 
i
 = 0; i < 
	`ARRAY_SIZE
(
ichx_ªgs
[0]); i++) {

316 i‡(!(
u£_gpio
 & (1 << 
i
)))

318 i‡(!
	`ªque°_ªgi⁄
(
ªs_ba£
->
°¨t
 + 
ichx_ªgs
[0][
i
],

319 
ichx_ªgÀn
[
i
], 
«me
))

320 
ªque°_îr
;

324 
ªque°_îr
:

326 
i
--; i >= 0; i--) {

327 i‡(!(
u£_gpio
 & (1 << 
i
)))

329 
	`ªÀa£_ªgi⁄
(
ªs_ba£
->
°¨t
 + 
ichx_ªgs
[0][
i
],

330 
ichx_ªgÀn
[
i
]);

332  -
EBUSY
;

333 
	}
}

335 
	$ichx_gpio_ªÀa£_ªgi⁄s
(
ªsour˚
 *
ªs_ba£
, 
u8
 
u£_gpio
)

337 
i
;

339 
i
 = 0; i < 
	`ARRAY_SIZE
(
ichx_ªgs
[0]); i++) {

340 i‡(!(
u£_gpio
 & (1 << 
i
)))

342 
	`ªÀa£_ªgi⁄
(
ªs_ba£
->
°¨t
 + 
ichx_ªgs
[0][
i
],

343 
ichx_ªgÀn
[
i
]);

345 
	}
}

347 
	$ichx_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

349 
ªsour˚
 *
ªs_ba£
, *
ªs_pm
;

350 
îr
;

351 
Õc_ich_öfo
 *
ich_öfo
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

353 i‡(!
ich_öfo
)

354  -
ENODEV
;

356 
ichx_¥iv
.
dev
 = 
pdev
;

358 
ich_öfo
->
gpio_vîsi⁄
) {

359 
ICH_I3100_GPIO
:

360 
ichx_¥iv
.
desc
 = &
i3100_desc
;

362 
ICH_V5_GPIO
:

363 
ichx_¥iv
.
desc
 = &
öãl5_desc
;

365 
ICH_V6_GPIO
:

366 
ichx_¥iv
.
desc
 = &
ich6_desc
;

368 
ICH_V7_GPIO
:

369 
ichx_¥iv
.
desc
 = &
ich7_desc
;

371 
ICH_V9_GPIO
:

372 
ichx_¥iv
.
desc
 = &
ich9_desc
;

374 
ICH_V10CORP_GPIO
:

375 
ichx_¥iv
.
desc
 = &
ich10_c‹p_desc
;

377 
ICH_V10CONS_GPIO
:

378 
ichx_¥iv
.
desc
 = &
ich10_c⁄s_desc
;

381  -
ENODEV
;

384 
	`•ö_lock_öô
(&
ichx_¥iv
.
lock
);

385 
ªs_ba£
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 
ICH_RES_GPIO
);

386 
ichx_¥iv
.
u£_gpio
 = 
ich_öfo
->use_gpio;

387 
îr
 = 
	`ichx_gpio_ªque°_ªgi⁄s
(
ªs_ba£
, 
pdev
->
«me
,

388 
ichx_¥iv
.
u£_gpio
);

389 i‡(
îr
)

390  
îr
;

392 
ichx_¥iv
.
gpio_ba£
 = 
ªs_ba£
;

399 i‡(!
ichx_¥iv
.
desc
->
u£s_g≥0
)

400 
öô
;

402 
ªs_pm
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 
ICH_RES_GPE0
);

403 i‡(!
ªs_pm
) {

404 
	`¥_w¨n
("ACPI BAR is unavailable, GPI 0 - 15 unavailable\n");

405 
öô
;

408 i‡(!
	`ªque°_ªgi⁄
(
ªs_pm
->
°¨t
, 
	`ªsour˚_size
(res_pm),

409 
pdev
->
«me
)) {

410 
	`¥_w¨n
("ACPI BAR is busy, GPI 0 - 15 unavailable\n");

411 
öô
;

414 
ichx_¥iv
.
pm_ba£
 = 
ªs_pm
;

416 
öô
:

417 
	`ichx_gpiﬁib_£tup
(&
ichx_¥iv
.
chù
);

418 
îr
 = 
	`gpiochù_add
(&
ichx_¥iv
.
chù
);

419 i‡(
îr
) {

420 
	`¥_îr
("FailedÅoÑegister GPIOs\n");

421 
add_îr
;

424 
	`¥_öfo
("GPIO from %dÅÿ%d o¿%s\n", 
ichx_¥iv
.
chù
.
ba£
,

425 
ichx_¥iv
.
chù
.
ba£
 + ichx_¥iv.chù.
ngpio
 - 1, 
DRV_NAME
);

429 
add_îr
:

430 
	`ichx_gpio_ªÀa£_ªgi⁄s
(
ichx_¥iv
.
gpio_ba£
, ichx_¥iv.
u£_gpio
);

431 i‡(
ichx_¥iv
.
pm_ba£
)

432 
	`ªÀa£_ªgi⁄
(
ichx_¥iv
.
pm_ba£
->
°¨t
,

433 
	`ªsour˚_size
(
ichx_¥iv
.
pm_ba£
));

434  
îr
;

435 
	}
}

437 
	$ichx_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

439 
îr
;

441 
îr
 = 
	`gpiochù_ªmove
(&
ichx_¥iv
.
chù
);

442 i‡(
îr
) {

443 
	`dev_îr
(&
pdev
->
dev
, "%s failed, %d\n",

444 "gpiochù_ªmove()", 
îr
);

445  
îr
;

448 
	`ichx_gpio_ªÀa£_ªgi⁄s
(
ichx_¥iv
.
gpio_ba£
, ichx_¥iv.
u£_gpio
);

449 i‡(
ichx_¥iv
.
pm_ba£
)

450 
	`ªÀa£_ªgi⁄
(
ichx_¥iv
.
pm_ba£
->
°¨t
,

451 
	`ªsour˚_size
(
ichx_¥iv
.
pm_ba£
));

454 
	}
}

456 
∂©f‹m_drivî
 
	gichx_gpio_drivî
 = {

457 .
drivî
 = {

458 .
ow√r
 = 
THIS_MODULE
,

459 .
	g«me
 = 
DRV_NAME
,

461 .
	g¥obe
 = 
ichx_gpio_¥obe
,

462 .
	gªmove
 = 
ichx_gpio_ªmove
,

465 
moduÀ_∂©f‹m_drivî
(
ichx_gpio_drivî
);

467 
MODULE_AUTHOR
("Peter Tyser <ptyser@xes-inc.com>");

468 
MODULE_DESCRIPTION
("GPIO interface for Intel ICH series");

469 
MODULE_LICENSE
("GPL");

470 
MODULE_ALIAS
("∂©f‹m:"
DRV_NAME
);

	@gpio-it8761e.c

20 
	~<löux/öô.h
>

21 
	~<löux/kî√l.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/io.h
>

24 
	~<löux/î∫o.h
>

25 
	~<löux/i›‹t.h
>

27 
	~<löux/gpio.h
>

29 
	#SIO_CHIP_ID
 0x8761

	)

30 
	#CHIP_ID_HIGH_BYTE
 0x20

	)

31 
	#CHIP_ID_LOW_BYTE
 0x21

	)

33 
u8
 
	gp‹ts
[2] = { 0x2e, 0x4e };

34 
u8
 
	gp‹t
;

36 
DEFINE_SPINLOCK
(
sio_lock
);

38 
	#GPIO_NAME
 "ô8761-gpio"

	)

39 
	#GPIO_BA_HIGH_BYTE
 0x60

	)

40 
	#GPIO_BA_LOW_BYTE
 0x61

	)

41 
	#GPIO_IOSIZE
 4

	)

42 
	#GPIO1X_IO
 0xf0

	)

43 
	#GPIO2X_IO
 0xf1

	)

45 
u16
 
	ggpio_ba
;

47 
u8
 
	$ªad_ªg
(
u8
 
addr
, u8 
p‹t
)

49 
	`outb
(
addr
, 
p‹t
);

50  
	`öb
(
p‹t
 + 1);

51 
	}
}

53 
	$wrôe_ªg
(
u8
 
d©a
, u8 
addr
, u8 
p‹t
)

55 
	`outb
(
addr
, 
p‹t
);

56 
	`outb
(
d©a
, 
p‹t
 + 1);

57 
	}
}

59 
	$íãr_c⁄f_mode
(
u8
 
p‹t
)

61 
	`outb
(0x87, 
p‹t
);

62 
	`outb
(0x61, 
p‹t
);

63 
	`outb
(0x55, 
p‹t
);

64 
	`outb
((
p‹t
 == 0x2e) ? 0x55 : 0xaa,Öort);

65 
	}
}

67 
	$exô_c⁄f_mode
(
u8
 
p‹t
)

69 
	`outb
(0x2, 
p‹t
);

70 
	`outb
(0x2, 
p‹t
 + 1);

71 
	}
}

73 
	$íãr_gpio_mode
(
u8
 
p‹t
)

75 
	`wrôe_ªg
(0x2, 0x7, 
p‹t
);

76 
	}
}

78 
	$ô8761e_gpio_gë
(
gpio_chù
 *
gc
, 
gpio_num
)

80 
u16
 
ªg
;

81 
u8
 
bô
;

83 
bô
 = 
gpio_num
 % 8;

84 
ªg
 = (
gpio_num
 >8Ë? 
gpio_ba
 + 1 : gpio_ba;

86  !!(
	`öb
(
ªg
Ë& (1 << 
bô
));

87 
	}
}

89 
	$ô8761e_gpio_dúe˘i⁄_ö
(
gpio_chù
 *
gc
, 
gpio_num
)

91 
u8
 
cuº_dús
;

92 
u8
 
io_ªg
, 
bô
;

94 
bô
 = 
gpio_num
 % 8;

95 
io_ªg
 = (
gpio_num
 >8Ë? 
GPIO2X_IO
 : 
GPIO1X_IO
;

97 
	`•ö_lock
(&
sio_lock
);

99 
	`íãr_c⁄f_mode
(
p‹t
);

100 
	`íãr_gpio_mode
(
p‹t
);

102 
cuº_dús
 = 
	`ªad_ªg
(
io_ªg
, 
p‹t
);

104 i‡(
cuº_dús
 & (1 << 
bô
))

105 
	`wrôe_ªg
(
cuº_dús
 & ~(1 << 
bô
), 
io_ªg
, 
p‹t
);

107 
	`exô_c⁄f_mode
(
p‹t
);

109 
	`•ö_u∆ock
(&
sio_lock
);

111 
	}
}

113 
	$ô8761e_gpio_£t
(
gpio_chù
 *
gc
,

114 
gpio_num
, 
vÆ
)

116 
u8
 
cuº_vÆs
, 
bô
;

117 
u16
 
ªg
;

119 
bô
 = 
gpio_num
 % 8;

120 
ªg
 = (
gpio_num
 >8Ë? 
gpio_ba
 + 1 : gpio_ba;

122 
	`•ö_lock
(&
sio_lock
);

124 
cuº_vÆs
 = 
	`öb
(
ªg
);

125 i‡(
vÆ
)

126 
	`outb
(
cuº_vÆs
 | (1 << 
bô
Ë, 
ªg
);

128 
	`outb
(
cuº_vÆs
 & ~(1 << 
bô
), 
ªg
);

130 
	`•ö_u∆ock
(&
sio_lock
);

131 
	}
}

133 
	$ô8761e_gpio_dúe˘i⁄_out
(
gpio_chù
 *
gc
,

134 
gpio_num
, 
vÆ
)

136 
u8
 
cuº_dús
, 
io_ªg
, 
bô
;

138 
bô
 = 
gpio_num
 % 8;

139 
io_ªg
 = (
gpio_num
 >8Ë? 
GPIO2X_IO
 : 
GPIO1X_IO
;

141 
	`ô8761e_gpio_£t
(
gc
, 
gpio_num
, 
vÆ
);

143 
	`•ö_lock
(&
sio_lock
);

145 
	`íãr_c⁄f_mode
(
p‹t
);

146 
	`íãr_gpio_mode
(
p‹t
);

148 
cuº_dús
 = 
	`ªad_ªg
(
io_ªg
, 
p‹t
);

150 i‡(!(
cuº_dús
 & (1 << 
bô
)))

151 
	`wrôe_ªg
(
cuº_dús
 | (1 << 
bô
), 
io_ªg
, 
p‹t
);

153 
	`exô_c⁄f_mode
(
p‹t
);

155 
	`•ö_u∆ock
(&
sio_lock
);

157 
	}
}

159 
gpio_chù
 
	gô8761e_gpio_chù
 = {

160 .
œbñ
 = 
GPIO_NAME
,

161 .
	gow√r
 = 
THIS_MODULE
,

162 .
	ggë
 = 
ô8761e_gpio_gë
,

163 .
	gdúe˘i⁄_öput
 = 
ô8761e_gpio_dúe˘i⁄_ö
,

164 .
	g£t
 = 
ô8761e_gpio_£t
,

165 .
	gdúe˘i⁄_ouçut
 = 
ô8761e_gpio_dúe˘i⁄_out
,

168 
__öô
 
	$ô8761e_gpio_öô
()

170 
i
, 
id
, 
îr
;

173 
i
 = 0; i < 
	`ARRAY_SIZE
(
p‹ts
); i++) {

174 
	`•ö_lock
(&
sio_lock
);

175 
	`íãr_c⁄f_mode
(
p‹ts
[
i
]);

177 
id
 = (
	`ªad_ªg
(
CHIP_ID_HIGH_BYTE
, 
p‹ts
[
i
]) << 8) +

178 
	`ªad_ªg
(
CHIP_ID_LOW_BYTE
, 
p‹ts
[
i
]);

180 
	`exô_c⁄f_mode
(
p‹ts
[
i
]);

181 
	`•ö_u∆ock
(&
sio_lock
);

183 i‡(
id
 =
SIO_CHIP_ID
) {

184 
p‹t
 = 
p‹ts
[
i
];

189 i‡(!
p‹t
)

190  -
ENODEV
;

193 
	`íãr_c⁄f_mode
(
p‹t
);

194 
	`íãr_gpio_mode
(
p‹t
);

195 
gpio_ba
 = (
	`ªad_ªg
(
GPIO_BA_HIGH_BYTE
, 
p‹t
) << 8) +

196 
	`ªad_ªg
(
GPIO_BA_LOW_BYTE
, 
p‹t
);

197 
	`exô_c⁄f_mode
(
p‹t
);

199 i‡(!
	`ªque°_ªgi⁄
(
gpio_ba
, 
GPIO_IOSIZE
, 
GPIO_NAME
))

200  -
EBUSY
;

202 
ô8761e_gpio_chù
.
ba£
 = -1;

203 
ô8761e_gpio_chù
.
ngpio
 = 16;

205 
îr
 = 
	`gpiochù_add
(&
ô8761e_gpio_chù
);

206 i‡(
îr
 < 0)

207 
gpiochù_add_îr
;

211 
gpiochù_add_îr
:

212 
	`ªÀa£_ªgi⁄
(
gpio_ba
, 
GPIO_IOSIZE
);

213 
gpio_ba
 = 0;

214  
îr
;

215 
	}
}

217 
__exô
 
	$ô8761e_gpio_exô
()

219 i‡(
gpio_ba
) {

220 
ªt
 = 
	`gpiochù_ªmove
(&
ô8761e_gpio_chù
);

222 
	`WARN
(
ªt
, "%s(): gpiochip_remove() failed,Ñet=%d\n",

223 
__func__
, 
ªt
);

225 
	`ªÀa£_ªgi⁄
(
gpio_ba
, 
GPIO_IOSIZE
);

226 
gpio_ba
 = 0;

228 
	}
}

229 
moduÀ_öô
(
ô8761e_gpio_öô
);

230 
moduÀ_exô
(
ô8761e_gpio_exô
);

232 
MODULE_AUTHOR
("Denis Turischev <denis@compulab.co.il>");

233 
MODULE_DESCRIPTION
("GPIO interface for IT8761E Super I/O chip");

234 
MODULE_LICENSE
("GPL");

	@gpio-janz-ttl.c

12 
	~<löux/kî√l.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/öãºu±.h
>

16 
	~<löux/dñay.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/io.h
>

19 
	~<löux/gpio.h
>

20 
	~<löux/¶ab.h
>

22 
	~<löux/mfd/j™z.h
>

24 
	#DRV_NAME
 "j™z-âl"

	)

26 
	#PORTA_DIRECTION
 0x23

	)

27 
	#PORTB_DIRECTION
 0x2B

	)

28 
	#PORTC_DIRECTION
 0x06

	)

29 
	#PORTA_IOCTL
 0x24

	)

30 
	#PORTB_IOCTL
 0x2C

	)

31 
	#PORTC_IOCTL
 0x07

	)

33 
	#MASTER_INT_CTL
 0x00

	)

34 
	#MASTER_CONF_CTL
 0x01

	)

36 
	#CONF_PAE
 (1 << 2)

	)

37 
	#CONF_PBE
 (1 << 7)

	)

38 
	#CONF_PCE
 (1 << 4)

	)

40 
	sâl_c⁄åﬁ_ªgs
 {

41 
__be16
 
	mp‹tc
;

42 
__be16
 
	mp‹tb
;

43 
__be16
 
	mp‹è
;

44 
__be16
 
	mc⁄åﬁ
;

47 
	sâl_moduÀ
 {

48 
gpio_chù
 
	mgpio
;

51 
âl_c⁄åﬁ_ªgs
 
__iomem
 *
	mªgs
;

53 
u8
 
	mp‹tc_shadow
;

54 
u8
 
	mp‹tb_shadow
;

55 
u8
 
	mp‹è_shadow
;

57 
•ölock_t
 
	mlock
;

60 
	$âl_gë_vÆue
(
gpio_chù
 *
gpio
, 
off£t
)

62 
âl_moduÀ
 *
mod
 = 
	`dev_gë_drvd©a
(
gpio
->
dev
);

63 
u8
 *
shadow
;

64 
ªt
;

66 i‡(
off£t
 < 8) {

67 
shadow
 = &
mod
->
p‹è_shadow
;

68 } i‡(
off£t
 < 16) {

69 
shadow
 = &
mod
->
p‹tb_shadow
;

70 
off£t
 -= 8;

72 
shadow
 = &
mod
->
p‹tc_shadow
;

73 
off£t
 -= 16;

76 
	`•ö_lock
(&
mod
->
lock
);

77 
ªt
 = *
shadow
 & (1 << 
off£t
);

78 
	`•ö_u∆ock
(&
mod
->
lock
);

79  
ªt
;

80 
	}
}

82 
	$âl_£t_vÆue
(
gpio_chù
 *
gpio
, 
off£t
, 
vÆue
)

84 
âl_moduÀ
 *
mod
 = 
	`dev_gë_drvd©a
(
gpio
->
dev
);

85 
__iomem
 *
p‹t
;

86 
u8
 *
shadow
;

88 i‡(
off£t
 < 8) {

89 
p‹t
 = &
mod
->
ªgs
->
p‹è
;

90 
shadow
 = &
mod
->
p‹è_shadow
;

91 } i‡(
off£t
 < 16) {

92 
p‹t
 = &
mod
->
ªgs
->
p‹tb
;

93 
shadow
 = &
mod
->
p‹tb_shadow
;

94 
off£t
 -= 8;

96 
p‹t
 = &
mod
->
ªgs
->
p‹tc
;

97 
shadow
 = &
mod
->
p‹tc_shadow
;

98 
off£t
 -= 16;

101 
	`•ö_lock
(&
mod
->
lock
);

102 i‡(
vÆue
)

103 *
shadow
 |(1 << 
off£t
);

105 *
shadow
 &~(1 << 
off£t
);

107 
	`iowrôe16be
(*
shadow
, 
p‹t
);

108 
	`•ö_u∆ock
(&
mod
->
lock
);

109 
	}
}

111 
	$âl_wrôe_ªg
(
âl_moduÀ
 *
mod
, 
u8
 
ªg
, 
u16
 
vÆ
)

113 
	`iowrôe16be
(
ªg
, &
mod
->
ªgs
->
c⁄åﬁ
);

114 
	`iowrôe16be
(
vÆ
, &
mod
->
ªgs
->
c⁄åﬁ
);

115 
	}
}

117 
	$âl_£tup_devi˚
(
âl_moduÀ
 *
mod
)

120 
	`iowrôe16be
(0x0000, &
mod
->
ªgs
->
c⁄åﬁ
);

121 
	`iowrôe16be
(0x0001, &
mod
->
ªgs
->
c⁄åﬁ
);

122 
	`iowrôe16be
(0x0000, &
mod
->
ªgs
->
c⁄åﬁ
);

125 
	`âl_wrôe_ªg
(
mod
, 
PORTA_IOCTL
, 0x00ff);

126 
	`âl_wrôe_ªg
(
mod
, 
PORTB_IOCTL
, 0x00ff);

127 
	`âl_wrôe_ªg
(
mod
, 
PORTC_IOCTL
, 0x000f);

130 
	`âl_wrôe_ªg
(
mod
, 
PORTA_DIRECTION
, 0x0000);

131 
	`âl_wrôe_ªg
(
mod
, 
PORTB_DIRECTION
, 0x0000);

132 
	`âl_wrôe_ªg
(
mod
, 
PORTC_DIRECTION
, 0x0000);

135 
	`iowrôe16be
(0x0000, &
mod
->
ªgs
->
p‹è
);

136 
	`iowrôe16be
(0x0000, &
mod
->
ªgs
->
p‹tb
);

137 
	`iowrôe16be
(0x0000, &
mod
->
ªgs
->
p‹tc
);

140 
	`âl_wrôe_ªg
(
mod
, 
MASTER_CONF_CTL
, 
CONF_PAE
 | 
CONF_PBE
 | 
CONF_PCE
);

141 
	}
}

143 
	$âl_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

145 
j™z_∂©f‹m_d©a
 *
pd©a
;

146 
devi˚
 *
dev
 = &
pdev
->dev;

147 
âl_moduÀ
 *
mod
;

148 
gpio_chù
 *
gpio
;

149 
ªsour˚
 *
ªs
;

150 
ªt
;

152 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

153 i‡(!
pd©a
) {

154 
	`dev_îr
(
dev
, "noÖlatform data\n");

155 
ªt
 = -
ENXIO
;

156 
out_ªtu∫
;

159 
mod
 = 
	`kzÆloc
((*mod), 
GFP_KERNEL
);

160 i‡(!
mod
) {

161 
	`dev_îr
(
dev
, "unableÅoállocateÖrivate data\n");

162 
ªt
 = -
ENOMEM
;

163 
out_ªtu∫
;

166 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
mod
);

167 
	`•ö_lock_öô
(&
mod
->
lock
);

170 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

171 i‡(!
ªs
) {

172 
	`dev_îr
(
dev
, "MODULbusÑegistersÇot found\n");

173 
ªt
 = -
ENODEV
;

174 
out_‰ì_mod
;

177 
mod
->
ªgs
 = 
	`i‹em≠
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

178 i‡(!
mod
->
ªgs
) {

179 
	`dev_îr
(
dev
, "MODULbusÑegistersÇot ioremap\n");

180 
ªt
 = -
ENOMEM
;

181 
out_‰ì_mod
;

184 
	`âl_£tup_devi˚
(
mod
);

187 
gpio
 = &
mod
->gpio;

188 
gpio
->
dev
 = &
pdev
->dev;

189 
gpio
->
œbñ
 = 
pdev
->
«me
;

190 
gpio
->
gë
 = 
âl_gë_vÆue
;

191 
gpio
->
£t
 = 
âl_£t_vÆue
;

192 
gpio
->
ow√r
 = 
THIS_MODULE
;

195 
gpio
->
ba£
 = -1;

196 
gpio
->
ngpio
 = 20;

198 
ªt
 = 
	`gpiochù_add
(
gpio
);

199 i‡(
ªt
) {

200 
	`dev_îr
(
dev
, "unableÅoádd GPIO chip\n");

201 
out_iounm≠_ªgs
;

206 
out_iounm≠_ªgs
:

207 
	`iounm≠
(
mod
->
ªgs
);

208 
out_‰ì_mod
:

209 
	`k‰ì
(
mod
);

210 
out_ªtu∫
:

211  
ªt
;

212 
	}
}

214 
	$âl_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

216 
âl_moduÀ
 *
mod
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

217 
devi˚
 *
dev
 = &
pdev
->dev;

218 
ªt
;

220 
ªt
 = 
	`gpiochù_ªmove
(&
mod
->
gpio
);

221 i‡(
ªt
) {

222 
	`dev_îr
(
dev
, "unableÅoÑemove GPIO chip\n");

223  
ªt
;

226 
	`iounm≠
(
mod
->
ªgs
);

227 
	`k‰ì
(
mod
);

229 
	}
}

231 
∂©f‹m_drivî
 
	gâl_drivî
 = {

232 .
drivî
 = {

233 .
«me
 = 
DRV_NAME
,

234 .
	gow√r
 = 
THIS_MODULE
,

236 .
	g¥obe
 = 
âl_¥obe
,

237 .
	gªmove
 = 
âl_ªmove
,

240 
moduÀ_∂©f‹m_drivî
(
âl_drivî
);

242 
MODULE_AUTHOR
("Ira W. Snyder <iws@ovro.caltech.edu>");

243 
MODULE_DESCRIPTION
("Janz MODULbus VMOD-TTL Driver");

244 
MODULE_LICENSE
("GPL");

245 
MODULE_ALIAS
("platform:janz-ttl");

	@gpio-ks8695.c

21 
	~<löux/gpio.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/mm.h
>

24 
	~<löux/öô.h
>

25 
	~<löux/debugfs.h
>

26 
	~<löux/£q_fûe.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/io.h
>

30 
	~<mach/h¨dw¨e.h
>

31 
	~<asm/mach/úq.h
>

33 
	~<mach/ªgs-gpio.h
>

34 
	~<mach/gpio-ks8695.h
>

40 
	$ks8695_gpio_mode
(
pö
, 
gpio
)

42 
íabÀ
[] = { 
IOPC_IOEINT0EN
, 
IOPC_IOEINT1EN
, 
IOPC_IOEINT2EN
, 
IOPC_IOEINT3EN
, 
IOPC_IOTIM0EN
, 
IOPC_IOTIM1EN
 };

43 
x
, 
Êags
;

45 i‡(
pö
 > 
KS8695_GPIO_5
)

48 
	`loˇl_úq_ßve
(
Êags
);

50 
x
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPC
);

51 i‡(
gpio
)

52 
x
 &~
íabÀ
[
pö
];

54 
x
 |
íabÀ
[
pö
];

55 
	`__øw_wrôñ
(
x
, 
KS8695_GPIO_VA
 + 
KS8695_IOPC
);

57 
	`loˇl_úq_ª°‹e
(
Êags
);

58 
	}
}

61 
	ggpio_úq
[] = { 
KS8695_IRQ_EXTERN0
, 
KS8695_IRQ_EXTERN1
, 
KS8695_IRQ_EXTERN2
, 
KS8695_IRQ_EXTERN3
 };

66 
	$ks8695_gpio_öãºu±
(
pö
, 
ty≥
)

68 
x
, 
Êags
;

70 i‡(
pö
 > 
KS8695_GPIO_3
)

71  -
EINVAL
;

73 
	`loˇl_úq_ßve
(
Êags
);

76 
x
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPM
);

77 
x
 &~
	`IOPM
(
pö
);

78 
	`__øw_wrôñ
(
x
, 
KS8695_GPIO_VA
 + 
KS8695_IOPM
);

80 
	`loˇl_úq_ª°‹e
(
Êags
);

83 
	`úq_£t_úq_ty≥
(
gpio_úq
[
pö
], 
ty≥
);

86 
	`ks8695_gpio_mode
(
pö
, 0);

89 
	}
}

90 
EXPORT_SYMBOL
(
ks8695_gpio_öãºu±
);

99 
	$ks8695_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gc
, 
pö
)

101 
x
, 
Êags
;

103 i‡(
pö
 > 
KS8695_GPIO_15
)

104  -
EINVAL
;

107 
	`ks8695_gpio_mode
(
pö
, 1);

109 
	`loˇl_úq_ßve
(
Êags
);

112 
x
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPM
);

113 
x
 &~
	`IOPM
(
pö
);

114 
	`__øw_wrôñ
(
x
, 
KS8695_GPIO_VA
 + 
KS8695_IOPM
);

116 
	`loˇl_úq_ª°‹e
(
Êags
);

119 
	}
}

125 
	$ks8695_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
,

126 
pö
, 
°©e
)

128 
x
, 
Êags
;

130 i‡(
pö
 > 
KS8695_GPIO_15
)

131  -
EINVAL
;

134 
	`ks8695_gpio_mode
(
pö
, 1);

136 
	`loˇl_úq_ßve
(
Êags
);

139 
x
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPD
);

140 i‡(
°©e
)

141 
x
 |
	`IOPD
(
pö
);

143 
x
 &~
	`IOPD
(
pö
);

144 
	`__øw_wrôñ
(
x
, 
KS8695_GPIO_VA
 + 
KS8695_IOPD
);

147 
x
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPM
);

148 
x
 |
	`IOPM
(
pö
);

149 
	`__øw_wrôñ
(
x
, 
KS8695_GPIO_VA
 + 
KS8695_IOPM
);

151 
	`loˇl_úq_ª°‹e
(
Êags
);

154 
	}
}

160 
	$ks8695_gpio_£t_vÆue
(
gpio_chù
 *
gc
,

161 
pö
, 
°©e
)

163 
x
, 
Êags
;

165 i‡(
pö
 > 
KS8695_GPIO_15
)

168 
	`loˇl_úq_ßve
(
Êags
);

171 
x
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPD
);

172 i‡(
°©e
)

173 
x
 |
	`IOPD
(
pö
);

175 
x
 &~
	`IOPD
(
pö
);

176 
	`__øw_wrôñ
(
x
, 
KS8695_GPIO_VA
 + 
KS8695_IOPD
);

178 
	`loˇl_úq_ª°‹e
(
Êags
);

179 
	}
}

185 
	$ks8695_gpio_gë_vÆue
(
gpio_chù
 *
gc
, 
pö
)

187 
x
;

189 i‡(
pö
 > 
KS8695_GPIO_15
)

190  -
EINVAL
;

192 
x
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPD
);

193  (
x
 & 
	`IOPD
(
pö
)) != 0;

194 
	}
}

200 
	$ks8695_gpio_to_úq
(
gpio_chù
 *
gc
, 
pö
)

202 i‡(
pö
 > 
KS8695_GPIO_3
)

203  -
EINVAL
;

205  
gpio_úq
[
pö
];

206 
	}
}

211 
	$úq_to_gpio
(
úq
)

213 i‡((
úq
 < 
KS8695_IRQ_EXTERN0
Ë|| (úq > 
KS8695_IRQ_EXTERN3
))

214  -
EINVAL
;

216  (
úq
 - 
KS8695_IRQ_EXTERN0
);

217 
	}
}

218 
EXPORT_SYMBOL
(
úq_to_gpio
);

222 
gpio_chù
 
	gks8695_gpio_chù
 = {

223 .
œbñ
 = "KS8695",

224 .
	gdúe˘i⁄_öput
 = 
ks8695_gpio_dúe˘i⁄_öput
,

225 .
	gdúe˘i⁄_ouçut
 = 
ks8695_gpio_dúe˘i⁄_ouçut
,

226 .
	ggë
 = 
ks8695_gpio_gë_vÆue
,

227 .
	g£t
 = 
ks8695_gpio_£t_vÆue
,

228 .
	gto_úq
 = 
ks8695_gpio_to_úq
,

229 .
	gba£
 = 0,

230 .
	gngpio
 = 16,

231 .
	gˇn_¶ìp
 = 0,

235 
	$ks8695_ªgi°î_gpios
()

237 i‡(
	`gpiochù_add
(&
ks8695_gpio_chù
))

238 
	`¥ötk
(
KERN_ERR
 "UnableÅoÑegister core GPIOs\n");

239 
	}
}

243 #ifde‡
CONFIG_DEBUG_FS


245 
	$ks8695_gpio_show
(
£q_fûe
 *
s
, *
unu£d
)

247 
íabÀ
[] = { 
IOPC_IOEINT0EN
, 
IOPC_IOEINT1EN
, 
IOPC_IOEINT2EN
, 
IOPC_IOEINT3EN
, 
IOPC_IOTIM0EN
, 
IOPC_IOTIM1EN
 };

248 
ötmask
[] = { 
IOPC_IOEINT0TM
, 
IOPC_IOEINT1TM
, 
IOPC_IOEINT2TM
, 
IOPC_IOEINT3TM
 };

249 
mode
, 
˘æ
, 
d©a
;

250 
i
;

252 
mode
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPM
);

253 
˘æ
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPC
);

254 
d©a
 = 
	`__øw_ªadl
(
KS8695_GPIO_VA
 + 
KS8695_IOPD
);

256 
	`£q_¥ötf
(
s
, "Pin\tI/O\tFunction\tState\n\n");

258 
i
 = 
KS8695_GPIO_0
; i <
KS8695_GPIO_15
 ; i++) {

259 
	`£q_¥ötf
(
s
, "%i:\t", 
i
);

261 
	`£q_¥ötf
(
s
, "%s\t", (
mode
 & 
	`IOPM
(
i
)) ? "Output" : "Input");

263 i‡(
i
 <
KS8695_GPIO_3
) {

264 i‡(
˘æ
 & 
íabÀ
[
i
]) {

265 
	`£q_¥ötf
(
s
, "EXT%ò", 
i
);

267 (
˘æ
 & 
ötmask
[
i
]) >> (4 * i)) {

268 
IOPC_TM_LOW
:

269 
	`£q_¥ötf
(
s
, "(Low)"); ;

270 
IOPC_TM_HIGH
:

271 
	`£q_¥ötf
(
s
, "(High)"); ;

272 
IOPC_TM_RISING
:

273 
	`£q_¥ötf
(
s
, "(Rising)"); ;

274 
IOPC_TM_FALLING
:

275 
	`£q_¥ötf
(
s
, "(Falling)"); ;

276 
IOPC_TM_EDGE
:

277 
	`£q_¥ötf
(
s
, "(Edges)"); ;

281 
	`£q_¥ötf
(
s
, "GPIO\t");

283 i‡(
i
 <
KS8695_GPIO_5
) {

284 i‡(
˘æ
 & 
íabÀ
[
i
])

285 
	`£q_¥ötf
(
s
, "TOUT%i\t", 
i
 - 
KS8695_GPIO_4
);

287 
	`£q_¥ötf
(
s
, "GPIO\t");

290 
	`£q_¥ötf
(
s
, "GPIO\t");

292 
	`£q_¥ötf
(
s
, "\t");

294 
	`£q_¥ötf
(
s
, "%i\n", (
d©a
 & 
	`IOPD
(
i
)) ? 1 : 0);

297 
	}
}

299 
	$ks8695_gpio_›í
(
öode
 *öode, 
fûe
 *file)

301  
	`sögÀ_›í
(
fûe
, 
ks8695_gpio_show
, 
NULL
);

302 
	}
}

304 c⁄° 
fûe_›î©i⁄s
 
	gks8695_gpio_›î©i⁄s
 = {

305 .
›í
 = 
ks8695_gpio_›í
,

306 .
	gªad
 = 
£q_ªad
,

307 .
	gŒ£ek
 = 
£q_l£ek
,

308 .
	gªÀa£
 = 
sögÀ_ªÀa£
,

311 
__öô
 
	$ks8695_gpio_debugfs_öô
()

314 (Ë
	`debugfs_¸óã_fûe
("ks8695_gpio", 
S_IFREG
 | 
S_IRUGO
, 
NULL
, NULL, &
ks8695_gpio_›î©i⁄s
);

316 
	}
}

317 
po°c‹e_öôˇŒ
(
ks8695_gpio_debugfs_öô
);

	@gpio-langwell.c

26 
	~<löux/moduÀ.h
>

27 
	~<löux/pci.h
>

28 
	~<löux/∂©f‹m_devi˚.h
>

29 
	~<löux/kî√l.h
>

30 
	~<löux/dñay.h
>

31 
	~<löux/°ddef.h
>

32 
	~<löux/öãºu±.h
>

33 
	~<löux/öô.h
>

34 
	~<löux/úq.h
>

35 
	~<löux/io.h
>

36 
	~<löux/gpio.h
>

37 
	~<löux/¶ab.h
>

38 
	~<löux/pm_ru¡ime.h
>

39 
	~<löux/úqdomaö.h
>

55 
	eGPIO_REG
 {

56 
	mGPLR
 = 0,

57 
	mGPDR
,

58 
	mGPSR
,

59 
	mGPCR
,

60 
	mGRER
,

61 
	mGFER
,

62 
	mGEDR
,

63 
	mGAFR
,

66 
	s w_gpio
 {

67 
gpio_chù
 
	mchù
;

68 *
	mªg_ba£
;

69 
•ölock_t
 
	mlock
;

70 
pci_dev
 *
	mpdev
;

71 
úq_domaö
 *
	mdomaö
;

74 
	#to_ w_¥iv
(
chù
Ë
	`c⁄èöî_of
(chù, 
 w_gpio
, chù)

	)

76 
__iomem
 *
	$gpio_ªg
(
gpio_chù
 *
chù
, 
off£t
,

77 
GPIO_REG
 
ªg_ty≥
)

79 
 w_gpio
 *
 w
 = 
	`to_ w_¥iv
(
chù
);

80 
ƒeg
 = 
chù
->
ngpio
 / 32;

81 
u8
 
ªg
 = 
off£t
 / 32;

82 
__iomem
 *
±r
;

84 
±r
 = (
__iomem
 *)(
 w
->
ªg_ba£
 + 
ªg_ty≥
 * 
ƒeg
 * 4 + 
ªg
 * 4);

85  
±r
;

86 
	}
}

88 
__iomem
 *
	$gpio_ªg_2bô
(
gpio_chù
 *
chù
, 
off£t
,

89 
GPIO_REG
 
ªg_ty≥
)

91 
 w_gpio
 *
 w
 = 
	`to_ w_¥iv
(
chù
);

92 
ƒeg
 = 
chù
->
ngpio
 / 32;

93 
u8
 
ªg
 = 
off£t
 / 16;

94 
__iomem
 *
±r
;

96 
±r
 = (
__iomem
 *)(
 w
->
ªg_ba£
 + 
ªg_ty≥
 * 
ƒeg
 * 4 + 
ªg
 * 4);

97  
±r
;

98 
	}
}

100 
	$ w_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

102 
__iomem
 *
ga‰
 = 
	`gpio_ªg_2bô
(
chù
, 
off£t
, 
GAFR
);

103 
u32
 
vÆue
 = 
	`ªadl
(
ga‰
);

104 
shi·
 = (
off£t
 % 16Ë<< 1, 
af
 = (
vÆue
 >> shift) & 3;

106 i‡(
af
) {

107 
vÆue
 &~(3 << 
shi·
);

108 
	`wrôñ
(
vÆue
, 
ga‰
);

111 
	}
}

113 
	$ w_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

115 
__iomem
 *
g∂r
 = 
	`gpio_ªg
(
chù
, 
off£t
, 
GPLR
);

117  
	`ªadl
(
g∂r
Ë& 
	`BIT
(
off£t
 % 32);

118 
	}
}

120 
	$ w_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

122 
__iomem
 *
gp§
, *
gp¸
;

124 i‡(
vÆue
) {

125 
gp§
 = 
	`gpio_ªg
(
chù
, 
off£t
, 
GPSR
);

126 
	`wrôñ
(
	`BIT
(
off£t
 % 32), 
gp§
);

128 
gp¸
 = 
	`gpio_ªg
(
chù
, 
off£t
, 
GPCR
);

129 
	`wrôñ
(
	`BIT
(
off£t
 % 32), 
gp¸
);

131 
	}
}

133 
	$ w_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

135 
 w_gpio
 *
 w
 = 
	`to_ w_¥iv
(
chù
);

136 
__iomem
 *
gpdr
 = 
	`gpio_ªg
(
chù
, 
off£t
, 
GPDR
);

137 
u32
 
vÆue
;

138 
Êags
;

140 i‡(
 w
->
pdev
)

141 
	`pm_ru¡ime_gë
(&
 w
->
pdev
->
dev
);

143 
	`•ö_lock_úqßve
(&
 w
->
lock
, 
Êags
);

144 
vÆue
 = 
	`ªadl
(
gpdr
);

145 
vÆue
 &~
	`BIT
(
off£t
 % 32);

146 
	`wrôñ
(
vÆue
, 
gpdr
);

147 
	`•ö_u∆ock_úqª°‹e
(&
 w
->
lock
, 
Êags
);

149 i‡(
 w
->
pdev
)

150 
	`pm_ru¡ime_put
(&
 w
->
pdev
->
dev
);

153 
	}
}

155 
	$ w_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

156 
off£t
, 
vÆue
)

158 
 w_gpio
 *
 w
 = 
	`to_ w_¥iv
(
chù
);

159 
__iomem
 *
gpdr
 = 
	`gpio_ªg
(
chù
, 
off£t
, 
GPDR
);

160 
Êags
;

162 
	` w_gpio_£t
(
chù
, 
off£t
, 
vÆue
);

164 i‡(
 w
->
pdev
)

165 
	`pm_ru¡ime_gë
(&
 w
->
pdev
->
dev
);

167 
	`•ö_lock_úqßve
(&
 w
->
lock
, 
Êags
);

168 
vÆue
 = 
	`ªadl
(
gpdr
);

169 
vÆue
 |
	`BIT
(
off£t
 % 32);

170 
	`wrôñ
(
vÆue
, 
gpdr
);

171 
	`•ö_u∆ock_úqª°‹e
(&
 w
->
lock
, 
Êags
);

173 i‡(
 w
->
pdev
)

174 
	`pm_ru¡ime_put
(&
 w
->
pdev
->
dev
);

177 
	}
}

179 
	$ w_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

181 
 w_gpio
 *
 w
 = 
	`to_ w_¥iv
(
chù
);

182  
	`úq_¸óã_m≠pög
(
 w
->
domaö
, 
off£t
);

183 
	}
}

185 
	$ w_úq_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

187 
 w_gpio
 *
 w
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

188 
u32
 
gpio
 = 
	`úqd_to_hwúq
(
d
);

189 
Êags
;

190 
u32
 
vÆue
;

191 
__iomem
 *
gªr
 = 
	`gpio_ªg
(&
 w
->
chù
, 
gpio
, 
GRER
);

192 
__iomem
 *
g„r
 = 
	`gpio_ªg
(&
 w
->
chù
, 
gpio
, 
GFER
);

194 i‡(
gpio
 >
 w
->
chù
.
ngpio
)

195  -
EINVAL
;

197 i‡(
 w
->
pdev
)

198 
	`pm_ru¡ime_gë
(&
 w
->
pdev
->
dev
);

200 
	`•ö_lock_úqßve
(&
 w
->
lock
, 
Êags
);

201 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_RISING
)

202 
vÆue
 = 
	`ªadl
(
gªr
Ë| 
	`BIT
(
gpio
 % 32);

204 
vÆue
 = 
	`ªadl
(
gªr
Ë& (~
	`BIT
(
gpio
 % 32));

205 
	`wrôñ
(
vÆue
, 
gªr
);

207 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_FALLING
)

208 
vÆue
 = 
	`ªadl
(
g„r
Ë| 
	`BIT
(
gpio
 % 32);

210 
vÆue
 = 
	`ªadl
(
g„r
Ë& (~
	`BIT
(
gpio
 % 32));

211 
	`wrôñ
(
vÆue
, 
g„r
);

212 
	`•ö_u∆ock_úqª°‹e
(&
 w
->
lock
, 
Êags
);

214 i‡(
 w
->
pdev
)

215 
	`pm_ru¡ime_put
(&
 w
->
pdev
->
dev
);

218 
	}
}

220 
	$ w_úq_unmask
(
úq_d©a
 *
d
)

222 
	}
}

224 
	$ w_úq_mask
(
úq_d©a
 *
d
)

226 
	}
}

228 
úq_chù
 
	g w_úqchù
 = {

229 .
«me
 = "LNW-GPIO",

230 .
	gúq_mask
 = 
 w_úq_mask
,

231 .
	gúq_unmask
 = 
 w_úq_unmask
,

232 .
	gúq_£t_ty≥
 = 
 w_úq_ty≥
,

235 
DEFINE_PCI_DEVICE_TABLE
(
 w_gpio_ids
) = {

236 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 0x080f), .
drivî_d©a
 = 64 },

237 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 0x081f), .
	gdrivî_d©a
 = 96 },

238 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 0x081a), .
	gdrivî_d©a
 = 96 },

239 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 0x08eb), .
	gdrivî_d©a
 = 96 },

240 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 0x08f7), .
	gdrivî_d©a
 = 96 },

243 
MODULE_DEVICE_TABLE
(
pci
, 
 w_gpio_ids
);

245 
	$ w_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

247 
úq_d©a
 *
d©a
 = 
	`úq_desc_gë_úq_d©a
(
desc
);

248 
 w_gpio
 *
 w
 = 
	`úq_d©a_gë_úq_h™dÀr_d©a
(
d©a
);

249 
úq_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù
(
d©a
);

250 
u32
 
ba£
, 
gpio
, 
mask
;

251 
≥ndög
;

252 
__iomem
 *
gedr
;

255 
ba£
 = 0; ba£ < 
 w
->
chù
.
ngpio
; base += 32) {

256 
gedr
 = 
	`gpio_ªg
(&
 w
->
chù
, 
ba£
, 
GEDR
);

257 (
≥ndög
 = 
	`ªadl
(
gedr
))) {

258 
gpio
 = 
	`__ffs
(
≥ndög
);

259 
mask
 = 
	`BIT
(
gpio
);

261 
	`wrôñ
(
mask
, 
gedr
);

262 
	`gíîic_h™dÀ_úq
(
	`úq_föd_m≠pög
(
 w
->
domaö
,

263 
ba£
 + 
gpio
));

267 
chù
->
	`úq_eoi
(
d©a
);

268 
	}
}

270 
	$ w_úq_öô_hw
(
 w_gpio
 *
 w
)

272 
__iomem
 *
ªg
;

273 
ba£
;

275 
ba£
 = 0; ba£ < 
 w
->
chù
.
ngpio
; base += 32) {

277 
ªg
 = 
	`gpio_ªg
(&
 w
->
chù
, 
ba£
, 
GRER
);

278 
	`wrôñ
(0, 
ªg
);

280 
ªg
 = 
	`gpio_ªg
(&
 w
->
chù
, 
ba£
, 
GFER
);

281 
	`wrôñ
(0, 
ªg
);

283 
ªg
 = 
	`gpio_ªg
(&
 w
->
chù
, 
ba£
, 
GEDR
);

284 
	`wrôñ
(~0, 
ªg
);

286 
	}
}

288 
	$ w_gpio_úq_m≠
(
úq_domaö
 *
d
, 
vúq
,

289 
úq_hw_numbî_t
 
hw
)

291 
 w_gpio
 *
 w
 = 
d
->
ho°_d©a
;

293 
	`úq_£t_chù_™d_h™dÀr_«me
(
vúq
, &
 w_úqchù
, 
h™dÀ_sim∂e_úq
,

295 
	`úq_£t_chù_d©a
(
vúq
, 
 w
);

296 
	`úq_£t_úq_ty≥
(
vúq
, 
IRQ_TYPE_NONE
);

299 
	}
}

301 c⁄° 
úq_domaö_›s
 
	g w_gpio_úq_›s
 = {

302 .
m≠
 = 
 w_gpio_úq_m≠
,

303 .
	gxœã
 = 
úq_domaö_xœã_two˚Œ
,

306 
	$ w_gpio_ru¡ime_idÀ
(
devi˚
 *
dev
)

308 
îr
 = 
	`pm_scheduÀ_su•íd
(
dev
, 500);

310 i‡(!
îr
)

313  -
EBUSY
;

314 
	}
}

316 c⁄° 
dev_pm_›s
 
	g w_gpio_pm_›s
 = {

317 
SET_RUNTIME_PM_OPS
(
NULL
, NULL, 
 w_gpio_ru¡ime_idÀ
)

320 
	$ w_gpio_¥obe
(
pci_dev
 *
pdev
,

321 c⁄° 
pci_devi˚_id
 *
id
)

323 *
ba£
;

324 
ªsour˚_size_t
 
°¨t
, 
Àn
;

325 
 w_gpio
 *
 w
;

326 
u32
 
gpio_ba£
;

327 
u32
 
úq_ba£
;

328 
ªtvÆ
;

329 
ngpio
 = 
id
->
drivî_d©a
;

331 
ªtvÆ
 = 
	`pci_íabÀ_devi˚
(
pdev
);

332 i‡(
ªtvÆ
)

333  
ªtvÆ
;

335 
ªtvÆ
 = 
	`pci_ªque°_ªgi⁄s
(
pdev
, "langwell_gpio");

336 i‡(
ªtvÆ
) {

337 
	`dev_îr
(&
pdev
->
dev
, "errorÑequestingÑesources\n");

338 
îr_pci_ªq_ªgi⁄
;

341 
°¨t
 = 
	`pci_ªsour˚_°¨t
(
pdev
, 1);

342 
Àn
 = 
	`pci_ªsour˚_Àn
(
pdev
, 1);

343 
ba£
 = 
	`i‹em≠_noˇche
(
°¨t
, 
Àn
);

344 i‡(!
ba£
) {

345 
	`dev_îr
(&
pdev
->
dev
, "error mapping bar1\n");

346 
ªtvÆ
 = -
EFAULT
;

347 
îr_i‹em≠
;

349 
úq_ba£
 = *(
u32
 *)
ba£
;

350 
gpio_ba£
 = *((
u32
 *)
ba£
 + 1);

352 
	`iounm≠
(
ba£
);

354 
°¨t
 = 
	`pci_ªsour˚_°¨t
(
pdev
, 0);

355 
Àn
 = 
	`pci_ªsour˚_Àn
(
pdev
, 0);

356 
ba£
 = 
	`devm_i‹em≠_noˇche
(&
pdev
->
dev
, 
°¨t
, 
Àn
);

357 i‡(!
ba£
) {

358 
	`dev_îr
(&
pdev
->
dev
, "error mapping bar0\n");

359 
ªtvÆ
 = -
EFAULT
;

360 
îr_i‹em≠
;

363 
 w
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (* w), 
GFP_KERNEL
);

364 i‡(!
 w
) {

365 
	`dev_îr
(&
pdev
->
dev
, "can'tállocateÜangwell_gpio chip data\n");

366 
ªtvÆ
 = -
ENOMEM
;

367 
îr_i‹em≠
;

370 
 w
->
ªg_ba£
 = 
ba£
;

371 
 w
->
chù
.
œbñ
 = 
	`dev_«me
(&
pdev
->
dev
);

372 
 w
->
chù
.
ªque°
 = 
 w_gpio_ªque°
;

373 
 w
->
chù
.
dúe˘i⁄_öput
 = 
 w_gpio_dúe˘i⁄_öput
;

374 
 w
->
chù
.
dúe˘i⁄_ouçut
 = 
 w_gpio_dúe˘i⁄_ouçut
;

375 
 w
->
chù
.
gë
 = 
 w_gpio_gë
;

376 
 w
->
chù
.
£t
 = 
 w_gpio_£t
;

377 
 w
->
chù
.
to_úq
 = 
 w_gpio_to_úq
;

378 
 w
->
chù
.
ba£
 = 
gpio_ba£
;

379 
 w
->
chù
.
ngpio
 =Çgpio;

380 
 w
->
chù
.
ˇn_¶ìp
 = 0;

381 
 w
->
pdev
 =Ödev;

383 
 w
->
domaö
 = 
	`úq_domaö_add_sim∂e
(
pdev
->
dev
.
of_node
, 
ngpio
, 
úq_ba£
,

384 &
 w_gpio_úq_›s
, 
 w
);

385 i‡(!
 w
->
domaö
) {

386 
ªtvÆ
 = -
ENOMEM
;

387 
îr_i‹em≠
;

390 
	`pci_£t_drvd©a
(
pdev
, 
 w
);

391 
ªtvÆ
 = 
	`gpiochù_add
(&
 w
->
chù
);

392 i‡(
ªtvÆ
) {

393 
	`dev_îr
(&
pdev
->
dev
, "œngwñ»gpiochù_addÉº‹ %d\n", 
ªtvÆ
);

394 
îr_i‹em≠
;

397 
	` w_úq_öô_hw
(
 w
);

399 
	`úq_£t_h™dÀr_d©a
(
pdev
->
úq
, 
 w
);

400 
	`úq_£t_chaöed_h™dÀr
(
pdev
->
úq
, 
 w_úq_h™dÀr
);

402 
	`•ö_lock_öô
(&
 w
->
lock
);

404 
	`pm_ru¡ime_put_noidÀ
(&
pdev
->
dev
);

405 
	`pm_ru¡ime_Ælow
(&
pdev
->
dev
);

409 
îr_i‹em≠
:

410 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

411 
îr_pci_ªq_ªgi⁄
:

412 
	`pci_dißbÀ_devi˚
(
pdev
);

413  
ªtvÆ
;

414 
	}
}

416 
pci_drivî
 
	g w_gpio_drivî
 = {

417 .
«me
 = "langwell_gpio",

418 .
	gid_èbÀ
 = 
 w_gpio_ids
,

419 .
	g¥obe
 = 
 w_gpio_¥obe
,

420 .
	gdrivî
 = {

421 .
pm
 = &
 w_gpio_pm_›s
,

426 
	$wp_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

428 
 w_gpio
 *
 w
;

429 
gpio_chù
 *
gc
;

430 
ªsour˚
 *
rc
;

431 
ªtvÆ
 = 0;

433 
rc
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

434 i‡(!
rc
)

435  -
EINVAL
;

437 
 w
 = 
	`kzÆloc
((
 w_gpio
), 
GFP_KERNEL
);

438 i‡(!
 w
) {

439 
	`dev_îr
(&
pdev
->
dev
,

441  -
ENOMEM
;

443 
 w
->
ªg_ba£
 = 
	`i‹em≠_noˇche
(
rc
->
°¨t
, 
	`ªsour˚_size
(rc));

444 i‡(
 w
->
ªg_ba£
 =
NULL
) {

445 
ªtvÆ
 = -
EINVAL
;

446 
îr_kmÆloc
;

448 
	`•ö_lock_öô
(&
 w
->
lock
);

449 
gc
 = &
 w
->
chù
;

450 
gc
->
œbñ
 = 
	`dev_«me
(&
pdev
->
dev
);

451 
gc
->
ow√r
 = 
THIS_MODULE
;

452 
gc
->
dúe˘i⁄_öput
 = 
 w_gpio_dúe˘i⁄_öput
;

453 
gc
->
dúe˘i⁄_ouçut
 = 
 w_gpio_dúe˘i⁄_ouçut
;

454 
gc
->
gë
 = 
 w_gpio_gë
;

455 
gc
->
£t
 = 
 w_gpio_£t
;

456 
gc
->
to_úq
 = 
NULL
;

457 
gc
->
ba£
 = 0;

458 
gc
->
ngpio
 = 64;

459 
gc
->
ˇn_¶ìp
 = 0;

460 
ªtvÆ
 = 
	`gpiochù_add
(
gc
);

461 i‡(
ªtvÆ
) {

462 
	`dev_îr
(&
pdev
->
dev
, "whitneypoint gpiochip_addÉrror %d\n",

463 
ªtvÆ
);

464 
îr_i‹em≠
;

466 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
 w
);

468 
îr_i‹em≠
:

469 
	`iounm≠
(
 w
->
ªg_ba£
);

470 
îr_kmÆloc
:

471 
	`k‰ì
(
 w
);

472  
ªtvÆ
;

473 
	}
}

475 
	$wp_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

477 
 w_gpio
 *
 w
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

478 
îr
;

479 
îr
 = 
	`gpiochù_ªmove
(&
 w
->
chù
);

480 i‡(
îr
)

481 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑemove gpio_chip.\n");

482 
	`iounm≠
(
 w
->
ªg_ba£
);

483 
	`k‰ì
(
 w
);

484 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

486 
	}
}

488 
∂©f‹m_drivî
 
	gwp_gpio_drivî
 = {

489 .
¥obe
 = 
wp_gpio_¥obe
,

490 .
	gªmove
 = 
wp_gpio_ªmove
,

491 .
	gdrivî
 = {

492 .
«me
 = "wp_gpio",

493 .
	gow√r
 = 
THIS_MODULE
,

497 
__öô
 
	$ w_gpio_öô
()

499 
ªt
;

500 
ªt
 = 
	`pci_ªgi°î_drivî
(&
 w_gpio_drivî
);

501 i‡(
ªt
 < 0)

502  
ªt
;

503 
ªt
 = 
	`∂©f‹m_drivî_ªgi°î
(&
wp_gpio_drivî
);

504 i‡(
ªt
 < 0)

505 
	`pci_uƒegi°î_drivî
(&
 w_gpio_drivî
);

506  
ªt
;

507 
	}
}

509 
devi˚_öôˇŒ
(
 w_gpio_öô
);

	@gpio-lpc32xx.c

19 
	~<löux/kî√l.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/io.h
>

22 
	~<löux/î∫o.h
>

23 
	~<löux/gpio.h
>

24 
	~<löux/of_gpio.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/moduÀ.h
>

28 
	~<mach/h¨dw¨e.h
>

29 
	~<mach/∂©f‹m.h
>

30 
	~<mach/gpio-Õc32xx.h
>

31 
	~<mach/úqs.h
>

33 
	#LPC32XX_GPIO_P3_INP_STATE
 
	`_GPREG
(0x000)

	)

34 
	#LPC32XX_GPIO_P3_OUTP_SET
 
	`_GPREG
(0x004)

	)

35 
	#LPC32XX_GPIO_P3_OUTP_CLR
 
	`_GPREG
(0x008)

	)

36 
	#LPC32XX_GPIO_P3_OUTP_STATE
 
	`_GPREG
(0x00C)

	)

37 
	#LPC32XX_GPIO_P2_DIR_SET
 
	`_GPREG
(0x010)

	)

38 
	#LPC32XX_GPIO_P2_DIR_CLR
 
	`_GPREG
(0x014)

	)

39 
	#LPC32XX_GPIO_P2_DIR_STATE
 
	`_GPREG
(0x018)

	)

40 
	#LPC32XX_GPIO_P2_INP_STATE
 
	`_GPREG
(0x01C)

	)

41 
	#LPC32XX_GPIO_P2_OUTP_SET
 
	`_GPREG
(0x020)

	)

42 
	#LPC32XX_GPIO_P2_OUTP_CLR
 
	`_GPREG
(0x024)

	)

43 
	#LPC32XX_GPIO_P2_MUX_SET
 
	`_GPREG
(0x028)

	)

44 
	#LPC32XX_GPIO_P2_MUX_CLR
 
	`_GPREG
(0x02C)

	)

45 
	#LPC32XX_GPIO_P2_MUX_STATE
 
	`_GPREG
(0x030)

	)

46 
	#LPC32XX_GPIO_P0_INP_STATE
 
	`_GPREG
(0x040)

	)

47 
	#LPC32XX_GPIO_P0_OUTP_SET
 
	`_GPREG
(0x044)

	)

48 
	#LPC32XX_GPIO_P0_OUTP_CLR
 
	`_GPREG
(0x048)

	)

49 
	#LPC32XX_GPIO_P0_OUTP_STATE
 
	`_GPREG
(0x04C)

	)

50 
	#LPC32XX_GPIO_P0_DIR_SET
 
	`_GPREG
(0x050)

	)

51 
	#LPC32XX_GPIO_P0_DIR_CLR
 
	`_GPREG
(0x054)

	)

52 
	#LPC32XX_GPIO_P0_DIR_STATE
 
	`_GPREG
(0x058)

	)

53 
	#LPC32XX_GPIO_P1_INP_STATE
 
	`_GPREG
(0x060)

	)

54 
	#LPC32XX_GPIO_P1_OUTP_SET
 
	`_GPREG
(0x064)

	)

55 
	#LPC32XX_GPIO_P1_OUTP_CLR
 
	`_GPREG
(0x068)

	)

56 
	#LPC32XX_GPIO_P1_OUTP_STATE
 
	`_GPREG
(0x06C)

	)

57 
	#LPC32XX_GPIO_P1_DIR_SET
 
	`_GPREG
(0x070)

	)

58 
	#LPC32XX_GPIO_P1_DIR_CLR
 
	`_GPREG
(0x074)

	)

59 
	#LPC32XX_GPIO_P1_DIR_STATE
 
	`_GPREG
(0x078)

	)

61 
	#GPIO012_PIN_TO_BIT
(
x
Ë(1 << (x))

	)

62 
	#GPIO3_PIN_TO_BIT
(
x
Ë(1 << ((xË+ 25))

	)

63 
	#GPO3_PIN_TO_BIT
(
x
Ë(1 << (x))

	)

64 
	#GPIO012_PIN_IN_SEL
(
x
, 
y
Ë(((xË>> (y)Ë& 1)

	)

65 
	#GPIO3_PIN_IN_SHIFT
(
x
Ë((xË=5 ? 24 : 10 + (x))

	)

66 
	#GPIO3_PIN_IN_SEL
(
x
, 
y
Ë(((xË>> 
	`GPIO3_PIN_IN_SHIFT
(y)Ë& 1)

	)

67 
	#GPIO3_PIN5_IN_SEL
(
x
Ë(((xË>> 24Ë& 1)

	)

68 
	#GPI3_PIN_IN_SEL
(
x
, 
y
Ë(((xË>> (y)Ë& 1)

	)

69 
	#GPO3_PIN_IN_SEL
(
x
, 
y
Ë(((xË>> (y)Ë& 1)

	)

71 
	sgpio_ªgs
 {

72 
__iomem
 *
	möp_°©e
;

73 
__iomem
 *
	mouç_°©e
;

74 
__iomem
 *
	mouç_£t
;

75 
__iomem
 *
	mouç_˛r
;

76 
__iomem
 *
	mdú_£t
;

77 
__iomem
 *
	mdú_˛r
;

83 c⁄° *
	ggpio_p0_«mes
[
LPC32XX_GPIO_P0_MAX
] = {

88 c⁄° *
	ggpio_p1_«mes
[
LPC32XX_GPIO_P1_MAX
] = {

97 c⁄° *
	ggpio_p2_«mes
[
LPC32XX_GPIO_P2_MAX
] = {

104 c⁄° *
	ggpio_p3_«mes
[
LPC32XX_GPIO_P3_MAX
] = {

109 c⁄° *
	ggpi_p3_«mes
[
LPC32XX_GPI_P3_MAX
] = {

112 "gpi08", "gpi09", 
NULL
, NULL,

113 
NULL
, NULL, NULL, "gpi15",

120 c⁄° *
	ggpo_p3_«mes
[
LPC32XX_GPO_P3_MAX
] = {

129 
gpio_ªgs
 
	ggpio_gΩ_ªgs_p0
 = {

130 .
öp_°©e
 = 
LPC32XX_GPIO_P0_INP_STATE
,

131 .
	gouç_£t
 = 
LPC32XX_GPIO_P0_OUTP_SET
,

132 .
	gouç_˛r
 = 
LPC32XX_GPIO_P0_OUTP_CLR
,

133 .
	gdú_£t
 = 
LPC32XX_GPIO_P0_DIR_SET
,

134 .
	gdú_˛r
 = 
LPC32XX_GPIO_P0_DIR_CLR
,

137 
gpio_ªgs
 
	ggpio_gΩ_ªgs_p1
 = {

138 .
öp_°©e
 = 
LPC32XX_GPIO_P1_INP_STATE
,

139 .
	gouç_£t
 = 
LPC32XX_GPIO_P1_OUTP_SET
,

140 .
	gouç_˛r
 = 
LPC32XX_GPIO_P1_OUTP_CLR
,

141 .
	gdú_£t
 = 
LPC32XX_GPIO_P1_DIR_SET
,

142 .
	gdú_˛r
 = 
LPC32XX_GPIO_P1_DIR_CLR
,

145 
gpio_ªgs
 
	ggpio_gΩ_ªgs_p2
 = {

146 .
öp_°©e
 = 
LPC32XX_GPIO_P2_INP_STATE
,

147 .
	gouç_£t
 = 
LPC32XX_GPIO_P2_OUTP_SET
,

148 .
	gouç_˛r
 = 
LPC32XX_GPIO_P2_OUTP_CLR
,

149 .
	gdú_£t
 = 
LPC32XX_GPIO_P2_DIR_SET
,

150 .
	gdú_˛r
 = 
LPC32XX_GPIO_P2_DIR_CLR
,

153 
gpio_ªgs
 
	ggpio_gΩ_ªgs_p3
 = {

154 .
öp_°©e
 = 
LPC32XX_GPIO_P3_INP_STATE
,

155 .
	gouç_°©e
 = 
LPC32XX_GPIO_P3_OUTP_STATE
,

156 .
	gouç_£t
 = 
LPC32XX_GPIO_P3_OUTP_SET
,

157 .
	gouç_˛r
 = 
LPC32XX_GPIO_P3_OUTP_CLR
,

158 .
	gdú_£t
 = 
LPC32XX_GPIO_P2_DIR_SET
,

159 .
	gdú_˛r
 = 
LPC32XX_GPIO_P2_DIR_CLR
,

162 
	sÕc32xx_gpio_chù
 {

163 
gpio_chù
 
	mchù
;

164 
gpio_ªgs
 *
	mgpio_gΩ
;

167 
ölöe
 
Õc32xx_gpio_chù
 *
	$to_Õc32xx_gpio
(

168 
gpio_chù
 *
gpc
)

170  
	`c⁄èöî_of
(
gpc
, 
Õc32xx_gpio_chù
, 
chù
);

171 
	}
}

173 
	$__£t_gpio_dú_p012
(
Õc32xx_gpio_chù
 *
group
,

174 
pö
, 
öput
)

176 i‡(
öput
)

177 
	`__øw_wrôñ
(
	`GPIO012_PIN_TO_BIT
(
pö
),

178 
group
->
gpio_gΩ
->
dú_˛r
);

180 
	`__øw_wrôñ
(
	`GPIO012_PIN_TO_BIT
(
pö
),

181 
group
->
gpio_gΩ
->
dú_£t
);

182 
	}
}

184 
	$__£t_gpio_dú_p3
(
Õc32xx_gpio_chù
 *
group
,

185 
pö
, 
öput
)

187 
u32
 
u
 = 
	`GPIO3_PIN_TO_BIT
(
pö
);

189 i‡(
öput
)

190 
	`__øw_wrôñ
(
u
, 
group
->
gpio_gΩ
->
dú_˛r
);

192 
	`__øw_wrôñ
(
u
, 
group
->
gpio_gΩ
->
dú_£t
);

193 
	}
}

195 
	$__£t_gpio_Àvñ_p012
(
Õc32xx_gpio_chù
 *
group
,

196 
pö
, 
high
)

198 i‡(
high
)

199 
	`__øw_wrôñ
(
	`GPIO012_PIN_TO_BIT
(
pö
),

200 
group
->
gpio_gΩ
->
ouç_£t
);

202 
	`__øw_wrôñ
(
	`GPIO012_PIN_TO_BIT
(
pö
),

203 
group
->
gpio_gΩ
->
ouç_˛r
);

204 
	}
}

206 
	$__£t_gpio_Àvñ_p3
(
Õc32xx_gpio_chù
 *
group
,

207 
pö
, 
high
)

209 
u32
 
u
 = 
	`GPIO3_PIN_TO_BIT
(
pö
);

211 i‡(
high
)

212 
	`__øw_wrôñ
(
u
, 
group
->
gpio_gΩ
->
ouç_£t
);

214 
	`__øw_wrôñ
(
u
, 
group
->
gpio_gΩ
->
ouç_˛r
);

215 
	}
}

217 
	$__£t_gpo_Àvñ_p3
(
Õc32xx_gpio_chù
 *
group
,

218 
pö
, 
high
)

220 i‡(
high
)

221 
	`__øw_wrôñ
(
	`GPO3_PIN_TO_BIT
(
pö
), 
group
->
gpio_gΩ
->
ouç_£t
);

223 
	`__øw_wrôñ
(
	`GPO3_PIN_TO_BIT
(
pö
), 
group
->
gpio_gΩ
->
ouç_˛r
);

224 
	}
}

226 
	$__gë_gpio_°©e_p012
(
Õc32xx_gpio_chù
 *
group
,

227 
pö
)

229  
	`GPIO012_PIN_IN_SEL
(
	`__øw_ªadl
(
group
->
gpio_gΩ
->
öp_°©e
),

230 
pö
);

231 
	}
}

233 
	$__gë_gpio_°©e_p3
(
Õc32xx_gpio_chù
 *
group
,

234 
pö
)

236 
°©e
 = 
	`__øw_ªadl
(
group
->
gpio_gΩ
->
öp_°©e
);

242  
	`GPIO3_PIN_IN_SEL
(
°©e
, 
pö
);

243 
	}
}

245 
	$__gë_gpi_°©e_p3
(
Õc32xx_gpio_chù
 *
group
,

246 
pö
)

248  
	`GPI3_PIN_IN_SEL
(
	`__øw_ªadl
(
group
->
gpio_gΩ
->
öp_°©e
), 
pö
);

249 
	}
}

251 
	$__gë_gpo_°©e_p3
(
Õc32xx_gpio_chù
 *
group
,

252 
pö
)

254  
	`GPO3_PIN_IN_SEL
(
	`__øw_ªadl
(
group
->
gpio_gΩ
->
ouç_°©e
), 
pö
);

255 
	}
}

260 
	$Õc32xx_gpio_dú_öput_p012
(
gpio_chù
 *
chù
,

261 
pö
)

263 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

265 
	`__£t_gpio_dú_p012
(
group
, 
pö
, 1);

268 
	}
}

270 
	$Õc32xx_gpio_dú_öput_p3
(
gpio_chù
 *
chù
,

271 
pö
)

273 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

275 
	`__£t_gpio_dú_p3
(
group
, 
pö
, 1);

278 
	}
}

280 
	$Õc32xx_gpio_dú_ö_Æways
(
gpio_chù
 *
chù
,

281 
pö
)

284 
	}
}

286 
	$Õc32xx_gpio_gë_vÆue_p012
(
gpio_chù
 *
chù
, 
pö
)

288 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

290  
	`__gë_gpio_°©e_p012
(
group
, 
pö
);

291 
	}
}

293 
	$Õc32xx_gpio_gë_vÆue_p3
(
gpio_chù
 *
chù
, 
pö
)

295 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

297  
	`__gë_gpio_°©e_p3
(
group
, 
pö
);

298 
	}
}

300 
	$Õc32xx_gpi_gë_vÆue
(
gpio_chù
 *
chù
, 
pö
)

302 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

304  
	`__gë_gpi_°©e_p3
(
group
, 
pö
);

305 
	}
}

307 
	$Õc32xx_gpio_dú_ouçut_p012
(
gpio_chù
 *
chù
, 
pö
,

308 
vÆue
)

310 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

312 
	`__£t_gpio_Àvñ_p012
(
group
, 
pö
, 
vÆue
);

313 
	`__£t_gpio_dú_p012
(
group
, 
pö
, 0);

316 
	}
}

318 
	$Õc32xx_gpio_dú_ouçut_p3
(
gpio_chù
 *
chù
, 
pö
,

319 
vÆue
)

321 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

323 
	`__£t_gpio_Àvñ_p3
(
group
, 
pö
, 
vÆue
);

324 
	`__£t_gpio_dú_p3
(
group
, 
pö
, 0);

327 
	}
}

329 
	$Õc32xx_gpio_dú_out_Æways
(
gpio_chù
 *
chù
, 
pö
,

330 
vÆue
)

332 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

334 
	`__£t_gpo_Àvñ_p3
(
group
, 
pö
, 
vÆue
);

336 
	}
}

338 
	$Õc32xx_gpio_£t_vÆue_p012
(
gpio_chù
 *
chù
, 
pö
,

339 
vÆue
)

341 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

343 
	`__£t_gpio_Àvñ_p012
(
group
, 
pö
, 
vÆue
);

344 
	}
}

346 
	$Õc32xx_gpio_£t_vÆue_p3
(
gpio_chù
 *
chù
, 
pö
,

347 
vÆue
)

349 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

351 
	`__£t_gpio_Àvñ_p3
(
group
, 
pö
, 
vÆue
);

352 
	}
}

354 
	$Õc32xx_gpo_£t_vÆue
(
gpio_chù
 *
chù
, 
pö
,

355 
vÆue
)

357 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

359 
	`__£t_gpo_Àvñ_p3
(
group
, 
pö
, 
vÆue
);

360 
	}
}

362 
	$Õc32xx_gpo_gë_vÆue
(
gpio_chù
 *
chù
, 
pö
)

364 
Õc32xx_gpio_chù
 *
group
 = 
	`to_Õc32xx_gpio
(
chù
);

366  
	`__gë_gpo_°©e_p3
(
group
, 
pö
);

367 
	}
}

369 
	$Õc32xx_gpio_ªque°
(
gpio_chù
 *
chù
, 
pö
)

371 i‡(
pö
 < 
chù
->
ngpio
)

374  -
EINVAL
;

375 
	}
}

377 
	$Õc32xx_gpio_to_úq_p01
(
gpio_chù
 *
chù
, 
off£t
)

379  
IRQ_LPC32XX_P0_P1_IRQ
;

380 
	}
}

382 c⁄° 
	gÕc32xx_gpio_to_úq_gpio_p3_èbÀ
[] = {

383 
IRQ_LPC32XX_GPIO_00
,

384 
IRQ_LPC32XX_GPIO_01
,

385 
IRQ_LPC32XX_GPIO_02
,

386 
IRQ_LPC32XX_GPIO_03
,

387 
IRQ_LPC32XX_GPIO_04
,

388 
IRQ_LPC32XX_GPIO_05
,

391 
	$Õc32xx_gpio_to_úq_gpio_p3
(
gpio_chù
 *
chù
, 
off£t
)

393 i‡(
off£t
 < 
	`ARRAY_SIZE
(
Õc32xx_gpio_to_úq_gpio_p3_èbÀ
))

394  
Õc32xx_gpio_to_úq_gpio_p3_èbÀ
[
off£t
];

395  -
ENXIO
;

396 
	}
}

398 c⁄° 
	gÕc32xx_gpio_to_úq_gpi_p3_èbÀ
[] = {

399 
IRQ_LPC32XX_GPI_00
,

400 
IRQ_LPC32XX_GPI_01
,

401 
IRQ_LPC32XX_GPI_02
,

402 
IRQ_LPC32XX_GPI_03
,

403 
IRQ_LPC32XX_GPI_04
,

404 
IRQ_LPC32XX_GPI_05
,

405 
IRQ_LPC32XX_GPI_06
,

406 
IRQ_LPC32XX_GPI_07
,

407 
IRQ_LPC32XX_GPI_08
,

408 
IRQ_LPC32XX_GPI_09
,

409 -
ENXIO
,

410 -
ENXIO
,

411 -
ENXIO
,

412 -
ENXIO
,

413 -
ENXIO
,

414 -
ENXIO
,

415 -
ENXIO
,

416 -
ENXIO
,

417 -
ENXIO
,

418 
IRQ_LPC32XX_GPI_19
,

419 -
ENXIO
,

420 -
ENXIO
,

421 -
ENXIO
,

422 -
ENXIO
,

423 -
ENXIO
,

424 -
ENXIO
,

425 -
ENXIO
,

426 -
ENXIO
,

427 
IRQ_LPC32XX_GPI_28
,

430 
	$Õc32xx_gpio_to_úq_gpi_p3
(
gpio_chù
 *
chù
, 
off£t
)

432 i‡(
off£t
 < 
	`ARRAY_SIZE
(
Õc32xx_gpio_to_úq_gpi_p3_èbÀ
))

433  
Õc32xx_gpio_to_úq_gpi_p3_èbÀ
[
off£t
];

434  -
ENXIO
;

435 
	}
}

437 
Õc32xx_gpio_chù
 
	gÕc32xx_gpiochù
[] = {

439 .
chù
 = {

440 .
œbñ
 = "gpio_p0",

441 .
	gdúe˘i⁄_öput
 = 
Õc32xx_gpio_dú_öput_p012
,

442 .
	ggë
 = 
Õc32xx_gpio_gë_vÆue_p012
,

443 .
	gdúe˘i⁄_ouçut
 = 
Õc32xx_gpio_dú_ouçut_p012
,

444 .
	g£t
 = 
Õc32xx_gpio_£t_vÆue_p012
,

445 .
	gªque°
 = 
Õc32xx_gpio_ªque°
,

446 .
	gto_úq
 = 
Õc32xx_gpio_to_úq_p01
,

447 .
	gba£
 = 
LPC32XX_GPIO_P0_GRP
,

448 .
	gngpio
 = 
LPC32XX_GPIO_P0_MAX
,

449 .
	g«mes
 = 
gpio_p0_«mes
,

450 .
	gˇn_¶ìp
 = 0,

452 .
	ggpio_gΩ
 = &
gpio_gΩ_ªgs_p0
,

455 .
	gchù
 = {

456 .
œbñ
 = "gpio_p1",

457 .
	gdúe˘i⁄_öput
 = 
Õc32xx_gpio_dú_öput_p012
,

458 .
	ggë
 = 
Õc32xx_gpio_gë_vÆue_p012
,

459 .
	gdúe˘i⁄_ouçut
 = 
Õc32xx_gpio_dú_ouçut_p012
,

460 .
	g£t
 = 
Õc32xx_gpio_£t_vÆue_p012
,

461 .
	gªque°
 = 
Õc32xx_gpio_ªque°
,

462 .
	gto_úq
 = 
Õc32xx_gpio_to_úq_p01
,

463 .
	gba£
 = 
LPC32XX_GPIO_P1_GRP
,

464 .
	gngpio
 = 
LPC32XX_GPIO_P1_MAX
,

465 .
	g«mes
 = 
gpio_p1_«mes
,

466 .
	gˇn_¶ìp
 = 0,

468 .
	ggpio_gΩ
 = &
gpio_gΩ_ªgs_p1
,

471 .
	gchù
 = {

472 .
œbñ
 = "gpio_p2",

473 .
	gdúe˘i⁄_öput
 = 
Õc32xx_gpio_dú_öput_p012
,

474 .
	ggë
 = 
Õc32xx_gpio_gë_vÆue_p012
,

475 .
	gdúe˘i⁄_ouçut
 = 
Õc32xx_gpio_dú_ouçut_p012
,

476 .
	g£t
 = 
Õc32xx_gpio_£t_vÆue_p012
,

477 .
	gªque°
 = 
Õc32xx_gpio_ªque°
,

478 .
	gba£
 = 
LPC32XX_GPIO_P2_GRP
,

479 .
	gngpio
 = 
LPC32XX_GPIO_P2_MAX
,

480 .
	g«mes
 = 
gpio_p2_«mes
,

481 .
	gˇn_¶ìp
 = 0,

483 .
	ggpio_gΩ
 = &
gpio_gΩ_ªgs_p2
,

486 .
	gchù
 = {

487 .
œbñ
 = "gpio_p3",

488 .
	gdúe˘i⁄_öput
 = 
Õc32xx_gpio_dú_öput_p3
,

489 .
	ggë
 = 
Õc32xx_gpio_gë_vÆue_p3
,

490 .
	gdúe˘i⁄_ouçut
 = 
Õc32xx_gpio_dú_ouçut_p3
,

491 .
	g£t
 = 
Õc32xx_gpio_£t_vÆue_p3
,

492 .
	gªque°
 = 
Õc32xx_gpio_ªque°
,

493 .
	gto_úq
 = 
Õc32xx_gpio_to_úq_gpio_p3
,

494 .
	gba£
 = 
LPC32XX_GPIO_P3_GRP
,

495 .
	gngpio
 = 
LPC32XX_GPIO_P3_MAX
,

496 .
	g«mes
 = 
gpio_p3_«mes
,

497 .
	gˇn_¶ìp
 = 0,

499 .
	ggpio_gΩ
 = &
gpio_gΩ_ªgs_p3
,

502 .
	gchù
 = {

503 .
œbñ
 = "gpi_p3",

504 .
	gdúe˘i⁄_öput
 = 
Õc32xx_gpio_dú_ö_Æways
,

505 .
	ggë
 = 
Õc32xx_gpi_gë_vÆue
,

506 .
	gªque°
 = 
Õc32xx_gpio_ªque°
,

507 .
	gto_úq
 = 
Õc32xx_gpio_to_úq_gpi_p3
,

508 .
	gba£
 = 
LPC32XX_GPI_P3_GRP
,

509 .
	gngpio
 = 
LPC32XX_GPI_P3_MAX
,

510 .
	g«mes
 = 
gpi_p3_«mes
,

511 .
	gˇn_¶ìp
 = 0,

513 .
	ggpio_gΩ
 = &
gpio_gΩ_ªgs_p3
,

516 .
	gchù
 = {

517 .
œbñ
 = "gpo_p3",

518 .
	gdúe˘i⁄_ouçut
 = 
Õc32xx_gpio_dú_out_Æways
,

519 .
	g£t
 = 
Õc32xx_gpo_£t_vÆue
,

520 .
	ggë
 = 
Õc32xx_gpo_gë_vÆue
,

521 .
	gªque°
 = 
Õc32xx_gpio_ªque°
,

522 .
	gba£
 = 
LPC32XX_GPO_P3_GRP
,

523 .
	gngpio
 = 
LPC32XX_GPO_P3_MAX
,

524 .
	g«mes
 = 
gpo_p3_«mes
,

525 .
	gˇn_¶ìp
 = 0,

527 .
	ggpio_gΩ
 = &
gpio_gΩ_ªgs_p3
,

531 
	$Õc32xx_of_xœã
(
gpio_chù
 *
gc
,

532 c⁄° 
of_ph™dÀ_¨gs
 *
gpio•ec
, 
u32
 *
Êags
)

535 
u32
 
b™k
 = 
gpio•ec
->
¨gs
[0];

536 i‡((
b™k
 >
	`ARRAY_SIZE
(
Õc32xx_gpiochù
) ||

537 (
gc
 !&
Õc32xx_gpiochù
[
b™k
].
chù
)))

538  -
EINVAL
;

540 i‡(
Êags
)

541 *
Êags
 = 
gpio•ec
->
¨gs
[2];

542  
gpio•ec
->
¨gs
[1];

543 
	}
}

545 
	$Õc32xx_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

547 
i
;

549 
i
 = 0; i < 
	`ARRAY_SIZE
(
Õc32xx_gpiochù
); i++) {

550 i‡(
pdev
->
dev
.
of_node
) {

551 
Õc32xx_gpiochù
[
i
].
chù
.
of_xœã
 = 
Õc32xx_of_xœã
;

552 
Õc32xx_gpiochù
[
i
].
chù
.
of_gpio_n_˚Œs
 = 3;

553 
Õc32xx_gpiochù
[
i
].
chù
.
of_node
 = 
pdev
->
dev
.of_node;

555 
	`gpiochù_add
(&
Õc32xx_gpiochù
[
i
].
chù
);

559 
	}
}

561 #ifde‡
CONFIG_OF


562 
of_devi˚_id
 
	gÕc32xx_gpio_of_m©ch
[] = {

563 { .
com∑tibÀ
 = "nxp,lpc3220-gpio", },

568 
∂©f‹m_drivî
 
	gÕc32xx_gpio_drivî
 = {

569 .
drivî
 = {

570 .
«me
 = "lpc32xx-gpio",

571 .
	gow√r
 = 
THIS_MODULE
,

572 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
Õc32xx_gpio_of_m©ch
),

574 .
	g¥obe
 = 
Õc32xx_gpio_¥obe
,

577 
moduÀ_∂©f‹m_drivî
(
Õc32xx_gpio_drivî
);

	@gpio-lynxpoint.c

22 
	~<löux/kî√l.h
>

23 
	~<löux/moduÀ.h
>

24 
	~<löux/öô.h
>

25 
	~<löux/ty≥s.h
>

26 
	~<löux/bô›s.h
>

27 
	~<löux/öãºu±.h
>

28 
	~<löux/úq.h
>

29 
	~<löux/gpio.h
>

30 
	~<löux/úqdomaö.h
>

31 
	~<löux/¶ab.h
>

32 
	~<löux/a˝i.h
>

33 
	~<löux/∂©f‹m_devi˚.h
>

34 
	~<löux/pm_ru¡ime.h
>

35 
	~<löux/io.h
>

39 
	#LP_NUM_GPIO
 94

	)

42 
	#LP_ACPI_OWNED
 0x00

	)

43 
	#LP_GC
 0x7C

	)

44 
	#LP_INT_STAT
 0x80

	)

45 
	#LP_INT_ENABLE
 0x90

	)

48 
	#LP_CONFIG1
 0x100

	)

49 
	#LP_CONFIG2
 0x104

	)

52 
	#OUT_LVL_BIT
 
	`BIT
(31)

	)

53 
	#IN_LVL_BIT
 
	`BIT
(30)

	)

54 
	#TRIG_SEL_BIT
 
	`BIT
(4Ë

	)

55 
	#INT_INV_BIT
 
	`BIT
(3Ë

	)

56 
	#DIR_BIT
 
	`BIT
(2Ë

	)

57 
	#USE_SEL_BIT
 
	`BIT
(0Ë

	)

60 
	#GPINDIS_BIT
 
	`BIT
(2Ë

	)

61 
	#GPIWP_BIT
 (
	`BIT
(0Ë| BIT(1)Ë

	)

63 
	sÕ_gpio
 {

64 
gpio_chù
 
	mchù
;

65 
úq_domaö
 *
	mdomaö
;

66 
∂©f‹m_devi˚
 *
	mpdev
;

67 
•ölock_t
 
	mlock
;

68 
	mªg_ba£
;

100 
	$Õ_gpio_ªg
(
gpio_chù
 *
chù
, 
off£t
,

101 
ªg
)

103 
Õ_gpio
 *
lg
 = 
	`c⁄èöî_of
(
chù
, lp_gpio, chip);

104 
ªg_off£t
;

106 i‡(
ªg
 =
LP_CONFIG1
 ||Ñeg =
LP_CONFIG2
)

108 
ªg_off£t
 = 
off£t
 * 8;

111 
ªg_off£t
 = (
off£t
 / 32) * 4;

113  
lg
->
ªg_ba£
 + 
ªg
 + 
ªg_off£t
;

114 
	}
}

116 
	$Õ_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

118 
Õ_gpio
 *
lg
 = 
	`c⁄èöî_of
(
chù
, lp_gpio, chip);

119 
ªg
 = 
	`Õ_gpio_ªg
(
chù
, 
off£t
, 
LP_CONFIG1
);

120 
c⁄f2
 = 
	`Õ_gpio_ªg
(
chù
, 
off£t
, 
LP_CONFIG2
);

121 
a˝i_u£
 = 
	`Õ_gpio_ªg
(
chù
, 
off£t
, 
LP_ACPI_OWNED
);

123 
	`pm_ru¡ime_gë
(&
lg
->
pdev
->
dev
);

126 i‡(!(
	`öl
(
a˝i_u£
Ë& 
	`BIT
(
off£t
 % 32))) {

127 
	`dev_îr
(&
lg
->
pdev
->
dev
, "gpiÿ%dÑe£rved f‹ ACPI\n", 
off£t
);

128  -
EBUSY
;

131 i‡(!(
	`öl
(
ªg
Ë& 
USE_SEL_BIT
))

132  -
ENODEV
;

135 
	`oué
(
	`öl
(
c⁄f2
Ë& ~
GPINDIS_BIT
, conf2);

139 
	}
}

141 
	$Õ_gpio_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

143 
Õ_gpio
 *
lg
 = 
	`c⁄èöî_of
(
chù
, lp_gpio, chip);

144 
c⁄f2
 = 
	`Õ_gpio_ªg
(
chù
, 
off£t
, 
LP_CONFIG2
);

147 
	`oué
(
	`öl
(
c⁄f2
Ë| 
GPINDIS_BIT
, conf2);

149 
	`pm_ru¡ime_put
(&
lg
->
pdev
->
dev
);

150 
	}
}

152 
	$Õ_úq_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

154 
Õ_gpio
 *
lg
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

155 
u32
 
hwúq
 = 
	`úqd_to_hwúq
(
d
);

156 
Êags
;

157 
u32
 
vÆue
;

158 
ªg
 = 
	`Õ_gpio_ªg
(&
lg
->
chù
, 
hwúq
, 
LP_CONFIG1
);

160 i‡(
hwúq
 >
lg
->
chù
.
ngpio
)

161  -
EINVAL
;

163 
	`•ö_lock_úqßve
(&
lg
->
lock
, 
Êags
);

164 
vÆue
 = 
	`öl
(
ªg
);

167 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_RISING
)

168 
vÆue
 &~(
TRIG_SEL_BIT
 | 
INT_INV_BIT
);

171 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_FALLING
)

172 
vÆue
 = (vÆuê| 
INT_INV_BIT
Ë& ~
TRIG_SEL_BIT
;

175 i‡(
ty≥
 & 
IRQ_TYPE_LEVEL_LOW
)

176 
vÆue
 = (vÆuê| 
TRIG_SEL_BIT
Ë& ~
INT_INV_BIT
;

179 i‡(
ty≥
 & 
IRQ_TYPE_LEVEL_HIGH
)

180 
vÆue
 |
TRIG_SEL_BIT
 | 
INT_INV_BIT
;

182 
	`oué
(
vÆue
, 
ªg
);

183 
	`•ö_u∆ock_úqª°‹e
(&
lg
->
lock
, 
Êags
);

186 
	}
}

188 
	$Õ_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

190 
ªg
 = 
	`Õ_gpio_ªg
(
chù
, 
off£t
, 
LP_CONFIG1
);

191  
	`öl
(
ªg
Ë& 
IN_LVL_BIT
;

192 
	}
}

194 
	$Õ_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

196 
Õ_gpio
 *
lg
 = 
	`c⁄èöî_of
(
chù
, lp_gpio, chip);

197 
ªg
 = 
	`Õ_gpio_ªg
(
chù
, 
off£t
, 
LP_CONFIG1
);

198 
Êags
;

200 
	`•ö_lock_úqßve
(&
lg
->
lock
, 
Êags
);

202 i‡(
vÆue
)

203 
	`oué
(
	`öl
(
ªg
Ë| 
OUT_LVL_BIT
,Ñeg);

205 
	`oué
(
	`öl
(
ªg
Ë& ~
OUT_LVL_BIT
,Ñeg);

207 
	`•ö_u∆ock_úqª°‹e
(&
lg
->
lock
, 
Êags
);

208 
	}
}

210 
	$Õ_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

212 
Õ_gpio
 *
lg
 = 
	`c⁄èöî_of
(
chù
, lp_gpio, chip);

213 
ªg
 = 
	`Õ_gpio_ªg
(
chù
, 
off£t
, 
LP_CONFIG1
);

214 
Êags
;

216 
	`•ö_lock_úqßve
(&
lg
->
lock
, 
Êags
);

217 
	`oué
(
	`öl
(
ªg
Ë| 
DIR_BIT
,Ñeg);

218 
	`•ö_u∆ock_úqª°‹e
(&
lg
->
lock
, 
Êags
);

221 
	}
}

223 
	$Õ_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

224 
off£t
, 
vÆue
)

226 
Õ_gpio
 *
lg
 = 
	`c⁄èöî_of
(
chù
, lp_gpio, chip);

227 
ªg
 = 
	`Õ_gpio_ªg
(
chù
, 
off£t
, 
LP_CONFIG1
);

228 
Êags
;

230 
	`Õ_gpio_£t
(
chù
, 
off£t
, 
vÆue
);

232 
	`•ö_lock_úqßve
(&
lg
->
lock
, 
Êags
);

233 
	`oué
(
	`öl
(
ªg
Ë& ~
DIR_BIT
,Ñeg);

234 
	`•ö_u∆ock_úqª°‹e
(&
lg
->
lock
, 
Êags
);

237 
	}
}

239 
	$Õ_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

241 
Õ_gpio
 *
lg
 = 
	`c⁄èöî_of
(
chù
, lp_gpio, chip);

242  
	`úq_¸óã_m≠pög
(
lg
->
domaö
, 
off£t
);

243 
	}
}

245 
	$Õ_gpio_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

247 
úq_d©a
 *
d©a
 = 
	`úq_desc_gë_úq_d©a
(
desc
);

248 
Õ_gpio
 *
lg
 = 
	`úq_d©a_gë_úq_h™dÀr_d©a
(
d©a
);

249 
úq_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù
(
d©a
);

250 
u32
 
ba£
, 
pö
, 
mask
;

251 
ªg
, 
ía
, 
≥ndög
;

252 
vúq
;

255 
ba£
 = 0; ba£ < 
lg
->
chù
.
ngpio
; base += 32) {

256 
ªg
 = 
	`Õ_gpio_ªg
(&
lg
->
chù
, 
ba£
, 
LP_INT_STAT
);

257 
ía
 = 
	`Õ_gpio_ªg
(&
lg
->
chù
, 
ba£
, 
LP_INT_ENABLE
);

259 (
≥ndög
 = (
	`öl
(
ªg
Ë& i∆(
ía
)))) {

260 
pö
 = 
	`__ffs
(
≥ndög
);

261 
mask
 = 
	`BIT
(
pö
);

263 
	`oué
(
mask
, 
ªg
);

264 
vúq
 = 
	`úq_föd_m≠pög
(
lg
->
domaö
, 
ba£
 + 
pö
);

265 
	`gíîic_h™dÀ_úq
(
vúq
);

268 
chù
->
	`úq_eoi
(
d©a
);

269 
	}
}

271 
	$Õ_úq_unmask
(
úq_d©a
 *
d
)

273 
	}
}

275 
	$Õ_úq_mask
(
úq_d©a
 *
d
)

277 
	}
}

279 
	$Õ_úq_íabÀ
(
úq_d©a
 *
d
)

281 
Õ_gpio
 *
lg
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

282 
u32
 
hwúq
 = 
	`úqd_to_hwúq
(
d
);

283 
ªg
 = 
	`Õ_gpio_ªg
(&
lg
->
chù
, 
hwúq
, 
LP_INT_ENABLE
);

284 
Êags
;

286 
	`•ö_lock_úqßve
(&
lg
->
lock
, 
Êags
);

287 
	`oué
(
	`öl
(
ªg
Ë| 
	`BIT
(
hwúq
 % 32),Ñeg);

288 
	`•ö_u∆ock_úqª°‹e
(&
lg
->
lock
, 
Êags
);

289 
	}
}

291 
	$Õ_úq_dißbÀ
(
úq_d©a
 *
d
)

293 
Õ_gpio
 *
lg
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

294 
u32
 
hwúq
 = 
	`úqd_to_hwúq
(
d
);

295 
ªg
 = 
	`Õ_gpio_ªg
(&
lg
->
chù
, 
hwúq
, 
LP_INT_ENABLE
);

296 
Êags
;

298 
	`•ö_lock_úqßve
(&
lg
->
lock
, 
Êags
);

299 
	`oué
(
	`öl
(
ªg
Ë& ~
	`BIT
(
hwúq
 % 32),Ñeg);

300 
	`•ö_u∆ock_úqª°‹e
(&
lg
->
lock
, 
Êags
);

301 
	}
}

303 
úq_chù
 
	gÕ_úqchù
 = {

304 .
«me
 = "LP-GPIO",

305 .
	gúq_mask
 = 
Õ_úq_mask
,

306 .
	gúq_unmask
 = 
Õ_úq_unmask
,

307 .
	gúq_íabÀ
 = 
Õ_úq_íabÀ
,

308 .
	gúq_dißbÀ
 = 
Õ_úq_dißbÀ
,

309 .
	gúq_£t_ty≥
 = 
Õ_úq_ty≥
,

310 .
	gÊags
 = 
IRQCHIP_SKIP_SET_WAKE
,

313 
	$Õ_gpio_úq_öô_hw
(
Õ_gpio
 *
lg
)

315 
ªg
;

316 
ba£
;

318 
ba£
 = 0; ba£ < 
lg
->
chù
.
ngpio
; base += 32) {

320 
ªg
 = 
	`Õ_gpio_ªg
(&
lg
->
chù
, 
ba£
, 
LP_INT_ENABLE
);

321 
	`oué
(0, 
ªg
);

323 
ªg
 = 
	`Õ_gpio_ªg
(&
lg
->
chù
, 
ba£
, 
LP_INT_STAT
);

324 
	`oué
(0xffffffff, 
ªg
);

326 
	}
}

328 
	$Õ_gpio_úq_m≠
(
úq_domaö
 *
d
, 
vúq
,

329 
úq_hw_numbî_t
 
hw
)

331 
Õ_gpio
 *
lg
 = 
d
->
ho°_d©a
;

333 
	`úq_£t_chù_™d_h™dÀr_«me
(
vúq
, &
Õ_úqchù
, 
h™dÀ_sim∂e_úq
,

335 
	`úq_£t_chù_d©a
(
vúq
, 
lg
);

336 
	`úq_£t_úq_ty≥
(
vúq
, 
IRQ_TYPE_NONE
);

339 
	}
}

341 c⁄° 
úq_domaö_›s
 
	gÕ_gpio_úq_›s
 = {

342 .
m≠
 = 
Õ_gpio_úq_m≠
,

345 
	$Õ_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

347 
Õ_gpio
 *
lg
;

348 
gpio_chù
 *
gc
;

349 
ªsour˚
 *
io_rc
, *
úq_rc
;

350 
devi˚
 *
dev
 = &
pdev
->dev;

351 
ªg_Àn
;

352 
hwúq
;

353 
ªt
 = -
ENODEV
;

355 
lg
 = 
	`devm_kzÆloc
(
dev
, (
Õ_gpio
), 
GFP_KERNEL
);

356 i‡(!
lg
) {

357 
	`dev_îr
(
dev
, "can'tállocateÜp_gpio chip data\n");

358  -
ENOMEM
;

361 
lg
->
pdev
 =Ödev;

362 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
lg
);

364 
io_rc
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 0);

365 
úq_rc
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

367 i‡(!
io_rc
) {

368 
	`dev_îr
(
dev
, "missing IOÑesources\n");

369  -
EINVAL
;

372 
lg
->
ªg_ba£
 = 
io_rc
->
°¨t
;

373 
ªg_Àn
 = 
	`ªsour˚_size
(
io_rc
);

375 i‡(!
	`devm_ªque°_ªgi⁄
(
dev
, 
lg
->
ªg_ba£
, 
ªg_Àn
, "lp-gpio")) {

376 
	`dev_îr
(
dev
, "failedÑequesting IOÑegion 0x%x\n",

377 ()
lg
->
ªg_ba£
);

378  -
EBUSY
;

381 
	`•ö_lock_öô
(&
lg
->
lock
);

383 
gc
 = &
lg
->
chù
;

384 
gc
->
œbñ
 = 
	`dev_«me
(
dev
);

385 
gc
->
ow√r
 = 
THIS_MODULE
;

386 
gc
->
ªque°
 = 
Õ_gpio_ªque°
;

387 
gc
->
‰ì
 = 
Õ_gpio_‰ì
;

388 
gc
->
dúe˘i⁄_öput
 = 
Õ_gpio_dúe˘i⁄_öput
;

389 
gc
->
dúe˘i⁄_ouçut
 = 
Õ_gpio_dúe˘i⁄_ouçut
;

390 
gc
->
gë
 = 
Õ_gpio_gë
;

391 
gc
->
£t
 = 
Õ_gpio_£t
;

392 
gc
->
ba£
 = -1;

393 
gc
->
ngpio
 = 
LP_NUM_GPIO
;

394 
gc
->
ˇn_¶ìp
 = 0;

395 
gc
->
dev
 = dev;

398 i‡(
úq_rc
 && irq_rc->
°¨t
) {

399 
hwúq
 = 
úq_rc
->
°¨t
;

400 
gc
->
to_úq
 = 
Õ_gpio_to_úq
;

402 
lg
->
domaö
 = 
	`úq_domaö_add_löór
(
NULL
, 
LP_NUM_GPIO
,

403 &
Õ_gpio_úq_›s
, 
lg
);

404 i‡(!
lg
->
domaö
)

405  -
ENXIO
;

407 
	`Õ_gpio_úq_öô_hw
(
lg
);

409 
	`úq_£t_h™dÀr_d©a
(
hwúq
, 
lg
);

410 
	`úq_£t_chaöed_h™dÀr
(
hwúq
, 
Õ_gpio_úq_h™dÀr
);

413 
ªt
 = 
	`gpiochù_add
(
gc
);

414 i‡(
ªt
) {

415 
	`dev_îr
(
dev
, "failedáddingÜp-gpio chip\n");

416  
ªt
;

418 
	`pm_ru¡ime_íabÀ
(
dev
);

421 
	}
}

423 
	$Õ_gpio_ru¡ime_su•íd
(
devi˚
 *
dev
)

426 
	}
}

428 
	$Õ_gpio_ru¡ime_ªsume
(
devi˚
 *
dev
)

431 
	}
}

433 c⁄° 
dev_pm_›s
 
	gÕ_gpio_pm_›s
 = {

434 .
ru¡ime_su•íd
 = 
Õ_gpio_ru¡ime_su•íd
,

435 .
	gru¡ime_ªsume
 = 
Õ_gpio_ru¡ime_ªsume
,

438 c⁄° 
a˝i_devi˚_id
 
	glynxpoöt_gpio_a˝i_m©ch
[] = {

442 
MODULE_DEVICE_TABLE
(
a˝i
, 
lynxpoöt_gpio_a˝i_m©ch
);

444 
	$Õ_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

446 
Õ_gpio
 *
lg
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

447 
îr
;

448 
îr
 = 
	`gpiochù_ªmove
(&
lg
->
chù
);

449 i‡(
îr
)

450 
	`dev_w¨n
(&
pdev
->
dev
, "failedÅoÑemove gpio_chip.\n");

451 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

453 
	}
}

455 
∂©f‹m_drivî
 
	gÕ_gpio_drivî
 = {

456 .
¥obe
 = 
Õ_gpio_¥obe
,

457 .
	gªmove
 = 
Õ_gpio_ªmove
,

458 .
	gdrivî
 = {

459 .
«me
 = "lp_gpio",

460 .
	gow√r
 = 
THIS_MODULE
,

461 .
	gpm
 = &
Õ_gpio_pm_›s
,

462 .
	ga˝i_m©ch_èbÀ
 = 
ACPI_PTR
(
lynxpoöt_gpio_a˝i_m©ch
),

466 
__öô
 
	$Õ_gpio_öô
()

468  
	`∂©f‹m_drivî_ªgi°î
(&
Õ_gpio_drivî
);

469 
	}
}

471 
subsys_öôˇŒ
(
Õ_gpio_öô
);

	@gpio-max7300.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/muãx.h
>

15 
	~<löux/i2c.h
>

16 
	~<löux/•i/max7301.h
>

17 
	~<löux/¶ab.h
>

19 
	$max7300_i2c_wrôe
(
devi˚
 *
dev
, 
ªg
,

20 
vÆ
)

22 
i2c_˛õ¡
 *
˛õ¡
 = 
	`to_i2c_˛õ¡
(
dev
);

24  
	`i2c_smbus_wrôe_byã_d©a
(
˛õ¡
, 
ªg
, 
vÆ
);

25 
	}
}

27 
	$max7300_i2c_ªad
(
devi˚
 *
dev
, 
ªg
)

29 
i2c_˛õ¡
 *
˛õ¡
 = 
	`to_i2c_˛õ¡
(
dev
);

31  
	`i2c_smbus_ªad_byã_d©a
(
˛õ¡
, 
ªg
);

32 
	}
}

34 
	$max7300_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

35 c⁄° 
i2c_devi˚_id
 *
id
)

37 
max7301
 *
ts
;

38 
ªt
;

40 i‡(!
	`i2c_check_fun˘i⁄Æôy
(
˛õ¡
->
ad≠ãr
,

41 
I2C_FUNC_SMBUS_BYTE_DATA
))

42  -
EIO
;

44 
ts
 = 
	`devm_kzÆloc
(&
˛õ¡
->
dev
, (
max7301
), 
GFP_KERNEL
);

45 i‡(!
ts
)

46  -
ENOMEM
;

48 
ts
->
ªad
 = 
max7300_i2c_ªad
;

49 
ts
->
wrôe
 = 
max7300_i2c_wrôe
;

50 
ts
->
dev
 = &
˛õ¡
->dev;

52 
ªt
 = 
	`__max730x_¥obe
(
ts
);

53  
ªt
;

54 
	}
}

56 
	$max7300_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

58  
	`__max730x_ªmove
(&
˛õ¡
->
dev
);

59 
	}
}

61 c⁄° 
i2c_devi˚_id
 
	gmax7300_id
[] = {

65 
MODULE_DEVICE_TABLE
(
i2c
, 
max7300_id
);

67 
i2c_drivî
 
	gmax7300_drivî
 = {

68 .
drivî
 = {

69 .
«me
 = "max7300",

70 .
	gow√r
 = 
THIS_MODULE
,

72 .
	g¥obe
 = 
max7300_¥obe
,

73 .
	gªmove
 = 
max7300_ªmove
,

74 .
	gid_èbÀ
 = 
max7300_id
,

77 
__öô
 
	$max7300_öô
()

79  
	`i2c_add_drivî
(&
max7300_drivî
);

80 
	}
}

81 
subsys_öôˇŒ
(
max7300_öô
);

83 
__exô
 
	$max7300_exô
()

85 
	`i2c_dñ_drivî
(&
max7300_drivî
);

86 
	}
}

87 
moduÀ_exô
(
max7300_exô
);

89 
MODULE_AUTHOR
("Wolfram Sang");

90 
MODULE_LICENSE
("GPL v2");

91 
MODULE_DESCRIPTION
("MAX7300 GPIO-Expander");

	@gpio-max7301.c

13 
	~<löux/moduÀ.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/muãx.h
>

17 
	~<löux/¶ab.h
>

18 
	~<löux/•i/•i.h
>

19 
	~<löux/•i/max7301.h
>

22 
	$max7301_•i_wrôe
(
devi˚
 *
dev
, 
ªg
,

23 
vÆ
)

25 
•i_devi˚
 *
•i
 = 
	`to_•i_devi˚
(
dev
);

26 
u16
 
w‹d
 = ((
ªg
 & 0x7FË<< 8Ë| (
vÆ
 & 0xFF);

28  
	`•i_wrôe
(
•i
, (c⁄° 
u8
 *)&
w‹d
, (word));

29 
	}
}

33 
	$max7301_•i_ªad
(
devi˚
 *
dev
, 
ªg
)

35 
ªt
;

36 
u16
 
w‹d
;

37 
•i_devi˚
 *
•i
 = 
	`to_•i_devi˚
(
dev
);

39 
w‹d
 = 0x8000 | (
ªg
 << 8);

40 
ªt
 = 
	`•i_wrôe
(
•i
, (c⁄° 
u8
 *)&
w‹d
, (word));

41 i‡(
ªt
)

42  
ªt
;

47 
ªt
 = 
	`•i_ªad
(
•i
, (
u8
 *)&
w‹d
, (word));

48 i‡(
ªt
)

49  
ªt
;

50  
w‹d
 & 0xff;

51 
	}
}

53 
	$max7301_¥obe
(
•i_devi˚
 *
•i
)

55 
max7301
 *
ts
;

56 
ªt
;

59 i‡(
•i
->
dev
.
∂©f‹m_d©a
)

60 
•i
->
bôs_≥r_w‹d
 = 16;

61 
ªt
 = 
	`•i_£tup
(
•i
);

62 i‡(
ªt
 < 0)

63  
ªt
;

65 
ts
 = 
	`devm_kzÆloc
(&
•i
->
dev
, (
max7301
), 
GFP_KERNEL
);

66 i‡(!
ts
)

67  -
ENOMEM
;

69 
ts
->
ªad
 = 
max7301_•i_ªad
;

70 
ts
->
wrôe
 = 
max7301_•i_wrôe
;

71 
ts
->
dev
 = &
•i
->dev;

73 
ªt
 = 
	`__max730x_¥obe
(
ts
);

74  
ªt
;

75 
	}
}

77 
	$max7301_ªmove
(
•i_devi˚
 *
•i
)

79  
	`__max730x_ªmove
(&
•i
->
dev
);

80 
	}
}

82 c⁄° 
•i_devi˚_id
 
	gmax7301_id
[] = {

86 
MODULE_DEVICE_TABLE
(
•i
, 
max7301_id
);

88 
•i_drivî
 
	gmax7301_drivî
 = {

89 .
drivî
 = {

90 .
«me
 = "max7301",

91 .
	gow√r
 = 
THIS_MODULE
,

93 .
	g¥obe
 = 
max7301_¥obe
,

94 .
	gªmove
 = 
max7301_ªmove
,

95 .
	gid_èbÀ
 = 
max7301_id
,

98 
__öô
 
	$max7301_öô
()

100  
	`•i_ªgi°î_drivî
(&
max7301_drivî
);

101 
	}
}

105 
subsys_öôˇŒ
(
max7301_öô
);

107 
__exô
 
	$max7301_exô
()

109 
	`•i_uƒegi°î_drivî
(&
max7301_drivî
);

110 
	}
}

111 
moduÀ_exô
(
max7301_exô
);

113 
MODULE_AUTHOR
("Juergen Beisert, Wolfram Sang");

114 
MODULE_LICENSE
("GPL v2");

115 
MODULE_DESCRIPTION
("MAX7301 GPIO-Expander");

	@gpio-max730x.c

33 
	~<löux/moduÀ.h
>

34 
	~<löux/öô.h
>

35 
	~<löux/∂©f‹m_devi˚.h
>

36 
	~<löux/muãx.h
>

37 
	~<löux/•i/max7301.h
>

38 
	~<löux/gpio.h
>

39 
	~<löux/¶ab.h
>

44 
	#PIN_CONFIG_MASK
 0x03

	)

45 
	#PIN_CONFIG_IN_PULLUP
 0x03

	)

46 
	#PIN_CONFIG_IN_WO_PULLUP
 0x02

	)

47 
	#PIN_CONFIG_OUT
 0x01

	)

49 
	#PIN_NUMBER
 28

	)

51 
	$max7301_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

53 
max7301
 *
ts
 = 
	`c⁄èöî_of
(
chù
, max7301, chip);

54 
u8
 *
c⁄fig
;

55 
u8
 
off£t_bôs
, 
pö_c⁄fig
;

56 
ªt
;

59 
off£t
 += 4;

60 
off£t_bôs
 = (
off£t
 & 3) << 1;

62 
c⁄fig
 = &
ts
->
p‹t_c⁄fig
[
off£t
 >> 2];

64 i‡(
ts
->
öput_puŒup_a˘ive
 & 
	`BIT
(
off£t
))

65 
pö_c⁄fig
 = 
PIN_CONFIG_IN_PULLUP
;

67 
pö_c⁄fig
 = 
PIN_CONFIG_IN_WO_PULLUP
;

69 
	`muãx_lock
(&
ts
->
lock
);

71 *
c⁄fig
 = (*c⁄fig & ~(
PIN_CONFIG_MASK
 << 
off£t_bôs
))

72 | (
pö_c⁄fig
 << 
off£t_bôs
);

74 
ªt
 = 
ts
->
	`wrôe
—s->
dev
, 0x08 + (
off£t
 >> 2), *
c⁄fig
);

76 
	`muãx_u∆ock
(&
ts
->
lock
);

78  
ªt
;

79 
	}
}

81 
	$__max7301_£t
(
max7301
 *
ts
, 
off£t
, 
vÆue
)

83 i‡(
vÆue
) {

84 
ts
->
out_Àvñ
 |1 << 
off£t
;

85  
ts
->
	`wrôe
—s->
dev
, 0x20 + 
off£t
, 0x01);

87 
ts
->
out_Àvñ
 &~(1 << 
off£t
);

88  
ts
->
	`wrôe
—s->
dev
, 0x20 + 
off£t
, 0x00);

90 
	}
}

92 
	$max7301_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
,

93 
vÆue
)

95 
max7301
 *
ts
 = 
	`c⁄èöî_of
(
chù
, max7301, chip);

96 
u8
 *
c⁄fig
;

97 
u8
 
off£t_bôs
;

98 
ªt
;

101 
off£t
 += 4;

102 
off£t_bôs
 = (
off£t
 & 3) << 1;

104 
c⁄fig
 = &
ts
->
p‹t_c⁄fig
[
off£t
 >> 2];

106 
	`muãx_lock
(&
ts
->
lock
);

108 *
c⁄fig
 = (*c⁄fig & ~(
PIN_CONFIG_MASK
 << 
off£t_bôs
))

109 | (
PIN_CONFIG_OUT
 << 
off£t_bôs
);

111 
ªt
 = 
	`__max7301_£t
(
ts
, 
off£t
, 
vÆue
);

113 i‡(!
ªt
)

114 
ªt
 = 
ts
->
	`wrôe
—s->
dev
, 0x08 + (
off£t
 >> 2), *
c⁄fig
);

116 
	`muãx_u∆ock
(&
ts
->
lock
);

118  
ªt
;

119 
	}
}

121 
	$max7301_gë
(
gpio_chù
 *
chù
, 
off£t
)

123 
max7301
 *
ts
 = 
	`c⁄èöî_of
(
chù
, max7301, chip);

124 
c⁄fig
, 
Àvñ
 = -
EINVAL
;

127 
off£t
 += 4;

129 
	`muãx_lock
(&
ts
->
lock
);

131 
c⁄fig
 = (
ts
->
p‹t_c⁄fig
[
off£t
 >> 2] >> ((offset & 3) << 1))

132 & 
PIN_CONFIG_MASK
;

134 
c⁄fig
) {

135 
PIN_CONFIG_OUT
:

137 
Àvñ
 = !!(
ts
->
out_Àvñ
 & (1 << 
off£t
));

139 
PIN_CONFIG_IN_WO_PULLUP
:

140 
PIN_CONFIG_IN_PULLUP
:

142 
Àvñ
 = 
ts
->
	`ªad
—s->
dev
, 0x20 + 
off£t
) & 0x01;

144 
	`muãx_u∆ock
(&
ts
->
lock
);

146  
Àvñ
;

147 
	}
}

149 
	$max7301_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

151 
max7301
 *
ts
 = 
	`c⁄èöî_of
(
chù
, max7301, chip);

154 
off£t
 += 4;

156 
	`muãx_lock
(&
ts
->
lock
);

158 
	`__max7301_£t
(
ts
, 
off£t
, 
vÆue
);

160 
	`muãx_u∆ock
(&
ts
->
lock
);

161 
	}
}

163 
	$__max730x_¥obe
(
max7301
 *
ts
)

165 
devi˚
 *
dev
 = 
ts
->dev;

166 
max7301_∂©f‹m_d©a
 *
pd©a
;

167 
i
, 
ªt
;

169 
pd©a
 = 
dev
->
∂©f‹m_d©a
;

171 
	`muãx_öô
(&
ts
->
lock
);

172 
	`dev_£t_drvd©a
(
dev
, 
ts
);

175 
ts
->
	`wrôe
(
dev
, 0x04, 0x01);

177 i‡(
pd©a
) {

178 
ts
->
öput_puŒup_a˘ive
 = 
pd©a
->input_pullup_active;

179 
ts
->
chù
.
ba£
 = 
pd©a
->base;

181 
ts
->
chù
.
ba£
 = -1;

183 
ts
->
chù
.
œbñ
 = 
dev
->
drivî
->
«me
;

185 
ts
->
chù
.
dúe˘i⁄_öput
 = 
max7301_dúe˘i⁄_öput
;

186 
ts
->
chù
.
gë
 = 
max7301_gë
;

187 
ts
->
chù
.
dúe˘i⁄_ouçut
 = 
max7301_dúe˘i⁄_ouçut
;

188 
ts
->
chù
.
£t
 = 
max7301_£t
;

190 
ts
->
chù
.
ngpio
 = 
PIN_NUMBER
;

191 
ts
->
chù
.
ˇn_¶ìp
 = 1;

192 
ts
->
chù
.
dev
 = dev;

193 
ts
->
chù
.
ow√r
 = 
THIS_MODULE
;

199 
i
 = 1; i < 8; i++) {

200 
j
;

207 
ts
->
p‹t_c⁄fig
[
i
] = 0xAA;

208 
j
 = 0; j < 4; j++) {

209 
off£t
 = (
i
 - 1Ë* 4 + 
j
;

210 
ªt
 = 
	`max7301_dúe˘i⁄_öput
(&
ts
->
chù
, 
off£t
);

211 i‡(
ªt
)

212 
exô_de°roy
;

216 
ªt
 = 
	`gpiochù_add
(&
ts
->
chù
);

217 i‡(
ªt
)

218 
exô_de°roy
;

220  
ªt
;

222 
exô_de°roy
:

223 
	`dev_£t_drvd©a
(
dev
, 
NULL
);

224 
	`muãx_de°roy
(&
ts
->
lock
);

225  
ªt
;

226 
	}
}

227 
EXPORT_SYMBOL_GPL
(
__max730x_¥obe
);

229 
	$__max730x_ªmove
(
devi˚
 *
dev
)

231 
max7301
 *
ts
 = 
	`dev_gë_drvd©a
(
dev
);

232 
ªt
;

234 i‡(
ts
 =
NULL
)

235  -
ENODEV
;

237 
	`dev_£t_drvd©a
(
dev
, 
NULL
);

240 
ts
->
	`wrôe
(
dev
, 0x04, 0x00);

242 
ªt
 = 
	`gpiochù_ªmove
(&
ts
->
chù
);

243 i‡(!
ªt
) {

244 
	`muãx_de°roy
(&
ts
->
lock
);

245 
	`k‰ì
(
ts
);

247 
	`dev_îr
(
dev
, "FaûedÅÿªmovêGPIO c⁄åﬁÀr: %d\n", 
ªt
);

249  
ªt
;

250 
	}
}

251 
EXPORT_SYMBOL_GPL
(
__max730x_ªmove
);

253 
MODULE_AUTHOR
("Juergen Beisert, Wolfram Sang");

254 
MODULE_LICENSE
("GPL v2");

255 
MODULE_DESCRIPTION
("MAX730x GPIO-Expanders, genericÖarts");

	@gpio-max732x.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/¶ab.h
>

18 
	~<löux/°rög.h
>

19 
	~<löux/gpio.h
>

20 
	~<löux/öãºu±.h
>

21 
	~<löux/úq.h
>

22 
	~<löux/i2c.h
>

23 
	~<löux/i2c/max732x.h
>

24 
	~<löux/ª£t.h
>

61 
	#PORT_NONE
 0x0

	)

62 
	#PORT_OUTPUT
 0x1

	)

63 
	#PORT_INPUT
 0x2

	)

64 
	#PORT_OPENDRAIN
 0x3

	)

66 
	#IO_4I4O
 0x5AA5

	)

67 
	#IO_4P4O
 0x5FF5

	)

68 
	#IO_8I
 0xAAAA

	)

69 
	#IO_8P
 0xFFFF

	)

70 
	#IO_8O
 0x5555

	)

72 
	#GROUP_A
(
x
Ë((xË& 0xffffË

	)

73 
	#GROUP_B
(
x
Ë((xË<< 16Ë

	)

75 
	#INT_NONE
 0x0

	)

76 
	#INT_NO_MASK
 0x1

	)

77 
	#INT_INDEP_MASK
 0x2

	)

78 
	#INT_MERGED_MASK
 0x3

	)

80 
	#INT_CAPS
(
x
Ë(((
uöt64_t
)(x)Ë<< 32)

	)

83 
	mMAX7319
,

84 
	mMAX7320
,

85 
	mMAX7321
,

86 
	mMAX7322
,

87 
	mMAX7323
,

88 
	mMAX7324
,

89 
	mMAX7325
,

90 
	mMAX7326
,

91 
	mMAX7327
,

94 
uöt64_t
 
	gmax732x_„©uªs
[] = {

95 [
MAX7319
] = 
GROUP_A
(
IO_8I
Ë| 
INT_CAPS
(
INT_MERGED_MASK
),

96 [
MAX7320
] = 
GROUP_B
(
IO_8O
),

97 [
MAX7321
] = 
GROUP_A
(
IO_8P
Ë| 
INT_CAPS
(
INT_NO_MASK
),

98 [
MAX7322
] = 
GROUP_A
(
IO_4I4O
Ë| 
INT_CAPS
(
INT_MERGED_MASK
),

99 [
MAX7323
] = 
GROUP_A
(
IO_4P4O
Ë| 
INT_CAPS
(
INT_INDEP_MASK
),

100 [
MAX7324
] = 
GROUP_A
(
IO_8I
Ë| 
GROUP_B
(
IO_8O
Ë| 
INT_CAPS
(
INT_MERGED_MASK
),

101 [
MAX7325
] = 
GROUP_A
(
IO_8P
Ë| 
GROUP_B
(
IO_8O
Ë| 
INT_CAPS
(
INT_NO_MASK
),

102 [
MAX7326
] = 
GROUP_A
(
IO_4I4O
Ë| 
GROUP_B
(
IO_8O
Ë| 
INT_CAPS
(
INT_MERGED_MASK
),

103 [
MAX7327
] = 
GROUP_A
(
IO_4P4O
Ë| 
GROUP_B
(
IO_8O
Ë| 
INT_CAPS
(
INT_NO_MASK
),

106 c⁄° 
i2c_devi˚_id
 
	gmax732x_id
[] = {

107 { "max7319", 
MAX7319
 },

108 { "max7320", 
MAX7320
 },

109 { "max7321", 
MAX7321
 },

110 { "max7322", 
MAX7322
 },

111 { "max7323", 
MAX7323
 },

112 { "max7324", 
MAX7324
 },

113 { "max7325", 
MAX7325
 },

114 { "max7326", 
MAX7326
 },

115 { "max7327", 
MAX7327
 },

118 
MODULE_DEVICE_TABLE
(
i2c
, 
max732x_id
);

120 
	smax732x_chù
 {

121 
gpio_chù
 
	mgpio_chù
;

123 
i2c_˛õ¡
 *
	m˛õ¡
;

124 
i2c_˛õ¡
 *
	m˛õ¡_dummy
;

125 
i2c_˛õ¡
 *
	m˛õ¡_group_a
;

126 
i2c_˛õ¡
 *
	m˛õ¡_group_b
;

128 
	mmask_group_a
;

129 
	mdú_öput
;

130 
	mdú_ouçut
;

132 
muãx
 
	mlock
;

133 
uöt8_t
 
	mªg_out
[2];

135 #ifde‡
CONFIG_GPIO_MAX732X_IRQ


136 
muãx
 
	múq_lock
;

137 
	múq_ba£
;

138 
uöt8_t
 
	múq_mask
;

139 
uöt8_t
 
	múq_mask_cur
;

140 
uöt8_t
 
	múq_åig_øi£
;

141 
uöt8_t
 
	múq_åig_ÁŒ
;

142 
uöt8_t
 
	múq_„©uªs
;

146 
	$max732x_wrôeb
(
max732x_chù
 *
chù
, 
group_a
, 
uöt8_t
 
vÆ
)

148 
i2c_˛õ¡
 *
˛õ¡
;

149 
ªt
;

151 
˛õ¡
 = 
group_a
 ? 
chù
->
˛õ¡_group_a
 : chù->
˛õ¡_group_b
;

152 
ªt
 = 
	`i2c_smbus_wrôe_byã
(
˛õ¡
, 
vÆ
);

153 i‡(
ªt
 < 0) {

154 
	`dev_îr
(&
˛õ¡
->
dev
, "failed writing\n");

155  
ªt
;

159 
	}
}

161 
	$max732x_ªadb
(
max732x_chù
 *
chù
, 
group_a
, 
uöt8_t
 *
vÆ
)

163 
i2c_˛õ¡
 *
˛õ¡
;

164 
ªt
;

166 
˛õ¡
 = 
group_a
 ? 
chù
->
˛õ¡_group_a
 : chù->
˛õ¡_group_b
;

167 
ªt
 = 
	`i2c_smbus_ªad_byã
(
˛õ¡
);

168 i‡(
ªt
 < 0) {

169 
	`dev_îr
(&
˛õ¡
->
dev
, "failedÑeading\n");

170  
ªt
;

173 *
vÆ
 = (
uöt8_t
)
ªt
;

175 
	}
}

177 
ölöe
 
	$is_group_a
(
max732x_chù
 *
chù
, 
off
)

179  (1u << 
off
Ë& 
chù
->
mask_group_a
;

180 
	}
}

182 
	$max732x_gpio_gë_vÆue
(
gpio_chù
 *
gc
, 
off
)

184 
max732x_chù
 *
chù
;

185 
uöt8_t
 
ªg_vÆ
;

186 
ªt
;

188 
chù
 = 
	`c⁄èöî_of
(
gc
, 
max732x_chù
, 
gpio_chù
);

190 
ªt
 = 
	`max732x_ªadb
(
chù
, 
	`is_group_a
(chù, 
off
), &
ªg_vÆ
);

191 i‡(
ªt
 < 0)

194  
ªg_vÆ
 & (1u << (
off
 & 0x7));

195 
	}
}

197 
	$max732x_gpio_£t_vÆue
(
gpio_chù
 *
gc
, 
off
, 
vÆ
)

199 
max732x_chù
 *
chù
;

200 
uöt8_t
 
ªg_out
, 
mask
 = 1u << (
off
 & 0x7);

201 
ªt
;

203 
chù
 = 
	`c⁄èöî_of
(
gc
, 
max732x_chù
, 
gpio_chù
);

205 
	`muãx_lock
(&
chù
->
lock
);

207 
ªg_out
 = (
off
 > 7Ë? 
chù
->reg_out[1] : chip->reg_out[0];

208 
ªg_out
 = (
vÆ
Ë?Ñeg_ouà| 
mask
 :Ñeg_out & ~mask;

210 
ªt
 = 
	`max732x_wrôeb
(
chù
, 
	`is_group_a
(chù, 
off
), 
ªg_out
);

211 i‡(
ªt
 < 0)

212 
out
;

215 i‡(
off
 > 7)

216 
chù
->
ªg_out
[1] =Ñeg_out;

218 
chù
->
ªg_out
[0] =Ñeg_out;

219 
out
:

220 
	`muãx_u∆ock
(&
chù
->
lock
);

221 
	}
}

223 
	$max732x_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gc
, 
off
)

225 
max732x_chù
 *
chù
;

226 
mask
 = 1u << 
off
;

228 
chù
 = 
	`c⁄èöî_of
(
gc
, 
max732x_chù
, 
gpio_chù
);

230 i‡((
mask
 & 
chù
->
dú_öput
) == 0) {

231 
	`dev_dbg
(&
chù
->
˛õ¡
->
dev
, "%sÖort %d is output only\n",

232 
chù
->
˛õ¡
->
«me
, 
off
);

233  -
EACCES
;

240 i‡((
mask
 & 
chù
->
dú_ouçut
))

241 
	`max732x_gpio_£t_vÆue
(
gc
, 
off
, 1);

244 
	}
}

246 
	$max732x_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
,

247 
off
, 
vÆ
)

249 
max732x_chù
 *
chù
;

250 
mask
 = 1u << 
off
;

252 
chù
 = 
	`c⁄èöî_of
(
gc
, 
max732x_chù
, 
gpio_chù
);

254 i‡((
mask
 & 
chù
->
dú_ouçut
) == 0) {

255 
	`dev_dbg
(&
chù
->
˛õ¡
->
dev
, "%sÖort %d is input only\n",

256 
chù
->
˛õ¡
->
«me
, 
off
);

257  -
EACCES
;

260 
	`max732x_gpio_£t_vÆue
(
gc
, 
off
, 
vÆ
);

262 
	}
}

264 #ifde‡
CONFIG_GPIO_MAX732X_IRQ


265 
	$max732x_wrôew
(
max732x_chù
 *
chù
, 
uöt16_t
 
vÆ
)

267 
ªt
;

269 
vÆ
 = 
	`˝u_to_À16
(val);

271 
ªt
 = 
	`i2c_ma°î_£nd
(
chù
->
˛õ¡_group_a
, (*)&
vÆ
, 2);

272 i‡(
ªt
 < 0) {

273 
	`dev_îr
(&
chù
->
˛õ¡_group_a
->
dev
, "failed writing\n");

274  
ªt
;

278 
	}
}

280 
	$max732x_ªadw
(
max732x_chù
 *
chù
, 
uöt16_t
 *
vÆ
)

282 
ªt
;

284 
ªt
 = 
	`i2c_ma°î_ªcv
(
chù
->
˛õ¡_group_a
, (*)
vÆ
, 2);

285 i‡(
ªt
 < 0) {

286 
	`dev_îr
(&
chù
->
˛õ¡_group_a
->
dev
, "failedÑeading\n");

287  
ªt
;

290 *
vÆ
 = 
	`À16_to_˝u
(*val);

292 
	}
}

294 
	$max732x_úq_upd©e_mask
(
max732x_chù
 *
chù
)

296 
uöt16_t
 
msg
;

298 i‡(
chù
->
úq_mask
 =chù->
úq_mask_cur
)

301 
chù
->
úq_mask
 = chù->
úq_mask_cur
;

303 i‡(
chù
->
úq_„©uªs
 =
INT_NO_MASK
)

306 
	`muãx_lock
(&
chù
->
lock
);

308 
chù
->
úq_„©uªs
) {

309 
INT_INDEP_MASK
:

310 
msg
 = (
chù
->
úq_mask
 << 8Ë| chù->
ªg_out
[0];

311 
	`max732x_wrôew
(
chù
, 
msg
);

314 
INT_MERGED_MASK
:

315 
msg
 = 
chù
->
úq_mask
 | chù->
ªg_out
[0];

316 
	`max732x_wrôeb
(
chù
, 1, (
uöt8_t
)
msg
);

320 
	`muãx_u∆ock
(&
chù
->
lock
);

321 
	}
}

323 
	$max732x_gpio_to_úq
(
gpio_chù
 *
gc
, 
off
)

325 
max732x_chù
 *
chù
;

327 
chù
 = 
	`c⁄èöî_of
(
gc
, 
max732x_chù
, 
gpio_chù
);

328  
chù
->
úq_ba£
 + 
off
;

329 
	}
}

331 
	$max732x_úq_mask
(
úq_d©a
 *
d
)

333 
max732x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

335 
chù
->
úq_mask_cur
 &~(1 << (
d
->
úq
 - chù->
úq_ba£
));

336 
	}
}

338 
	$max732x_úq_unmask
(
úq_d©a
 *
d
)

340 
max732x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

342 
chù
->
úq_mask_cur
 |1 << (
d
->
úq
 - chù->
úq_ba£
);

343 
	}
}

345 
	$max732x_úq_bus_lock
(
úq_d©a
 *
d
)

347 
max732x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

349 
	`muãx_lock
(&
chù
->
úq_lock
);

350 
chù
->
úq_mask_cur
 = chù->
úq_mask
;

351 
	}
}

353 
	$max732x_úq_bus_sync_u∆ock
(
úq_d©a
 *
d
)

355 
max732x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

357 
	`max732x_úq_upd©e_mask
(
chù
);

358 
	`muãx_u∆ock
(&
chù
->
úq_lock
);

359 
	}
}

361 
	$max732x_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

363 
max732x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

364 
uöt16_t
 
off
 = 
d
->
úq
 - 
chù
->
úq_ba£
;

365 
uöt16_t
 
mask
 = 1 << 
off
;

367 i‡(!(
mask
 & 
chù
->
dú_öput
)) {

368 
	`dev_dbg
(&
chù
->
˛õ¡
->
dev
, "%sÖort %d is output only\n",

369 
chù
->
˛õ¡
->
«me
, 
off
);

370  -
EACCES
;

373 i‡(!(
ty≥
 & 
IRQ_TYPE_EDGE_BOTH
)) {

374 
	`dev_îr
(&
chù
->
˛õ¡
->
dev
, "irq %d: unsupportedÅype %d\n",

375 
d
->
úq
, 
ty≥
);

376  -
EINVAL
;

379 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_FALLING
)

380 
chù
->
úq_åig_ÁŒ
 |
mask
;

382 
chù
->
úq_åig_ÁŒ
 &~
mask
;

384 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_RISING
)

385 
chù
->
úq_åig_øi£
 |
mask
;

387 
chù
->
úq_åig_øi£
 &~
mask
;

389  
	`max732x_gpio_dúe˘i⁄_öput
(&
chù
->
gpio_chù
, 
off
);

390 
	}
}

392 
úq_chù
 
	gmax732x_úq_chù
 = {

393 .
«me
 = "max732x",

394 .
	gúq_mask
 = 
max732x_úq_mask
,

395 .
	gúq_unmask
 = 
max732x_úq_unmask
,

396 .
	gúq_bus_lock
 = 
max732x_úq_bus_lock
,

397 .
	gúq_bus_sync_u∆ock
 = 
max732x_úq_bus_sync_u∆ock
,

398 .
	gúq_£t_ty≥
 = 
max732x_úq_£t_ty≥
,

401 
uöt8_t
 
	$max732x_úq_≥ndög
(
max732x_chù
 *
chù
)

403 
uöt8_t
 
cur_°©
;

404 
uöt8_t
 
ﬁd_°©
;

405 
uöt8_t
 
åiggî
;

406 
uöt8_t
 
≥ndög
;

407 
uöt16_t
 
°©us
;

408 
ªt
;

410 
ªt
 = 
	`max732x_ªadw
(
chù
, &
°©us
);

411 i‡(
ªt
)

414 
åiggî
 = 
°©us
 >> 8;

415 
åiggî
 &
chù
->
úq_mask
;

417 i‡(!
åiggî
)

420 
cur_°©
 = 
°©us
 & 0xFF;

421 
cur_°©
 &
chù
->
úq_mask
;

423 
ﬁd_°©
 = 
cur_°©
 ^ 
åiggî
;

425 
≥ndög
 = (
ﬁd_°©
 & 
chù
->
úq_åig_ÁŒ
) |

426 (
cur_°©
 & 
chù
->
úq_åig_øi£
);

427 
≥ndög
 &
åiggî
;

429  
≥ndög
;

430 
	}
}

432 
úqªtu∫_t
 
	$max732x_úq_h™dÀr
(
úq
, *
devid
)

434 
max732x_chù
 *
chù
 = 
devid
;

435 
uöt8_t
 
≥ndög
;

436 
uöt8_t
 
Àvñ
;

438 
≥ndög
 = 
	`max732x_úq_≥ndög
(
chù
);

440 i‡(!
≥ndög
)

441  
IRQ_HANDLED
;

444 
Àvñ
 = 
	`__ffs
(
≥ndög
);

445 
	`h™dÀ_√°ed_úq
(
Àvñ
 + 
chù
->
úq_ba£
);

447 
≥ndög
 &~(1 << 
Àvñ
);

448 } 
≥ndög
);

450  
IRQ_HANDLED
;

451 
	}
}

453 
	$max732x_úq_£tup
(
max732x_chù
 *
chù
,

454 c⁄° 
i2c_devi˚_id
 *
id
)

456 
i2c_˛õ¡
 *
˛õ¡
 = 
chù
->client;

457 
max732x_∂©f‹m_d©a
 *
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

458 
has_úq
 = 
max732x_„©uªs
[
id
->
drivî_d©a
] >> 32;

459 
ªt
;

461 i‡(
pd©a
 &&Öd©a->
úq_ba£
 && 
has_úq
 !
INT_NONE
) {

462 
lvl
;

464 
chù
->
úq_ba£
 = 
pd©a
->irq_base;

465 
chù
->
úq_„©uªs
 = 
has_úq
;

466 
	`muãx_öô
(&
chù
->
úq_lock
);

468 
lvl
 = 0;Üv»< 
chù
->
gpio_chù
.
ngpio
;Üvl++) {

469 
úq
 = 
lvl
 + 
chù
->
úq_ba£
;

471 i‡(!(
chù
->
dú_öput
 & (1 << 
lvl
)))

474 
	`úq_£t_chù_d©a
(
úq
, 
chù
);

475 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
max732x_úq_chù
,

476 
h™dÀ_edge_úq
);

477 
	`úq_£t_√°ed_thªad
(
úq
, 1);

478 #ifde‡
CONFIG_ARM


479 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

481 
	`úq_£t_n›robe
(
úq
);

485 
ªt
 = 
	`ªque°_thªaded_úq
(
˛õ¡
->
úq
,

486 
NULL
,

487 
max732x_úq_h™dÀr
,

488 
IRQF_TRIGGER_FALLING
 | 
IRQF_ONESHOT
,

489 
	`dev_«me
(&
˛õ¡
->
dev
), 
chù
);

490 i‡(
ªt
) {

491 
	`dev_îr
(&
˛õ¡
->
dev
, "failedÅoÑequest irq %d\n",

492 
˛õ¡
->
úq
);

493 
out_Áûed
;

496 
chù
->
gpio_chù
.
to_úq
 = 
max732x_gpio_to_úq
;

501 
out_Áûed
:

502 
chù
->
úq_ba£
 = 0;

503  
ªt
;

504 
	}
}

506 
	$max732x_úq_ã¨down
(
max732x_chù
 *
chù
)

508 i‡(
chù
->
úq_ba£
)

509 
	`‰ì_úq
(
chù
->
˛õ¡
->
úq
, chip);

510 
	}
}

512 
	$max732x_úq_£tup
(
max732x_chù
 *
chù
,

513 c⁄° 
i2c_devi˚_id
 *
id
)

515 
i2c_˛õ¡
 *
˛õ¡
 = 
chù
->client;

516 
max732x_∂©f‹m_d©a
 *
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

517 
has_úq
 = 
max732x_„©uªs
[
id
->
drivî_d©a
] >> 32;

519 i‡(
pd©a
 &&Öd©a->
úq_ba£
 && 
has_úq
 !
INT_NONE
)

520 
	`dev_w¨n
(&
˛õ¡
->
dev
, "interrupt supportÇot compiled in\n");

523 
	}
}

525 
	$max732x_úq_ã¨down
(
max732x_chù
 *
chù
)

527 
	}
}

530 
	$max732x_£tup_gpio
(
max732x_chù
 *
chù
,

531 c⁄° 
i2c_devi˚_id
 *
id
,

532 
gpio_°¨t
)

534 
gpio_chù
 *
gc
 = &
chù
->gpio_chip;

535 
uöt32_t
 
id_d©a
 = (uöt32_t)
max732x_„©uªs
[
id
->
drivî_d©a
];

536 
i
, 
p‹t
 = 0;

538 
i
 = 0; i < 16; i++, 
id_d©a
 >>= 2) {

539 
mask
 = 1 << 
p‹t
;

541 
id_d©a
 & 0x3) {

542 
PORT_OUTPUT
:

543 
chù
->
dú_ouçut
 |
mask
;

545 
PORT_INPUT
:

546 
chù
->
dú_öput
 |
mask
;

548 
PORT_OPENDRAIN
:

549 
chù
->
dú_ouçut
 |
mask
;

550 
chù
->
dú_öput
 |
mask
;

556 i‡(
i
 < 8)

557 
chù
->
mask_group_a
 |
mask
;

558 
p‹t
++;

561 i‡(
chù
->
dú_öput
)

562 
gc
->
dúe˘i⁄_öput
 = 
max732x_gpio_dúe˘i⁄_öput
;

563 i‡(
chù
->
dú_ouçut
) {

564 
gc
->
dúe˘i⁄_ouçut
 = 
max732x_gpio_dúe˘i⁄_ouçut
;

565 
gc
->
£t
 = 
max732x_gpio_£t_vÆue
;

567 
gc
->
gë
 = 
max732x_gpio_gë_vÆue
;

568 
gc
->
ˇn_¶ìp
 = 1;

570 
gc
->
ba£
 = 
gpio_°¨t
;

571 
gc
->
ngpio
 = 
p‹t
;

572 
gc
->
œbñ
 = 
chù
->
˛õ¡
->
«me
;

573 
gc
->
ow√r
 = 
THIS_MODULE
;

574 
gc
->
dev
 = &
chù
->
˛õ¡
->dev;

576  
p‹t
;

577 
	}
}

579 
	$max732x_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

580 c⁄° 
i2c_devi˚_id
 *
id
)

582 
max732x_∂©f‹m_d©a
 *
pd©a
;

583 
max732x_chù
 *
chù
;

584 
i2c_˛õ¡
 *
c
;

585 
uöt16_t
 
addr_a
, 
addr_b
;

586 
ªt
, 
ƒ_p‹t
;

587 
gpio_ba£
 = -1;

589 
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

590 i‡(
pd©a
 =
NULL
)

591 
	`dev_dbg
(&
˛õ¡
->
dev
, "noÖlatform data\n");

593 
gpio_ba£
 = 
pd©a
->gpio_base;

595 
chù
 = 
	`devm_kzÆloc
(&
˛õ¡
->
dev
, (
max732x_chù
),

596 
GFP_KERNEL
);

597 i‡(
chù
 =
NULL
)

598  -
ENOMEM
;

599 
chù
->
˛õ¡
 = client;

601 
ªt
 = 
	`devi˚_ª£t
(&
˛õ¡
->
dev
);

602 i‡(
ªt
 =-
ENODEV
)

603  -
EPROBE_DEFER
;

605 
ƒ_p‹t
 = 
	`max732x_£tup_gpio
(
chù
, 
id
, 
gpio_ba£
);

607 
addr_a
 = (
˛õ¡
->
addr
 & 0x0f) | 0x60;

608 
addr_b
 = (
˛õ¡
->
addr
 & 0x0f) | 0x50;

610 
˛õ¡
->
addr
 & 0x70) {

612 
chù
->
˛õ¡_group_a
 = 
˛õ¡
;

613 i‡(
ƒ_p‹t
 > 8) {

614 
c
 = 
	`i2c_√w_dummy
(
˛õ¡
->
ad≠ãr
, 
addr_b
);

615 
chù
->
˛õ¡_group_b
 = chù->
˛õ¡_dummy
 = 
c
;

619 
chù
->
˛õ¡_group_b
 = 
˛õ¡
;

620 i‡(
ƒ_p‹t
 > 8) {

621 
c
 = 
	`i2c_√w_dummy
(
˛õ¡
->
ad≠ãr
, 
addr_a
);

622 
chù
->
˛õ¡_group_a
 = chù->
˛õ¡_dummy
 = 
c
;

626 
	`dev_îr
(&
˛õ¡
->
dev
, "invalid I2Cáddress specified %02x\n",

627 
˛õ¡
->
addr
);

628 
ªt
 = -
EINVAL
;

629 
out_Áûed
;

632 
	`muãx_öô
(&
chù
->
lock
);

634 
	`max732x_ªadb
(
chù
, 
	`is_group_a
(chù, 0), &chù->
ªg_out
[0]);

635 i‡(
ƒ_p‹t
 > 8)

636 
	`max732x_ªadb
(
chù
, 
	`is_group_a
(chù, 8), &chù->
ªg_out
[1]);

638 
ªt
 = 
	`max732x_úq_£tup
(
chù
, 
id
);

639 i‡(
ªt
)

640 
out_Áûed
;

642 
ªt
 = 
	`gpiochù_add
(&
chù
->
gpio_chù
);

643 i‡(
ªt
)

644 
out_Áûed
;

646 i‡(
pd©a
 &&Öd©a->
£tup
) {

647 
ªt
 = 
pd©a
->
	`£tup
(
˛õ¡
, 
chù
->
gpio_chù
.
ba£
,

648 
chù
->
gpio_chù
.
ngpio
, 
pd©a
->
c⁄ãxt
);

649 i‡(
ªt
 < 0)

650 
	`dev_w¨n
(&
˛õ¡
->
dev
, "£tu∞Áûed, %d\n", 
ªt
);

653 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
chù
);

656 
out_Áûed
:

657 
	`max732x_úq_ã¨down
(
chù
);

658  
ªt
;

659 
	}
}

661 
	$max732x_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

663 
max732x_∂©f‹m_d©a
 *
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

664 
max732x_chù
 *
chù
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

665 
ªt
;

667 i‡(
pd©a
 &&Öd©a->
ã¨down
) {

668 
ªt
 = 
pd©a
->
	`ã¨down
(
˛õ¡
, 
chù
->
gpio_chù
.
ba£
,

669 
chù
->
gpio_chù
.
ngpio
, 
pd©a
->
c⁄ãxt
);

670 i‡(
ªt
 < 0) {

671 
	`dev_îr
(&
˛õ¡
->
dev
, "%s failed, %d\n",

672 "ã¨down", 
ªt
);

673  
ªt
;

677 
ªt
 = 
	`gpiochù_ªmove
(&
chù
->
gpio_chù
);

678 i‡(
ªt
) {

679 
	`dev_îr
(&
˛õ¡
->
dev
, "%s failed, %d\n",

680 "gpiochù_ªmove()", 
ªt
);

681  
ªt
;

684 
	`max732x_úq_ã¨down
(
chù
);

687 i‡(
chù
->
˛õ¡_dummy
)

688 
	`i2c_uƒegi°î_devi˚
(
chù
->
˛õ¡_dummy
);

691 
	}
}

693 
i2c_drivî
 
	gmax732x_drivî
 = {

694 .
drivî
 = {

695 .
«me
 = "max732x",

696 .
	gow√r
 = 
THIS_MODULE
,

698 .
	g¥obe
 = 
max732x_¥obe
,

699 .
	gªmove
 = 
max732x_ªmove
,

700 .
	gid_èbÀ
 = 
max732x_id
,

703 
__öô
 
	$max732x_öô
()

705  
	`i2c_add_drivî
(&
max732x_drivî
);

706 
	}
}

710 
subsys_öôˇŒ
(
max732x_öô
);

712 
__exô
 
	$max732x_exô
()

714 
	`i2c_dñ_drivî
(&
max732x_drivî
);

715 
	}
}

716 
moduÀ_exô
(
max732x_exô
);

718 
MODULE_AUTHOR
("Eric Miao <eric.miao@marvell.com>");

719 
MODULE_DESCRIPTION
("GPIOÉxpander driver for MAX732X");

720 
MODULE_LICENSE
("GPL");

	@gpio-mc33880.c

23 
	~<löux/öô.h
>

24 
	~<löux/muãx.h
>

25 
	~<löux/•i/•i.h
>

26 
	~<löux/•i/mc33880.h
>

27 
	~<löux/gpio.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/moduÀ.h
>

31 
	#DRIVER_NAME
 "mc33880"

	)

36 
	#PIN_CONFIG_MASK
 0x03

	)

37 
	#PIN_CONFIG_IN_PULLUP
 0x03

	)

38 
	#PIN_CONFIG_IN_WO_PULLUP
 0x02

	)

39 
	#PIN_CONFIG_OUT
 0x01

	)

41 
	#PIN_NUMBER
 8

	)

48 
	smc33880
 {

49 
muãx
 
	mlock
;

50 
u8
 
	mp‹t_c⁄fig
;

51 
gpio_chù
 
	mchù
;

52 
•i_devi˚
 *
	m•i
;

55 
	$mc33880_wrôe_c⁄fig
(
mc33880
 *
mc
)

57  
	`•i_wrôe
(
mc
->
•i
, &mc->
p‹t_c⁄fig
, (mc->port_config));

58 
	}
}

61 
	$__mc33880_£t
(
mc33880
 *
mc
, 
off£t
, 
vÆue
)

63 i‡(
vÆue
)

64 
mc
->
p‹t_c⁄fig
 |1 << 
off£t
;

66 
mc
->
p‹t_c⁄fig
 &~(1 << 
off£t
);

68  
	`mc33880_wrôe_c⁄fig
(
mc
);

69 
	}
}

72 
	$mc33880_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

74 
mc33880
 *
mc
 = 
	`c⁄èöî_of
(
chù
, mc33880, chip);

76 
	`muãx_lock
(&
mc
->
lock
);

78 
	`__mc33880_£t
(
mc
, 
off£t
, 
vÆue
);

80 
	`muãx_u∆ock
(&
mc
->
lock
);

81 
	}
}

83 
	$mc33880_¥obe
(
•i_devi˚
 *
•i
)

85 
mc33880
 *
mc
;

86 
mc33880_∂©f‹m_d©a
 *
pd©a
;

87 
ªt
;

89 
pd©a
 = 
•i
->
dev
.
∂©f‹m_d©a
;

90 i‡(!
pd©a
 || !pd©a->
ba£
) {

91 
	`dev_dbg
(&
•i
->
dev
, "incorrect or missingÖlatform data\n");

92  -
EINVAL
;

98 
•i
->
bôs_≥r_w‹d
 = 8;

100 
ªt
 = 
	`•i_£tup
(
•i
);

101 i‡(
ªt
 < 0)

102  
ªt
;

104 
mc
 = 
	`devm_kzÆloc
(&
•i
->
dev
, (
mc33880
), 
GFP_KERNEL
);

105 i‡(!
mc
)

106  -
ENOMEM
;

108 
	`muãx_öô
(&
mc
->
lock
);

110 
	`•i_£t_drvd©a
(
•i
, 
mc
);

112 
mc
->
•i
 = spi;

114 
mc
->
chù
.
œbñ
 = 
DRIVER_NAME
,

115 
mc
->
chù
.
£t
 = 
mc33880_£t
;

116 
mc
->
chù
.
ba£
 = 
pd©a
->base;

117 
mc
->
chù
.
ngpio
 = 
PIN_NUMBER
;

118 
mc
->
chù
.
ˇn_¶ìp
 = 1;

119 
mc
->
chù
.
dev
 = &
•i
->dev;

120 
mc
->
chù
.
ow√r
 = 
THIS_MODULE
;

122 
mc
->
p‹t_c⁄fig
 = 0x00;

127 
ªt
 = 
	`mc33880_wrôe_c⁄fig
(
mc
);

128 
mc
->
p‹t_c⁄fig
 = 0x00;

129 i‡(!
ªt
)

130 
ªt
 = 
	`mc33880_wrôe_c⁄fig
(
mc
);

132 i‡(
ªt
) {

133 
	`dev_îr
(&
•i
->
dev
, "Faûed wrôögÅÿ" 
DRIVER_NAME
 ": %d\n",

134 
ªt
);

135 
exô_de°roy
;

138 
ªt
 = 
	`gpiochù_add
(&
mc
->
chù
);

139 i‡(
ªt
)

140 
exô_de°roy
;

142  
ªt
;

144 
exô_de°roy
:

145 
	`•i_£t_drvd©a
(
•i
, 
NULL
);

146 
	`muãx_de°roy
(&
mc
->
lock
);

147  
ªt
;

148 
	}
}

150 
	$mc33880_ªmove
(
•i_devi˚
 *
•i
)

152 
mc33880
 *
mc
;

153 
ªt
;

155 
mc
 = 
	`•i_gë_drvd©a
(
•i
);

156 i‡(
mc
 =
NULL
)

157  -
ENODEV
;

159 
	`•i_£t_drvd©a
(
•i
, 
NULL
);

161 
ªt
 = 
	`gpiochù_ªmove
(&
mc
->
chù
);

162 i‡(!
ªt
)

163 
	`muãx_de°roy
(&
mc
->
lock
);

165 
	`dev_îr
(&
•i
->
dev
, "FailedÅoÑemoveÅhe GPIO controller: %d\n",

166 
ªt
);

168  
ªt
;

169 
	}
}

171 
•i_drivî
 
	gmc33880_drivî
 = {

172 .
drivî
 = {

173 .
«me
 = 
DRIVER_NAME
,

174 .
	gow√r
 = 
THIS_MODULE
,

176 .
	g¥obe
 = 
mc33880_¥obe
,

177 .
	gªmove
 = 
mc33880_ªmove
,

180 
__öô
 
	$mc33880_öô
()

182  
	`•i_ªgi°î_drivî
(&
mc33880_drivî
);

183 
	}
}

187 
subsys_öôˇŒ
(
mc33880_öô
);

189 
__exô
 
	$mc33880_exô
()

191 
	`•i_uƒegi°î_drivî
(&
mc33880_drivî
);

192 
	}
}

193 
moduÀ_exô
(
mc33880_exô
);

195 
MODULE_AUTHOR
("Mocean Laboratories <info@mocean-labs.com>");

196 
MODULE_LICENSE
("GPL v2");

	@gpio-mc9s08dz60.c

17 
	~<löux/kî√l.h
>

18 
	~<löux/moduÀ.h
>

19 
	~<löux/¶ab.h
>

20 
	~<löux/i2c.h
>

21 
	~<löux/gpio.h
>

23 
	#GPIO_GROUP_NUM
 2

	)

24 
	#GPIO_NUM_PER_GROUP
 8

	)

25 
	#GPIO_NUM
 (
GPIO_GROUP_NUM
*
GPIO_NUM_PER_GROUP
)

	)

27 
	smc9s08dz60
 {

28 
i2c_˛õ¡
 *
	m˛õ¡
;

29 
gpio_chù
 
	mchù
;

32 
ölöe
 
mc9s08dz60
 *
	$to_mc9s08dz60
(
gpio_chù
 *
gc
)

34  
	`c⁄èöî_of
(
gc
, 
mc9s08dz60
, 
chù
);

35 
	}
}

38 
	$mc9s_gpio_to_ªg_™d_bô
(
off£t
, 
u8
 *
ªg
, u8 *
bô
)

40 *
ªg
 = 0x20 + 
off£t
 / 
GPIO_NUM_PER_GROUP
;

41 *
bô
 = 
off£t
 % 
GPIO_NUM_PER_GROUP
;

42 
	}
}

44 
	$mc9s08dz60_gë_vÆue
(
gpio_chù
 *
gc
, 
off£t
)

46 
u8
 
ªg
, 
bô
;

47 
s32
 
vÆue
;

48 
mc9s08dz60
 *
mc9s
 = 
	`to_mc9s08dz60
(
gc
);

50 
	`mc9s_gpio_to_ªg_™d_bô
(
off£t
, &
ªg
, &
bô
);

51 
vÆue
 = 
	`i2c_smbus_ªad_byã_d©a
(
mc9s
->
˛õ¡
, 
ªg
);

53  (
vÆue
 >0Ë? (vÆuê>> 
bô
) & 0x1 : 0;

54 
	}
}

56 
	$mc9s08dz60_£t
(
mc9s08dz60
 *
mc9s
, 
off£t
, 
vÆ
)

58 
u8
 
ªg
, 
bô
;

59 
s32
 
vÆue
;

61 
	`mc9s_gpio_to_ªg_™d_bô
(
off£t
, &
ªg
, &
bô
);

62 
vÆue
 = 
	`i2c_smbus_ªad_byã_d©a
(
mc9s
->
˛õ¡
, 
ªg
);

63 i‡(
vÆue
 >= 0) {

64 i‡(
vÆ
)

65 
vÆue
 |1 << 
bô
;

67 
vÆue
 &~(1 << 
bô
);

69  
	`i2c_smbus_wrôe_byã_d©a
(
mc9s
->
˛õ¡
, 
ªg
, 
vÆue
);

71  
vÆue
;

73 
	}
}

76 
	$mc9s08dz60_£t_vÆue
(
gpio_chù
 *
gc
, 
off£t
, 
vÆ
)

78 
mc9s08dz60
 *
mc9s
 = 
	`to_mc9s08dz60
(
gc
);

80 
	`mc9s08dz60_£t
(
mc9s
, 
off£t
, 
vÆ
);

81 
	}
}

83 
	$mc9s08dz60_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
,

84 
off£t
, 
vÆ
)

86 
mc9s08dz60
 *
mc9s
 = 
	`to_mc9s08dz60
(
gc
);

88  
	`mc9s08dz60_£t
(
mc9s
, 
off£t
, 
vÆ
);

89 
	}
}

91 
	$mc9s08dz60_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

92 c⁄° 
i2c_devi˚_id
 *
id
)

94 
mc9s08dz60
 *
mc9s
;

96 
mc9s
 = 
	`devm_kzÆloc
(&
˛õ¡
->
dev
, (*mc9s), 
GFP_KERNEL
);

97 i‡(!
mc9s
)

98  -
ENOMEM
;

100 
mc9s
->
chù
.
œbñ
 = 
˛õ¡
->
«me
;

101 
mc9s
->
chù
.
ba£
 = -1;

102 
mc9s
->
chù
.
dev
 = &
˛õ¡
->dev;

103 
mc9s
->
chù
.
ow√r
 = 
THIS_MODULE
;

104 
mc9s
->
chù
.
ngpio
 = 
GPIO_NUM
;

105 
mc9s
->
chù
.
ˇn_¶ìp
 = 1;

106 
mc9s
->
chù
.
gë
 = 
mc9s08dz60_gë_vÆue
;

107 
mc9s
->
chù
.
£t
 = 
mc9s08dz60_£t_vÆue
;

108 
mc9s
->
chù
.
dúe˘i⁄_ouçut
 = 
mc9s08dz60_dúe˘i⁄_ouçut
;

109 
mc9s
->
˛õ¡
 = client;

110 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
mc9s
);

112  
	`gpiochù_add
(&
mc9s
->
chù
);

113 
	}
}

115 
	$mc9s08dz60_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

117 
mc9s08dz60
 *
mc9s
;

119 
mc9s
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

121  
	`gpiochù_ªmove
(&
mc9s
->
chù
);

122 
	}
}

124 c⁄° 
i2c_devi˚_id
 
	gmc9s08dz60_id
[] = {

129 
MODULE_DEVICE_TABLE
(
i2c
, 
mc9s08dz60_id
);

131 
i2c_drivî
 
	gmc9s08dz60_i2c_drivî
 = {

132 .
drivî
 = {

133 .
ow√r
 = 
THIS_MODULE
,

134 .
	g«me
 = "mc9s08dz60",

136 .
	g¥obe
 = 
mc9s08dz60_¥obe
,

137 .
	gªmove
 = 
mc9s08dz60_ªmove
,

138 .
	gid_èbÀ
 = 
mc9s08dz60_id
,

141 
moduÀ_i2c_drivî
(
mc9s08dz60_i2c_drivî
);

143 
MODULE_AUTHOR
("Freescale Semiconductor, Inc. "

145 
MODULE_DESCRIPTION
("mc9s08dz60 gpio function on mx35 3ds board");

146 
MODULE_LICENSE
("GPL v2");

	@gpio-mcp23s08.c

5 
	~<löux/kî√l.h
>

6 
	~<löux/devi˚.h
>

7 
	~<löux/muãx.h
>

8 
	~<löux/moduÀ.h
>

9 
	~<löux/gpio.h
>

10 
	~<löux/i2c.h
>

11 
	~<löux/•i/•i.h
>

12 
	~<löux/•i/m˝23s08.h
>

13 
	~<löux/¶ab.h
>

14 
	~<asm/byã‹dî.h
>

15 
	~<löux/of.h
>

16 
	~<löux/of_devi˚.h
>

21 
	#MCP_TYPE_S08
 0

	)

22 
	#MCP_TYPE_S17
 1

	)

23 
	#MCP_TYPE_008
 2

	)

24 
	#MCP_TYPE_017
 3

	)

31 
	#MCP_IODIR
 0x00

	)

32 
	#MCP_IPOL
 0x01

	)

33 
	#MCP_GPINTEN
 0x02

	)

34 
	#MCP_DEFVAL
 0x03

	)

35 
	#MCP_INTCON
 0x04

	)

36 
	#MCP_IOCON
 0x05

	)

37 
	#IOCON_SEQOP
 (1 << 5)

	)

38 
	#IOCON_HAEN
 (1 << 3)

	)

39 
	#IOCON_ODR
 (1 << 2)

	)

40 
	#IOCON_INTPOL
 (1 << 1)

	)

41 
	#MCP_GPPU
 0x06

	)

42 
	#MCP_INTF
 0x07

	)

43 
	#MCP_INTCAP
 0x08

	)

44 
	#MCP_GPIO
 0x09

	)

45 
	#MCP_OLAT
 0x0a

	)

47 
	gm˝23s08
;

49 
	sm˝23s08_›s
 {

50 (*
	mªad
)(
m˝23s08
 *
	mm˝
, 
	mªg
);

51 (*
	mwrôe
)(
m˝23s08
 *
	mm˝
, 
	mªg
, 
	mvÆ
);

52 (*
	mªad_ªgs
)(
m˝23s08
 *
	mm˝
, 
	mªg
,

53 
u16
 *
	mvÆs
, 
	mn
);

56 
	sm˝23s08
 {

57 
u8
 
	maddr
;

59 
u16
 
	mˇche
[11];

61 
muãx
 
	mlock
;

63 
gpio_chù
 
	mchù
;

65 c⁄° 
m˝23s08_›s
 *
	m›s
;

66 *
	md©a
;

74 
	sm˝23s08_drivî_d©a
 {

75 
	mngpio
;

76 
m˝23s08
 *
	mm˝
[8];

77 
m˝23s08
 
	mchù
[];

82 #i‡
IS_ENABLED
(
CONFIG_I2C
)

84 
	$m˝23008_ªad
(
m˝23s08
 *
m˝
, 
ªg
)

86  
	`i2c_smbus_ªad_byã_d©a
(
m˝
->
d©a
, 
ªg
);

87 
	}
}

89 
	$m˝23008_wrôe
(
m˝23s08
 *
m˝
, 
ªg
, 
vÆ
)

91  
	`i2c_smbus_wrôe_byã_d©a
(
m˝
->
d©a
, 
ªg
, 
vÆ
);

92 
	}
}

95 
	$m˝23008_ªad_ªgs
(
m˝23s08
 *
m˝
, 
ªg
, 
u16
 *
vÆs
, 
n
)

97 
n
--) {

98 
ªt
 = 
	`m˝23008_ªad
(
m˝
, 
ªg
++);

99 i‡(
ªt
 < 0)

100  
ªt
;

101 *
vÆs
++ = 
ªt
;

105 
	}
}

107 
	$m˝23017_ªad
(
m˝23s08
 *
m˝
, 
ªg
)

109  
	`i2c_smbus_ªad_w‹d_d©a
(
m˝
->
d©a
, 
ªg
 << 1);

110 
	}
}

112 
	$m˝23017_wrôe
(
m˝23s08
 *
m˝
, 
ªg
, 
vÆ
)

114  
	`i2c_smbus_wrôe_w‹d_d©a
(
m˝
->
d©a
, 
ªg
 << 1, 
vÆ
);

115 
	}
}

118 
	$m˝23017_ªad_ªgs
(
m˝23s08
 *
m˝
, 
ªg
, 
u16
 *
vÆs
, 
n
)

120 
n
--) {

121 
ªt
 = 
	`m˝23017_ªad
(
m˝
, 
ªg
++);

122 i‡(
ªt
 < 0)

123  
ªt
;

124 *
vÆs
++ = 
ªt
;

128 
	}
}

130 c⁄° 
m˝23s08_›s
 
	gm˝23008_›s
 = {

131 .
ªad
 = 
m˝23008_ªad
,

132 .
	gwrôe
 = 
m˝23008_wrôe
,

133 .
	gªad_ªgs
 = 
m˝23008_ªad_ªgs
,

136 c⁄° 
m˝23s08_›s
 
	gm˝23017_›s
 = {

137 .
ªad
 = 
m˝23017_ªad
,

138 .
	gwrôe
 = 
m˝23017_wrôe
,

139 .
	gªad_ªgs
 = 
m˝23017_ªad_ªgs
,

146 #ifde‡
CONFIG_SPI_MASTER


148 
	$m˝23s08_ªad
(
m˝23s08
 *
m˝
, 
ªg
)

150 
u8
 
tx
[2], 
rx
[1];

151 
°©us
;

153 
tx
[0] = 
m˝
->
addr
 | 0x01;

154 
tx
[1] = 
ªg
;

155 
°©us
 = 
	`•i_wrôe_thí_ªad
(
m˝
->
d©a
, 
tx
, Åx, 
rx
, Ñx);

156  (
°©us
 < 0Ë? sètu†: 
rx
[0];

157 
	}
}

159 
	$m˝23s08_wrôe
(
m˝23s08
 *
m˝
, 
ªg
, 
vÆ
)

161 
u8
 
tx
[3];

163 
tx
[0] = 
m˝
->
addr
;

164 
tx
[1] = 
ªg
;

165 
tx
[2] = 
vÆ
;

166  
	`•i_wrôe_thí_ªad
(
m˝
->
d©a
, 
tx
, Åx, 
NULL
, 0);

167 
	}
}

170 
	$m˝23s08_ªad_ªgs
(
m˝23s08
 *
m˝
, 
ªg
, 
u16
 *
vÆs
, 
n
)

172 
u8
 
tx
[2], *
tmp
;

173 
°©us
;

175 i‡((
n
 + 
ªg
Ë>  
m˝
->
ˇche
)

176  -
EINVAL
;

177 
tx
[0] = 
m˝
->
addr
 | 0x01;

178 
tx
[1] = 
ªg
;

180 
tmp
 = (
u8
 *)
vÆs
;

181 
°©us
 = 
	`•i_wrôe_thí_ªad
(
m˝
->
d©a
, 
tx
, Åx, 
tmp
, 
n
);

182 i‡(
°©us
 >= 0) {

183 
n
--)

184 
vÆs
[
n
] = 
tmp
[n];

186  
°©us
;

187 
	}
}

189 
	$m˝23s17_ªad
(
m˝23s08
 *
m˝
, 
ªg
)

191 
u8
 
tx
[2], 
rx
[2];

192 
°©us
;

194 
tx
[0] = 
m˝
->
addr
 | 0x01;

195 
tx
[1] = 
ªg
 << 1;

196 
°©us
 = 
	`•i_wrôe_thí_ªad
(
m˝
->
d©a
, 
tx
, Åx, 
rx
, Ñx);

197  (
°©us
 < 0Ë? sètu†: (
rx
[0] | (rx[1] << 8));

198 
	}
}

200 
	$m˝23s17_wrôe
(
m˝23s08
 *
m˝
, 
ªg
, 
vÆ
)

202 
u8
 
tx
[4];

204 
tx
[0] = 
m˝
->
addr
;

205 
tx
[1] = 
ªg
 << 1;

206 
tx
[2] = 
vÆ
;

207 
tx
[3] = 
vÆ
 >> 8;

208  
	`•i_wrôe_thí_ªad
(
m˝
->
d©a
, 
tx
, Åx, 
NULL
, 0);

209 
	}
}

212 
	$m˝23s17_ªad_ªgs
(
m˝23s08
 *
m˝
, 
ªg
, 
u16
 *
vÆs
, 
n
)

214 
u8
 
tx
[2];

215 
°©us
;

217 i‡((
n
 + 
ªg
Ë>  
m˝
->
ˇche
)

218  -
EINVAL
;

219 
tx
[0] = 
m˝
->
addr
 | 0x01;

220 
tx
[1] = 
ªg
 << 1;

222 
°©us
 = 
	`•i_wrôe_thí_ªad
(
m˝
->
d©a
, 
tx
, Åx,

223 (
u8
 *)
vÆs
, 
n
 * 2);

224 i‡(
°©us
 >= 0) {

225 
n
--)

226 
vÆs
[
n
] = 
	`__À16_to_˝u
((
__À16
)vals[n]);

229  
°©us
;

230 
	}
}

232 c⁄° 
m˝23s08_›s
 
	gm˝23s08_›s
 = {

233 .
ªad
 = 
m˝23s08_ªad
,

234 .
	gwrôe
 = 
m˝23s08_wrôe
,

235 .
	gªad_ªgs
 = 
m˝23s08_ªad_ªgs
,

238 c⁄° 
m˝23s08_›s
 
	gm˝23s17_›s
 = {

239 .
ªad
 = 
m˝23s17_ªad
,

240 .
	gwrôe
 = 
m˝23s17_wrôe
,

241 .
	gªad_ªgs
 = 
m˝23s17_ªad_ªgs
,

248 
	$m˝23s08_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

250 
m˝23s08
 *
m˝
 = 
	`c⁄èöî_of
(
chù
, mcp23s08, chip);

251 
°©us
;

253 
	`muãx_lock
(&
m˝
->
lock
);

254 
m˝
->
ˇche
[
MCP_IODIR
] |(1 << 
off£t
);

255 
°©us
 = 
m˝
->
›s
->
	`wrôe
(m˝, 
MCP_IODIR
, m˝->
ˇche
[MCP_IODIR]);

256 
	`muãx_u∆ock
(&
m˝
->
lock
);

257  
°©us
;

258 
	}
}

260 
	$m˝23s08_gë
(
gpio_chù
 *
chù
, 
off£t
)

262 
m˝23s08
 *
m˝
 = 
	`c⁄èöî_of
(
chù
, mcp23s08, chip);

263 
°©us
;

265 
	`muãx_lock
(&
m˝
->
lock
);

268 
°©us
 = 
m˝
->
›s
->
	`ªad
(m˝, 
MCP_GPIO
);

269 i‡(
°©us
 < 0)

270 
°©us
 = 0;

272 
m˝
->
ˇche
[
MCP_GPIO
] = 
°©us
;

273 
°©us
 = !!(°©u†& (1 << 
off£t
));

275 
	`muãx_u∆ock
(&
m˝
->
lock
);

276  
°©us
;

277 
	}
}

279 
	$__m˝23s08_£t
(
m˝23s08
 *
m˝
, 
mask
, 
vÆue
)

281 
ﬁ©
 = 
m˝
->
ˇche
[
MCP_OLAT
];

283 i‡(
vÆue
)

284 
ﬁ©
 |
mask
;

286 
ﬁ©
 &~
mask
;

287 
m˝
->
ˇche
[
MCP_OLAT
] = 
ﬁ©
;

288  
m˝
->
›s
->
	`wrôe
(m˝, 
MCP_OLAT
, 
ﬁ©
);

289 
	}
}

291 
	$m˝23s08_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

293 
m˝23s08
 *
m˝
 = 
	`c⁄èöî_of
(
chù
, mcp23s08, chip);

294 
mask
 = 1 << 
off£t
;

296 
	`muãx_lock
(&
m˝
->
lock
);

297 
	`__m˝23s08_£t
(
m˝
, 
mask
, 
vÆue
);

298 
	`muãx_u∆ock
(&
m˝
->
lock
);

299 
	}
}

302 
	$m˝23s08_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

304 
m˝23s08
 *
m˝
 = 
	`c⁄èöî_of
(
chù
, mcp23s08, chip);

305 
mask
 = 1 << 
off£t
;

306 
°©us
;

308 
	`muãx_lock
(&
m˝
->
lock
);

309 
°©us
 = 
	`__m˝23s08_£t
(
m˝
, 
mask
, 
vÆue
);

310 i‡(
°©us
 == 0) {

311 
m˝
->
ˇche
[
MCP_IODIR
] &~
mask
;

312 
°©us
 = 
m˝
->
›s
->
	`wrôe
(m˝, 
MCP_IODIR
, m˝->
ˇche
[MCP_IODIR]);

314 
	`muãx_u∆ock
(&
m˝
->
lock
);

315  
°©us
;

316 
	}
}

320 #ifde‡
CONFIG_DEBUG_FS


322 
	~<löux/£q_fûe.h
>

328 
	$m˝23s08_dbg_show
(
£q_fûe
 *
s
, 
gpio_chù
 *
chù
)

330 
m˝23s08
 *
m˝
;

331 
b™k
;

332 
t
;

333 
mask
;

335 
m˝
 = 
	`c⁄èöî_of
(
chù
, 
m˝23s08
, chip);

338 
b™k
 = '0' + ((
m˝
->
addr
 >> 1) & 0x7);

340 
	`muãx_lock
(&
m˝
->
lock
);

341 
t
 = 
m˝
->
›s
->
	`ªad_ªgs
(m˝, 0, m˝->
ˇche
, 
	`ARRAY_SIZE
(mcp->cache));

342 i‡(
t
 < 0) {

343 
	`£q_¥ötf
(
s
, " I/O ERROR %d\n", 
t
);

344 
d⁄e
;

347 
t
 = 0, 
mask
 = 1;Å < 
chù
->
ngpio
;Å++, mask <<= 1) {

348 c⁄° *
œbñ
;

350 
œbñ
 = 
	`gpiochù_is_ªque°ed
(
chù
, 
t
);

351 i‡(!
œbñ
)

354 
	`£q_¥ötf
(
s
, " gpio-%-3d P%c.%d (%-12s) %s %s %s",

355 
chù
->
ba£
 + 
t
, 
b™k
,Å, 
œbñ
,

356 (
m˝
->
ˇche
[
MCP_IODIR
] & 
mask
) ? "in " : "out",

357 (
m˝
->
ˇche
[
MCP_GPIO
] & 
mask
) ? "hi" : "lo",

358 (
m˝
->
ˇche
[
MCP_GPPU
] & 
mask
) ? "up" : " ");

360 
	`£q_¥ötf
(
s
, "\n");

362 
d⁄e
:

363 
	`muãx_u∆ock
(&
m˝
->
lock
);

364 
	}
}

367 
	#m˝23s08_dbg_show
 
NULL


	)

372 
	$m˝23s08_¥obe_⁄e
(
m˝23s08
 *
m˝
, 
devi˚
 *
dev
,

373 *
d©a
, 
addr
,

374 
ty≥
, 
ba£
, 
puŒups
)

376 
°©us
;

378 
	`muãx_öô
(&
m˝
->
lock
);

380 
m˝
->
d©a
 = data;

381 
m˝
->
addr
 =áddr;

383 
m˝
->
chù
.
dúe˘i⁄_öput
 = 
m˝23s08_dúe˘i⁄_öput
;

384 
m˝
->
chù
.
gë
 = 
m˝23s08_gë
;

385 
m˝
->
chù
.
dúe˘i⁄_ouçut
 = 
m˝23s08_dúe˘i⁄_ouçut
;

386 
m˝
->
chù
.
£t
 = 
m˝23s08_£t
;

387 
m˝
->
chù
.
dbg_show
 = 
m˝23s08_dbg_show
;

388 #ifde‡
CONFIG_OF


389 
m˝
->
chù
.
of_gpio_n_˚Œs
 = 2;

390 
m˝
->
chù
.
of_node
 = 
dev
->of_node;

393 
ty≥
) {

394 #ifde‡
CONFIG_SPI_MASTER


395 
MCP_TYPE_S08
:

396 
m˝
->
›s
 = &
m˝23s08_›s
;

397 
m˝
->
chù
.
ngpio
 = 8;

398 
m˝
->
chù
.
œbñ
 = "mcp23s08";

401 
MCP_TYPE_S17
:

402 
m˝
->
›s
 = &
m˝23s17_›s
;

403 
m˝
->
chù
.
ngpio
 = 16;

404 
m˝
->
chù
.
œbñ
 = "mcp23s17";

408 #i‡
	`IS_ENABLED
(
CONFIG_I2C
)

409 
MCP_TYPE_008
:

410 
m˝
->
›s
 = &
m˝23008_›s
;

411 
m˝
->
chù
.
ngpio
 = 8;

412 
m˝
->
chù
.
œbñ
 = "mcp23008";

415 
MCP_TYPE_017
:

416 
m˝
->
›s
 = &
m˝23017_›s
;

417 
m˝
->
chù
.
ngpio
 = 16;

418 
m˝
->
chù
.
œbñ
 = "mcp23017";

423 
	`dev_îr
(
dev
, "övÆid devi˚Åy≥ (%d)\n", 
ty≥
);

424  -
EINVAL
;

427 
m˝
->
chù
.
ba£
 = base;

428 
m˝
->
chù
.
ˇn_¶ìp
 = 1;

429 
m˝
->
chù
.
dev
 = dev;

430 
m˝
->
chù
.
ow√r
 = 
THIS_MODULE
;

435 
°©us
 = 
m˝
->
›s
->
	`ªad
(m˝, 
MCP_IOCON
);

436 i‡(
°©us
 < 0)

437 
Áû
;

438 i‡((
°©us
 & 
IOCON_SEQOP
Ë|| !(°©u†& 
IOCON_HAEN
)) {

440 
°©us
 &~(
IOCON_SEQOP
 | (IOCON_SEQOP << 8));

441 
°©us
 |
IOCON_HAEN
 | (IOCON_HAEN << 8);

442 
°©us
 = 
m˝
->
›s
->
	`wrôe
(m˝, 
MCP_IOCON
, status);

443 i‡(
°©us
 < 0)

444 
Áû
;

448 
°©us
 = 
m˝
->
›s
->
	`wrôe
(m˝, 
MCP_GPPU
, 
puŒups
);

449 i‡(
°©us
 < 0)

450 
Áû
;

452 
°©us
 = 
m˝
->
›s
->
	`ªad_ªgs
(m˝, 0, m˝->
ˇche
, 
	`ARRAY_SIZE
(mcp->cache));

453 i‡(
°©us
 < 0)

454 
Áû
;

457 i‡(
m˝
->
ˇche
[
MCP_IPOL
] != 0) {

458 
m˝
->
ˇche
[
MCP_IPOL
] = 0;

459 
°©us
 = 
m˝
->
›s
->
	`wrôe
(m˝, 
MCP_IPOL
, 0);

460 i‡(
°©us
 < 0)

461 
Áû
;

465 i‡(
m˝
->
ˇche
[
MCP_GPINTEN
] != 0) {

466 
m˝
->
ˇche
[
MCP_GPINTEN
] = 0;

467 
°©us
 = 
m˝
->
›s
->
	`wrôe
(m˝, 
MCP_GPINTEN
, 0);

468 i‡(
°©us
 < 0)

469 
Áû
;

472 
°©us
 = 
	`gpiochù_add
(&
m˝
->
chù
);

473 
Áû
:

474 i‡(
°©us
 < 0)

475 
	`dev_dbg
(
dev
, "can't setup chip %d, --> %d\n",

476 
addr
, 
°©us
);

477  
°©us
;

478 
	}
}

482 #ifde‡
CONFIG_OF


483 #ifde‡
CONFIG_SPI_MASTER


484 
of_devi˚_id
 
	gm˝23s08_•i_of_m©ch
[] = {

486 .
com∑tibÀ
 = "m˝,m˝23s08", .
	gd©a
 = (*Ë
MCP_TYPE_S08
,

489 .
	gcom∑tibÀ
 = "m˝,m˝23s17", .
	gd©a
 = (*Ë
MCP_TYPE_S17
,

493 
MODULE_DEVICE_TABLE
(
of
, 
m˝23s08_•i_of_m©ch
);

496 #i‡
IS_ENABLED
(
CONFIG_I2C
)

497 
of_devi˚_id
 
	gm˝23s08_i2c_of_m©ch
[] = {

499 .
com∑tibÀ
 = "m˝,m˝23008", .
	gd©a
 = (*Ë
MCP_TYPE_008
,

502 .
	gcom∑tibÀ
 = "m˝,m˝23017", .
	gd©a
 = (*Ë
MCP_TYPE_017
,

506 
MODULE_DEVICE_TABLE
(
of
, 
m˝23s08_i2c_of_m©ch
);

511 #i‡
IS_ENABLED
(
CONFIG_I2C
)

513 
	$m˝230xx_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

514 c⁄° 
i2c_devi˚_id
 *
id
)

516 
m˝23s08_∂©f‹m_d©a
 *
pd©a
;

517 
m˝23s08
 *
m˝
;

518 
°©us
, 
ba£
, 
puŒups
;

519 c⁄° 
of_devi˚_id
 *
m©ch
;

521 
m©ch
 = 
	`of_m©ch_devi˚
(
	`of_m©ch_±r
(
m˝23s08_i2c_of_m©ch
),

522 &
˛õ¡
->
dev
);

523 i‡(
m©ch
) {

524 
ba£
 = -1;

525 
puŒups
 = 0;

527 
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

528 i‡(!
pd©a
 || !
	`gpio_is_vÆid
’d©a->
ba£
)) {

529 
	`dev_dbg
(&
˛õ¡
->
dev
,

531  -
EINVAL
;

533 
ba£
 = 
pd©a
->base;

534 
puŒups
 = 
pd©a
->
chù
[0].pullups;

537 
m˝
 = 
	`kzÆloc
( *m˝, 
GFP_KERNEL
);

538 i‡(!
m˝
)

539  -
ENOMEM
;

541 
°©us
 = 
	`m˝23s08_¥obe_⁄e
(
m˝
, &
˛õ¡
->
dev
, clõ¡, clõ¡->
addr
,

542 
id
->
drivî_d©a
, 
ba£
, 
puŒups
);

543 i‡(
°©us
)

544 
Áû
;

546 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
m˝
);

550 
Áû
:

551 
	`k‰ì
(
m˝
);

553  
°©us
;

554 
	}
}

556 
	$m˝230xx_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

558 
m˝23s08
 *
m˝
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

559 
°©us
;

561 
°©us
 = 
	`gpiochù_ªmove
(&
m˝
->
chù
);

562 i‡(
°©us
 == 0)

563 
	`k‰ì
(
m˝
);

565  
°©us
;

566 
	}
}

568 c⁄° 
i2c_devi˚_id
 
	gm˝230xx_id
[] = {

569 { "m˝23008", 
MCP_TYPE_008
 },

570 { "m˝23017", 
MCP_TYPE_017
 },

573 
MODULE_DEVICE_TABLE
(
i2c
, 
m˝230xx_id
);

575 
i2c_drivî
 
	gm˝230xx_drivî
 = {

576 .
drivî
 = {

577 .
«me
 = "mcp230xx",

578 .
	gow√r
 = 
THIS_MODULE
,

579 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
m˝23s08_i2c_of_m©ch
),

581 .
	g¥obe
 = 
m˝230xx_¥obe
,

582 .
	gªmove
 = 
m˝230xx_ªmove
,

583 .
	gid_èbÀ
 = 
m˝230xx_id
,

586 
__öô
 
	$m˝23s08_i2c_öô
()

588  
	`i2c_add_drivî
(&
m˝230xx_drivî
);

589 
	}
}

591 
	$m˝23s08_i2c_exô
()

593 
	`i2c_dñ_drivî
(&
m˝230xx_drivî
);

594 
	}
}

598 
__öô
 
	$m˝23s08_i2c_öô
(Ë{  0; 
	}
}

599 
	$m˝23s08_i2c_exô
(Ë{ 
	}
}

605 #ifde‡
CONFIG_SPI_MASTER


607 
	$m˝23s08_¥obe
(
•i_devi˚
 *
•i
)

609 
m˝23s08_∂©f‹m_d©a
 *
pd©a
;

610 
addr
;

611 
chùs
 = 0;

612 
m˝23s08_drivî_d©a
 *
d©a
;

613 
°©us
, 
ty≥
;

614 
ba£
 = -1,

615 
ngpio
 = 0,

616 
puŒups
[
	`ARRAY_SIZE
(
pd©a
->
chù
)];

617 c⁄° 
of_devi˚_id
 *
m©ch
;

618 
u32
 
•i_¥e£¡_mask
 = 0;

620 
m©ch
 = 
	`of_m©ch_devi˚
(
	`of_m©ch_±r
(
m˝23s08_•i_of_m©ch
), &
•i
->
dev
);

621 i‡(
m©ch
) {

622 
ty≥
 = ()
m©ch
->
d©a
;

623 
°©us
 = 
	`of_¥›îty_ªad_u32
(
•i
->
dev
.
of_node
,

624 "m˝,•i-¥e£¡-mask", &
•i_¥e£¡_mask
);

625 i‡(
°©us
) {

626 
	`dev_îr
(&
•i
->
dev
, "DT hasÇo spi-present-mask\n");

627  -
ENODEV
;

629 i‡((
•i_¥e£¡_mask
 <= 0) || (spi_present_mask >= 256)) {

630 
	`dev_îr
(&
•i
->
dev
, "invalid spi-present-mask\n");

631  -
ENODEV
;

634 
addr
 = 0;ádd∏< 
	`ARRAY_SIZE
(
pd©a
->
chù
);áddr++)

635 
puŒups
[
addr
] = 0;

637 
ty≥
 = 
	`•i_gë_devi˚_id
(
•i
)->
drivî_d©a
;

638 
pd©a
 = 
•i
->
dev
.
∂©f‹m_d©a
;

639 i‡(!
pd©a
 || !
	`gpio_is_vÆid
’d©a->
ba£
)) {

640 
	`dev_dbg
(&
•i
->
dev
,

642  -
EINVAL
;

645 
addr
 = 0;ádd∏< 
	`ARRAY_SIZE
(
pd©a
->
chù
);áddr++) {

646 i‡(!
pd©a
->
chù
[
addr
].
is_¥e£¡
)

648 
chùs
++;

649 i‡((
ty≥
 =
MCP_TYPE_S08
Ë&& (
addr
 > 3)) {

650 
	`dev_îr
(&
•i
->
dev
,

652  -
EINVAL
;

654 
•i_¥e£¡_mask
 |1 << 
addr
;

655 
puŒups
[
addr
] = 
pd©a
->
chù
[addr].pullups;

658 i‡(!
chùs
)

659  -
ENODEV
;

661 
ba£
 = 
pd©a
->base;

664 
d©a
 = 
	`kzÆloc
( *d©®+ 
chùs
 * (
m˝23s08
),

665 
GFP_KERNEL
);

666 i‡(!
d©a
)

667  -
ENOMEM
;

668 
	`•i_£t_drvd©a
(
•i
, 
d©a
);

670 
addr
 = 0;ádd∏< 
	`ARRAY_SIZE
(
pd©a
->
chù
);áddr++) {

671 i‡(!(
•i_¥e£¡_mask
 & (1 << 
addr
)))

673 
chùs
--;

674 
d©a
->
m˝
[
addr
] = &d©a->
chù
[
chùs
];

675 
°©us
 = 
	`m˝23s08_¥obe_⁄e
(
d©a
->
m˝
[
addr
], &
•i
->
dev
, spi,

676 0x40 | (
addr
 << 1), 
ty≥
, 
ba£
,

677 
puŒups
[
addr
]);

678 i‡(
°©us
 < 0)

679 
Áû
;

681 i‡(
ba£
 != -1)

682 
ba£
 +(
ty≥
 =
MCP_TYPE_S17
) ? 16 : 8;

683 
ngpio
 +(
ty≥
 =
MCP_TYPE_S17
) ? 16 : 8;

685 
d©a
->
ngpio
 =Çgpio;

694 
Áû
:

695 
addr
 = 0;ádd∏< 
	`ARRAY_SIZE
(
d©a
->
m˝
);áddr++) {

696 
tmp
;

698 i‡(!
d©a
->
m˝
[
addr
])

700 
tmp
 = 
	`gpiochù_ªmove
(&
d©a
->
m˝
[
addr
]->
chù
);

701 i‡(
tmp
 < 0)

702 
	`dev_îr
(&
•i
->
dev
, "%†--> %d\n", "ªmove", 
tmp
);

704 
	`k‰ì
(
d©a
);

705  
°©us
;

706 
	}
}

708 
	$m˝23s08_ªmove
(
•i_devi˚
 *
•i
)

710 
m˝23s08_drivî_d©a
 *
d©a
 = 
	`•i_gë_drvd©a
(
•i
);

711 
addr
;

712 
°©us
 = 0;

714 
addr
 = 0;ádd∏< 
	`ARRAY_SIZE
(
d©a
->
m˝
);áddr++) {

715 
tmp
;

717 i‡(!
d©a
->
m˝
[
addr
])

720 
tmp
 = 
	`gpiochù_ªmove
(&
d©a
->
m˝
[
addr
]->
chù
);

721 i‡(
tmp
 < 0) {

722 
	`dev_îr
(&
•i
->
dev
, "%†--> %d\n", "ªmove", 
tmp
);

723 
°©us
 = 
tmp
;

726 i‡(
°©us
 == 0)

727 
	`k‰ì
(
d©a
);

728  
°©us
;

729 
	}
}

731 c⁄° 
•i_devi˚_id
 
	gm˝23s08_ids
[] = {

732 { "m˝23s08", 
MCP_TYPE_S08
 },

733 { "m˝23s17", 
MCP_TYPE_S17
 },

736 
MODULE_DEVICE_TABLE
(
•i
, 
m˝23s08_ids
);

738 
•i_drivî
 
	gm˝23s08_drivî
 = {

739 .
¥obe
 = 
m˝23s08_¥obe
,

740 .
	gªmove
 = 
m˝23s08_ªmove
,

741 .
	gid_èbÀ
 = 
m˝23s08_ids
,

742 .
	gdrivî
 = {

743 .
«me
 = "mcp23s08",

744 .
	gow√r
 = 
THIS_MODULE
,

745 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
m˝23s08_•i_of_m©ch
),

749 
__öô
 
	$m˝23s08_•i_öô
()

751  
	`•i_ªgi°î_drivî
(&
m˝23s08_drivî
);

752 
	}
}

754 
	$m˝23s08_•i_exô
()

756 
	`•i_uƒegi°î_drivî
(&
m˝23s08_drivî
);

757 
	}
}

761 
__öô
 
	$m˝23s08_•i_öô
(Ë{  0; 
	}
}

762 
	$m˝23s08_•i_exô
(Ë{ 
	}
}

768 
__öô
 
	$m˝23s08_öô
()

770 
ªt
;

772 
ªt
 = 
	`m˝23s08_•i_öô
();

773 i‡(
ªt
)

774 
•i_Áû
;

776 
ªt
 = 
	`m˝23s08_i2c_öô
();

777 i‡(
ªt
)

778 
i2c_Áû
;

782 
i2c_Áû
:

783 
	`m˝23s08_•i_exô
();

784 
•i_Áû
:

785  
ªt
;

786 
	}
}

790 
subsys_öôˇŒ
(
m˝23s08_öô
);

792 
__exô
 
	$m˝23s08_exô
()

794 
	`m˝23s08_•i_exô
();

795 
	`m˝23s08_i2c_exô
();

796 
	}
}

797 
moduÀ_exô
(
m˝23s08_exô
);

799 
MODULE_LICENSE
("GPL");

	@gpio-ml-ioh.c

17 
	~<löux/moduÀ.h
>

18 
	~<löux/kî√l.h
>

19 
	~<löux/¶ab.h
>

20 
	~<löux/pci.h
>

21 
	~<löux/gpio.h
>

22 
	~<löux/öãºu±.h
>

23 
	~<löux/úq.h
>

25 
	#IOH_EDGE_FALLING
 0

	)

26 
	#IOH_EDGE_RISING
 
	`BIT
(0)

	)

27 
	#IOH_LEVEL_L
 
	`BIT
(1)

	)

28 
	#IOH_LEVEL_H
 (
	`BIT
(0Ë| BIT(1))

	)

29 
	#IOH_EDGE_BOTH
 
	`BIT
(2)

	)

30 
	#IOH_IM_MASK
 (
	`BIT
(0Ë| BIT(1Ë| BIT(2))

	)

32 
	#IOH_IRQ_BASE
 0

	)

34 
	#PCI_VENDOR_ID_ROHM
 0x10DB

	)

36 
	sioh_ªg_comn
 {

37 
u32
 
	mõn
;

38 
u32
 
	mi°©us
;

39 
u32
 
	midi•
;

40 
u32
 
	mi˛r
;

41 
u32
 
	mimask
;

42 
u32
 
	mimask˛r
;

43 
u32
 
	mpo
;

44 
u32
 
	mpi
;

45 
u32
 
	mpm
;

46 
u32
 
	mim_0
;

47 
u32
 
	mim_1
;

48 
u32
 
	mª£rved
;

51 
	sioh_ªgs
 {

52 
ioh_ªg_comn
 
	mªgs
[8];

53 
u32
 
	mª£rve1
[16];

54 
u32
 
	mioh_£l_ªg
[4];

55 
u32
 
	mª£rve2
[11];

56 
u32
 
	m§°
;

69 
	sioh_gpio_ªg_d©a
 {

70 
u32
 
	mõn_ªg
;

71 
u32
 
	mimask_ªg
;

72 
u32
 
	mpo_ªg
;

73 
u32
 
	mpm_ªg
;

74 
u32
 
	mim0_ªg
;

75 
u32
 
	mim1_ªg
;

76 
u32
 
	mu£_£l_ªg
;

92 
	sioh_gpio
 {

93 
__iomem
 *
	mba£
;

94 
ioh_ªgs
 
__iomem
 *
	mªg
;

95 
devi˚
 *
	mdev
;

96 
gpio_chù
 
	mgpio
;

97 
ioh_gpio_ªg_d©a
 
	mioh_gpio_ªg
;

98 
u32
 
	mgpio_u£_£l
;

99 
	mch
;

100 
	múq_ba£
;

101 
•ölock_t
 
	m•ölock
;

104 c⁄° 
	gnum_p‹ts
[] = {6, 12, 16, 16, 15, 16, 16, 12};

106 
	$ioh_gpio_£t
(
gpio_chù
 *
gpio
, 
ƒ
, 
vÆ
)

108 
u32
 
ªg_vÆ
;

109 
ioh_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, ioh_gpio, gpio);

110 
Êags
;

112 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

113 
ªg_vÆ
 = 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].
po
);

114 i‡(
vÆ
)

115 
ªg_vÆ
 |(1 << 
ƒ
);

117 
ªg_vÆ
 &~(1 << 
ƒ
);

119 
	`iowrôe32
(
ªg_vÆ
, &
chù
->
ªg
->
ªgs
[chù->
ch
].
po
);

120 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

121 
	}
}

123 
	$ioh_gpio_gë
(
gpio_chù
 *
gpio
, 
ƒ
)

125 
ioh_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, ioh_gpio, gpio);

127  
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].
pi
Ë& (1 << 
ƒ
);

128 
	}
}

130 
	$ioh_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gpio
, 
ƒ
,

131 
vÆ
)

133 
ioh_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, ioh_gpio, gpio);

134 
u32
 
pm
;

135 
u32
 
ªg_vÆ
;

136 
Êags
;

138 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

139 
pm
 = 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].pm) &

140 ((1 << 
num_p‹ts
[
chù
->
ch
]) - 1);

141 
pm
 |(1 << 
ƒ
);

142 
	`iowrôe32
(
pm
, &
chù
->
ªg
->
ªgs
[chù->
ch
].pm);

144 
ªg_vÆ
 = 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].
po
);

145 i‡(
vÆ
)

146 
ªg_vÆ
 |(1 << 
ƒ
);

148 
ªg_vÆ
 &~(1 << 
ƒ
);

149 
	`iowrôe32
(
ªg_vÆ
, &
chù
->
ªg
->
ªgs
[chù->
ch
].
po
);

151 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

154 
	}
}

156 
	$ioh_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gpio
, 
ƒ
)

158 
ioh_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, ioh_gpio, gpio);

159 
u32
 
pm
;

160 
Êags
;

162 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

163 
pm
 = 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].pm) &

164 ((1 << 
num_p‹ts
[
chù
->
ch
]) - 1);

165 
pm
 &~(1 << 
ƒ
);

166 
	`iowrôe32
(
pm
, &
chù
->
ªg
->
ªgs
[chù->
ch
].pm);

167 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

170 
	}
}

172 #ifde‡
CONFIG_PM


176 
	$ioh_gpio_ßve_ªg_c⁄f
(
ioh_gpio
 *
chù
)

178 
i
;

180 
i
 = 0; i < 8; i ++, 
chù
++) {

181 
chù
->
ioh_gpio_ªg
.
po_ªg
 =

182 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].
po
);

183 
chù
->
ioh_gpio_ªg
.
pm_ªg
 =

184 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].
pm
);

185 
chù
->
ioh_gpio_ªg
.
õn_ªg
 =

186 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].
õn
);

187 
chù
->
ioh_gpio_ªg
.
imask_ªg
 =

188 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].
imask
);

189 
chù
->
ioh_gpio_ªg
.
im0_ªg
 =

190 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].
im_0
);

191 
chù
->
ioh_gpio_ªg
.
im1_ªg
 =

192 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].
im_1
);

193 i‡(
i
 < 4)

194 
chù
->
ioh_gpio_ªg
.
u£_£l_ªg
 =

195 
	`i‹ód32
(&
chù
->
ªg
->
ioh_£l_ªg
[
i
]);

197 
	}
}

202 
	$ioh_gpio_ª°‹e_ªg_c⁄f
(
ioh_gpio
 *
chù
)

204 
i
;

206 
i
 = 0; i < 8; i ++, 
chù
++) {

207 
	`iowrôe32
(
chù
->
ioh_gpio_ªg
.
po_ªg
,

208 &
chù
->
ªg
->
ªgs
[chù->
ch
].
po
);

209 
	`iowrôe32
(
chù
->
ioh_gpio_ªg
.
pm_ªg
,

210 &
chù
->
ªg
->
ªgs
[chù->
ch
].
pm
);

211 
	`iowrôe32
(
chù
->
ioh_gpio_ªg
.
õn_ªg
,

212 &
chù
->
ªg
->
ªgs
[chù->
ch
].
õn
);

213 
	`iowrôe32
(
chù
->
ioh_gpio_ªg
.
imask_ªg
,

214 &
chù
->
ªg
->
ªgs
[chù->
ch
].
imask
);

215 
	`iowrôe32
(
chù
->
ioh_gpio_ªg
.
im0_ªg
,

216 &
chù
->
ªg
->
ªgs
[chù->
ch
].
im_0
);

217 
	`iowrôe32
(
chù
->
ioh_gpio_ªg
.
im1_ªg
,

218 &
chù
->
ªg
->
ªgs
[chù->
ch
].
im_1
);

219 i‡(
i
 < 4)

220 
	`iowrôe32
(
chù
->
ioh_gpio_ªg
.
u£_£l_ªg
,

221 &
chù
->
ªg
->
ioh_£l_ªg
[
i
]);

223 
	}
}

226 
	$ioh_gpio_to_úq
(
gpio_chù
 *
gpio
, 
off£t
)

228 
ioh_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, ioh_gpio, gpio);

229  
chù
->
úq_ba£
 + 
off£t
;

230 
	}
}

232 
	$ioh_gpio_£tup
(
ioh_gpio
 *
chù
, 
num_p‹t
)

234 
gpio_chù
 *
gpio
 = &
chù
->gpio;

236 
gpio
->
œbñ
 = 
	`dev_«me
(
chù
->
dev
);

237 
gpio
->
ow√r
 = 
THIS_MODULE
;

238 
gpio
->
dúe˘i⁄_öput
 = 
ioh_gpio_dúe˘i⁄_öput
;

239 
gpio
->
gë
 = 
ioh_gpio_gë
;

240 
gpio
->
dúe˘i⁄_ouçut
 = 
ioh_gpio_dúe˘i⁄_ouçut
;

241 
gpio
->
£t
 = 
ioh_gpio_£t
;

242 
gpio
->
dbg_show
 = 
NULL
;

243 
gpio
->
ba£
 = -1;

244 
gpio
->
ngpio
 = 
num_p‹t
;

245 
gpio
->
ˇn_¶ìp
 = 0;

246 
gpio
->
to_úq
 = 
ioh_gpio_to_úq
;

247 
	}
}

249 
	$ioh_úq_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

251 
u32
 
im
;

252 
__iomem
 *
im_ªg
;

253 
u32
 
õn
;

254 
u32
 
im_pos
;

255 
ch
;

256 
Êags
;

257 
u32
 
vÆ
;

258 
úq
 = 
d
->irq;

259 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

260 
ioh_gpio
 *
chù
 = 
gc
->
¥iv©e
;

262 
ch
 = 
úq
 - 
chù
->
úq_ba£
;

263 i‡(
úq
 <
chù
->
úq_ba£
 + 7) {

264 
im_ªg
 = &
chù
->
ªg
->
ªgs
[chù->
ch
].
im_0
;

265 
im_pos
 = 
ch
;

267 
im_ªg
 = &
chù
->
ªg
->
ªgs
[chù->
ch
].
im_1
;

268 
im_pos
 = 
ch
 - 8;

270 
	`dev_dbg
(
chù
->
dev
, "%s:irq=%dÅype=%d ch=%dÖos=%dÅype=%d\n",

271 
__func__
, 
úq
, 
ty≥
, 
ch
, 
im_pos
,Åype);

273 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

275 
ty≥
) {

276 
IRQ_TYPE_EDGE_RISING
:

277 
vÆ
 = 
IOH_EDGE_RISING
;

279 
IRQ_TYPE_EDGE_FALLING
:

280 
vÆ
 = 
IOH_EDGE_FALLING
;

282 
IRQ_TYPE_EDGE_BOTH
:

283 
vÆ
 = 
IOH_EDGE_BOTH
;

285 
IRQ_TYPE_LEVEL_HIGH
:

286 
vÆ
 = 
IOH_LEVEL_H
;

288 
IRQ_TYPE_LEVEL_LOW
:

289 
vÆ
 = 
IOH_LEVEL_L
;

291 
IRQ_TYPE_PROBE
:

292 
íd
;

294 
	`dev_w¨n
(
chù
->
dev
, "%s: unknownÅype(%dd)",

295 
__func__
, 
ty≥
);

296 
íd
;

300 
im
 = 
	`i‹ód32
(
im_ªg
Ë& ~(
IOH_IM_MASK
 << (
im_pos
 * 4));

301 
	`iowrôe32
(
im
 | (
vÆ
 << (
im_pos
 * 4)), 
im_ªg
);

304 
	`iowrôe32
(
	`BIT
(
ch
), &
chù
->
ªg
->
ªgs
[chù->ch].
i˛r
);

307 
	`iowrôe32
(
	`BIT
(
ch
), &
chù
->
ªg
->
ªgs
[chù->ch].
imask˛r
);

310 
õn
 = 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].ien);

311 
	`iowrôe32
(
õn
 | 
	`BIT
(
ch
), &
chù
->
ªg
->
ªgs
[chip->ch].ien);

312 
íd
:

313 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

316 
	}
}

318 
	$ioh_úq_unmask
(
úq_d©a
 *
d
)

320 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

321 
ioh_gpio
 *
chù
 = 
gc
->
¥iv©e
;

323 
	`iowrôe32
(1 << (
d
->
úq
 - 
chù
->
úq_ba£
),

324 &
chù
->
ªg
->
ªgs
[chù->
ch
].
imask˛r
);

325 
	}
}

327 
	$ioh_úq_mask
(
úq_d©a
 *
d
)

329 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

330 
ioh_gpio
 *
chù
 = 
gc
->
¥iv©e
;

332 
	`iowrôe32
(1 << (
d
->
úq
 - 
chù
->
úq_ba£
),

333 &
chù
->
ªg
->
ªgs
[chù->
ch
].
imask
);

334 
	}
}

336 
	$ioh_úq_dißbÀ
(
úq_d©a
 *
d
)

338 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

339 
ioh_gpio
 *
chù
 = 
gc
->
¥iv©e
;

340 
Êags
;

341 
u32
 
õn
;

343 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

344 
õn
 = 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].ien);

345 
õn
 &~(1 << (
d
->
úq
 - 
chù
->
úq_ba£
));

346 
	`iowrôe32
(
õn
, &
chù
->
ªg
->
ªgs
[chù->
ch
].ien);

347 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

348 
	}
}

350 
	$ioh_úq_íabÀ
(
úq_d©a
 *
d
)

352 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

353 
ioh_gpio
 *
chù
 = 
gc
->
¥iv©e
;

354 
Êags
;

355 
u32
 
õn
;

357 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

358 
õn
 = 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[chù->
ch
].ien);

359 
õn
 |1 << (
d
->
úq
 - 
chù
->
úq_ba£
);

360 
	`iowrôe32
(
õn
, &
chù
->
ªg
->
ªgs
[chù->
ch
].ien);

361 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

362 
	}
}

364 
úqªtu∫_t
 
	$ioh_gpio_h™dÀr
(
úq
, *
dev_id
)

366 
ioh_gpio
 *
chù
 = 
dev_id
;

367 
u32
 
ªg_vÆ
;

368 
i
, 
j
;

369 
ªt
 = 
IRQ_NONE
;

371 
i
 = 0; i < 8; i++, 
chù
++) {

372 
ªg_vÆ
 = 
	`i‹ód32
(&
chù
->
ªg
->
ªgs
[
i
].
i°©us
);

373 
j
 = 0; j < 
num_p‹ts
[
i
]; j++) {

374 i‡(
ªg_vÆ
 & 
	`BIT
(
j
)) {

375 
	`dev_dbg
(
chù
->
dev
,

377 
__func__
, 
j
, 
úq
, 
ªg_vÆ
);

378 
	`iowrôe32
(
	`BIT
(
j
),

379 &
chù
->
ªg
->
ªgs
[chù->
ch
].
i˛r
);

380 
	`gíîic_h™dÀ_úq
(
chù
->
úq_ba£
 + 
j
);

381 
ªt
 = 
IRQ_HANDLED
;

385  
ªt
;

386 
	}
}

388 
	$ioh_gpio_Æloc_gíîic_chù
(
ioh_gpio
 *
chù
,

389 
úq_°¨t
, 
num
)

391 
úq_chù_gíîic
 *
gc
;

392 
úq_chù_ty≥
 *
˘
;

394 
gc
 = 
	`úq_Æloc_gíîic_chù
("ioh_gpio", 1, 
úq_°¨t
, 
chù
->
ba£
,

395 
h™dÀ_sim∂e_úq
);

396 
gc
->
¥iv©e
 = 
chù
;

397 
˘
 = 
gc
->
chù_ty≥s
;

399 
˘
->
chù
.
úq_mask
 = 
ioh_úq_mask
;

400 
˘
->
chù
.
úq_unmask
 = 
ioh_úq_unmask
;

401 
˘
->
chù
.
úq_£t_ty≥
 = 
ioh_úq_ty≥
;

402 
˘
->
chù
.
úq_dißbÀ
 = 
ioh_úq_dißbÀ
;

403 
˘
->
chù
.
úq_íabÀ
 = 
ioh_úq_íabÀ
;

405 
	`úq_£tup_gíîic_chù
(
gc
, 
	`IRQ_MSK
(
num
), 
IRQ_GC_INIT_MASK_CACHE
,

406 
IRQ_NOREQUEST
 | 
IRQ_NOPROBE
, 0);

407 
	}
}

409 
	$ioh_gpio_¥obe
(
pci_dev
 *
pdev
,

410 c⁄° 
pci_devi˚_id
 *
id
)

412 
ªt
;

413 
i
, 
j
;

414 
ioh_gpio
 *
chù
;

415 
__iomem
 *
ba£
;

416 *
chù_ßve
;

417 
úq_ba£
;

419 
ªt
 = 
	`pci_íabÀ_devi˚
(
pdev
);

420 i‡(
ªt
) {

421 
	`dev_îr
(&
pdev
->
dev
, "%†:Öci_íabÀ_devi˚ faûed", 
__func__
);

422 
îr_pci_íabÀ
;

425 
ªt
 = 
	`pci_ªque°_ªgi⁄s
(
pdev
, 
KBUILD_MODNAME
);

426 i‡(
ªt
) {

427 
	`dev_îr
(&
pdev
->
dev
, "pci_ªque°_ªgi⁄†Áûed-%d", 
ªt
);

428 
îr_ªque°_ªgi⁄s
;

431 
ba£
 = 
	`pci_iom≠
(
pdev
, 1, 0);

432 i‡(!
ba£
) {

433 
	`dev_îr
(&
pdev
->
dev
, "%†:Öci_iom≠ faûed", 
__func__
);

434 
ªt
 = -
ENOMEM
;

435 
îr_iom≠
;

438 
chù_ßve
 = 
	`kzÆloc
((*
chù
Ë* 8, 
GFP_KERNEL
);

439 i‡(
chù_ßve
 =
NULL
) {

440 
	`dev_îr
(&
pdev
->
dev
, "%†: kzÆlo¯Áûed", 
__func__
);

441 
ªt
 = -
ENOMEM
;

442 
îr_kzÆloc
;

445 
chù
 = 
chù_ßve
;

446 
i
 = 0; i < 8; i++, 
chù
++) {

447 
chù
->
dev
 = &
pdev
->dev;

448 
chù
->
ba£
 = base;

449 
chù
->
ªg
 = chù->
ba£
;

450 
chù
->
ch
 = 
i
;

451 
	`•ö_lock_öô
(&
chù
->
•ölock
);

452 
	`ioh_gpio_£tup
(
chù
, 
num_p‹ts
[
i
]);

453 
ªt
 = 
	`gpiochù_add
(&
chù
->
gpio
);

454 i‡(
ªt
) {

455 
	`dev_îr
(&
pdev
->
dev
, "IOH gpio: FailedÅoÑegister GPIO\n");

456 
îr_gpiochù_add
;

460 
chù
 = 
chù_ßve
;

461 
j
 = 0; j < 8; j++, 
chù
++) {

462 
úq_ba£
 = 
	`úq_Æloc_descs
(-1, 
IOH_IRQ_BASE
, 
num_p‹ts
[
j
],

463 
NUMA_NO_NODE
);

464 i‡(
úq_ba£
 < 0) {

465 
	`dev_w¨n
(&
pdev
->
dev
,

467 
chù
->
úq_ba£
 = -1;

468 
îr_úq_Æloc_descs
;

470 
chù
->
úq_ba£
 = irq_base;

471 
	`ioh_gpio_Æloc_gíîic_chù
(
chù
, 
úq_ba£
, 
num_p‹ts
[
j
]);

474 
chù
 = 
chù_ßve
;

475 
ªt
 = 
	`ªque°_úq
(
pdev
->
úq
, 
ioh_gpio_h™dÀr
,

476 
IRQF_SHARED
, 
KBUILD_MODNAME
, 
chù
);

477 i‡(
ªt
 != 0) {

478 
	`dev_îr
(&
pdev
->
dev
,

479 "%†ªque°_úq faûed\n", 
__func__
);

480 
îr_ªque°_úq
;

483 
	`pci_£t_drvd©a
(
pdev
, 
chù
);

487 
îr_ªque°_úq
:

488 
chù
 = 
chù_ßve
;

489 
îr_úq_Æloc_descs
:

490 --
j
 >= 0) {

491 
chù
--;

492 
	`úq_‰ì_descs
(
chù
->
úq_ba£
, 
num_p‹ts
[
j
]);

495 
chù
 = 
chù_ßve
;

496 
îr_gpiochù_add
:

497 --
i
 >= 0) {

498 
chù
--;

499 i‡(
	`gpiochù_ªmove
(&
chù
->
gpio
))

500 
	`dev_îr
(&
pdev
->
dev
, "Faûed gpiochù_ªmove(%d)\n", 
i
);

502 
	`k‰ì
(
chù_ßve
);

504 
îr_kzÆloc
:

505 
	`pci_iounm≠
(
pdev
, 
ba£
);

507 
îr_iom≠
:

508 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

510 
îr_ªque°_ªgi⁄s
:

511 
	`pci_dißbÀ_devi˚
(
pdev
);

513 
îr_pci_íabÀ
:

515 
	`dev_îr
(&
pdev
->
dev
, "%†FaûedÑëu∫†%d\n", 
__func__
, 
ªt
);

516  
ªt
;

517 
	}
}

519 
	$ioh_gpio_ªmove
(
pci_dev
 *
pdev
)

521 
îr
;

522 
i
;

523 
ioh_gpio
 *
chù
 = 
	`pci_gë_drvd©a
(
pdev
);

524 *
chù_ßve
;

526 
chù_ßve
 = 
chù
;

528 
	`‰ì_úq
(
pdev
->
úq
, 
chù
);

530 
i
 = 0; i < 8; i++, 
chù
++) {

531 
	`úq_‰ì_descs
(
chù
->
úq_ba£
, 
num_p‹ts
[
i
]);

532 
îr
 = 
	`gpiochù_ªmove
(&
chù
->
gpio
);

533 i‡(
îr
)

534 
	`dev_îr
(&
pdev
->
dev
, "Failed gpiochip_remove\n");

537 
chù
 = 
chù_ßve
;

538 
	`pci_iounm≠
(
pdev
, 
chù
->
ba£
);

539 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

540 
	`pci_dißbÀ_devi˚
(
pdev
);

541 
	`k‰ì
(
chù
);

542 
	}
}

544 #ifde‡
CONFIG_PM


545 
	$ioh_gpio_su•íd
(
pci_dev
 *
pdev
, 
pm_mesßge_t
 
°©e
)

547 
s32
 
ªt
;

548 
ioh_gpio
 *
chù
 = 
	`pci_gë_drvd©a
(
pdev
);

549 
Êags
;

551 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

552 
	`ioh_gpio_ßve_ªg_c⁄f
(
chù
);

553 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

555 
ªt
 = 
	`pci_ßve_°©e
(
pdev
);

556 i‡(
ªt
) {

557 
	`dev_îr
(&
pdev
->
dev
, "pci_ßve_°©êFaûed-%d\n", 
ªt
);

558  
ªt
;

560 
	`pci_dißbÀ_devi˚
(
pdev
);

561 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D0
);

562 
ªt
 = 
	`pci_íabÀ_wake
(
pdev
, 
PCI_D0
, 1);

563 i‡(
ªt
)

564 
	`dev_îr
(&
pdev
->
dev
, "pci_íabÀ_wakêFaûed -%d\n", 
ªt
);

567 
	}
}

569 
	$ioh_gpio_ªsume
(
pci_dev
 *
pdev
)

571 
s32
 
ªt
;

572 
ioh_gpio
 *
chù
 = 
	`pci_gë_drvd©a
(
pdev
);

573 
Êags
;

575 
ªt
 = 
	`pci_íabÀ_wake
(
pdev
, 
PCI_D0
, 0);

577 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D0
);

578 
ªt
 = 
	`pci_íabÀ_devi˚
(
pdev
);

579 i‡(
ªt
) {

580 
	`dev_îr
(&
pdev
->
dev
, "pci_íabÀ_devi˚ Faûed-%d ", 
ªt
);

581  
ªt
;

583 
	`pci_ª°‹e_°©e
(
pdev
);

585 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

586 
	`iowrôe32
(0x01, &
chù
->
ªg
->
§°
);

587 
	`iowrôe32
(0x00, &
chù
->
ªg
->
§°
);

588 
	`ioh_gpio_ª°‹e_ªg_c⁄f
(
chù
);

589 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

592 
	}
}

594 
	#ioh_gpio_su•íd
 
NULL


	)

595 
	#ioh_gpio_ªsume
 
NULL


	)

598 
DEFINE_PCI_DEVICE_TABLE
(
ioh_gpio_pcidev_id
) = {

599 { 
PCI_DEVICE
(
PCI_VENDOR_ID_ROHM
, 0x802E) },

602 
MODULE_DEVICE_TABLE
(
pci
, 
ioh_gpio_pcidev_id
);

604 
pci_drivî
 
	gioh_gpio_drivî
 = {

605 .
«me
 = "ml_ioh_gpio",

606 .
	gid_èbÀ
 = 
ioh_gpio_pcidev_id
,

607 .
	g¥obe
 = 
ioh_gpio_¥obe
,

608 .
	gªmove
 = 
ioh_gpio_ªmove
,

609 .
	gsu•íd
 = 
ioh_gpio_su•íd
,

610 .
	gªsume
 = 
ioh_gpio_ªsume


613 
moduÀ_pci_drivî
(
ioh_gpio_drivî
);

615 
MODULE_DESCRIPTION
("OKI SEMICONDUCTOR ML-IOH series GPIO Driver");

616 
MODULE_LICENSE
("GPL");

	@gpio-mm-lantiq.c

9 
	~<löux/öô.h
>

10 
	~<löux/moduÀ.h
>

11 
	~<löux/ty≥s.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/muãx.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/of.h
>

16 
	~<löux/of_gpio.h
>

17 
	~<löux/io.h
>

18 
	~<löux/¶ab.h
>

20 
	~<œ¡iq_soc.h
>

28 
	#LTQ_EBU_BUSCON
 0x1e7f‡

	)

29 
	#LTQ_EBU_WP
 0x80000000

	)

31 
	s…q_mm
 {

32 
of_mm_gpio_chù
 
	mmmchù
;

33 
u16
 
	mshadow
;

43 
	$…q_mm_≠∂y
(
…q_mm
 *
chù
)

45 
Êags
;

47 
	`•ö_lock_úqßve
(&
ebu_lock
, 
Êags
);

48 
	`…q_ebu_w32
(
LTQ_EBU_BUSCON
, 
LTQ_EBU_BUSCON1
);

49 
	`__øw_wrôew
(
chù
->
shadow
, chù->
mmchù
.
ªgs
);

50 
	`…q_ebu_w32
(
LTQ_EBU_BUSCON
 | 
LTQ_EBU_WP
, 
LTQ_EBU_BUSCON1
);

51 
	`•ö_u∆ock_úqª°‹e
(&
ebu_lock
, 
Êags
);

52 
	}
}

62 
	$…q_mm_£t
(
gpio_chù
 *
gc
, 
off£t
, 
vÆue
)

64 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

65 
…q_mm
 *
chù
 =

66 
	`c⁄èöî_of
(
mm_gc
, 
…q_mm
, 
mmchù
);

68 i‡(
vÆue
)

69 
chù
->
shadow
 |(1 << 
off£t
);

71 
chù
->
shadow
 &~(1 << 
off£t
);

72 
	`…q_mm_≠∂y
(
chù
);

73 
	}
}

83 
	$…q_mm_dú_out
(
gpio_chù
 *
gc
, 
off£t
, 
vÆue
)

85 
	`…q_mm_£t
(
gc
, 
off£t
, 
vÆue
);

88 
	}
}

94 
	$…q_mm_ßve_ªgs
(
of_mm_gpio_chù
 *
mm_gc
)

96 
…q_mm
 *
chù
 =

97 
	`c⁄èöî_of
(
mm_gc
, 
…q_mm
, 
mmchù
);

100 
	`…q_ebu_w32
(
	`CPHYSADDR
(
chù
->
mmchù
.
ªgs
Ë| 0x1, 
LTQ_EBU_ADDRSEL1
);

102 
	`…q_mm_≠∂y
(
chù
);

103 
	}
}

105 
	$…q_mm_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

107 
ªsour˚
 *
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

108 
…q_mm
 *
chù
;

109 c⁄° 
__be32
 *
shadow
;

110 
ªt
 = 0;

112 i‡(!
ªs
) {

113 
	`dev_îr
(&
pdev
->
dev
, "failedÅo get memoryÑesource\n");

114  -
ENOENT
;

117 
chù
 = 
	`kzÆloc
((*chù), 
GFP_KERNEL
);

118 i‡(!
chù
)

119  -
ENOMEM
;

121 
chù
->
mmchù
.
gc
.
ngpio
 = 16;

122 
chù
->
mmchù
.
gc
.
œbñ
 = "gpio-mm-ltq";

123 
chù
->
mmchù
.
gc
.
dúe˘i⁄_ouçut
 = 
…q_mm_dú_out
;

124 
chù
->
mmchù
.
gc
.
£t
 = 
…q_mm_£t
;

125 
chù
->
mmchù
.
ßve_ªgs
 = 
…q_mm_ßve_ªgs
;

128 
shadow
 = 
	`of_gë_¥›îty
(
pdev
->
dev
.
of_node
, "œ¡iq,shadow", 
NULL
);

129 i‡(
shadow
)

130 
chù
->
shadow
 = 
	`be32_to_˝u
(*shadow);

132 
ªt
 = 
	`of_mm_gpiochù_add
(
pdev
->
dev
.
of_node
, &
chù
->
mmchù
);

133 i‡(
ªt
)

134 
	`k‰ì
(
chù
);

135  
ªt
;

136 
	}
}

138 c⁄° 
of_devi˚_id
 
	g…q_mm_m©ch
[] = {

139 { .
com∑tibÀ
 = "lantiq,gpio-mm" },

142 
MODULE_DEVICE_TABLE
(
of
, 
…q_mm_m©ch
);

144 
∂©f‹m_drivî
 
	g…q_mm_drivî
 = {

145 .
¥obe
 = 
…q_mm_¥obe
,

146 .
	gdrivî
 = {

147 .
«me
 = "gpio-mm-ltq",

148 .
	gow√r
 = 
THIS_MODULE
,

149 .
	gof_m©ch_èbÀ
 = 
…q_mm_m©ch
,

153 
__öô
 
	$…q_mm_öô
()

155  
	`∂©f‹m_drivî_ªgi°î
(&
…q_mm_drivî
);

156 
	}
}

158 
subsys_öôˇŒ
(
…q_mm_öô
);

	@gpio-mpc5200.c

20 
	~<löux/of.h
>

21 
	~<löux/kî√l.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/of_gpio.h
>

24 
	~<löux/io.h
>

25 
	~<löux/of_∂©f‹m.h
>

26 
	~<löux/moduÀ.h
>

28 
	~<asm/gpio.h
>

29 
	~<asm/mpc52xx.h
>

30 
	~<sysdev/f¶_soc.h
>

32 
DEFINE_SPINLOCK
(
gpio_lock
);

34 
	smpc52xx_gpiochù
 {

35 
of_mm_gpio_chù
 
	mmmchù
;

36 
	mshadow_dvo
;

37 
	mshadow_gpi€
;

38 
	mshadow_ddr
;

57 
	$mpc52xx_wkup_gpio_gë
(
gpio_chù
 *
gc
, 
gpio
)

59 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

60 
mpc52xx_gpio_wkup
 
__iomem
 *
ªgs
 = 
mm_gc
->regs;

61 
ªt
;

63 
ªt
 = (
	`ö_8
(&
ªgs
->
wkup_ivÆ
Ë>> (7 - 
gpio
)) & 1;

65 
	`¥_debug
("%s: gpio: %dÑë: %d\n", 
__func__
, 
gpio
, 
ªt
);

67  
ªt
;

68 
	}
}

70 
ölöe
 

71 
	$__mpc52xx_wkup_gpio_£t
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

73 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

74 
mpc52xx_gpiochù
 *
chù
 = 
	`c⁄èöî_of
(
mm_gc
,

75 
mpc52xx_gpiochù
, 
mmchù
);

76 
mpc52xx_gpio_wkup
 
__iomem
 *
ªgs
 = 
mm_gc
->regs;

78 i‡(
vÆ
)

79 
chù
->
shadow_dvo
 |1 << (7 - 
gpio
);

81 
chù
->
shadow_dvo
 &~(1 << (7 - 
gpio
));

83 
	`out_8
(&
ªgs
->
wkup_dvo
, 
chù
->
shadow_dvo
);

84 
	}
}

87 
	$mpc52xx_wkup_gpio_£t
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

89 
Êags
;

91 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

93 
	`__mpc52xx_wkup_gpio_£t
(
gc
, 
gpio
, 
vÆ
);

95 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

97 
	`¥_debug
("%s: gpio: %d vÆ: %d\n", 
__func__
, 
gpio
, 
vÆ
);

98 
	}
}

100 
	$mpc52xx_wkup_gpio_dú_ö
(
gpio_chù
 *
gc
, 
gpio
)

102 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

103 
mpc52xx_gpiochù
 *
chù
 = 
	`c⁄èöî_of
(
mm_gc
,

104 
mpc52xx_gpiochù
, 
mmchù
);

105 
mpc52xx_gpio_wkup
 
__iomem
 *
ªgs
 = 
mm_gc
->regs;

106 
Êags
;

108 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

111 
chù
->
shadow_ddr
 &~(1 << (7 - 
gpio
));

112 
	`out_8
(&
ªgs
->
wkup_ddr
, 
chù
->
shadow_ddr
);

115 
chù
->
shadow_gpi€
 |1 << (7 - 
gpio
);

116 
	`out_8
(&
ªgs
->
wkup_gpi€
, 
chù
->
shadow_gpi€
);

118 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

121 
	}
}

124 
	$mpc52xx_wkup_gpio_dú_out
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

126 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

127 
mpc52xx_gpio_wkup
 
__iomem
 *
ªgs
 = 
mm_gc
->regs;

128 
mpc52xx_gpiochù
 *
chù
 = 
	`c⁄èöî_of
(
mm_gc
,

129 
mpc52xx_gpiochù
, 
mmchù
);

130 
Êags
;

132 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

134 
	`__mpc52xx_wkup_gpio_£t
(
gc
, 
gpio
, 
vÆ
);

137 
chù
->
shadow_ddr
 |1 << (7 - 
gpio
);

138 
	`out_8
(&
ªgs
->
wkup_ddr
, 
chù
->
shadow_ddr
);

141 
chù
->
shadow_gpi€
 |1 << (7 - 
gpio
);

142 
	`out_8
(&
ªgs
->
wkup_gpi€
, 
chù
->
shadow_gpi€
);

144 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

146 
	`¥_debug
("%s: gpio: %d vÆ: %d\n", 
__func__
, 
gpio
, 
vÆ
);

149 
	}
}

151 
	$mpc52xx_wkup_gpiochù_¥obe
(
∂©f‹m_devi˚
 *
ofdev
)

153 
mpc52xx_gpiochù
 *
chù
;

154 
mpc52xx_gpio_wkup
 
__iomem
 *
ªgs
;

155 
gpio_chù
 *
gc
;

156 
ªt
;

158 
chù
 = 
	`kzÆloc
((*chù), 
GFP_KERNEL
);

159 i‡(!
chù
)

160  -
ENOMEM
;

162 
gc
 = &
chù
->
mmchù
.gc;

164 
gc
->
ngpio
 = 8;

165 
gc
->
dúe˘i⁄_öput
 = 
mpc52xx_wkup_gpio_dú_ö
;

166 
gc
->
dúe˘i⁄_ouçut
 = 
mpc52xx_wkup_gpio_dú_out
;

167 
gc
->
gë
 = 
mpc52xx_wkup_gpio_gë
;

168 
gc
->
£t
 = 
mpc52xx_wkup_gpio_£t
;

170 
ªt
 = 
	`of_mm_gpiochù_add
(
ofdev
->
dev
.
of_node
, &
chù
->
mmchù
);

171 i‡(
ªt
)

172  
ªt
;

174 
ªgs
 = 
chù
->
mmchù
.regs;

175 
chù
->
shadow_gpi€
 = 
	`ö_8
(&
ªgs
->
wkup_gpi€
);

176 
chù
->
shadow_ddr
 = 
	`ö_8
(&
ªgs
->
wkup_ddr
);

177 
chù
->
shadow_dvo
 = 
	`ö_8
(&
ªgs
->
wkup_dvo
);

180 
	}
}

182 
	$mpc52xx_gpiochù_ªmove
(
∂©f‹m_devi˚
 *
ofdev
)

184  -
EBUSY
;

185 
	}
}

187 c⁄° 
of_devi˚_id
 
	gmpc52xx_wkup_gpiochù_m©ch
[] = {

188 { .
com∑tibÀ
 = "fsl,mpc5200-gpio-wkup", },

192 
∂©f‹m_drivî
 
	gmpc52xx_wkup_gpiochù_drivî
 = {

193 .
drivî
 = {

194 .
«me
 = "mpc5200-gpio-wkup",

195 .
	gow√r
 = 
THIS_MODULE
,

196 .
	gof_m©ch_èbÀ
 = 
mpc52xx_wkup_gpiochù_m©ch
,

198 .
	g¥obe
 = 
mpc52xx_wkup_gpiochù_¥obe
,

199 .
	gªmove
 = 
mpc52xx_gpiochù_ªmove
,

219 
	$mpc52xx_sim∂e_gpio_gë
(
gpio_chù
 *
gc
, 
gpio
)

221 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

222 
mpc52xx_gpio
 
__iomem
 *
ªgs
 = 
mm_gc
->regs;

223 
ªt
;

225 
ªt
 = (
	`ö_be32
(&
ªgs
->
sim∂e_ivÆ
Ë>> (31 - 
gpio
)) & 1;

227  
ªt
;

228 
	}
}

230 
ölöe
 

231 
	$__mpc52xx_sim∂e_gpio_£t
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

233 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

234 
mpc52xx_gpiochù
 *
chù
 = 
	`c⁄èöî_of
(
mm_gc
,

235 
mpc52xx_gpiochù
, 
mmchù
);

236 
mpc52xx_gpio
 
__iomem
 *
ªgs
 = 
mm_gc
->regs;

238 i‡(
vÆ
)

239 
chù
->
shadow_dvo
 |1 << (31 - 
gpio
);

241 
chù
->
shadow_dvo
 &~(1 << (31 - 
gpio
));

242 
	`out_be32
(&
ªgs
->
sim∂e_dvo
, 
chù
->
shadow_dvo
);

243 
	}
}

246 
	$mpc52xx_sim∂e_gpio_£t
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

248 
Êags
;

250 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

252 
	`__mpc52xx_sim∂e_gpio_£t
(
gc
, 
gpio
, 
vÆ
);

254 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

256 
	`¥_debug
("%s: gpio: %d vÆ: %d\n", 
__func__
, 
gpio
, 
vÆ
);

257 
	}
}

259 
	$mpc52xx_sim∂e_gpio_dú_ö
(
gpio_chù
 *
gc
, 
gpio
)

261 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

262 
mpc52xx_gpiochù
 *
chù
 = 
	`c⁄èöî_of
(
mm_gc
,

263 
mpc52xx_gpiochù
, 
mmchù
);

264 
mpc52xx_gpio
 
__iomem
 *
ªgs
 = 
mm_gc
->regs;

265 
Êags
;

267 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

270 
chù
->
shadow_ddr
 &~(1 << (31 - 
gpio
));

271 
	`out_be32
(&
ªgs
->
sim∂e_ddr
, 
chù
->
shadow_ddr
);

274 
chù
->
shadow_gpi€
 |1 << (31 - 
gpio
);

275 
	`out_be32
(&
ªgs
->
sim∂e_gpi€
, 
chù
->
shadow_gpi€
);

277 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

280 
	}
}

283 
	$mpc52xx_sim∂e_gpio_dú_out
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

285 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

286 
mpc52xx_gpiochù
 *
chù
 = 
	`c⁄èöî_of
(
mm_gc
,

287 
mpc52xx_gpiochù
, 
mmchù
);

288 
mpc52xx_gpio
 
__iomem
 *
ªgs
 = 
mm_gc
->regs;

289 
Êags
;

291 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

294 
	`__mpc52xx_sim∂e_gpio_£t
(
gc
, 
gpio
, 
vÆ
);

297 
chù
->
shadow_ddr
 |1 << (31 - 
gpio
);

298 
	`out_be32
(&
ªgs
->
sim∂e_ddr
, 
chù
->
shadow_ddr
);

301 
chù
->
shadow_gpi€
 |1 << (31 - 
gpio
);

302 
	`out_be32
(&
ªgs
->
sim∂e_gpi€
, 
chù
->
shadow_gpi€
);

304 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

306 
	`¥_debug
("%s: gpio: %d vÆ: %d\n", 
__func__
, 
gpio
, 
vÆ
);

309 
	}
}

311 
	$mpc52xx_sim∂e_gpiochù_¥obe
(
∂©f‹m_devi˚
 *
ofdev
)

313 
mpc52xx_gpiochù
 *
chù
;

314 
gpio_chù
 *
gc
;

315 
mpc52xx_gpio
 
__iomem
 *
ªgs
;

316 
ªt
;

318 
chù
 = 
	`kzÆloc
((*chù), 
GFP_KERNEL
);

319 i‡(!
chù
)

320  -
ENOMEM
;

322 
gc
 = &
chù
->
mmchù
.gc;

324 
gc
->
ngpio
 = 32;

325 
gc
->
dúe˘i⁄_öput
 = 
mpc52xx_sim∂e_gpio_dú_ö
;

326 
gc
->
dúe˘i⁄_ouçut
 = 
mpc52xx_sim∂e_gpio_dú_out
;

327 
gc
->
gë
 = 
mpc52xx_sim∂e_gpio_gë
;

328 
gc
->
£t
 = 
mpc52xx_sim∂e_gpio_£t
;

330 
ªt
 = 
	`of_mm_gpiochù_add
(
ofdev
->
dev
.
of_node
, &
chù
->
mmchù
);

331 i‡(
ªt
)

332  
ªt
;

334 
ªgs
 = 
chù
->
mmchù
.regs;

335 
chù
->
shadow_gpi€
 = 
	`ö_be32
(&
ªgs
->
sim∂e_gpi€
);

336 
chù
->
shadow_ddr
 = 
	`ö_be32
(&
ªgs
->
sim∂e_ddr
);

337 
chù
->
shadow_dvo
 = 
	`ö_be32
(&
ªgs
->
sim∂e_dvo
);

340 
	}
}

342 c⁄° 
of_devi˚_id
 
	gmpc52xx_sim∂e_gpiochù_m©ch
[] = {

343 { .
com∑tibÀ
 = "fsl,mpc5200-gpio", },

347 
∂©f‹m_drivî
 
	gmpc52xx_sim∂e_gpiochù_drivî
 = {

348 .
drivî
 = {

349 .
«me
 = "mpc5200-gpio",

350 .
	gow√r
 = 
THIS_MODULE
,

351 .
	gof_m©ch_èbÀ
 = 
mpc52xx_sim∂e_gpiochù_m©ch
,

353 .
	g¥obe
 = 
mpc52xx_sim∂e_gpiochù_¥obe
,

354 .
	gªmove
 = 
mpc52xx_gpiochù_ªmove
,

357 
__öô
 
	$mpc52xx_gpio_öô
()

359 i‡(
	`∂©f‹m_drivî_ªgi°î
(&
mpc52xx_wkup_gpiochù_drivî
))

360 
	`¥ötk
(
KERN_ERR
 "UnableÅoÑegister wakeup GPIO driver\n");

362 i‡(
	`∂©f‹m_drivî_ªgi°î
(&
mpc52xx_sim∂e_gpiochù_drivî
))

363 
	`¥ötk
(
KERN_ERR
 "UnableÅoÑegister simple GPIO driver\n");

366 
	}
}

370 
subsys_öôˇŒ
(
mpc52xx_gpio_öô
);

374 
MODULE_DESCRIPTION
("Freescale MPC52xx gpio driver");

375 
MODULE_AUTHOR
("Sascha Hauer <s.hauer@pengutronix.de");

376 
MODULE_LICENSE
("GPL v2");

	@gpio-mpc8xxx.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/•ölock.h
>

14 
	~<löux/io.h
>

15 
	~<löux/of.h
>

16 
	~<löux/of_gpio.h
>

17 
	~<löux/gpio.h
>

18 
	~<löux/¶ab.h
>

19 
	~<löux/úq.h
>

21 
	#MPC8XXX_GPIO_PINS
 32

	)

23 
	#GPIO_DIR
 0x00

	)

24 
	#GPIO_ODR
 0x04

	)

25 
	#GPIO_DAT
 0x08

	)

26 
	#GPIO_IER
 0x0c

	)

27 
	#GPIO_IMR
 0x10

	)

28 
	#GPIO_ICR
 0x14

	)

29 
	#GPIO_ICR2
 0x18

	)

31 
	smpc8xxx_gpio_chù
 {

32 
of_mm_gpio_chù
 
	mmm_gc
;

33 
•ölock_t
 
	mlock
;

39 
u32
 
	md©a
;

40 
úq_domaö
 *
	múq
;

41 c⁄° *
	mof_dev_id_d©a
;

44 
ölöe
 
u32
 
	$mpc8xxx_gpio2mask
(
gpio
)

46  1u << (
MPC8XXX_GPIO_PINS
 - 1 - 
gpio
);

47 
	}
}

49 
ölöe
 
mpc8xxx_gpio_chù
 *

50 
	$to_mpc8xxx_gpio_chù
(
of_mm_gpio_chù
 *
mm
)

52  
	`c⁄èöî_of
(
mm
, 
mpc8xxx_gpio_chù
, 
mm_gc
);

53 
	}
}

55 
	$mpc8xxx_gpio_ßve_ªgs
(
of_mm_gpio_chù
 *
mm
)

57 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`to_mpc8xxx_gpio_chù
(
mm
);

59 
mpc8xxx_gc
->
d©a
 = 
	`ö_be32
(
mm
->
ªgs
 + 
GPIO_DAT
);

60 
	}
}

67 
	$mpc8572_gpio_gë
(
gpio_chù
 *
gc
, 
gpio
)

69 
u32
 
vÆ
;

70 
of_mm_gpio_chù
 *
mm
 = 
	`to_of_mm_gpio_chù
(
gc
);

71 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`to_mpc8xxx_gpio_chù
(
mm
);

72 
u32
 
out_mask
, 
out_shadow
;

74 
out_mask
 = 
	`ö_be32
(
mm
->
ªgs
 + 
GPIO_DIR
);

76 
vÆ
 = 
	`ö_be32
(
mm
->
ªgs
 + 
GPIO_DAT
Ë& ~
out_mask
;

77 
out_shadow
 = 
mpc8xxx_gc
->
d©a
 & 
out_mask
;

79  (
vÆ
 | 
out_shadow
Ë& 
	`mpc8xxx_gpio2mask
(
gpio
);

80 
	}
}

82 
	$mpc8xxx_gpio_gë
(
gpio_chù
 *
gc
, 
gpio
)

84 
of_mm_gpio_chù
 *
mm
 = 
	`to_of_mm_gpio_chù
(
gc
);

86  
	`ö_be32
(
mm
->
ªgs
 + 
GPIO_DAT
Ë& 
	`mpc8xxx_gpio2mask
(
gpio
);

87 
	}
}

89 
	$mpc8xxx_gpio_£t
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

91 
of_mm_gpio_chù
 *
mm
 = 
	`to_of_mm_gpio_chù
(
gc
);

92 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`to_mpc8xxx_gpio_chù
(
mm
);

93 
Êags
;

95 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

97 i‡(
vÆ
)

98 
mpc8xxx_gc
->
d©a
 |
	`mpc8xxx_gpio2mask
(
gpio
);

100 
mpc8xxx_gc
->
d©a
 &~
	`mpc8xxx_gpio2mask
(
gpio
);

102 
	`out_be32
(
mm
->
ªgs
 + 
GPIO_DAT
, 
mpc8xxx_gc
->
d©a
);

104 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

105 
	}
}

107 
	$mpc8xxx_gpio_dú_ö
(
gpio_chù
 *
gc
, 
gpio
)

109 
of_mm_gpio_chù
 *
mm
 = 
	`to_of_mm_gpio_chù
(
gc
);

110 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`to_mpc8xxx_gpio_chù
(
mm
);

111 
Êags
;

113 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

115 
	`˛rbôs32
(
mm
->
ªgs
 + 
GPIO_DIR
, 
	`mpc8xxx_gpio2mask
(
gpio
));

117 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

120 
	}
}

122 
	$mpc8xxx_gpio_dú_out
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

124 
of_mm_gpio_chù
 *
mm
 = 
	`to_of_mm_gpio_chù
(
gc
);

125 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`to_mpc8xxx_gpio_chù
(
mm
);

126 
Êags
;

128 
	`mpc8xxx_gpio_£t
(
gc
, 
gpio
, 
vÆ
);

130 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

132 
	`£tbôs32
(
mm
->
ªgs
 + 
GPIO_DIR
, 
	`mpc8xxx_gpio2mask
(
gpio
));

134 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

137 
	}
}

139 
	$mpc5121_gpio_dú_out
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

142 i‡(
gpio
 >= 28)

143  -
EINVAL
;

145  
	`mpc8xxx_gpio_dú_out
(
gc
, 
gpio
, 
vÆ
);

146 
	}
}

148 
	$mpc8xxx_gpio_to_úq
(
gpio_chù
 *
gc
, 
off£t
)

150 
of_mm_gpio_chù
 *
mm
 = 
	`to_of_mm_gpio_chù
(
gc
);

151 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`to_mpc8xxx_gpio_chù
(
mm
);

153 i‡(
mpc8xxx_gc
->
úq
 && 
off£t
 < 
MPC8XXX_GPIO_PINS
)

154  
	`úq_¸óã_m≠pög
(
mpc8xxx_gc
->
úq
, 
off£t
);

156  -
ENXIO
;

157 
	}
}

159 
	$mpc8xxx_gpio_úq_ˇsˇde
(
úq
, 
úq_desc
 *
desc
)

161 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`úq_desc_gë_h™dÀr_d©a
(
desc
);

162 
úq_chù
 *
chù
 = 
	`úq_desc_gë_chù
(
desc
);

163 
of_mm_gpio_chù
 *
mm
 = &
mpc8xxx_gc
->
mm_gc
;

164 
mask
;

166 
mask
 = 
	`ö_be32
(
mm
->
ªgs
 + 
GPIO_IER
Ë& in_be32(mm->ªg†+ 
GPIO_IMR
);

167 i‡(
mask
)

168 
	`gíîic_h™dÀ_úq
(
	`úq_löór_ªvm≠
(
mpc8xxx_gc
->
úq
,

169 32 - 
	`ffs
(
mask
)));

170 i‡(
chù
->
úq_eoi
)

171 
chù
->
	`úq_eoi
(&
desc
->
úq_d©a
);

172 
	}
}

174 
	$mpc8xxx_úq_unmask
(
úq_d©a
 *
d
)

176 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

177 
of_mm_gpio_chù
 *
mm
 = &
mpc8xxx_gc
->
mm_gc
;

178 
Êags
;

180 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

182 
	`£tbôs32
(
mm
->
ªgs
 + 
GPIO_IMR
, 
	`mpc8xxx_gpio2mask
(
	`úqd_to_hwúq
(
d
)));

184 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

185 
	}
}

187 
	$mpc8xxx_úq_mask
(
úq_d©a
 *
d
)

189 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

190 
of_mm_gpio_chù
 *
mm
 = &
mpc8xxx_gc
->
mm_gc
;

191 
Êags
;

193 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

195 
	`˛rbôs32
(
mm
->
ªgs
 + 
GPIO_IMR
, 
	`mpc8xxx_gpio2mask
(
	`úqd_to_hwúq
(
d
)));

197 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

198 
	}
}

200 
	$mpc8xxx_úq_ack
(
úq_d©a
 *
d
)

202 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

203 
of_mm_gpio_chù
 *
mm
 = &
mpc8xxx_gc
->
mm_gc
;

205 
	`out_be32
(
mm
->
ªgs
 + 
GPIO_IER
, 
	`mpc8xxx_gpio2mask
(
	`úqd_to_hwúq
(
d
)));

206 
	}
}

208 
	$mpc8xxx_úq_£t_ty≥
(
úq_d©a
 *
d
, 
Êow_ty≥
)

210 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

211 
of_mm_gpio_chù
 *
mm
 = &
mpc8xxx_gc
->
mm_gc
;

212 
Êags
;

214 
Êow_ty≥
) {

215 
IRQ_TYPE_EDGE_FALLING
:

216 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

217 
	`£tbôs32
(
mm
->
ªgs
 + 
GPIO_ICR
,

218 
	`mpc8xxx_gpio2mask
(
	`úqd_to_hwúq
(
d
)));

219 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

222 
IRQ_TYPE_EDGE_BOTH
:

223 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

224 
	`˛rbôs32
(
mm
->
ªgs
 + 
GPIO_ICR
,

225 
	`mpc8xxx_gpio2mask
(
	`úqd_to_hwúq
(
d
)));

226 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

230  -
EINVAL
;

234 
	}
}

236 
	$mpc512x_úq_£t_ty≥
(
úq_d©a
 *
d
, 
Êow_ty≥
)

238 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

239 
of_mm_gpio_chù
 *
mm
 = &
mpc8xxx_gc
->
mm_gc
;

240 
gpio
 = 
	`úqd_to_hwúq
(
d
);

241 
__iomem
 *
ªg
;

242 
shi·
;

243 
Êags
;

245 i‡(
gpio
 < 16) {

246 
ªg
 = 
mm
->
ªgs
 + 
GPIO_ICR
;

247 
shi·
 = (15 - 
gpio
) * 2;

249 
ªg
 = 
mm
->
ªgs
 + 
GPIO_ICR2
;

250 
shi·
 = (15 - (
gpio
 % 16)) * 2;

253 
Êow_ty≥
) {

254 
IRQ_TYPE_EDGE_FALLING
:

255 
IRQ_TYPE_LEVEL_LOW
:

256 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

257 
	`˛r£tbôs_be32
(
ªg
, 3 << 
shi·
, 2 << shift);

258 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

261 
IRQ_TYPE_EDGE_RISING
:

262 
IRQ_TYPE_LEVEL_HIGH
:

263 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

264 
	`˛r£tbôs_be32
(
ªg
, 3 << 
shi·
, 1 << shift);

265 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

268 
IRQ_TYPE_EDGE_BOTH
:

269 
	`•ö_lock_úqßve
(&
mpc8xxx_gc
->
lock
, 
Êags
);

270 
	`˛rbôs32
(
ªg
, 3 << 
shi·
);

271 
	`•ö_u∆ock_úqª°‹e
(&
mpc8xxx_gc
->
lock
, 
Êags
);

275  -
EINVAL
;

279 
	}
}

281 
úq_chù
 
	gmpc8xxx_úq_chù
 = {

282 .
«me
 = "mpc8xxx-gpio",

283 .
	gúq_unmask
 = 
mpc8xxx_úq_unmask
,

284 .
	gúq_mask
 = 
mpc8xxx_úq_mask
,

285 .
	gúq_ack
 = 
mpc8xxx_úq_ack
,

286 .
	gúq_£t_ty≥
 = 
mpc8xxx_úq_£t_ty≥
,

289 
	$mpc8xxx_gpio_úq_m≠
(
úq_domaö
 *
h
, 
vúq
,

290 
úq_hw_numbî_t
 
hw
)

292 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
 = 
h
->
ho°_d©a
;

294 i‡(
mpc8xxx_gc
->
of_dev_id_d©a
)

295 
mpc8xxx_úq_chù
.
úq_£t_ty≥
 = 
mpc8xxx_gc
->
of_dev_id_d©a
;

297 
	`úq_£t_chù_d©a
(
vúq
, 
h
->
ho°_d©a
);

298 
	`úq_£t_chù_™d_h™dÀr
(
vúq
, &
mpc8xxx_úq_chù
, 
h™dÀ_Àvñ_úq
);

301 
	}
}

303 
úq_domaö_›s
 
	gmpc8xxx_gpio_úq_›s
 = {

304 .
m≠
 = 
mpc8xxx_gpio_úq_m≠
,

305 .
	gxœã
 = 
úq_domaö_xœã_two˚Œ
,

308 
of_devi˚_id
 
	gmpc8xxx_gpio_ids
[] 
	g__öôd©a
 = {

309 { .
com∑tibÀ
 = "fsl,mpc8349-gpio", },

310 { .
	gcom∑tibÀ
 = "fsl,mpc8572-gpio", },

311 { .
	gcom∑tibÀ
 = "fsl,mpc8610-gpio", },

312 { .
	gcom∑tibÀ
 = "f¶,mpc5121-gpio", .
	gd©a
 = 
mpc512x_úq_£t_ty≥
, },

313 { .
	gcom∑tibÀ
 = "fsl,pq3-gpio", },

314 { .
	gcom∑tibÀ
 = "fsl,qoriq-gpio", },

318 
__öô
 
	$mpc8xxx_add_c⁄åﬁÀr
(
devi˚_node
 *
≈
)

320 
mpc8xxx_gpio_chù
 *
mpc8xxx_gc
;

321 
of_mm_gpio_chù
 *
mm_gc
;

322 
gpio_chù
 *
gc
;

323 c⁄° 
of_devi˚_id
 *
id
;

324 
hwúq
;

325 
ªt
;

327 
mpc8xxx_gc
 = 
	`kzÆloc
((*mpc8xxx_gc), 
GFP_KERNEL
);

328 i‡(!
mpc8xxx_gc
) {

329 
ªt
 = -
ENOMEM
;

330 
îr
;

333 
	`•ö_lock_öô
(&
mpc8xxx_gc
->
lock
);

335 
mm_gc
 = &
mpc8xxx_gc
->mm_gc;

336 
gc
 = &
mm_gc
->gc;

338 
mm_gc
->
ßve_ªgs
 = 
mpc8xxx_gpio_ßve_ªgs
;

339 
gc
->
ngpio
 = 
MPC8XXX_GPIO_PINS
;

340 
gc
->
dúe˘i⁄_öput
 = 
mpc8xxx_gpio_dú_ö
;

341 
gc
->
dúe˘i⁄_ouçut
 = 
	`of_devi˚_is_com∑tibÀ
(
≈
, "fsl,mpc5121-gpio") ?

342 
mpc5121_gpio_dú_out
 : 
mpc8xxx_gpio_dú_out
;

343 
gc
->
gë
 = 
	`of_devi˚_is_com∑tibÀ
(
≈
, "fsl,mpc8572-gpio") ?

344 
mpc8572_gpio_gë
 : 
mpc8xxx_gpio_gë
;

345 
gc
->
£t
 = 
mpc8xxx_gpio_£t
;

346 
gc
->
to_úq
 = 
mpc8xxx_gpio_to_úq
;

348 
ªt
 = 
	`of_mm_gpiochù_add
(
≈
, 
mm_gc
);

349 i‡(
ªt
)

350 
îr
;

352 
hwúq
 = 
	`úq_of_∑r£_™d_m≠
(
≈
, 0);

353 i‡(
hwúq
 =
NO_IRQ
)

354 
skù_úq
;

356 
mpc8xxx_gc
->
úq
 = 
	`úq_domaö_add_löór
(
≈
, 
MPC8XXX_GPIO_PINS
,

357 &
mpc8xxx_gpio_úq_›s
, 
mpc8xxx_gc
);

358 i‡(!
mpc8xxx_gc
->
úq
)

359 
skù_úq
;

361 
id
 = 
	`of_m©ch_node
(
mpc8xxx_gpio_ids
, 
≈
);

362 i‡(
id
)

363 
mpc8xxx_gc
->
of_dev_id_d©a
 = 
id
->
d©a
;

366 
	`out_be32
(
mm_gc
->
ªgs
 + 
GPIO_IER
, 0xffffffff);

367 
	`out_be32
(
mm_gc
->
ªgs
 + 
GPIO_IMR
, 0);

369 
	`úq_£t_h™dÀr_d©a
(
hwúq
, 
mpc8xxx_gc
);

370 
	`úq_£t_chaöed_h™dÀr
(
hwúq
, 
mpc8xxx_gpio_úq_ˇsˇde
);

372 
skù_úq
:

375 
îr
:

376 
	`¥_îr
("%s:Ñegistration failed with status %d\n",

377 
≈
->
fuŒ_«me
, 
ªt
);

378 
	`k‰ì
(
mpc8xxx_gc
);

381 
	}
}

383 
__öô
 
	$mpc8xxx_add_gpiochùs
()

385 
devi˚_node
 *
≈
;

387 
	`f‹_óch_m©chög_node
(
≈
, 
mpc8xxx_gpio_ids
)

388 
	`mpc8xxx_add_c⁄åﬁÀr
(
≈
);

391 
	}
}

392 
¨ch_öôˇŒ
(
mpc8xxx_add_gpiochùs
);

	@gpio-msic.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/¶ab.h
>

26 
	~<löux/öãºu±.h
>

27 
	~<löux/öô.h
>

28 
	~<löux/gpio.h
>

29 
	~<löux/∂©f‹m_devi˚.h
>

30 
	~<löux/mfd/öãl_msic.h
>

33 
	#MSIC_GPIO_IRQ_OFFSET
 0x100

	)

35 
	#MSIC_GPIO_DIR_IN
 0

	)

36 
	#MSIC_GPIO_DIR_OUT
 
	`BIT
(5)

	)

37 
	#MSIC_GPIO_TRIG_FALL
 
	`BIT
(1)

	)

38 
	#MSIC_GPIO_TRIG_RISE
 
	`BIT
(2)

	)

41 
	#MSIC_GPIO_DIR_MASK
 
	`BIT
(5)

	)

42 
	#MSIC_GPIO_DRV_MASK
 
	`BIT
(4)

	)

43 
	#MSIC_GPIO_REN_MASK
 
	`BIT
(3)

	)

44 
	#MSIC_GPIO_RVAL_MASK
 (
	`BIT
(2Ë| BIT(1))

	)

45 
	#MSIC_GPIO_DOUT_MASK
 
	`BIT
(0)

	)

48 
	#MSIC_GPIO_GLBYP_MASK
 
	`BIT
(5)

	)

49 
	#MSIC_GPIO_DBNC_MASK
 (
	`BIT
(4Ë| BIT(3))

	)

50 
	#MSIC_GPIO_INTCNT_MASK
 (
	`BIT
(2Ë| BIT(1))

	)

51 
	#MSIC_GPIO_DIN_MASK
 
	`BIT
(0)

	)

53 
	#MSIC_NUM_GPIO
 24

	)

55 
	smsic_gpio
 {

56 
∂©f‹m_devi˚
 *
	mpdev
;

57 
muãx
 
	mbu¶ock
;

58 
gpio_chù
 
	mchù
;

59 
	múq
;

60 
	múq_ba£
;

61 
	måig_ch™ge_mask
;

62 
	måig_ty≥
;

75 
	$msic_gpio_to_úeg
(
off£t
)

77 i‡(
off£t
 >
MSIC_NUM_GPIO
)

78  -
EINVAL
;

80 i‡(
off£t
 < 8)

81  
INTEL_MSIC_GPIO0LV0CTLI
 - 
off£t
;

82 i‡(
off£t
 < 16)

83  
INTEL_MSIC_GPIO1LV0CTLI
 - 
off£t
 + 8;

84 i‡(
off£t
 < 20)

85  
INTEL_MSIC_GPIO0HV0CTLI
 - 
off£t
 + 16;

87  
INTEL_MSIC_GPIO1HV0CTLI
 - 
off£t
 + 20;

88 
	}
}

90 
	$msic_gpio_to_‹eg
(
off£t
)

92 i‡(
off£t
 >
MSIC_NUM_GPIO
)

93  -
EINVAL
;

95 i‡(
off£t
 < 8)

96  
INTEL_MSIC_GPIO0LV0CTLO
 - 
off£t
;

97 i‡(
off£t
 < 16)

98  
INTEL_MSIC_GPIO1LV0CTLO
 - 
off£t
 + 8;

99 i‡(
off£t
 < 20)

100  
INTEL_MSIC_GPIO0HV0CTLO
 - 
off£t
 + 16;

102  
INTEL_MSIC_GPIO1HV0CTLO
 - 
off£t
 + 20;

103 
	}
}

105 
	$msic_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

107 
ªg
;

109 
ªg
 = 
	`msic_gpio_to_‹eg
(
off£t
);

110 i‡(
ªg
 < 0)

111  
ªg
;

113  
	`öãl_msic_ªg_upd©e
(
ªg
, 
MSIC_GPIO_DIR_IN
, 
MSIC_GPIO_DIR_MASK
);

114 
	}
}

116 
	$msic_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

117 
off£t
, 
vÆue
)

119 
ªg
;

120 
mask
;

122 
vÆue
 = (!!vÆueË| 
MSIC_GPIO_DIR_OUT
;

123 
mask
 = 
MSIC_GPIO_DIR_MASK
 | 
MSIC_GPIO_DOUT_MASK
;

125 
ªg
 = 
	`msic_gpio_to_‹eg
(
off£t
);

126 i‡(
ªg
 < 0)

127  
ªg
;

129  
	`öãl_msic_ªg_upd©e
(
ªg
, 
vÆue
, 
mask
);

130 
	}
}

132 
	$msic_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

134 
u8
 
r
;

135 
ªt
;

136 
ªg
;

138 
ªg
 = 
	`msic_gpio_to_úeg
(
off£t
);

139 i‡(
ªg
 < 0)

140  
ªg
;

142 
ªt
 = 
	`öãl_msic_ªg_ªad
(
ªg
, &
r
);

143 i‡(
ªt
 < 0)

144  
ªt
;

146  
r
 & 
MSIC_GPIO_DIN_MASK
;

147 
	}
}

149 
	$msic_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

151 
ªg
;

153 
ªg
 = 
	`msic_gpio_to_‹eg
(
off£t
);

154 i‡(
ªg
 < 0)

157 
	`öãl_msic_ªg_upd©e
(
ªg
, !!
vÆue
 , 
MSIC_GPIO_DOUT_MASK
);

158 
	}
}

165 
	$msic_úq_ty≥
(
úq_d©a
 *
d©a
, 
ty≥
)

167 
msic_gpio
 *
mg
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

168 
u32
 
gpio
 = 
d©a
->
úq
 - 
mg
->
úq_ba£
;

170 i‡(
gpio
 >
mg
->
chù
.
ngpio
)

171  -
EINVAL
;

174 
mg
->
åig_ch™ge_mask
 |(1 << 
gpio
);

175 
mg
->
åig_ty≥
 = 
ty≥
;

178 
	}
}

180 
	$msic_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

182 
msic_gpio
 *
mg
 = 
	`c⁄èöî_of
(
chù
, msic_gpio, chip);

183  
mg
->
úq_ba£
 + 
off£t
;

184 
	}
}

186 
	$msic_bus_lock
(
úq_d©a
 *
d©a
)

188 
msic_gpio
 *
mg
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

189 
	`muãx_lock
(&
mg
->
bu¶ock
);

190 
	}
}

192 
	$msic_bus_sync_u∆ock
(
úq_d©a
 *
d©a
)

194 
msic_gpio
 *
mg
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

195 
off£t
;

196 
ªg
;

197 
u8
 
åig
 = 0;

202 i‡(
mg
->
åig_ch™ge_mask
) {

203 
off£t
 = 
	`__ffs
(
mg
->
åig_ch™ge_mask
);

205 
ªg
 = 
	`msic_gpio_to_úeg
(
off£t
);

206 i‡(
ªg
 < 0)

207 
out
;

209 i‡(
mg
->
åig_ty≥
 & 
IRQ_TYPE_EDGE_RISING
)

210 
åig
 |
MSIC_GPIO_TRIG_RISE
;

211 i‡(
mg
->
åig_ty≥
 & 
IRQ_TYPE_EDGE_FALLING
)

212 
åig
 |
MSIC_GPIO_TRIG_FALL
;

214 
	`öãl_msic_ªg_upd©e
(
ªg
, 
åig
, 
MSIC_GPIO_INTCNT_MASK
);

215 
mg
->
åig_ch™ge_mask
 = 0;

217 
out
:

218 
	`muãx_u∆ock
(&
mg
->
bu¶ock
);

219 
	}
}

222 
	$msic_úq_unmask
(
úq_d©a
 *
d©a
Ë{ 
	}
}

224 
	$msic_úq_mask
(
úq_d©a
 *
d©a
Ë{ 
	}
}

226 
úq_chù
 
	gmsic_úqchù
 = {

227 .
«me
 = "MSIC-GPIO",

228 .
	gúq_mask
 = 
msic_úq_mask
,

229 .
	gúq_unmask
 = 
msic_úq_unmask
,

230 .
	gúq_£t_ty≥
 = 
msic_úq_ty≥
,

231 .
	gúq_bus_lock
 = 
msic_bus_lock
,

232 .
	gúq_bus_sync_u∆ock
 = 
msic_bus_sync_u∆ock
,

235 
	$msic_gpio_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

237 
úq_d©a
 *
d©a
 = 
	`úq_desc_gë_úq_d©a
(
desc
);

238 
msic_gpio
 *
mg
 = 
	`úq_d©a_gë_úq_h™dÀr_d©a
(
d©a
);

239 
úq_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù
(
d©a
);

240 
öãl_msic
 *
msic
 = 
	`pdev_to_öãl_msic
(
mg
->
pdev
);

241 
i
;

242 
bôƒ
;

243 
u8
 
pö
;

244 
≥ndög
 = 0;

246 
i
 = 0; i < (
mg
->
chù
.
ngpio
 / 
BITS_PER_BYTE
); i++) {

247 
	`öãl_msic_úq_ªad
(
msic
, 
INTEL_MSIC_GPIO0LVIRQ
 + 
i
, &
pö
);

248 
≥ndög
 = 
pö
;

250 i‡(
≥ndög
) {

251 
	`f‹_óch_£t_bô
(
bôƒ
, &
≥ndög
, 
BITS_PER_BYTE
)

252 
	`gíîic_h™dÀ_úq
(
mg
->
úq_ba£
 +

253 (
i
 * 
BITS_PER_BYTE
Ë+ 
bôƒ
);

256 
chù
->
	`úq_eoi
(
d©a
);

257 
	}
}

259 
	$∂©f‹m_msic_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

261 
devi˚
 *
dev
 = &
pdev
->dev;

262 
öãl_msic_gpio_pd©a
 *
pd©a
 = 
dev
->
∂©f‹m_d©a
;

263 
msic_gpio
 *
mg
;

264 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

265 
ªtvÆ
;

266 
i
;

268 i‡(
úq
 < 0) {

269 
	`dev_îr
(
dev
, "no IRQÜine\n");

270  -
EINVAL
;

273 i‡(!
pd©a
 || !pd©a->
gpio_ba£
) {

274 
	`dev_îr
(
dev
, "incorrect or missingÖlatform data\n");

275  -
EINVAL
;

278 
mg
 = 
	`kzÆloc
((*mg), 
GFP_KERNEL
);

279 i‡(!
mg
)

280  -
ENOMEM
;

282 
	`dev_£t_drvd©a
(
dev
, 
mg
);

284 
mg
->
pdev
 =Ödev;

285 
mg
->
úq
 = irq;

286 
mg
->
úq_ba£
 = 
pd©a
->
gpio_ba£
 + 
MSIC_GPIO_IRQ_OFFSET
;

287 
mg
->
chù
.
œbñ
 = "msic_gpio";

288 
mg
->
chù
.
dúe˘i⁄_öput
 = 
msic_gpio_dúe˘i⁄_öput
;

289 
mg
->
chù
.
dúe˘i⁄_ouçut
 = 
msic_gpio_dúe˘i⁄_ouçut
;

290 
mg
->
chù
.
gë
 = 
msic_gpio_gë
;

291 
mg
->
chù
.
£t
 = 
msic_gpio_£t
;

292 
mg
->
chù
.
to_úq
 = 
msic_gpio_to_úq
;

293 
mg
->
chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

294 
mg
->
chù
.
ngpio
 = 
MSIC_NUM_GPIO
;

295 
mg
->
chù
.
ˇn_¶ìp
 = 1;

296 
mg
->
chù
.
dev
 = dev;

298 
	`muãx_öô
(&
mg
->
bu¶ock
);

300 
ªtvÆ
 = 
	`gpiochù_add
(&
mg
->
chù
);

301 i‡(
ªtvÆ
) {

302 
	`dev_îr
(
dev
, "Adding MSIC gpio chip failed\n");

303 
îr
;

306 
i
 = 0; i < 
mg
->
chù
.
ngpio
; i++) {

307 
	`úq_£t_chù_d©a
(
i
 + 
mg
->
úq_ba£
, mg);

308 
	`úq_£t_chù_™d_h™dÀr_«me
(
i
 + 
mg
->
úq_ba£
,

309 &
msic_úqchù
,

310 
h™dÀ_sim∂e_úq
,

313 
	`úq_£t_chaöed_h™dÀr
(
mg
->
úq
, 
msic_gpio_úq_h™dÀr
);

314 
	`úq_£t_h™dÀr_d©a
(
mg
->
úq
, mg);

317 
îr
:

318 
	`k‰ì
(
mg
);

319  
ªtvÆ
;

320 
	}
}

322 
∂©f‹m_drivî
 
	g∂©f‹m_msic_gpio_drivî
 = {

323 .
drivî
 = {

324 .
«me
 = "msic_gpio",

325 .
	gow√r
 = 
THIS_MODULE
,

327 .
	g¥obe
 = 
∂©f‹m_msic_gpio_¥obe
,

330 
__öô
 
	$∂©f‹m_msic_gpio_öô
()

332  
	`∂©f‹m_drivî_ªgi°î
(&
∂©f‹m_msic_gpio_drivî
);

333 
	}
}

335 
subsys_öôˇŒ
(
∂©f‹m_msic_gpio_öô
);

337 
MODULE_AUTHOR
("Mathias Nyman <mathias.nyman@linux.intel.com>");

338 
MODULE_DESCRIPTION
("Intel Medfield MSIC GPIO driver");

339 
MODULE_LICENSE
("GPL v2");

	@gpio-msm-v1.c

16 
	~<löux/bô›s.h
>

17 
	~<löux/gpio.h
>

18 
	~<löux/öãºu±.h
>

19 
	~<löux/io.h
>

20 
	~<löux/úq.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/devi˚.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<mach/msm_gpiomux.h
>

38 
	#MSM_GPIO1_REG
(
off
Ë(off)

	)

39 
	#MSM_GPIO2_REG
(
off
Ë(off)

	)

40 
	#MSM_GPIO1_SHADOW_REG
(
off
Ë(off)

	)

41 
	#MSM_GPIO2_SHADOW_REG
(
off
Ë(off)

	)

47 
	#MSM7X00_GPIO_OUT_0
 
	`MSM_GPIO1_SHADOW_REG
(0x00Ë

	)

48 
	#MSM7X00_GPIO_OUT_1
 
	`MSM_GPIO2_SHADOW_REG
(0x00Ë

	)

49 
	#MSM7X00_GPIO_OUT_2
 
	`MSM_GPIO1_SHADOW_REG
(0x04Ë

	)

50 
	#MSM7X00_GPIO_OUT_3
 
	`MSM_GPIO1_SHADOW_REG
(0x08Ë

	)

51 
	#MSM7X00_GPIO_OUT_4
 
	`MSM_GPIO1_SHADOW_REG
(0x0CË

	)

52 
	#MSM7X00_GPIO_OUT_5
 
	`MSM_GPIO1_SHADOW_REG
(0x50Ë

	)

55 
	#MSM7X00_GPIO_OE_0
 
	`MSM_GPIO1_SHADOW_REG
(0x10)

	)

56 
	#MSM7X00_GPIO_OE_1
 
	`MSM_GPIO2_SHADOW_REG
(0x08)

	)

57 
	#MSM7X00_GPIO_OE_2
 
	`MSM_GPIO1_SHADOW_REG
(0x14)

	)

58 
	#MSM7X00_GPIO_OE_3
 
	`MSM_GPIO1_SHADOW_REG
(0x18)

	)

59 
	#MSM7X00_GPIO_OE_4
 
	`MSM_GPIO1_SHADOW_REG
(0x1C)

	)

60 
	#MSM7X00_GPIO_OE_5
 
	`MSM_GPIO1_SHADOW_REG
(0x54)

	)

63 
	#MSM7X00_GPIO_IN_0
 
	`MSM_GPIO1_SHADOW_REG
(0x34)

	)

64 
	#MSM7X00_GPIO_IN_1
 
	`MSM_GPIO2_SHADOW_REG
(0x20)

	)

65 
	#MSM7X00_GPIO_IN_2
 
	`MSM_GPIO1_SHADOW_REG
(0x38)

	)

66 
	#MSM7X00_GPIO_IN_3
 
	`MSM_GPIO1_SHADOW_REG
(0x3C)

	)

67 
	#MSM7X00_GPIO_IN_4
 
	`MSM_GPIO1_SHADOW_REG
(0x40)

	)

68 
	#MSM7X00_GPIO_IN_5
 
	`MSM_GPIO1_SHADOW_REG
(0x44)

	)

71 
	#MSM7X00_GPIO_INT_EDGE_0
 
	`MSM_GPIO1_SHADOW_REG
(0x60)

	)

72 
	#MSM7X00_GPIO_INT_EDGE_1
 
	`MSM_GPIO2_SHADOW_REG
(0x50)

	)

73 
	#MSM7X00_GPIO_INT_EDGE_2
 
	`MSM_GPIO1_SHADOW_REG
(0x64)

	)

74 
	#MSM7X00_GPIO_INT_EDGE_3
 
	`MSM_GPIO1_SHADOW_REG
(0x68)

	)

75 
	#MSM7X00_GPIO_INT_EDGE_4
 
	`MSM_GPIO1_SHADOW_REG
(0x6C)

	)

76 
	#MSM7X00_GPIO_INT_EDGE_5
 
	`MSM_GPIO1_SHADOW_REG
(0xC0)

	)

79 
	#MSM7X00_GPIO_INT_POS_0
 
	`MSM_GPIO1_SHADOW_REG
(0x70)

	)

80 
	#MSM7X00_GPIO_INT_POS_1
 
	`MSM_GPIO2_SHADOW_REG
(0x58)

	)

81 
	#MSM7X00_GPIO_INT_POS_2
 
	`MSM_GPIO1_SHADOW_REG
(0x74)

	)

82 
	#MSM7X00_GPIO_INT_POS_3
 
	`MSM_GPIO1_SHADOW_REG
(0x78)

	)

83 
	#MSM7X00_GPIO_INT_POS_4
 
	`MSM_GPIO1_SHADOW_REG
(0x7C)

	)

84 
	#MSM7X00_GPIO_INT_POS_5
 
	`MSM_GPIO1_SHADOW_REG
(0xBC)

	)

87 
	#MSM7X00_GPIO_INT_EN_0
 
	`MSM_GPIO1_SHADOW_REG
(0x80)

	)

88 
	#MSM7X00_GPIO_INT_EN_1
 
	`MSM_GPIO2_SHADOW_REG
(0x60)

	)

89 
	#MSM7X00_GPIO_INT_EN_2
 
	`MSM_GPIO1_SHADOW_REG
(0x84)

	)

90 
	#MSM7X00_GPIO_INT_EN_3
 
	`MSM_GPIO1_SHADOW_REG
(0x88)

	)

91 
	#MSM7X00_GPIO_INT_EN_4
 
	`MSM_GPIO1_SHADOW_REG
(0x8C)

	)

92 
	#MSM7X00_GPIO_INT_EN_5
 
	`MSM_GPIO1_SHADOW_REG
(0xB8)

	)

95 
	#MSM7X00_GPIO_INT_CLEAR_0
 
	`MSM_GPIO1_SHADOW_REG
(0x90)

	)

96 
	#MSM7X00_GPIO_INT_CLEAR_1
 
	`MSM_GPIO2_SHADOW_REG
(0x68)

	)

97 
	#MSM7X00_GPIO_INT_CLEAR_2
 
	`MSM_GPIO1_SHADOW_REG
(0x94)

	)

98 
	#MSM7X00_GPIO_INT_CLEAR_3
 
	`MSM_GPIO1_SHADOW_REG
(0x98)

	)

99 
	#MSM7X00_GPIO_INT_CLEAR_4
 
	`MSM_GPIO1_SHADOW_REG
(0x9C)

	)

100 
	#MSM7X00_GPIO_INT_CLEAR_5
 
	`MSM_GPIO1_SHADOW_REG
(0xB4)

	)

103 
	#MSM7X00_GPIO_INT_STATUS_0
 
	`MSM_GPIO1_SHADOW_REG
(0xA0)

	)

104 
	#MSM7X00_GPIO_INT_STATUS_1
 
	`MSM_GPIO2_SHADOW_REG
(0x70)

	)

105 
	#MSM7X00_GPIO_INT_STATUS_2
 
	`MSM_GPIO1_SHADOW_REG
(0xA4)

	)

106 
	#MSM7X00_GPIO_INT_STATUS_3
 
	`MSM_GPIO1_SHADOW_REG
(0xA8)

	)

107 
	#MSM7X00_GPIO_INT_STATUS_4
 
	`MSM_GPIO1_SHADOW_REG
(0xAC)

	)

108 
	#MSM7X00_GPIO_INT_STATUS_5
 
	`MSM_GPIO1_SHADOW_REG
(0xB0)

	)

114 
	#QSD8X50_GPIO_OUT_0
 
	`MSM_GPIO1_SHADOW_REG
(0x00Ë

	)

115 
	#QSD8X50_GPIO_OUT_1
 
	`MSM_GPIO2_SHADOW_REG
(0x00Ë

	)

116 
	#QSD8X50_GPIO_OUT_2
 
	`MSM_GPIO1_SHADOW_REG
(0x04Ë

	)

117 
	#QSD8X50_GPIO_OUT_3
 
	`MSM_GPIO1_SHADOW_REG
(0x08Ë

	)

118 
	#QSD8X50_GPIO_OUT_4
 
	`MSM_GPIO1_SHADOW_REG
(0x0CË

	)

119 
	#QSD8X50_GPIO_OUT_5
 
	`MSM_GPIO1_SHADOW_REG
(0x10Ë

	)

120 
	#QSD8X50_GPIO_OUT_6
 
	`MSM_GPIO1_SHADOW_REG
(0x14Ë

	)

121 
	#QSD8X50_GPIO_OUT_7
 
	`MSM_GPIO1_SHADOW_REG
(0x18Ë

	)

124 
	#QSD8X50_GPIO_OE_0
 
	`MSM_GPIO1_SHADOW_REG
(0x20)

	)

125 
	#QSD8X50_GPIO_OE_1
 
	`MSM_GPIO2_SHADOW_REG
(0x08)

	)

126 
	#QSD8X50_GPIO_OE_2
 
	`MSM_GPIO1_SHADOW_REG
(0x24)

	)

127 
	#QSD8X50_GPIO_OE_3
 
	`MSM_GPIO1_SHADOW_REG
(0x28)

	)

128 
	#QSD8X50_GPIO_OE_4
 
	`MSM_GPIO1_SHADOW_REG
(0x2C)

	)

129 
	#QSD8X50_GPIO_OE_5
 
	`MSM_GPIO1_SHADOW_REG
(0x30)

	)

130 
	#QSD8X50_GPIO_OE_6
 
	`MSM_GPIO1_SHADOW_REG
(0x34)

	)

131 
	#QSD8X50_GPIO_OE_7
 
	`MSM_GPIO1_SHADOW_REG
(0x38)

	)

134 
	#QSD8X50_GPIO_IN_0
 
	`MSM_GPIO1_SHADOW_REG
(0x50)

	)

135 
	#QSD8X50_GPIO_IN_1
 
	`MSM_GPIO2_SHADOW_REG
(0x20)

	)

136 
	#QSD8X50_GPIO_IN_2
 
	`MSM_GPIO1_SHADOW_REG
(0x54)

	)

137 
	#QSD8X50_GPIO_IN_3
 
	`MSM_GPIO1_SHADOW_REG
(0x58)

	)

138 
	#QSD8X50_GPIO_IN_4
 
	`MSM_GPIO1_SHADOW_REG
(0x5C)

	)

139 
	#QSD8X50_GPIO_IN_5
 
	`MSM_GPIO1_SHADOW_REG
(0x60)

	)

140 
	#QSD8X50_GPIO_IN_6
 
	`MSM_GPIO1_SHADOW_REG
(0x64)

	)

141 
	#QSD8X50_GPIO_IN_7
 
	`MSM_GPIO1_SHADOW_REG
(0x68)

	)

144 
	#QSD8X50_GPIO_INT_EDGE_0
 
	`MSM_GPIO1_SHADOW_REG
(0x70)

	)

145 
	#QSD8X50_GPIO_INT_EDGE_1
 
	`MSM_GPIO2_SHADOW_REG
(0x50)

	)

146 
	#QSD8X50_GPIO_INT_EDGE_2
 
	`MSM_GPIO1_SHADOW_REG
(0x74)

	)

147 
	#QSD8X50_GPIO_INT_EDGE_3
 
	`MSM_GPIO1_SHADOW_REG
(0x78)

	)

148 
	#QSD8X50_GPIO_INT_EDGE_4
 
	`MSM_GPIO1_SHADOW_REG
(0x7C)

	)

149 
	#QSD8X50_GPIO_INT_EDGE_5
 
	`MSM_GPIO1_SHADOW_REG
(0x80)

	)

150 
	#QSD8X50_GPIO_INT_EDGE_6
 
	`MSM_GPIO1_SHADOW_REG
(0x84)

	)

151 
	#QSD8X50_GPIO_INT_EDGE_7
 
	`MSM_GPIO1_SHADOW_REG
(0x88)

	)

154 
	#QSD8X50_GPIO_INT_POS_0
 
	`MSM_GPIO1_SHADOW_REG
(0x90)

	)

155 
	#QSD8X50_GPIO_INT_POS_1
 
	`MSM_GPIO2_SHADOW_REG
(0x58)

	)

156 
	#QSD8X50_GPIO_INT_POS_2
 
	`MSM_GPIO1_SHADOW_REG
(0x94)

	)

157 
	#QSD8X50_GPIO_INT_POS_3
 
	`MSM_GPIO1_SHADOW_REG
(0x98)

	)

158 
	#QSD8X50_GPIO_INT_POS_4
 
	`MSM_GPIO1_SHADOW_REG
(0x9C)

	)

159 
	#QSD8X50_GPIO_INT_POS_5
 
	`MSM_GPIO1_SHADOW_REG
(0xA0)

	)

160 
	#QSD8X50_GPIO_INT_POS_6
 
	`MSM_GPIO1_SHADOW_REG
(0xA4)

	)

161 
	#QSD8X50_GPIO_INT_POS_7
 
	`MSM_GPIO1_SHADOW_REG
(0xA8)

	)

164 
	#QSD8X50_GPIO_INT_EN_0
 
	`MSM_GPIO1_SHADOW_REG
(0xB0)

	)

165 
	#QSD8X50_GPIO_INT_EN_1
 
	`MSM_GPIO2_SHADOW_REG
(0x60)

	)

166 
	#QSD8X50_GPIO_INT_EN_2
 
	`MSM_GPIO1_SHADOW_REG
(0xB4)

	)

167 
	#QSD8X50_GPIO_INT_EN_3
 
	`MSM_GPIO1_SHADOW_REG
(0xB8)

	)

168 
	#QSD8X50_GPIO_INT_EN_4
 
	`MSM_GPIO1_SHADOW_REG
(0xBC)

	)

169 
	#QSD8X50_GPIO_INT_EN_5
 
	`MSM_GPIO1_SHADOW_REG
(0xC0)

	)

170 
	#QSD8X50_GPIO_INT_EN_6
 
	`MSM_GPIO1_SHADOW_REG
(0xC4)

	)

171 
	#QSD8X50_GPIO_INT_EN_7
 
	`MSM_GPIO1_SHADOW_REG
(0xC8)

	)

174 
	#QSD8X50_GPIO_INT_CLEAR_0
 
	`MSM_GPIO1_SHADOW_REG
(0xD0)

	)

175 
	#QSD8X50_GPIO_INT_CLEAR_1
 
	`MSM_GPIO2_SHADOW_REG
(0x68)

	)

176 
	#QSD8X50_GPIO_INT_CLEAR_2
 
	`MSM_GPIO1_SHADOW_REG
(0xD4)

	)

177 
	#QSD8X50_GPIO_INT_CLEAR_3
 
	`MSM_GPIO1_SHADOW_REG
(0xD8)

	)

178 
	#QSD8X50_GPIO_INT_CLEAR_4
 
	`MSM_GPIO1_SHADOW_REG
(0xDC)

	)

179 
	#QSD8X50_GPIO_INT_CLEAR_5
 
	`MSM_GPIO1_SHADOW_REG
(0xE0)

	)

180 
	#QSD8X50_GPIO_INT_CLEAR_6
 
	`MSM_GPIO1_SHADOW_REG
(0xE4)

	)

181 
	#QSD8X50_GPIO_INT_CLEAR_7
 
	`MSM_GPIO1_SHADOW_REG
(0xE8)

	)

184 
	#QSD8X50_GPIO_INT_STATUS_0
 
	`MSM_GPIO1_SHADOW_REG
(0xF0)

	)

185 
	#QSD8X50_GPIO_INT_STATUS_1
 
	`MSM_GPIO2_SHADOW_REG
(0x70)

	)

186 
	#QSD8X50_GPIO_INT_STATUS_2
 
	`MSM_GPIO1_SHADOW_REG
(0xF4)

	)

187 
	#QSD8X50_GPIO_INT_STATUS_3
 
	`MSM_GPIO1_SHADOW_REG
(0xF8)

	)

188 
	#QSD8X50_GPIO_INT_STATUS_4
 
	`MSM_GPIO1_SHADOW_REG
(0xFC)

	)

189 
	#QSD8X50_GPIO_INT_STATUS_5
 
	`MSM_GPIO1_SHADOW_REG
(0x100)

	)

190 
	#QSD8X50_GPIO_INT_STATUS_6
 
	`MSM_GPIO1_SHADOW_REG
(0x104)

	)

191 
	#QSD8X50_GPIO_INT_STATUS_7
 
	`MSM_GPIO1_SHADOW_REG
(0x108)

	)

197 
	#MSM7X30_GPIO_OUT_0
 
	`MSM_GPIO1_REG
(0x00Ë

	)

198 
	#MSM7X30_GPIO_OUT_1
 
	`MSM_GPIO2_REG
(0x00Ë

	)

199 
	#MSM7X30_GPIO_OUT_2
 
	`MSM_GPIO1_REG
(0x04Ë

	)

200 
	#MSM7X30_GPIO_OUT_3
 
	`MSM_GPIO1_REG
(0x08Ë

	)

201 
	#MSM7X30_GPIO_OUT_4
 
	`MSM_GPIO1_REG
(0x0CË

	)

202 
	#MSM7X30_GPIO_OUT_5
 
	`MSM_GPIO1_REG
(0x50Ë

	)

203 
	#MSM7X30_GPIO_OUT_6
 
	`MSM_GPIO1_REG
(0xC4Ë

	)

204 
	#MSM7X30_GPIO_OUT_7
 
	`MSM_GPIO1_REG
(0x214Ë

	)

207 
	#MSM7X30_GPIO_OE_0
 
	`MSM_GPIO1_REG
(0x10)

	)

208 
	#MSM7X30_GPIO_OE_1
 
	`MSM_GPIO2_REG
(0x08)

	)

209 
	#MSM7X30_GPIO_OE_2
 
	`MSM_GPIO1_REG
(0x14)

	)

210 
	#MSM7X30_GPIO_OE_3
 
	`MSM_GPIO1_REG
(0x18)

	)

211 
	#MSM7X30_GPIO_OE_4
 
	`MSM_GPIO1_REG
(0x1C)

	)

212 
	#MSM7X30_GPIO_OE_5
 
	`MSM_GPIO1_REG
(0x54)

	)

213 
	#MSM7X30_GPIO_OE_6
 
	`MSM_GPIO1_REG
(0xC8)

	)

214 
	#MSM7X30_GPIO_OE_7
 
	`MSM_GPIO1_REG
(0x218)

	)

217 
	#MSM7X30_GPIO_IN_0
 
	`MSM_GPIO1_REG
(0x34)

	)

218 
	#MSM7X30_GPIO_IN_1
 
	`MSM_GPIO2_REG
(0x20)

	)

219 
	#MSM7X30_GPIO_IN_2
 
	`MSM_GPIO1_REG
(0x38)

	)

220 
	#MSM7X30_GPIO_IN_3
 
	`MSM_GPIO1_REG
(0x3C)

	)

221 
	#MSM7X30_GPIO_IN_4
 
	`MSM_GPIO1_REG
(0x40)

	)

222 
	#MSM7X30_GPIO_IN_5
 
	`MSM_GPIO1_REG
(0x44)

	)

223 
	#MSM7X30_GPIO_IN_6
 
	`MSM_GPIO1_REG
(0xCC)

	)

224 
	#MSM7X30_GPIO_IN_7
 
	`MSM_GPIO1_REG
(0x21C)

	)

227 
	#MSM7X30_GPIO_INT_EDGE_0
 
	`MSM_GPIO1_REG
(0x60)

	)

228 
	#MSM7X30_GPIO_INT_EDGE_1
 
	`MSM_GPIO2_REG
(0x50)

	)

229 
	#MSM7X30_GPIO_INT_EDGE_2
 
	`MSM_GPIO1_REG
(0x64)

	)

230 
	#MSM7X30_GPIO_INT_EDGE_3
 
	`MSM_GPIO1_REG
(0x68)

	)

231 
	#MSM7X30_GPIO_INT_EDGE_4
 
	`MSM_GPIO1_REG
(0x6C)

	)

232 
	#MSM7X30_GPIO_INT_EDGE_5
 
	`MSM_GPIO1_REG
(0xC0)

	)

233 
	#MSM7X30_GPIO_INT_EDGE_6
 
	`MSM_GPIO1_REG
(0xD0)

	)

234 
	#MSM7X30_GPIO_INT_EDGE_7
 
	`MSM_GPIO1_REG
(0x240)

	)

237 
	#MSM7X30_GPIO_INT_POS_0
 
	`MSM_GPIO1_REG
(0x70)

	)

238 
	#MSM7X30_GPIO_INT_POS_1
 
	`MSM_GPIO2_REG
(0x58)

	)

239 
	#MSM7X30_GPIO_INT_POS_2
 
	`MSM_GPIO1_REG
(0x74)

	)

240 
	#MSM7X30_GPIO_INT_POS_3
 
	`MSM_GPIO1_REG
(0x78)

	)

241 
	#MSM7X30_GPIO_INT_POS_4
 
	`MSM_GPIO1_REG
(0x7C)

	)

242 
	#MSM7X30_GPIO_INT_POS_5
 
	`MSM_GPIO1_REG
(0xBC)

	)

243 
	#MSM7X30_GPIO_INT_POS_6
 
	`MSM_GPIO1_REG
(0xD4)

	)

244 
	#MSM7X30_GPIO_INT_POS_7
 
	`MSM_GPIO1_REG
(0x228)

	)

247 
	#MSM7X30_GPIO_INT_EN_0
 
	`MSM_GPIO1_REG
(0x80)

	)

248 
	#MSM7X30_GPIO_INT_EN_1
 
	`MSM_GPIO2_REG
(0x60)

	)

249 
	#MSM7X30_GPIO_INT_EN_2
 
	`MSM_GPIO1_REG
(0x84)

	)

250 
	#MSM7X30_GPIO_INT_EN_3
 
	`MSM_GPIO1_REG
(0x88)

	)

251 
	#MSM7X30_GPIO_INT_EN_4
 
	`MSM_GPIO1_REG
(0x8C)

	)

252 
	#MSM7X30_GPIO_INT_EN_5
 
	`MSM_GPIO1_REG
(0xB8)

	)

253 
	#MSM7X30_GPIO_INT_EN_6
 
	`MSM_GPIO1_REG
(0xD8)

	)

254 
	#MSM7X30_GPIO_INT_EN_7
 
	`MSM_GPIO1_REG
(0x22C)

	)

257 
	#MSM7X30_GPIO_INT_CLEAR_0
 
	`MSM_GPIO1_REG
(0x90)

	)

258 
	#MSM7X30_GPIO_INT_CLEAR_1
 
	`MSM_GPIO2_REG
(0x68)

	)

259 
	#MSM7X30_GPIO_INT_CLEAR_2
 
	`MSM_GPIO1_REG
(0x94)

	)

260 
	#MSM7X30_GPIO_INT_CLEAR_3
 
	`MSM_GPIO1_REG
(0x98)

	)

261 
	#MSM7X30_GPIO_INT_CLEAR_4
 
	`MSM_GPIO1_REG
(0x9C)

	)

262 
	#MSM7X30_GPIO_INT_CLEAR_5
 
	`MSM_GPIO1_REG
(0xB4)

	)

263 
	#MSM7X30_GPIO_INT_CLEAR_6
 
	`MSM_GPIO1_REG
(0xDC)

	)

264 
	#MSM7X30_GPIO_INT_CLEAR_7
 
	`MSM_GPIO1_REG
(0x230)

	)

267 
	#MSM7X30_GPIO_INT_STATUS_0
 
	`MSM_GPIO1_REG
(0xA0)

	)

268 
	#MSM7X30_GPIO_INT_STATUS_1
 
	`MSM_GPIO2_REG
(0x70)

	)

269 
	#MSM7X30_GPIO_INT_STATUS_2
 
	`MSM_GPIO1_REG
(0xA4)

	)

270 
	#MSM7X30_GPIO_INT_STATUS_3
 
	`MSM_GPIO1_REG
(0xA8)

	)

271 
	#MSM7X30_GPIO_INT_STATUS_4
 
	`MSM_GPIO1_REG
(0xAC)

	)

272 
	#MSM7X30_GPIO_INT_STATUS_5
 
	`MSM_GPIO1_REG
(0xB0)

	)

273 
	#MSM7X30_GPIO_INT_STATUS_6
 
	`MSM_GPIO1_REG
(0xE0)

	)

274 
	#MSM7X30_GPIO_INT_STATUS_7
 
	`MSM_GPIO1_REG
(0x234)

	)

276 
	#FIRST_GPIO_IRQ
 
	`MSM_GPIO_TO_INT
(0)

	)

278 
	#MSM_GPIO_BANK
(
soc
, 
b™k
, 
fú°
, 
œ°
) \

280 .
ªgs
[
MSM_GPIO_OUT
] = 
soc
##
_GPIO_OUT_
##
b™k
, \

281 .
ªgs
[
MSM_GPIO_IN
] = 
soc
##
_GPIO_IN_
##
b™k
, \

282 .
ªgs
[
MSM_GPIO_INT_STATUS
] = 
soc
##
_GPIO_INT_STATUS_
##
b™k
, \

283 .
ªgs
[
MSM_GPIO_INT_CLEAR
] = 
soc
##
_GPIO_INT_CLEAR_
##
b™k
, \

284 .
ªgs
[
MSM_GPIO_INT_EN
] = 
soc
##
_GPIO_INT_EN_
##
b™k
, \

285 .
ªgs
[
MSM_GPIO_INT_EDGE
] = 
soc
##
_GPIO_INT_EDGE_
##
b™k
, \

286 .
ªgs
[
MSM_GPIO_INT_POS
] = 
soc
##
_GPIO_INT_POS_
##
b™k
, \

287 .
ªgs
[
MSM_GPIO_OE
] = 
soc
##
_GPIO_OE_
##
b™k
, \

288 .
chù
 = { \

289 .
ba£
 = (
fú°
), \

290 .
ngpio
 = (
œ°
Ë- (
fú°
) + 1, \

291 .
gë
 = 
msm_gpio_gë
, \

292 .
£t
 = 
msm_gpio_£t
, \

293 .
dúe˘i⁄_öput
 = 
msm_gpio_dúe˘i⁄_öput
, \

294 .
dúe˘i⁄_ouçut
 = 
msm_gpio_dúe˘i⁄_ouçut
, \

295 .
to_úq
 = 
msm_gpio_to_úq
, \

296 .
ªque°
 = 
msm_gpio_ªque°
, \

297 .
‰ì
 = 
msm_gpio_‰ì
, \

299 }

	)

301 
	#MSM_GPIO_BROKEN_INT_CLEAR
 1

	)

303 
	emsm_gpio_ªg
 {

304 
	mMSM_GPIO_IN
,

305 
	mMSM_GPIO_OUT
,

306 
	mMSM_GPIO_INT_STATUS
,

307 
	mMSM_GPIO_INT_CLEAR
,

308 
	mMSM_GPIO_INT_EN
,

309 
	mMSM_GPIO_INT_EDGE
,

310 
	mMSM_GPIO_INT_POS
,

311 
	mMSM_GPIO_OE
,

312 
	mMSM_GPIO_REG_NR


315 
	smsm_gpio_chù
 {

316 
•ölock_t
 
	mlock
;

317 
gpio_chù
 
	mchù
;

318 
	mªgs
[
MSM_GPIO_REG_NR
];

319 #i‡
MSM_GPIO_BROKEN_INT_CLEAR


320 
	möt_°©us_c›y
;

322 
	mbŸh_edge_dëe˘
;

323 
	möt_íabÀ
[2];

324 
__iomem
 *
	mba£
;

327 
	smsm_gpio_öôd©a
 {

328 
msm_gpio_chù
 *
	mchùs
;

329 
	mcou¡
;

332 
	$msm_gpio_wrôñ
(
msm_gpio_chù
 *
chù
, 
u32
 
vÆ
,

333 
msm_gpio_ªg
 
ªg
)

335 
	`wrôñ
(
vÆ
, 
chù
->
ba£
 + chù->
ªgs
[
ªg
]);

336 
	}
}

338 
u32
 
	$msm_gpio_ªadl
(
msm_gpio_chù
 *
chù
, 
msm_gpio_ªg
 
ªg
)

340  
	`ªadl
(
chù
->
ba£
 + chù->
ªgs
[
ªg
]);

341 
	}
}

343 
	$msm_gpio_wrôe
(
msm_gpio_chù
 *
msm_chù
,

344 
off£t
, 
⁄
)

346 
mask
 = 
	`BIT
(
off£t
);

347 
vÆ
;

349 
vÆ
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_OUT
);

350 i‡(
⁄
)

351 
	`msm_gpio_wrôñ
(
msm_chù
, 
vÆ
 | 
mask
, 
MSM_GPIO_OUT
);

353 
	`msm_gpio_wrôñ
(
msm_chù
, 
vÆ
 & ~
mask
, 
MSM_GPIO_OUT
);

355 
	}
}

357 
	$msm_gpio_upd©e_bŸh_edge_dëe˘
(
msm_gpio_chù
 *
msm_chù
)

359 
lo›_limô
 = 100;

360 
pﬁ
, 
vÆ
, 
vÆ2
, 
öt°©
;

362 
vÆ
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_IN
);

363 
pﬁ
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_INT_POS
);

364 
pﬁ
 = (pﬁ & ~
msm_chù
->
bŸh_edge_dëe˘
) |

365 (~
vÆ
 & 
msm_chù
->
bŸh_edge_dëe˘
);

366 
	`msm_gpio_wrôñ
(
msm_chù
, 
pﬁ
, 
MSM_GPIO_INT_POS
);

367 
öt°©
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_INT_STATUS
);

368 
vÆ2
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_IN
);

369 i‡(((
vÆ
 ^ 
vÆ2
Ë& 
msm_chù
->
bŸh_edge_dëe˘
 & ~
öt°©
) == 0)

371 } 
lo›_limô
-- > 0);

372 
	`¥ötk
(
KERN_ERR
 "msm_gpio_update_both_edge_detect, "

373 "ÁûedÅÿªach sèbÀ sèã %x !%x\n", 
vÆ
, 
vÆ2
);

374 
	}
}

376 
	$msm_gpio_˛ór_dëe˘_°©us
(
msm_gpio_chù
 *
msm_chù
,

377 
off£t
)

379 
bô
 = 
	`BIT
(
off£t
);

381 #i‡
MSM_GPIO_BROKEN_INT_CLEAR


385 
msm_chù
->
öt_°©us_c›y
 |=

386 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_INT_STATUS
);

387 
msm_chù
->
öt_°©us_c›y
 &~
bô
;

389 
	`msm_gpio_wrôñ
(
msm_chù
, 
bô
, 
MSM_GPIO_INT_CLEAR
);

390 
	`msm_gpio_upd©e_bŸh_edge_dëe˘
(
msm_chù
);

392 
	}
}

394 
	$msm_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

396 
msm_gpio_chù
 *
msm_chù
;

397 
úq_Êags
;

398 
u32
 
vÆ
;

400 
msm_chù
 = 
	`c⁄èöî_of
(
chù
, 
msm_gpio_chù
, chip);

401 
	`•ö_lock_úqßve
(&
msm_chù
->
lock
, 
úq_Êags
);

402 
vÆ
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_OE
Ë& ~
	`BIT
(
off£t
);

403 
	`msm_gpio_wrôñ
(
msm_chù
, 
vÆ
, 
MSM_GPIO_OE
);

404 
	`•ö_u∆ock_úqª°‹e
(&
msm_chù
->
lock
, 
úq_Êags
);

406 
	}
}

409 
	$msm_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

411 
msm_gpio_chù
 *
msm_chù
;

412 
úq_Êags
;

413 
u32
 
vÆ
;

415 
msm_chù
 = 
	`c⁄èöî_of
(
chù
, 
msm_gpio_chù
, chip);

416 
	`•ö_lock_úqßve
(&
msm_chù
->
lock
, 
úq_Êags
);

417 
	`msm_gpio_wrôe
(
msm_chù
, 
off£t
, 
vÆue
);

418 
vÆ
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_OE
Ë| 
	`BIT
(
off£t
);

419 
	`msm_gpio_wrôñ
(
msm_chù
, 
vÆ
, 
MSM_GPIO_OE
);

420 
	`•ö_u∆ock_úqª°‹e
(&
msm_chù
->
lock
, 
úq_Êags
);

422 
	}
}

424 
	$msm_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

426 
msm_gpio_chù
 *
msm_chù
;

428 
msm_chù
 = 
	`c⁄èöî_of
(
chù
, 
msm_gpio_chù
, chip);

429  (
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_IN
Ë& (1U << 
off£t
)) ? 1 : 0;

430 
	}
}

432 
	$msm_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

434 
msm_gpio_chù
 *
msm_chù
;

435 
úq_Êags
;

437 
msm_chù
 = 
	`c⁄èöî_of
(
chù
, 
msm_gpio_chù
, chip);

438 
	`•ö_lock_úqßve
(&
msm_chù
->
lock
, 
úq_Êags
);

439 
	`msm_gpio_wrôe
(
msm_chù
, 
off£t
, 
vÆue
);

440 
	`•ö_u∆ock_úqª°‹e
(&
msm_chù
->
lock
, 
úq_Êags
);

441 
	}
}

443 
	$msm_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

445  
	`MSM_GPIO_TO_INT
(
chù
->
ba£
 + 
off£t
);

446 
	}
}

448 #ifde‡
CONFIG_MSM_GPIOMUX


449 
	$msm_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

451  
	`msm_gpiomux_gë
(
chù
->
ba£
 + 
off£t
);

452 
	}
}

454 
	$msm_gpio_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

456 
	`msm_gpiomux_put
(
chù
->
ba£
 + 
off£t
);

457 
	}
}

459 
	#msm_gpio_ªque°
 
NULL


	)

460 
	#msm_gpio_‰ì
 
NULL


	)

463 
msm_gpio_chù
 *
	gmsm_gpio_chùs
;

464 
	gmsm_gpio_cou¡
;

466 
msm_gpio_chù
 
	gmsm_gpio_chùs_msm7x01
[] = {

467 
MSM_GPIO_BANK
(
MSM7X00
, 0, 0, 15),

468 
MSM_GPIO_BANK
(
MSM7X00
, 1, 16, 42),

469 
MSM_GPIO_BANK
(
MSM7X00
, 2, 43, 67),

470 
MSM_GPIO_BANK
(
MSM7X00
, 3, 68, 94),

471 
MSM_GPIO_BANK
(
MSM7X00
, 4, 95, 106),

472 
MSM_GPIO_BANK
(
MSM7X00
, 5, 107, 121),

475 
msm_gpio_öôd©a
 
	gmsm_gpio_7x01_öô
 = {

476 .
chùs
 = 
msm_gpio_chùs_msm7x01
,

477 .
	gcou¡
 = 
ARRAY_SIZE
(
msm_gpio_chùs_msm7x01
),

480 
msm_gpio_chù
 
	gmsm_gpio_chùs_msm7x30
[] = {

481 
MSM_GPIO_BANK
(
MSM7X30
, 0, 0, 15),

482 
MSM_GPIO_BANK
(
MSM7X30
, 1, 16, 43),

483 
MSM_GPIO_BANK
(
MSM7X30
, 2, 44, 67),

484 
MSM_GPIO_BANK
(
MSM7X30
, 3, 68, 94),

485 
MSM_GPIO_BANK
(
MSM7X30
, 4, 95, 106),

486 
MSM_GPIO_BANK
(
MSM7X30
, 5, 107, 133),

487 
MSM_GPIO_BANK
(
MSM7X30
, 6, 134, 150),

488 
MSM_GPIO_BANK
(
MSM7X30
, 7, 151, 181),

491 
msm_gpio_öôd©a
 
	gmsm_gpio_7x30_öô
 = {

492 .
chùs
 = 
msm_gpio_chùs_msm7x30
,

493 .
	gcou¡
 = 
ARRAY_SIZE
(
msm_gpio_chùs_msm7x30
),

496 
msm_gpio_chù
 
	gmsm_gpio_chùs_qsd8x50
[] = {

497 
MSM_GPIO_BANK
(
QSD8X50
, 0, 0, 15),

498 
MSM_GPIO_BANK
(
QSD8X50
, 1, 16, 42),

499 
MSM_GPIO_BANK
(
QSD8X50
, 2, 43, 67),

500 
MSM_GPIO_BANK
(
QSD8X50
, 3, 68, 94),

501 
MSM_GPIO_BANK
(
QSD8X50
, 4, 95, 103),

502 
MSM_GPIO_BANK
(
QSD8X50
, 5, 104, 121),

503 
MSM_GPIO_BANK
(
QSD8X50
, 6, 122, 152),

504 
MSM_GPIO_BANK
(
QSD8X50
, 7, 153, 164),

507 
msm_gpio_öôd©a
 
	gmsm_gpio_8x50_öô
 = {

508 .
chùs
 = 
msm_gpio_chùs_qsd8x50
,

509 .
	gcou¡
 = 
ARRAY_SIZE
(
msm_gpio_chùs_qsd8x50
),

512 
	$msm_gpio_úq_ack
(
úq_d©a
 *
d
)

514 
úq_Êags
;

515 
msm_gpio_chù
 *
msm_chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

516 
	`•ö_lock_úqßve
(&
msm_chù
->
lock
, 
úq_Êags
);

517 
	`msm_gpio_˛ór_dëe˘_°©us
(
msm_chù
,

518 
d
->
úq
 - 
	`gpio_to_úq
(
msm_chù
->
chù
.
ba£
));

519 
	`•ö_u∆ock_úqª°‹e
(&
msm_chù
->
lock
, 
úq_Êags
);

520 
	}
}

522 
	$msm_gpio_úq_mask
(
úq_d©a
 *
d
)

524 
úq_Êags
;

525 
msm_gpio_chù
 *
msm_chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

526 
off£t
 = 
d
->
úq
 - 
	`gpio_to_úq
(
msm_chù
->
chù
.
ba£
);

528 
	`•ö_lock_úqßve
(&
msm_chù
->
lock
, 
úq_Êags
);

530 i‡(!(
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_INT_EDGE
Ë& 
	`BIT
(
off£t
)))

531 
	`msm_gpio_˛ór_dëe˘_°©us
(
msm_chù
, 
off£t
);

532 
msm_chù
->
öt_íabÀ
[0] &~
	`BIT
(
off£t
);

533 
	`msm_gpio_wrôñ
(
msm_chù
, msm_chù->
öt_íabÀ
[0], 
MSM_GPIO_INT_EN
);

534 
	`•ö_u∆ock_úqª°‹e
(&
msm_chù
->
lock
, 
úq_Êags
);

535 
	}
}

537 
	$msm_gpio_úq_unmask
(
úq_d©a
 *
d
)

539 
úq_Êags
;

540 
msm_gpio_chù
 *
msm_chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

541 
off£t
 = 
d
->
úq
 - 
	`gpio_to_úq
(
msm_chù
->
chù
.
ba£
);

543 
	`•ö_lock_úqßve
(&
msm_chù
->
lock
, 
úq_Êags
);

545 i‡(!(
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_INT_EDGE
Ë& 
	`BIT
(
off£t
)))

546 
	`msm_gpio_˛ór_dëe˘_°©us
(
msm_chù
, 
off£t
);

547 
msm_chù
->
öt_íabÀ
[0] |
	`BIT
(
off£t
);

548 
	`msm_gpio_wrôñ
(
msm_chù
, msm_chù->
öt_íabÀ
[0], 
MSM_GPIO_INT_EN
);

549 
	`•ö_u∆ock_úqª°‹e
(&
msm_chù
->
lock
, 
úq_Êags
);

550 
	}
}

552 
	$msm_gpio_úq_£t_wake
(
úq_d©a
 *
d
, 
⁄
)

554 
úq_Êags
;

555 
msm_gpio_chù
 *
msm_chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

556 
off£t
 = 
d
->
úq
 - 
	`gpio_to_úq
(
msm_chù
->
chù
.
ba£
);

558 
	`•ö_lock_úqßve
(&
msm_chù
->
lock
, 
úq_Êags
);

560 i‡(
⁄
)

561 
msm_chù
->
öt_íabÀ
[1] |
	`BIT
(
off£t
);

563 
msm_chù
->
öt_íabÀ
[1] &~
	`BIT
(
off£t
);

565 
	`•ö_u∆ock_úqª°‹e
(&
msm_chù
->
lock
, 
úq_Êags
);

567 
	}
}

569 
	$msm_gpio_úq_£t_ty≥
(
úq_d©a
 *
d
, 
Êow_ty≥
)

571 
úq_Êags
;

572 
msm_gpio_chù
 *
msm_chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

573 
off£t
 = 
d
->
úq
 - 
	`gpio_to_úq
(
msm_chù
->
chù
.
ba£
);

574 
vÆ
, 
mask
 = 
	`BIT
(
off£t
);

576 
	`•ö_lock_úqßve
(&
msm_chù
->
lock
, 
úq_Êags
);

577 
vÆ
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_INT_EDGE
);

578 i‡(
Êow_ty≥
 & 
IRQ_TYPE_EDGE_BOTH
) {

579 
	`msm_gpio_wrôñ
(
msm_chù
, 
vÆ
 | 
mask
, 
MSM_GPIO_INT_EDGE
);

580 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_edge_úq
);

582 
	`msm_gpio_wrôñ
(
msm_chù
, 
vÆ
 & ~
mask
, 
MSM_GPIO_INT_EDGE
);

583 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_Àvñ_úq
);

585 i‡((
Êow_ty≥
 & 
IRQ_TYPE_EDGE_BOTH
) == IRQ_TYPE_EDGE_BOTH) {

586 
msm_chù
->
bŸh_edge_dëe˘
 |
mask
;

587 
	`msm_gpio_upd©e_bŸh_edge_dëe˘
(
msm_chù
);

589 
msm_chù
->
bŸh_edge_dëe˘
 &~
mask
;

590 
vÆ
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_INT_POS
);

591 i‡(
Êow_ty≥
 & (
IRQF_TRIGGER_RISING
 | 
IRQF_TRIGGER_HIGH
))

592 
vÆ
 |
mask
;

594 
vÆ
 &~
mask
;

595 
	`msm_gpio_wrôñ
(
msm_chù
, 
vÆ
, 
MSM_GPIO_INT_POS
);

597 
	`•ö_u∆ock_úqª°‹e
(&
msm_chù
->
lock
, 
úq_Êags
);

599 
	}
}

601 
	$msm_gpio_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

603 
i
, 
j
, 
mask
;

604 
vÆ
;

606 
i
 = 0; i < 
msm_gpio_cou¡
; i++) {

607 
msm_gpio_chù
 *
msm_chù
 = &
msm_gpio_chùs
[
i
];

608 
vÆ
 = 
	`msm_gpio_ªadl
(
msm_chù
, 
MSM_GPIO_INT_STATUS
);

609 
vÆ
 &
msm_chù
->
öt_íabÀ
[0];

610 
vÆ
) {

611 
mask
 = 
vÆ
 & -val;

612 
j
 = 
	`Ês
(
mask
) - 1;

616 
vÆ
 &~
mask
;

617 
	`gíîic_h™dÀ_úq
(
FIRST_GPIO_IRQ
 +

618 
msm_chù
->
chù
.
ba£
 + 
j
);

621 
desc
->
úq_d©a
.
chù
->
	`úq_ack
(&desc->irq_data);

622 
	}
}

624 
úq_chù
 
	gmsm_gpio_úq_chù
 = {

625 .
«me
 = "msmgpio",

626 .
	gúq_ack
 = 
msm_gpio_úq_ack
,

627 .
	gúq_mask
 = 
msm_gpio_úq_mask
,

628 .
	gúq_unmask
 = 
msm_gpio_úq_unmask
,

629 .
	gúq_£t_wake
 = 
msm_gpio_úq_£t_wake
,

630 .
	gúq_£t_ty≥
 = 
msm_gpio_úq_£t_ty≥
,

633 
__devöô
 
	$gpio_msm_v1_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

635 
i
, 
j
 = 0;

636 c⁄° 
∂©f‹m_devi˚_id
 *
dev_id
 = 
	`∂©f‹m_gë_devi˚_id
(
pdev
);

637 
msm_gpio_öôd©a
 *
d©a
;

638 
úq1
, 
úq2
;

639 
ªsour˚
 *
ªs
;

640 
__iomem
 *
ba£1
, __iomem *
ba£2
;

642 
d©a
 = (
msm_gpio_öôd©a
 *)
dev_id
->
drivî_d©a
;

643 
msm_gpio_chùs
 = 
d©a
->
chùs
;

644 
msm_gpio_cou¡
 = 
d©a
->
cou¡
;

646 
úq1
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

647 i‡(
úq1
 < 0)

648  
úq1
;

650 
úq2
 = 
	`∂©f‹m_gë_úq
(
pdev
, 1);

651 i‡(
úq2
 < 0)

652  
úq2
;

654 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

655 
ba£1
 = 
	`devm_ªque°_™d_i‹em≠
(&
pdev
->
dev
, 
ªs
);

656 i‡(!
ba£1
)

657  -
EADDRNOTAVAIL
;

659 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 1);

660 
ba£2
 = 
	`devm_ªque°_™d_i‹em≠
(&
pdev
->
dev
, 
ªs
);

661 i‡(!
ba£2
)

662  -
EADDRNOTAVAIL
;

664 
i
 = 
FIRST_GPIO_IRQ
; i < FIRST_GPIO_IRQ + 
NR_GPIO_IRQS
; i++) {

665 i‡(
i
 - 
FIRST_GPIO_IRQ
 >=

666 
msm_gpio_chùs
[
j
].
chù
.
ba£
 +

667 
msm_gpio_chùs
[
j
].
chù
.
ngpio
)

668 
j
++;

669 
	`úq_£t_chù_d©a
(
i
, &
msm_gpio_chùs
[
j
]);

670 
	`úq_£t_chù_™d_h™dÀr
(
i
, &
msm_gpio_úq_chù
,

671 
h™dÀ_edge_úq
);

672 
	`£t_úq_Êags
(
i
, 
IRQF_VALID
);

675 
i
 = 0; i < 
msm_gpio_cou¡
; i++) {

676 i‡(
i
 == 1)

677 
msm_gpio_chùs
[
i
].
ba£
 = 
ba£2
;

679 
msm_gpio_chùs
[
i
].
ba£
 = 
ba£1
;

680 
	`•ö_lock_öô
(&
msm_gpio_chùs
[
i
].
lock
);

681 
	`msm_gpio_wrôñ
(&
msm_gpio_chùs
[
i
], 0, 
MSM_GPIO_INT_EN
);

682 
	`gpiochù_add
(&
msm_gpio_chùs
[
i
].
chù
);

685 
	`úq_£t_chaöed_h™dÀr
(
úq1
, 
msm_gpio_úq_h™dÀr
);

686 
	`úq_£t_chaöed_h™dÀr
(
úq2
, 
msm_gpio_úq_h™dÀr
);

687 
	`úq_£t_úq_wake
(
úq1
, 1);

688 
	`úq_£t_úq_wake
(
úq2
, 2);

690 
	}
}

692 
∂©f‹m_devi˚_id
 
	ggpio_msm_v1_devi˚_ids
[] = {

693 { "gpio-msm-7201", ()&
msm_gpio_7x01_öô
 },

694 { "gpio-msm-7x30", ()&
msm_gpio_7x30_öô
 },

695 { "gpio-msm-8x50", ()&
msm_gpio_8x50_öô
 },

698 
MODULE_DEVICE_TABLE
(
∂©f‹m
, 
gpio_msm_v1_devi˚_ids
);

700 
∂©f‹m_drivî
 
	ggpio_msm_v1_drivî
 = {

701 .
drivî
 = {

702 .
«me
 = "gpio-msm-v1",

703 .
	gow√r
 = 
THIS_MODULE
,

705 .
	g¥obe
 = 
gpio_msm_v1_¥obe
,

706 .
	gid_èbÀ
 = 
gpio_msm_v1_devi˚_ids
,

709 
__öô
 
	$gpio_msm_v1_öô
()

711  
	`∂©f‹m_drivî_ªgi°î
(&
gpio_msm_v1_drivî
);

712 
	}
}

713 
po°c‹e_öôˇŒ
(
gpio_msm_v1_öô
);

714 
MODULE_LICENSE
("GPL v2");

	@gpio-msm-v2.c

18 
	#¥_fmt
(
fmt
Ë"%s: " fmt, 
__func__


	)

20 
	~<löux/bôm≠.h
>

21 
	~<löux/bô›s.h
>

22 
	~<löux/gpio.h
>

23 
	~<löux/öô.h
>

24 
	~<löux/öãºu±.h
>

25 
	~<löux/io.h
>

26 
	~<löux/úqchù/chaöed_úq.h
>

27 
	~<löux/úq.h
>

28 
	~<löux/moduÀ.h
>

29 
	~<löux/∂©f‹m_devi˚.h
>

30 
	~<löux/•ölock.h
>

32 
	~<mach/msm_gpiomux.h
>

33 
	~<mach/msm_iom≠.h
>

38 
	mGPIO_IN
 = 0,

39 
	mGPIO_OUT
 = 1

45 
	mINTR_STATUS
 = 0,

51 
	mGPIO_OE
 = 9,

67 
	mINTR_ENABLE
 = 0,

68 
	mINTR_POL_CTL
 = 1,

69 
	mINTR_DECT_CTL
 = 2,

70 
	mINTR_RAW_STATUS_EN
 = 3,

76 
	mTARGET_PROC_SCORPION
 = 4,

77 
	mTARGET_PROC_NONE
 = 7,

81 
	#GPIO_INTR_CFG_SU
(
gpio
Ë(
MSM_TLMM_BASE
 + 0x0400 + (0x04 * (gpio)))

	)

82 
	#GPIO_CONFIG
(
gpio
Ë(
MSM_TLMM_BASE
 + 0x1000 + (0x10 * (gpio)))

	)

83 
	#GPIO_IN_OUT
(
gpio
Ë(
MSM_TLMM_BASE
 + 0x1004 + (0x10 * (gpio)))

	)

84 
	#GPIO_INTR_CFG
(
gpio
Ë(
MSM_TLMM_BASE
 + 0x1008 + (0x10 * (gpio)))

	)

85 
	#GPIO_INTR_STATUS
(
gpio
Ë(
MSM_TLMM_BASE
 + 0x100¯+ (0x10 * (gpio)))

	)

103 
	smsm_gpio_dev
 {

104 
gpio_chù
 
	mgpio_chù
;

105 
DECLARE_BITMAP
(
íabÀd_úqs
, 
NR_GPIO_IRQS
);

106 
DECLARE_BITMAP
(
wake_úqs
, 
NR_GPIO_IRQS
);

107 
DECLARE_BITMAP
(
duÆ_edge_úqs
, 
NR_GPIO_IRQS
);

110 
DEFINE_SPINLOCK
(
émm_lock
);

112 
ölöe
 
msm_gpio_dev
 *
	$to_msm_gpio_dev
(
gpio_chù
 *
chù
)

114  
	`c⁄èöî_of
(
chù
, 
msm_gpio_dev
, 
gpio_chù
);

115 
	}
}

117 
ölöe
 
	$£t_gpio_bôs
(
n
, 
__iomem
 *
ªg
)

119 
	`wrôñ
(
	`ªadl
(
ªg
Ë| 
n
,Ñeg);

120 
	}
}

122 
ölöe
 
	$˛ór_gpio_bôs
(
n
, 
__iomem
 *
ªg
)

124 
	`wrôñ
(
	`ªadl
(
ªg
Ë& ~
n
,Ñeg);

125 
	}
}

127 
	$msm_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

129  
	`ªadl
(
	`GPIO_IN_OUT
(
off£t
)Ë& 
	`BIT
(
GPIO_IN
);

130 
	}
}

132 
	$msm_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆ
)

134 
	`wrôñ
(
vÆ
 ? 
	`BIT
(
GPIO_OUT
Ë: 0, 
	`GPIO_IN_OUT
(
off£t
));

135 
	}
}

137 
	$msm_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

139 
úq_Êags
;

141 
	`•ö_lock_úqßve
(&
émm_lock
, 
úq_Êags
);

142 
	`˛ór_gpio_bôs
(
	`BIT
(
GPIO_OE
), 
	`GPIO_CONFIG
(
off£t
));

143 
	`•ö_u∆ock_úqª°‹e
(&
émm_lock
, 
úq_Êags
);

145 
	}
}

147 
	$msm_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

148 
off£t
,

149 
vÆ
)

151 
úq_Êags
;

153 
	`•ö_lock_úqßve
(&
émm_lock
, 
úq_Êags
);

154 
	`msm_gpio_£t
(
chù
, 
off£t
, 
vÆ
);

155 
	`£t_gpio_bôs
(
	`BIT
(
GPIO_OE
), 
	`GPIO_CONFIG
(
off£t
));

156 
	`•ö_u∆ock_úqª°‹e
(&
émm_lock
, 
úq_Êags
);

158 
	}
}

160 
	$msm_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

162  
	`msm_gpiomux_gë
(
chù
->
ba£
 + 
off£t
);

163 
	}
}

165 
	$msm_gpio_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

167 
	`msm_gpiomux_put
(
chù
->
ba£
 + 
off£t
);

168 
	}
}

170 
	$msm_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

172  
	`MSM_GPIO_TO_INT
(
chù
->
ba£
 + 
off£t
);

173 
	}
}

175 
ölöe
 
	$msm_úq_to_gpio
(
gpio_chù
 *
chù
, 
úq
)

177  
úq
 - 
	`MSM_GPIO_TO_INT
(
chù
->
ba£
);

178 
	}
}

180 
msm_gpio_dev
 
	gmsm_gpio
 = {

181 .
gpio_chù
 = {

182 .
ba£
 = 0,

183 .
	gngpio
 = 
NR_GPIO_IRQS
,

184 .
	gdúe˘i⁄_öput
 = 
msm_gpio_dúe˘i⁄_öput
,

185 .
	gdúe˘i⁄_ouçut
 = 
msm_gpio_dúe˘i⁄_ouçut
,

186 .
	ggë
 = 
msm_gpio_gë
,

187 .
	g£t
 = 
msm_gpio_£t
,

188 .
	gto_úq
 = 
msm_gpio_to_úq
,

189 .
	gªque°
 = 
msm_gpio_ªque°
,

190 .
	g‰ì
 = 
msm_gpio_‰ì
,

214 
	$msm_gpio_upd©e_duÆ_edge_pos
(
gpio
)

216 
lo›_limô
 = 100;

217 
vÆ
, 
vÆ2
, 
öt°©
;

220 
vÆ
 = 
	`ªadl
(
	`GPIO_IN_OUT
(
gpio
)Ë& 
	`BIT
(
GPIO_IN
);

221 i‡(
vÆ
)

222 
	`˛ór_gpio_bôs
(
	`BIT
(
INTR_POL_CTL
), 
	`GPIO_INTR_CFG
(
gpio
));

224 
	`£t_gpio_bôs
(
	`BIT
(
INTR_POL_CTL
), 
	`GPIO_INTR_CFG
(
gpio
));

225 
vÆ2
 = 
	`ªadl
(
	`GPIO_IN_OUT
(
gpio
)Ë& 
	`BIT
(
GPIO_IN
);

226 
öt°©
 = 
	`ªadl
(
	`GPIO_INTR_STATUS
(
gpio
)Ë& 
	`BIT
(
INTR_STATUS
);

227 i‡(
öt°©
 || 
vÆ
 =
vÆ2
)

229 } 
lo›_limô
-- > 0);

230 
	`¥_îr
("dual-edge irq failedÅo stabilize, "

232 
vÆ
, 
vÆ2
);

233 
	}
}

235 
	$msm_gpio_úq_ack
(
úq_d©a
 *
d
)

237 
gpio
 = 
	`msm_úq_to_gpio
(&
msm_gpio
.
gpio_chù
, 
d
->
úq
);

239 
	`wrôñ
(
	`BIT
(
INTR_STATUS
), 
	`GPIO_INTR_STATUS
(
gpio
));

240 i‡(
	`ã°_bô
(
gpio
, 
msm_gpio
.
duÆ_edge_úqs
))

241 
	`msm_gpio_upd©e_duÆ_edge_pos
(
gpio
);

242 
	}
}

244 
	$msm_gpio_úq_mask
(
úq_d©a
 *
d
)

246 
gpio
 = 
	`msm_úq_to_gpio
(&
msm_gpio
.
gpio_chù
, 
d
->
úq
);

247 
úq_Êags
;

249 
	`•ö_lock_úqßve
(&
émm_lock
, 
úq_Êags
);

250 
	`wrôñ
(
TARGET_PROC_NONE
, 
	`GPIO_INTR_CFG_SU
(
gpio
));

251 
	`˛ór_gpio_bôs
(
	`BIT
(
INTR_RAW_STATUS_EN
Ë| BIT(
INTR_ENABLE
), 
	`GPIO_INTR_CFG
(
gpio
));

252 
	`__˛ór_bô
(
gpio
, 
msm_gpio
.
íabÀd_úqs
);

253 
	`•ö_u∆ock_úqª°‹e
(&
émm_lock
, 
úq_Êags
);

254 
	}
}

256 
	$msm_gpio_úq_unmask
(
úq_d©a
 *
d
)

258 
gpio
 = 
	`msm_úq_to_gpio
(&
msm_gpio
.
gpio_chù
, 
d
->
úq
);

259 
úq_Êags
;

261 
	`•ö_lock_úqßve
(&
émm_lock
, 
úq_Êags
);

262 
	`__£t_bô
(
gpio
, 
msm_gpio
.
íabÀd_úqs
);

263 
	`£t_gpio_bôs
(
	`BIT
(
INTR_RAW_STATUS_EN
Ë| BIT(
INTR_ENABLE
), 
	`GPIO_INTR_CFG
(
gpio
));

264 
	`wrôñ
(
TARGET_PROC_SCORPION
, 
	`GPIO_INTR_CFG_SU
(
gpio
));

265 
	`•ö_u∆ock_úqª°‹e
(&
émm_lock
, 
úq_Êags
);

266 
	}
}

268 
	$msm_gpio_úq_£t_ty≥
(
úq_d©a
 *
d
, 
Êow_ty≥
)

270 
gpio
 = 
	`msm_úq_to_gpio
(&
msm_gpio
.
gpio_chù
, 
d
->
úq
);

271 
úq_Êags
;

272 
uöt32_t
 
bôs
;

274 
	`•ö_lock_úqßve
(&
émm_lock
, 
úq_Êags
);

276 
bôs
 = 
	`ªadl
(
	`GPIO_INTR_CFG
(
gpio
));

278 i‡(
Êow_ty≥
 & 
IRQ_TYPE_EDGE_BOTH
) {

279 
bôs
 |
	`BIT
(
INTR_DECT_CTL
);

280 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_edge_úq
);

281 i‡((
Êow_ty≥
 & 
IRQ_TYPE_EDGE_BOTH
) == IRQ_TYPE_EDGE_BOTH)

282 
	`__£t_bô
(
gpio
, 
msm_gpio
.
duÆ_edge_úqs
);

284 
	`__˛ór_bô
(
gpio
, 
msm_gpio
.
duÆ_edge_úqs
);

286 
bôs
 &~
	`BIT
(
INTR_DECT_CTL
);

287 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_Àvñ_úq
);

288 
	`__˛ór_bô
(
gpio
, 
msm_gpio
.
duÆ_edge_úqs
);

291 i‡(
Êow_ty≥
 & (
IRQ_TYPE_EDGE_RISING
 | 
IRQ_TYPE_LEVEL_HIGH
))

292 
bôs
 |
	`BIT
(
INTR_POL_CTL
);

294 
bôs
 &~
	`BIT
(
INTR_POL_CTL
);

296 
	`wrôñ
(
bôs
, 
	`GPIO_INTR_CFG
(
gpio
));

298 i‡((
Êow_ty≥
 & 
IRQ_TYPE_EDGE_BOTH
) == IRQ_TYPE_EDGE_BOTH)

299 
	`msm_gpio_upd©e_duÆ_edge_pos
(
gpio
);

301 
	`•ö_u∆ock_úqª°‹e
(&
émm_lock
, 
úq_Êags
);

304 
	}
}

312 
	$msm_summ¨y_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

314 
i
;

315 
úq_chù
 *
chù
 = 
	`úq_desc_gë_chù
(
desc
);

317 
	`chaöed_úq_íãr
(
chù
, 
desc
);

319 
	`f‹_óch_£t_bô
(
i
, 
msm_gpio
.
íabÀd_úqs
, 
NR_GPIO_IRQS
) {

320 i‡(
	`ªadl
(
	`GPIO_INTR_STATUS
(
i
)Ë& 
	`BIT
(
INTR_STATUS
))

321 
	`gíîic_h™dÀ_úq
(
	`msm_gpio_to_úq
(&
msm_gpio
.
gpio_chù
,

322 
i
));

325 
	`chaöed_úq_exô
(
chù
, 
desc
);

326 
	}
}

328 
	$msm_gpio_úq_£t_wake
(
úq_d©a
 *
d
, 
⁄
)

330 
gpio
 = 
	`msm_úq_to_gpio
(&
msm_gpio
.
gpio_chù
, 
d
->
úq
);

332 i‡(
⁄
) {

333 i‡(
	`bôm≠_em±y
(
msm_gpio
.
wake_úqs
, 
NR_GPIO_IRQS
))

334 
	`úq_£t_úq_wake
(
TLMM_SCSS_SUMMARY_IRQ
, 1);

335 
	`£t_bô
(
gpio
, 
msm_gpio
.
wake_úqs
);

337 
	`˛ór_bô
(
gpio
, 
msm_gpio
.
wake_úqs
);

338 i‡(
	`bôm≠_em±y
(
msm_gpio
.
wake_úqs
, 
NR_GPIO_IRQS
))

339 
	`úq_£t_úq_wake
(
TLMM_SCSS_SUMMARY_IRQ
, 0);

343 
	}
}

345 
úq_chù
 
	gmsm_gpio_úq_chù
 = {

346 .
«me
 = "msmgpio",

347 .
	gúq_mask
 = 
msm_gpio_úq_mask
,

348 .
	gúq_unmask
 = 
msm_gpio_úq_unmask
,

349 .
	gúq_ack
 = 
msm_gpio_úq_ack
,

350 .
	gúq_£t_ty≥
 = 
msm_gpio_úq_£t_ty≥
,

351 .
	gúq_£t_wake
 = 
msm_gpio_úq_£t_wake
,

354 
	$msm_gpio_¥obe
(
∂©f‹m_devi˚
 *
dev
)

356 
i
, 
úq
, 
ªt
;

358 
	`bôm≠_zîo
(
msm_gpio
.
íabÀd_úqs
, 
NR_GPIO_IRQS
);

359 
	`bôm≠_zîo
(
msm_gpio
.
wake_úqs
, 
NR_GPIO_IRQS
);

360 
	`bôm≠_zîo
(
msm_gpio
.
duÆ_edge_úqs
, 
NR_GPIO_IRQS
);

361 
msm_gpio
.
gpio_chù
.
œbñ
 = 
dev
->
«me
;

362 
ªt
 = 
	`gpiochù_add
(&
msm_gpio
.
gpio_chù
);

363 i‡(
ªt
 < 0)

364  
ªt
;

366 
i
 = 0; i < 
msm_gpio
.
gpio_chù
.
ngpio
; ++i) {

367 
úq
 = 
	`msm_gpio_to_úq
(&
msm_gpio
.
gpio_chù
, 
i
);

368 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
msm_gpio_úq_chù
,

369 
h™dÀ_Àvñ_úq
);

370 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

373 
	`úq_£t_chaöed_h™dÀr
(
TLMM_SCSS_SUMMARY_IRQ
,

374 
msm_summ¨y_úq_h™dÀr
);

376 
	}
}

378 
	$msm_gpio_ªmove
(
∂©f‹m_devi˚
 *
dev
)

380 
ªt
 = 
	`gpiochù_ªmove
(&
msm_gpio
.
gpio_chù
);

382 i‡(
ªt
 < 0)

383  
ªt
;

385 
	`úq_£t_h™dÀr
(
TLMM_SCSS_SUMMARY_IRQ
, 
NULL
);

388 
	}
}

390 
∂©f‹m_drivî
 
	gmsm_gpio_drivî
 = {

391 .
¥obe
 = 
msm_gpio_¥obe
,

392 .
	gªmove
 = 
msm_gpio_ªmove
,

393 .
	gdrivî
 = {

394 .
«me
 = "msmgpio",

395 .
	gow√r
 = 
THIS_MODULE
,

399 
∂©f‹m_devi˚
 
	gmsm_devi˚_gpio
 = {

400 .
«me
 = "msmgpio",

401 .
	gid
 = -1,

404 
__öô
 
	$msm_gpio_öô
()

406 
rc
;

408 
rc
 = 
	`∂©f‹m_drivî_ªgi°î
(&
msm_gpio_drivî
);

409 i‡(!
rc
) {

410 
rc
 = 
	`∂©f‹m_devi˚_ªgi°î
(&
msm_devi˚_gpio
);

411 i‡(
rc
)

412 
	`∂©f‹m_drivî_uƒegi°î
(&
msm_gpio_drivî
);

415  
rc
;

416 
	}
}

418 
__exô
 
	$msm_gpio_exô
()

420 
	`∂©f‹m_devi˚_uƒegi°î
(&
msm_devi˚_gpio
);

421 
	`∂©f‹m_drivî_uƒegi°î
(&
msm_gpio_drivî
);

422 
	}
}

424 
po°c‹e_öôˇŒ
(
msm_gpio_öô
);

425 
moduÀ_exô
(
msm_gpio_exô
);

427 
MODULE_AUTHOR
("Gregory Bean <gbean@codeaurora.org>");

428 
MODULE_DESCRIPTION
("Driver for Qualcomm MSM TLMMv2 SoC GPIOs");

429 
MODULE_LICENSE
("GPL v2");

430 
MODULE_ALIAS
("platform:msmgpio");

	@gpio-mvebu.c

36 
	~<löux/îr.h
>

37 
	~<löux/moduÀ.h
>

38 
	~<löux/gpio.h
>

39 
	~<löux/úq.h
>

40 
	~<löux/¶ab.h
>

41 
	~<löux/úqdomaö.h
>

42 
	~<löux/io.h
>

43 
	~<löux/of_úq.h
>

44 
	~<löux/of_devi˚.h
>

45 
	~<löux/˛k.h
>

46 
	~<löux/pö˘æ/c⁄sumî.h
>

51 
	#GPIO_OUT_OFF
 0x0000

	)

52 
	#GPIO_IO_CONF_OFF
 0x0004

	)

53 
	#GPIO_BLINK_EN_OFF
 0x0008

	)

54 
	#GPIO_IN_POL_OFF
 0x000c

	)

55 
	#GPIO_DATA_IN_OFF
 0x0010

	)

56 
	#GPIO_EDGE_CAUSE_OFF
 0x0014

	)

57 
	#GPIO_EDGE_MASK_OFF
 0x0018

	)

58 
	#GPIO_LEVEL_MASK_OFF
 0x001c

	)

61 
	#GPIO_EDGE_MASK_MV78200_OFF
(
˝u
Ë((˝uË? 0x30 : 0x18)

	)

62 
	#GPIO_LEVEL_MASK_MV78200_OFF
(
˝u
Ë((˝uË? 0x34 : 0x1C)

	)

67 
	#GPIO_EDGE_CAUSE_ARMADAXP_OFF
(
˝u
Ë((˝uË* 0x4)

	)

68 
	#GPIO_EDGE_MASK_ARMADAXP_OFF
(
˝u
Ë(0x10 + (˝uË* 0x4)

	)

69 
	#GPIO_LEVEL_MASK_ARMADAXP_OFF
(
˝u
Ë(0x20 + (˝uË* 0x4)

	)

71 
	#MVEBU_GPIO_SOC_VARIANT_ORION
 0x1

	)

72 
	#MVEBU_GPIO_SOC_VARIANT_MV78200
 0x2

	)

73 
	#MVEBU_GPIO_SOC_VARIANT_ARMADAXP
 0x3

	)

75 
	#MVEBU_MAX_GPIO_PER_BANK
 32

	)

77 
	smvebu_gpio_chù
 {

78 
gpio_chù
 
	mchù
;

79 
•ölock_t
 
	mlock
;

80 
__iomem
 *
	mmemba£
;

81 
__iomem
 *
	m≥r˝u_memba£
;

82 
	múqba£
;

83 
úq_domaö
 *
	mdomaö
;

84 
	msoc_v¨ü¡
;

91 
ölöe
 
__iomem
 *
	$mvebu_gpi‹eg_out
(
mvebu_gpio_chù
 *
mvchù
)

93  
mvchù
->
memba£
 + 
GPIO_OUT_OFF
;

94 
	}
}

96 
ölöe
 
__iomem
 *
	$mvebu_gpi‹eg_blök
(
mvebu_gpio_chù
 *
mvchù
)

98  
mvchù
->
memba£
 + 
GPIO_BLINK_EN_OFF
;

99 
	}
}

101 
ölöe
 
__iomem
 *
	$mvebu_gpi‹eg_io_c⁄f
(
mvebu_gpio_chù
 *
mvchù
)

103  
mvchù
->
memba£
 + 
GPIO_IO_CONF_OFF
;

104 
	}
}

106 
ölöe
 
__iomem
 *
	$mvebu_gpi‹eg_ö_pﬁ
(
mvebu_gpio_chù
 *
mvchù
)

108  
mvchù
->
memba£
 + 
GPIO_IN_POL_OFF
;

109 
	}
}

111 
ölöe
 
__iomem
 *
	$mvebu_gpi‹eg_d©a_ö
(
mvebu_gpio_chù
 *
mvchù
)

113  
mvchù
->
memba£
 + 
GPIO_DATA_IN_OFF
;

114 
	}
}

116 
ölöe
 
__iomem
 *
	$mvebu_gpi‹eg_edge_ˇu£
(
mvebu_gpio_chù
 *
mvchù
)

118 
˝u
;

120 
mvchù
->
soc_v¨ü¡
) {

121 
MVEBU_GPIO_SOC_VARIANT_ORION
:

122 
MVEBU_GPIO_SOC_VARIANT_MV78200
:

123  
mvchù
->
memba£
 + 
GPIO_EDGE_CAUSE_OFF
;

124 
MVEBU_GPIO_SOC_VARIANT_ARMADAXP
:

125 
˝u
 = 
	`smp_¥o˚ss‹_id
();

126  
mvchù
->
≥r˝u_memba£
 + 
	`GPIO_EDGE_CAUSE_ARMADAXP_OFF
(
˝u
);

128 
	`BUG
();

130 
	}
}

132 
ölöe
 
__iomem
 *
	$mvebu_gpi‹eg_edge_mask
(
mvebu_gpio_chù
 *
mvchù
)

134 
˝u
;

136 
mvchù
->
soc_v¨ü¡
) {

137 
MVEBU_GPIO_SOC_VARIANT_ORION
:

138  
mvchù
->
memba£
 + 
GPIO_EDGE_MASK_OFF
;

139 
MVEBU_GPIO_SOC_VARIANT_MV78200
:

140 
˝u
 = 
	`smp_¥o˚ss‹_id
();

141  
mvchù
->
memba£
 + 
	`GPIO_EDGE_MASK_MV78200_OFF
(
˝u
);

142 
MVEBU_GPIO_SOC_VARIANT_ARMADAXP
:

143 
˝u
 = 
	`smp_¥o˚ss‹_id
();

144  
mvchù
->
≥r˝u_memba£
 + 
	`GPIO_EDGE_MASK_ARMADAXP_OFF
(
˝u
);

146 
	`BUG
();

148 
	}
}

150 
__iomem
 *
	$mvebu_gpi‹eg_Àvñ_mask
(
mvebu_gpio_chù
 *
mvchù
)

152 
˝u
;

154 
mvchù
->
soc_v¨ü¡
) {

155 
MVEBU_GPIO_SOC_VARIANT_ORION
:

156  
mvchù
->
memba£
 + 
GPIO_LEVEL_MASK_OFF
;

157 
MVEBU_GPIO_SOC_VARIANT_MV78200
:

158 
˝u
 = 
	`smp_¥o˚ss‹_id
();

159  
mvchù
->
memba£
 + 
	`GPIO_LEVEL_MASK_MV78200_OFF
(
˝u
);

160 
MVEBU_GPIO_SOC_VARIANT_ARMADAXP
:

161 
˝u
 = 
	`smp_¥o˚ss‹_id
();

162  
mvchù
->
≥r˝u_memba£
 + 
	`GPIO_LEVEL_MASK_ARMADAXP_OFF
(
˝u
);

164 
	`BUG
();

166 
	}
}

172 
	$mvebu_gpio_ªque°
(
gpio_chù
 *
chù
, 
pö
)

174  
	`pö˘æ_ªque°_gpio
(
chù
->
ba£
 + 
pö
);

175 
	}
}

177 
	$mvebu_gpio_‰ì
(
gpio_chù
 *
chù
, 
pö
)

179 
	`pö˘æ_‰ì_gpio
(
chù
->
ba£
 + 
pö
);

180 
	}
}

182 
	$mvebu_gpio_£t
(
gpio_chù
 *
chù
, 
pö
, 
vÆue
)

184 
mvebu_gpio_chù
 *
mvchù
 =

185 
	`c⁄èöî_of
(
chù
, 
mvebu_gpio_chù
, chip);

186 
Êags
;

187 
u32
 
u
;

189 
	`•ö_lock_úqßve
(&
mvchù
->
lock
, 
Êags
);

190 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_out
(
mvchù
));

191 i‡(
vÆue
)

192 
u
 |1 << 
pö
;

194 
u
 &~(1 << 
pö
);

195 
	`wrôñ_ªœxed
(
u
, 
	`mvebu_gpi‹eg_out
(
mvchù
));

196 
	`•ö_u∆ock_úqª°‹e
(&
mvchù
->
lock
, 
Êags
);

197 
	}
}

199 
	$mvebu_gpio_gë
(
gpio_chù
 *
chù
, 
pö
)

201 
mvebu_gpio_chù
 *
mvchù
 =

202 
	`c⁄èöî_of
(
chù
, 
mvebu_gpio_chù
, chip);

203 
u32
 
u
;

205 i‡(
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_io_c⁄f
(
mvchù
)Ë& (1 << 
pö
)) {

206 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_d©a_ö
(
mvchù
)) ^

207 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

209 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_out
(
mvchù
));

212  (
u
 >> 
pö
) & 1;

213 
	}
}

215 
	$mvebu_gpio_blök
(
gpio_chù
 *
chù
, 
pö
, 
vÆue
)

217 
mvebu_gpio_chù
 *
mvchù
 =

218 
	`c⁄èöî_of
(
chù
, 
mvebu_gpio_chù
, chip);

219 
Êags
;

220 
u32
 
u
;

222 
	`•ö_lock_úqßve
(&
mvchù
->
lock
, 
Êags
);

223 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_blök
(
mvchù
));

224 i‡(
vÆue
)

225 
u
 |1 << 
pö
;

227 
u
 &~(1 << 
pö
);

228 
	`wrôñ_ªœxed
(
u
, 
	`mvebu_gpi‹eg_blök
(
mvchù
));

229 
	`•ö_u∆ock_úqª°‹e
(&
mvchù
->
lock
, 
Êags
);

230 
	}
}

232 
	$mvebu_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
pö
)

234 
mvebu_gpio_chù
 *
mvchù
 =

235 
	`c⁄èöî_of
(
chù
, 
mvebu_gpio_chù
, chip);

236 
Êags
;

237 
ªt
;

238 
u32
 
u
;

242 
ªt
 = 
	`pö˘æ_gpio_dúe˘i⁄_öput
(
chù
->
ba£
 + 
pö
);

243 i‡(
ªt
)

244  
ªt
;

246 
	`•ö_lock_úqßve
(&
mvchù
->
lock
, 
Êags
);

247 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_io_c⁄f
(
mvchù
));

248 
u
 |1 << 
pö
;

249 
	`wrôñ_ªœxed
(
u
, 
	`mvebu_gpi‹eg_io_c⁄f
(
mvchù
));

250 
	`•ö_u∆ock_úqª°‹e
(&
mvchù
->
lock
, 
Êags
);

253 
	}
}

255 
	$mvebu_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
pö
,

256 
vÆue
)

258 
mvebu_gpio_chù
 *
mvchù
 =

259 
	`c⁄èöî_of
(
chù
, 
mvebu_gpio_chù
, chip);

260 
Êags
;

261 
ªt
;

262 
u32
 
u
;

266 
ªt
 = 
	`pö˘æ_gpio_dúe˘i⁄_ouçut
(
chù
->
ba£
 + 
pö
);

267 i‡(
ªt
)

268  
ªt
;

270 
	`mvebu_gpio_blök
(
chù
, 
pö
, 0);

271 
	`mvebu_gpio_£t
(
chù
, 
pö
, 
vÆue
);

273 
	`•ö_lock_úqßve
(&
mvchù
->
lock
, 
Êags
);

274 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_io_c⁄f
(
mvchù
));

275 
u
 &~(1 << 
pö
);

276 
	`wrôñ_ªœxed
(
u
, 
	`mvebu_gpi‹eg_io_c⁄f
(
mvchù
));

277 
	`•ö_u∆ock_úqª°‹e
(&
mvchù
->
lock
, 
Êags
);

280 
	}
}

282 
	$mvebu_gpio_to_úq
(
gpio_chù
 *
chù
, 
pö
)

284 
mvebu_gpio_chù
 *
mvchù
 =

285 
	`c⁄èöî_of
(
chù
, 
mvebu_gpio_chù
, chip);

286  
	`úq_¸óã_m≠pög
(
mvchù
->
domaö
, 
pö
);

287 
	}
}

292 
	$mvebu_gpio_úq_ack
(
úq_d©a
 *
d
)

294 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

295 
mvebu_gpio_chù
 *
mvchù
 = 
gc
->
¥iv©e
;

296 
u32
 
mask
 = ~(1 << (
d
->
úq
 - 
gc
->
úq_ba£
));

298 
	`úq_gc_lock
(
gc
);

299 
	`wrôñ_ªœxed
(
mask
, 
	`mvebu_gpi‹eg_edge_ˇu£
(
mvchù
));

300 
	`úq_gc_u∆ock
(
gc
);

301 
	}
}

303 
	$mvebu_gpio_edge_úq_mask
(
úq_d©a
 *
d
)

305 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

306 
mvebu_gpio_chù
 *
mvchù
 = 
gc
->
¥iv©e
;

307 
u32
 
mask
 = 1 << (
d
->
úq
 - 
gc
->
úq_ba£
);

309 
	`úq_gc_lock
(
gc
);

310 
gc
->
mask_ˇche
 &~
mask
;

311 
	`wrôñ_ªœxed
(
gc
->
mask_ˇche
, 
	`mvebu_gpi‹eg_edge_mask
(
mvchù
));

312 
	`úq_gc_u∆ock
(
gc
);

313 
	}
}

315 
	$mvebu_gpio_edge_úq_unmask
(
úq_d©a
 *
d
)

317 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

318 
mvebu_gpio_chù
 *
mvchù
 = 
gc
->
¥iv©e
;

319 
u32
 
mask
 = 1 << (
d
->
úq
 - 
gc
->
úq_ba£
);

321 
	`úq_gc_lock
(
gc
);

322 
gc
->
mask_ˇche
 |
mask
;

323 
	`wrôñ_ªœxed
(
gc
->
mask_ˇche
, 
	`mvebu_gpi‹eg_edge_mask
(
mvchù
));

324 
	`úq_gc_u∆ock
(
gc
);

325 
	}
}

327 
	$mvebu_gpio_Àvñ_úq_mask
(
úq_d©a
 *
d
)

329 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

330 
mvebu_gpio_chù
 *
mvchù
 = 
gc
->
¥iv©e
;

331 
u32
 
mask
 = 1 << (
d
->
úq
 - 
gc
->
úq_ba£
);

333 
	`úq_gc_lock
(
gc
);

334 
gc
->
mask_ˇche
 &~
mask
;

335 
	`wrôñ_ªœxed
(
gc
->
mask_ˇche
, 
	`mvebu_gpi‹eg_Àvñ_mask
(
mvchù
));

336 
	`úq_gc_u∆ock
(
gc
);

337 
	}
}

339 
	$mvebu_gpio_Àvñ_úq_unmask
(
úq_d©a
 *
d
)

341 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

342 
mvebu_gpio_chù
 *
mvchù
 = 
gc
->
¥iv©e
;

343 
u32
 
mask
 = 1 << (
d
->
úq
 - 
gc
->
úq_ba£
);

345 
	`úq_gc_lock
(
gc
);

346 
gc
->
mask_ˇche
 |
mask
;

347 
	`wrôñ_ªœxed
(
gc
->
mask_ˇche
, 
	`mvebu_gpi‹eg_Àvñ_mask
(
mvchù
));

348 
	`úq_gc_u∆ock
(
gc
);

349 
	}
}

377 
	$mvebu_gpio_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

379 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

380 
úq_chù_ty≥
 *
˘
 = 
	`úq_d©a_gë_chù_ty≥
(
d
);

381 
mvebu_gpio_chù
 *
mvchù
 = 
gc
->
¥iv©e
;

382 
pö
;

383 
u32
 
u
;

385 
pö
 = 
d
->
hwúq
;

387 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_io_c⁄f
(
mvchù
)Ë& (1 << 
pö
);

388 i‡(!
u
) {

389  -
EINVAL
;

392 
ty≥
 &
IRQ_TYPE_SENSE_MASK
;

393 i‡(
ty≥
 =
IRQ_TYPE_NONE
)

394  -
EINVAL
;

397 i‡(!(
˘
->
ty≥
 &Åype))

398 i‡(
	`úq_£tup_Æt_chù
(
d
, 
ty≥
))

399  -
EINVAL
;

404 
ty≥
) {

405 
IRQ_TYPE_EDGE_RISING
:

406 
IRQ_TYPE_LEVEL_HIGH
:

407 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

408 
u
 &~(1 << 
pö
);

409 
	`wrôñ_ªœxed
(
u
, 
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

411 
IRQ_TYPE_EDGE_FALLING
:

412 
IRQ_TYPE_LEVEL_LOW
:

413 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

414 
u
 |1 << 
pö
;

415 
	`wrôñ_ªœxed
(
u
, 
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

417 
IRQ_TYPE_EDGE_BOTH
: {

418 
u32
 
v
;

420 
v
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
)) ^

421 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_d©a_ö
(
mvchù
));

426 
u
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

427 i‡(
v
 & (1 << 
pö
))

428 
u
 |1 << 
pö
;

430 
u
 &~(1 << 
pö
);

431 
	`wrôñ_ªœxed
(
u
, 
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

436 
	}
}

438 
	$mvebu_gpio_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

440 
mvebu_gpio_chù
 *
mvchù
 = 
	`úq_gë_h™dÀr_d©a
(
úq
);

441 
u32
 
ˇu£
, 
ty≥
;

442 
i
;

444 i‡(
mvchù
 =
NULL
)

447 
ˇu£
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_d©a_ö
(
mvchù
)) &

448 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_Àvñ_mask
(
mvchù
));

449 
ˇu£
 |
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_edge_ˇu£
(
mvchù
)) &

450 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_edge_mask
(
mvchù
));

452 
i
 = 0; i < 
mvchù
->
chù
.
ngpio
; i++) {

453 
úq
;

455 
úq
 = 
mvchù
->
úqba£
 + 
i
;

457 i‡(!(
ˇu£
 & (1 << 
i
)))

460 
ty≥
 = 
	`úqd_gë_åiggî_ty≥
(
	`úq_gë_úq_d©a
(
úq
));

461 i‡((
ty≥
 & 
IRQ_TYPE_SENSE_MASK
Ë=
IRQ_TYPE_EDGE_BOTH
) {

463 
u32
 
pﬁ¨ôy
;

465 
pﬁ¨ôy
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

466 
pﬁ¨ôy
 ^1 << 
i
;

467 
	`wrôñ_ªœxed
(
pﬁ¨ôy
, 
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

469 
	`gíîic_h™dÀ_úq
(
úq
);

471 
	}
}

473 #ifde‡
CONFIG_DEBUG_FS


474 
	~<löux/£q_fûe.h
>

476 
	$mvebu_gpio_dbg_show
(
£q_fûe
 *
s
, 
gpio_chù
 *
chù
)

478 
mvebu_gpio_chù
 *
mvchù
 =

479 
	`c⁄èöî_of
(
chù
, 
mvebu_gpio_chù
, chip);

480 
u32
 
out
, 
io_c⁄f
, 
blök
, 
ö_pﬁ
, 
d©a_ö
, 
ˇu£
, 
edg_msk
, 
lvl_msk
;

481 
i
;

483 
out
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_out
(
mvchù
));

484 
io_c⁄f
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_io_c⁄f
(
mvchù
));

485 
blök
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_blök
(
mvchù
));

486 
ö_pﬁ
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_ö_pﬁ
(
mvchù
));

487 
d©a_ö
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_d©a_ö
(
mvchù
));

488 
ˇu£
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_edge_ˇu£
(
mvchù
));

489 
edg_msk
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_edge_mask
(
mvchù
));

490 
lvl_msk
 = 
	`ªadl_ªœxed
(
	`mvebu_gpi‹eg_Àvñ_mask
(
mvchù
));

492 
i
 = 0; i < 
chù
->
ngpio
; i++) {

493 c⁄° *
œbñ
;

494 
u32
 
msk
;

495 
boﬁ
 
is_out
;

497 
œbñ
 = 
	`gpiochù_is_ªque°ed
(
chù
, 
i
);

498 i‡(!
œbñ
)

501 
msk
 = 1 << 
i
;

502 
is_out
 = !(
io_c⁄f
 & 
msk
);

504 
	`£q_¥ötf
(
s
, " gpio-%-3d (%-20.20s)", 
chù
->
ba£
 + 
i
, 
œbñ
);

506 i‡(
is_out
) {

507 
	`£q_¥ötf
(
s
, " out %s %s\n",

508 
out
 & 
msk
 ? "hi" : "lo",

509 
blök
 & 
msk
 ? "(blink )" : "");

513 
	`£q_¥ötf
(
s
, " in %s (act %s) - IRQ",

514 (
d©a_ö
 ^ 
ö_pﬁ
Ë& 
msk
 ? "hi" : "lo",

515 
ö_pﬁ
 & 
msk
 ? "lo" : "hi");

516 i‡(!((
edg_msk
 | 
lvl_msk
Ë& 
msk
)) {

517 
	`£q_¥ötf
(
s
, " disabled\n");

520 i‡(
edg_msk
 & 
msk
)

521 
	`£q_¥ötf
(
s
, "Édge ");

522 i‡(
lvl_msk
 & 
msk
)

523 
	`£q_¥ötf
(
s
, "Üevel");

524 
	`£q_¥ötf
(
s
, " (%s)\n", 
ˇu£
 & 
msk
 ? "pending" : "clear ");

526 
	}
}

528 
	#mvebu_gpio_dbg_show
 
NULL


	)

531 
of_devi˚_id
 
	gmvebu_gpio_of_m©ch
[] = {

533 .
com∑tibÀ
 = "marvell,orion-gpio",

534 .
	gd©a
 = (*Ë
MVEBU_GPIO_SOC_VARIANT_ORION
,

537 .
	gcom∑tibÀ
 = "marvell,mv78200-gpio",

538 .
	gd©a
 = (*Ë
MVEBU_GPIO_SOC_VARIANT_MV78200
,

541 .
	gcom∑tibÀ
 = "marvell,armadaxp-gpio",

542 .
	gd©a
 = (*Ë
MVEBU_GPIO_SOC_VARIANT_ARMADAXP
,

548 
MODULE_DEVICE_TABLE
(
of
, 
mvebu_gpio_of_m©ch
);

550 
	$mvebu_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

552 
mvebu_gpio_chù
 *
mvchù
;

553 c⁄° 
of_devi˚_id
 *
m©ch
;

554 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

555 
ªsour˚
 *
ªs
;

556 
úq_chù_gíîic
 *
gc
;

557 
úq_chù_ty≥
 *
˘
;

558 
˛k
 *clk;

559 
ngpios
;

560 
soc_v¨ü¡
;

561 
i
, 
˝u
, 
id
;

563 
m©ch
 = 
	`of_m©ch_devi˚
(
mvebu_gpio_of_m©ch
, &
pdev
->
dev
);

564 i‡(
m©ch
)

565 
soc_v¨ü¡
 = (Ë
m©ch
->
d©a
;

567 
soc_v¨ü¡
 = 
MVEBU_GPIO_SOC_VARIANT_ORION
;

569 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

570 i‡(!
ªs
) {

571 
	`dev_îr
(&
pdev
->
dev
, "Cannot get memoryÑesource\n");

572  -
ENODEV
;

575 
mvchù
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (
mvebu_gpio_chù
), 
GFP_KERNEL
);

576 i‡(!
mvchù
) {

577 
	`dev_îr
(&
pdev
->
dev
, "Cannotállocate memory\n");

578  -
ENOMEM
;

581 i‡(
	`of_¥›îty_ªad_u32
(
pdev
->
dev
.
of_node
, "ngpios", &
ngpios
)) {

582 
	`dev_îr
(&
pdev
->
dev
, "MissingÇgpios OFÖroperty\n");

583  -
ENODEV
;

586 
id
 = 
	`of_Æüs_gë_id
(
pdev
->
dev
.
of_node
, "gpio");

587 i‡(
id
 < 0) {

588 
	`dev_îr
(&
pdev
->
dev
, "Couldn't get OF id\n");

589  
id
;

592 
˛k
 = 
	`devm_˛k_gë
(&
pdev
->
dev
, 
NULL
);

594 i‡(!
	`IS_ERR
(
˛k
))

595 
	`˛k_¥ï¨e_íabÀ
(
˛k
);

597 
mvchù
->
soc_v¨ü¡
 = soc_variant;

598 
mvchù
->
chù
.
œbñ
 = 
	`dev_«me
(&
pdev
->
dev
);

599 
mvchù
->
chù
.
dev
 = &
pdev
->dev;

600 
mvchù
->
chù
.
ªque°
 = 
mvebu_gpio_ªque°
;

601 
mvchù
->
chù
.
‰ì
 = 
mvebu_gpio_‰ì
;

602 
mvchù
->
chù
.
dúe˘i⁄_öput
 = 
mvebu_gpio_dúe˘i⁄_öput
;

603 
mvchù
->
chù
.
gë
 = 
mvebu_gpio_gë
;

604 
mvchù
->
chù
.
dúe˘i⁄_ouçut
 = 
mvebu_gpio_dúe˘i⁄_ouçut
;

605 
mvchù
->
chù
.
£t
 = 
mvebu_gpio_£t
;

606 
mvchù
->
chù
.
to_úq
 = 
mvebu_gpio_to_úq
;

607 
mvchù
->
chù
.
ba£
 = 
id
 * 
MVEBU_MAX_GPIO_PER_BANK
;

608 
mvchù
->
chù
.
ngpio
 = 
ngpios
;

609 
mvchù
->
chù
.
ˇn_¶ìp
 = 0;

610 
mvchù
->
chù
.
of_node
 = 
≈
;

611 
mvchù
->
chù
.
dbg_show
 = 
mvebu_gpio_dbg_show
;

613 
	`•ö_lock_öô
(&
mvchù
->
lock
);

614 
mvchù
->
memba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

615 i‡(
	`IS_ERR
(
mvchù
->
memba£
))

616  
	`PTR_ERR
(
mvchù
->
memba£
);

620 i‡(
soc_v¨ü¡
 =
MVEBU_GPIO_SOC_VARIANT_ARMADAXP
) {

621 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 1);

622 
mvchù
->
≥r˝u_memba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
,

623 
ªs
);

624 i‡(
	`IS_ERR
(
mvchù
->
≥r˝u_memba£
))

625  
	`PTR_ERR
(
mvchù
->
≥r˝u_memba£
);

631 
soc_v¨ü¡
) {

632 
MVEBU_GPIO_SOC_VARIANT_ORION
:

633 
	`wrôñ_ªœxed
(0, 
mvchù
->
memba£
 + 
GPIO_EDGE_CAUSE_OFF
);

634 
	`wrôñ_ªœxed
(0, 
mvchù
->
memba£
 + 
GPIO_EDGE_MASK_OFF
);

635 
	`wrôñ_ªœxed
(0, 
mvchù
->
memba£
 + 
GPIO_LEVEL_MASK_OFF
);

637 
MVEBU_GPIO_SOC_VARIANT_MV78200
:

638 
	`wrôñ_ªœxed
(0, 
mvchù
->
memba£
 + 
GPIO_EDGE_CAUSE_OFF
);

639 
˝u
 = 0; cpu < 2; cpu++) {

640 
	`wrôñ_ªœxed
(0, 
mvchù
->
memba£
 +

641 
	`GPIO_EDGE_MASK_MV78200_OFF
(
˝u
));

642 
	`wrôñ_ªœxed
(0, 
mvchù
->
memba£
 +

643 
	`GPIO_LEVEL_MASK_MV78200_OFF
(
˝u
));

646 
MVEBU_GPIO_SOC_VARIANT_ARMADAXP
:

647 
	`wrôñ_ªœxed
(0, 
mvchù
->
memba£
 + 
GPIO_EDGE_CAUSE_OFF
);

648 
	`wrôñ_ªœxed
(0, 
mvchù
->
memba£
 + 
GPIO_EDGE_MASK_OFF
);

649 
	`wrôñ_ªœxed
(0, 
mvchù
->
memba£
 + 
GPIO_LEVEL_MASK_OFF
);

650 
˝u
 = 0; cpu < 4; cpu++) {

651 
	`wrôñ_ªœxed
(0, 
mvchù
->
≥r˝u_memba£
 +

652 
	`GPIO_EDGE_CAUSE_ARMADAXP_OFF
(
˝u
));

653 
	`wrôñ_ªœxed
(0, 
mvchù
->
≥r˝u_memba£
 +

654 
	`GPIO_EDGE_MASK_ARMADAXP_OFF
(
˝u
));

655 
	`wrôñ_ªœxed
(0, 
mvchù
->
≥r˝u_memba£
 +

656 
	`GPIO_LEVEL_MASK_ARMADAXP_OFF
(
˝u
));

660 
	`BUG
();

663 
	`gpiochù_add
(&
mvchù
->
chù
);

666 i‡(!
	`of_úq_cou¡
(
≈
))

672 
i
 = 0; i < 4; i++) {

673 
úq
;

674 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 
i
);

675 i‡(
úq
 < 0)

677 
	`úq_£t_h™dÀr_d©a
(
úq
, 
mvchù
);

678 
	`úq_£t_chaöed_h™dÀr
(
úq
, 
mvebu_gpio_úq_h™dÀr
);

681 
mvchù
->
úqba£
 = 
	`úq_Æloc_descs
(-1, 0, 
ngpios
, -1);

682 i‡(
mvchù
->
úqba£
 < 0) {

683 
	`dev_îr
(&
pdev
->
dev
, "no irqs\n");

684  -
ENOMEM
;

687 
gc
 = 
	`úq_Æloc_gíîic_chù
("mvebu_gpio_úq", 2, 
mvchù
->
úqba£
,

688 
mvchù
->
memba£
, 
h™dÀ_Àvñ_úq
);

689 i‡(!
gc
) {

690 
	`dev_îr
(&
pdev
->
dev
, "Cannotállocate generic irq_chip\n");

691  -
ENOMEM
;

694 
gc
->
¥iv©e
 = 
mvchù
;

695 
˘
 = &
gc
->
chù_ty≥s
[0];

696 
˘
->
ty≥
 = 
IRQ_TYPE_LEVEL_HIGH
 | 
IRQ_TYPE_LEVEL_LOW
;

697 
˘
->
chù
.
úq_mask
 = 
mvebu_gpio_Àvñ_úq_mask
;

698 
˘
->
chù
.
úq_unmask
 = 
mvebu_gpio_Àvñ_úq_unmask
;

699 
˘
->
chù
.
úq_£t_ty≥
 = 
mvebu_gpio_úq_£t_ty≥
;

700 
˘
->
chù
.
«me
 = 
mvchù
->chù.
œbñ
;

702 
˘
 = &
gc
->
chù_ty≥s
[1];

703 
˘
->
ty≥
 = 
IRQ_TYPE_EDGE_RISING
 | 
IRQ_TYPE_EDGE_FALLING
;

704 
˘
->
chù
.
úq_ack
 = 
mvebu_gpio_úq_ack
;

705 
˘
->
chù
.
úq_mask
 = 
mvebu_gpio_edge_úq_mask
;

706 
˘
->
chù
.
úq_unmask
 = 
mvebu_gpio_edge_úq_unmask
;

707 
˘
->
chù
.
úq_£t_ty≥
 = 
mvebu_gpio_úq_£t_ty≥
;

708 
˘
->
h™dÀr
 = 
h™dÀ_edge_úq
;

709 
˘
->
chù
.
«me
 = 
mvchù
->chù.
œbñ
;

711 
	`úq_£tup_gíîic_chù
(
gc
, 
	`IRQ_MSK
(
ngpios
), 0,

712 
IRQ_NOREQUEST
, 
IRQ_LEVEL
 | 
IRQ_NOPROBE
);

715 
mvchù
->
domaö
 = 
	`úq_domaö_add_sim∂e
(
≈
, mvchù->
chù
.
ngpio
,

716 
mvchù
->
úqba£
,

717 &
úq_domaö_sim∂e_›s
,

718 
mvchù
);

719 i‡(!
mvchù
->
domaö
) {

720 
	`dev_îr
(&
pdev
->
dev
, "couldn'tállocate irq domain %s (DT).\n",

721 
mvchù
->
chù
.
œbñ
);

722 
	`úq_ªmove_gíîic_chù
(
gc
, 
	`IRQ_MSK
(
ngpios
), 
IRQ_NOREQUEST
,

723 
IRQ_LEVEL
 | 
IRQ_NOPROBE
);

724 
	`k‰ì
(
gc
);

725  -
ENODEV
;

729 
	}
}

731 
∂©f‹m_drivî
 
	gmvebu_gpio_drivî
 = {

732 .
drivî
 = {

733 .
«me
 = "mvebu-gpio",

734 .
	gow√r
 = 
THIS_MODULE
,

735 .
	gof_m©ch_èbÀ
 = 
mvebu_gpio_of_m©ch
,

737 .
	g¥obe
 = 
mvebu_gpio_¥obe
,

740 
__öô
 
	$mvebu_gpio_öô
()

742  
	`∂©f‹m_drivî_ªgi°î
(&
mvebu_gpio_drivî
);

743 
	}
}

744 
po°c‹e_öôˇŒ
(
mvebu_gpio_öô
);

	@gpio-mxc.c

22 
	~<löux/öô.h
>

23 
	~<löux/öãºu±.h
>

24 
	~<löux/io.h
>

25 
	~<löux/úq.h
>

26 
	~<löux/úqdomaö.h
>

27 
	~<löux/úqchù/chaöed_úq.h
>

28 
	~<löux/gpio.h
>

29 
	~<löux/∂©f‹m_devi˚.h
>

30 
	~<löux/¶ab.h
>

31 
	~<löux/basic_mmio_gpio.h
>

32 
	~<löux/of.h
>

33 
	~<löux/of_devi˚.h
>

34 
	~<löux/moduÀ.h
>

35 
	~<asm-gíîic/bug.h
>

37 
	emxc_gpio_hwty≥
 {

38 
	mIMX1_GPIO
,

39 
	mIMX21_GPIO
,

40 
	mIMX31_GPIO
,

41 
	mIMX35_GPIO
,

45 
	smxc_gpio_hwd©a
 {

46 
	mdr_ªg
;

47 
	mgdú_ªg
;

48 
	mp§_ªg
;

49 
	mi¸1_ªg
;

50 
	mi¸2_ªg
;

51 
	mimr_ªg
;

52 
	mi§_ªg
;

53 
	medge_£l_ªg
;

54 
	mlow_Àvñ
;

55 
	mhigh_Àvñ
;

56 
	mri£_edge
;

57 
	mÁŒ_edge
;

60 
	smxc_gpio_p‹t
 {

61 
li°_hód
 
	mnode
;

62 
__iomem
 *
	mba£
;

63 
	múq
;

64 
	múq_high
;

65 
úq_domaö
 *
	mdomaö
;

66 
bgpio_chù
 
	mbgc
;

67 
u32
 
	mbŸh_edges
;

70 
mxc_gpio_hwd©a
 
	gimx1_imx21_gpio_hwd©a
 = {

71 .
dr_ªg
 = 0x1c,

72 .
	ggdú_ªg
 = 0x00,

73 .
	gp§_ªg
 = 0x24,

74 .
	gi¸1_ªg
 = 0x28,

75 .
	gi¸2_ªg
 = 0x2c,

76 .
	gimr_ªg
 = 0x30,

77 .
	gi§_ªg
 = 0x34,

78 .
	gedge_£l_ªg
 = -
EINVAL
,

79 .
	glow_Àvñ
 = 0x03,

80 .
	ghigh_Àvñ
 = 0x02,

81 .
	gri£_edge
 = 0x00,

82 .
	gÁŒ_edge
 = 0x01,

85 
mxc_gpio_hwd©a
 
	gimx31_gpio_hwd©a
 = {

86 .
dr_ªg
 = 0x00,

87 .
	ggdú_ªg
 = 0x04,

88 .
	gp§_ªg
 = 0x08,

89 .
	gi¸1_ªg
 = 0x0c,

90 .
	gi¸2_ªg
 = 0x10,

91 .
	gimr_ªg
 = 0x14,

92 .
	gi§_ªg
 = 0x18,

93 .
	gedge_£l_ªg
 = -
EINVAL
,

94 .
	glow_Àvñ
 = 0x00,

95 .
	ghigh_Àvñ
 = 0x01,

96 .
	gri£_edge
 = 0x02,

97 .
	gÁŒ_edge
 = 0x03,

100 
mxc_gpio_hwd©a
 
	gimx35_gpio_hwd©a
 = {

101 .
dr_ªg
 = 0x00,

102 .
	ggdú_ªg
 = 0x04,

103 .
	gp§_ªg
 = 0x08,

104 .
	gi¸1_ªg
 = 0x0c,

105 .
	gi¸2_ªg
 = 0x10,

106 .
	gimr_ªg
 = 0x14,

107 .
	gi§_ªg
 = 0x18,

108 .
	gedge_£l_ªg
 = 0x1c,

109 .
	glow_Àvñ
 = 0x00,

110 .
	ghigh_Àvñ
 = 0x01,

111 .
	gri£_edge
 = 0x02,

112 .
	gÁŒ_edge
 = 0x03,

115 
mxc_gpio_hwty≥
 
	gmxc_gpio_hwty≥
;

116 
mxc_gpio_hwd©a
 *
	gmxc_gpio_hwd©a
;

118 
	#GPIO_DR
 (
mxc_gpio_hwd©a
->
dr_ªg
)

	)

119 
	#GPIO_GDIR
 (
mxc_gpio_hwd©a
->
gdú_ªg
)

	)

120 
	#GPIO_PSR
 (
mxc_gpio_hwd©a
->
p§_ªg
)

	)

121 
	#GPIO_ICR1
 (
mxc_gpio_hwd©a
->
i¸1_ªg
)

	)

122 
	#GPIO_ICR2
 (
mxc_gpio_hwd©a
->
i¸2_ªg
)

	)

123 
	#GPIO_IMR
 (
mxc_gpio_hwd©a
->
imr_ªg
)

	)

124 
	#GPIO_ISR
 (
mxc_gpio_hwd©a
->
i§_ªg
)

	)

125 
	#GPIO_EDGE_SEL
 (
mxc_gpio_hwd©a
->
edge_£l_ªg
)

	)

127 
	#GPIO_INT_LOW_LEV
 (
mxc_gpio_hwd©a
->
low_Àvñ
)

	)

128 
	#GPIO_INT_HIGH_LEV
 (
mxc_gpio_hwd©a
->
high_Àvñ
)

	)

129 
	#GPIO_INT_RISE_EDGE
 (
mxc_gpio_hwd©a
->
ri£_edge
)

	)

130 
	#GPIO_INT_FALL_EDGE
 (
mxc_gpio_hwd©a
->
ÁŒ_edge
)

	)

131 
	#GPIO_INT_BOTH_EDGES
 0x4

	)

133 
∂©f‹m_devi˚_id
 
	gmxc_gpio_devty≥
[] = {

135 .
«me
 = "imx1-gpio",

136 .
	gdrivî_d©a
 = 
IMX1_GPIO
,

138 .
	g«me
 = "imx21-gpio",

139 .
	gdrivî_d©a
 = 
IMX21_GPIO
,

141 .
	g«me
 = "imx31-gpio",

142 .
	gdrivî_d©a
 = 
IMX31_GPIO
,

144 .
	g«me
 = "imx35-gpio",

145 .
	gdrivî_d©a
 = 
IMX35_GPIO
,

151 c⁄° 
of_devi˚_id
 
	gmxc_gpio_dt_ids
[] = {

152 { .
com∑tibÀ
 = "f¶,imx1-gpio", .
	gd©a
 = &
mxc_gpio_devty≥
[
IMX1_GPIO
], },

153 { .
	gcom∑tibÀ
 = "f¶,imx21-gpio", .
	gd©a
 = &
mxc_gpio_devty≥
[
IMX21_GPIO
], },

154 { .
	gcom∑tibÀ
 = "f¶,imx31-gpio", .
	gd©a
 = &
mxc_gpio_devty≥
[
IMX31_GPIO
], },

155 { .
	gcom∑tibÀ
 = "f¶,imx35-gpio", .
	gd©a
 = &
mxc_gpio_devty≥
[
IMX35_GPIO
], },

164 
LIST_HEAD
(
mxc_gpio_p‹ts
);

168 
	$gpio_£t_úq_ty≥
(
úq_d©a
 *
d
, 
u32
 
ty≥
)

170 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

171 
mxc_gpio_p‹t
 *
p‹t
 = 
gc
->
¥iv©e
;

172 
u32
 
bô
, 
vÆ
;

173 
u32
 
gpio_idx
 = 
d
->
hwúq
;

174 
u32
 
gpio
 = 
p‹t
->
bgc
.
gc
.
ba£
 + 
gpio_idx
;

175 
edge
;

176 
__iomem
 *
ªg
 = 
p‹t
->
ba£
;

178 
p‹t
->
bŸh_edges
 &~(1 << 
gpio_idx
);

179 
ty≥
) {

180 
IRQ_TYPE_EDGE_RISING
:

181 
edge
 = 
GPIO_INT_RISE_EDGE
;

183 
IRQ_TYPE_EDGE_FALLING
:

184 
edge
 = 
GPIO_INT_FALL_EDGE
;

186 
IRQ_TYPE_EDGE_BOTH
:

187 i‡(
GPIO_EDGE_SEL
 >= 0) {

188 
edge
 = 
GPIO_INT_BOTH_EDGES
;

190 
vÆ
 = 
	`gpio_gë_vÆue
(
gpio
);

191 i‡(
vÆ
) {

192 
edge
 = 
GPIO_INT_LOW_LEV
;

193 
	`¥_debug
("mxc: së GPIO %dÅÿlowÅriggî\n", 
gpio
);

195 
edge
 = 
GPIO_INT_HIGH_LEV
;

196 
	`¥_debug
("mxc: së GPIO %dÅÿhighÅriggî\n", 
gpio
);

198 
p‹t
->
bŸh_edges
 |1 << 
gpio_idx
;

201 
IRQ_TYPE_LEVEL_LOW
:

202 
edge
 = 
GPIO_INT_LOW_LEV
;

204 
IRQ_TYPE_LEVEL_HIGH
:

205 
edge
 = 
GPIO_INT_HIGH_LEV
;

208  -
EINVAL
;

211 i‡(
GPIO_EDGE_SEL
 >= 0) {

212 
vÆ
 = 
	`ªadl
(
p‹t
->
ba£
 + 
GPIO_EDGE_SEL
);

213 i‡(
edge
 =
GPIO_INT_BOTH_EDGES
)

214 
	`wrôñ
(
vÆ
 | (1 << 
gpio_idx
),

215 
p‹t
->
ba£
 + 
GPIO_EDGE_SEL
);

217 
	`wrôñ
(
vÆ
 & ~(1 << 
gpio_idx
),

218 
p‹t
->
ba£
 + 
GPIO_EDGE_SEL
);

221 i‡(
edge
 !
GPIO_INT_BOTH_EDGES
) {

222 
ªg
 +
GPIO_ICR1
 + ((
gpio_idx
 & 0x10) >> 2);

223 
bô
 = 
gpio_idx
 & 0xf;

224 
vÆ
 = 
	`ªadl
(
ªg
Ë& ~(0x3 << (
bô
 << 1));

225 
	`wrôñ
(
vÆ
 | (
edge
 << (
bô
 << 1)), 
ªg
);

228 
	`wrôñ
(1 << 
gpio_idx
, 
p‹t
->
ba£
 + 
GPIO_ISR
);

231 
	}
}

233 
	$mxc_Êù_edge
(
mxc_gpio_p‹t
 *
p‹t
, 
u32
 
gpio
)

235 
__iomem
 *
ªg
 = 
p‹t
->
ba£
;

236 
u32
 
bô
, 
vÆ
;

237 
edge
;

239 
ªg
 +
GPIO_ICR1
 + ((
gpio
 & 0x10) >> 2);

240 
bô
 = 
gpio
 & 0xf;

241 
vÆ
 = 
	`ªadl
(
ªg
);

242 
edge
 = (
vÆ
 >> (
bô
 << 1)) & 3;

243 
vÆ
 &~(0x3 << (
bô
 << 1));

244 i‡(
edge
 =
GPIO_INT_HIGH_LEV
) {

245 
edge
 = 
GPIO_INT_LOW_LEV
;

246 
	`¥_debug
("mxc: swôch GPIO %dÅÿlowÅriggî\n", 
gpio
);

247 } i‡(
edge
 =
GPIO_INT_LOW_LEV
) {

248 
edge
 = 
GPIO_INT_HIGH_LEV
;

249 
	`¥_debug
("mxc: swôch GPIO %dÅÿhighÅriggî\n", 
gpio
);

251 
	`¥_îr
("mxc: invalid configuration for GPIO %d: %x\n",

252 
gpio
, 
edge
);

255 
	`wrôñ
(
vÆ
 | (
edge
 << (
bô
 << 1)), 
ªg
);

256 
	}
}

259 
	$mxc_gpio_úq_h™dÀr
(
mxc_gpio_p‹t
 *
p‹t
, 
u32
 
úq_°©
)

261 
úq_°©
 != 0) {

262 
úqoff£t
 = 
	`Ês
(
úq_°©
) - 1;

264 i‡(
p‹t
->
bŸh_edges
 & (1 << 
úqoff£t
))

265 
	`mxc_Êù_edge
(
p‹t
, 
úqoff£t
);

267 
	`gíîic_h™dÀ_úq
(
	`úq_föd_m≠pög
(
p‹t
->
domaö
, 
úqoff£t
));

269 
úq_°©
 &~(1 << 
úqoff£t
);

271 
	}
}

274 
	$mx3_gpio_úq_h™dÀr
(
u32
 
úq
, 
úq_desc
 *
desc
)

276 
u32
 
úq_°©
;

277 
mxc_gpio_p‹t
 *
p‹t
 = 
	`úq_gë_h™dÀr_d©a
(
úq
);

278 
úq_chù
 *
chù
 = 
	`úq_gë_chù
(
úq
);

280 
	`chaöed_úq_íãr
(
chù
, 
desc
);

282 
úq_°©
 = 
	`ªadl
(
p‹t
->
ba£
 + 
GPIO_ISR
Ë&Ñódl’‹t->ba£ + 
GPIO_IMR
);

284 
	`mxc_gpio_úq_h™dÀr
(
p‹t
, 
úq_°©
);

286 
	`chaöed_úq_exô
(
chù
, 
desc
);

287 
	}
}

290 
	$mx2_gpio_úq_h™dÀr
(
u32
 
úq
, 
úq_desc
 *
desc
)

292 
u32
 
úq_msk
, 
úq_°©
;

293 
mxc_gpio_p‹t
 *
p‹t
;

296 
	`li°_f‹_óch_íåy
(
p‹t
, &
mxc_gpio_p‹ts
, 
node
) {

297 
úq_msk
 = 
	`ªadl
(
p‹t
->
ba£
 + 
GPIO_IMR
);

298 i‡(!
úq_msk
)

301 
úq_°©
 = 
	`ªadl
(
p‹t
->
ba£
 + 
GPIO_ISR
Ë& 
úq_msk
;

302 i‡(
úq_°©
)

303 
	`mxc_gpio_úq_h™dÀr
(
p‹t
, 
úq_°©
);

305 
	}
}

316 
	$gpio_£t_wake_úq
(
úq_d©a
 *
d
, 
u32
 
íabÀ
)

318 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

319 
mxc_gpio_p‹t
 *
p‹t
 = 
gc
->
¥iv©e
;

320 
u32
 
gpio_idx
 = 
d
->
hwúq
;

322 i‡(
íabÀ
) {

323 i‡(
p‹t
->
úq_high
 && (
gpio_idx
 >= 16))

324 
	`íabÀ_úq_wake
(
p‹t
->
úq_high
);

326 
	`íabÀ_úq_wake
(
p‹t
->
úq
);

328 i‡(
p‹t
->
úq_high
 && (
gpio_idx
 >= 16))

329 
	`dißbÀ_úq_wake
(
p‹t
->
úq_high
);

331 
	`dißbÀ_úq_wake
(
p‹t
->
úq
);

335 
	}
}

337 
__öô
 
	$mxc_gpio_öô_gc
(
mxc_gpio_p‹t
 *
p‹t
, 
úq_ba£
)

339 
úq_chù_gíîic
 *
gc
;

340 
úq_chù_ty≥
 *
˘
;

342 
gc
 = 
	`úq_Æloc_gíîic_chù
("gpio-mxc", 1, 
úq_ba£
,

343 
p‹t
->
ba£
, 
h™dÀ_Àvñ_úq
);

344 
gc
->
¥iv©e
 = 
p‹t
;

346 
˘
 = 
gc
->
chù_ty≥s
;

347 
˘
->
chù
.
úq_ack
 = 
úq_gc_ack_£t_bô
;

348 
˘
->
chù
.
úq_mask
 = 
úq_gc_mask_˛r_bô
;

349 
˘
->
chù
.
úq_unmask
 = 
úq_gc_mask_£t_bô
;

350 
˘
->
chù
.
úq_£t_ty≥
 = 
gpio_£t_úq_ty≥
;

351 
˘
->
chù
.
úq_£t_wake
 = 
gpio_£t_wake_úq
;

352 
˘
->
ªgs
.
ack
 = 
GPIO_ISR
;

353 
˘
->
ªgs
.
mask
 = 
GPIO_IMR
;

355 
	`úq_£tup_gíîic_chù
(
gc
, 
	`IRQ_MSK
(32), 
IRQ_GC_INIT_NESTED_LOCK
,

356 
IRQ_NOREQUEST
, 0);

357 
	}
}

359 
	$mxc_gpio_gë_hw
(
∂©f‹m_devi˚
 *
pdev
)

361 c⁄° 
of_devi˚_id
 *
of_id
 =

362 
	`of_m©ch_devi˚
(
mxc_gpio_dt_ids
, &
pdev
->
dev
);

363 
mxc_gpio_hwty≥
 
hwty≥
;

365 i‡(
of_id
)

366 
pdev
->
id_íåy
 = 
of_id
->
d©a
;

367 
hwty≥
 = 
pdev
->
id_íåy
->
drivî_d©a
;

369 i‡(
mxc_gpio_hwty≥
) {

375 
	`BUG_ON
(
mxc_gpio_hwty≥
 !
hwty≥
);

379 i‡(
hwty≥
 =
IMX35_GPIO
)

380 
mxc_gpio_hwd©a
 = &
imx35_gpio_hwd©a
;

381 i‡(
hwty≥
 =
IMX31_GPIO
)

382 
mxc_gpio_hwd©a
 = &
imx31_gpio_hwd©a
;

384 
mxc_gpio_hwd©a
 = &
imx1_imx21_gpio_hwd©a
;

386 
mxc_gpio_hwty≥
 = 
hwty≥
;

387 
	}
}

389 
	$mxc_gpio_to_úq
(
gpio_chù
 *
gc
, 
off£t
)

391 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

392 
mxc_gpio_p‹t
 *
p‹t
 =

393 
	`c⁄èöî_of
(
bgc
, 
mxc_gpio_p‹t
, bgc);

395  
	`úq_föd_m≠pög
(
p‹t
->
domaö
, 
off£t
);

396 
	}
}

398 
	$mxc_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

400 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

401 
mxc_gpio_p‹t
 *
p‹t
;

402 
ªsour˚
 *
i‹es
;

403 
úq_ba£
;

404 
îr
;

406 
	`mxc_gpio_gë_hw
(
pdev
);

408 
p‹t
 = 
	`kzÆloc
((
mxc_gpio_p‹t
), 
GFP_KERNEL
);

409 i‡(!
p‹t
)

410  -
ENOMEM
;

412 
i‹es
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

413 i‡(!
i‹es
) {

414 
îr
 = -
ENODEV
;

415 
out_k‰ì
;

418 i‡(!
	`ªque°_mem_ªgi⁄
(
i‹es
->
°¨t
, 
	`ªsour˚_size
(iores),

419 
pdev
->
«me
)) {

420 
îr
 = -
EBUSY
;

421 
out_k‰ì
;

424 
p‹t
->
ba£
 = 
	`i‹em≠
(
i‹es
->
°¨t
, 
	`ªsour˚_size
(iores));

425 i‡(!
p‹t
->
ba£
) {

426 
îr
 = -
ENOMEM
;

427 
out_ªÀa£_mem
;

430 
p‹t
->
úq_high
 = 
	`∂©f‹m_gë_úq
(
pdev
, 1);

431 
p‹t
->
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

432 i‡(
p‹t
->
úq
 < 0) {

433 
îr
 = -
EINVAL
;

434 
out_iounm≠
;

438 
	`wrôñ
(0, 
p‹t
->
ba£
 + 
GPIO_IMR
);

439 
	`wrôñ
(~0, 
p‹t
->
ba£
 + 
GPIO_ISR
);

441 i‡(
mxc_gpio_hwty≥
 =
IMX21_GPIO
) {

447 
	`úq_£t_chaöed_h™dÀr
(
p‹t
->
úq
, 
mx2_gpio_úq_h™dÀr
);

450 
	`úq_£t_chaöed_h™dÀr
(
p‹t
->
úq
, 
mx3_gpio_úq_h™dÀr
);

451 
	`úq_£t_h™dÀr_d©a
(
p‹t
->
úq
,Öort);

452 i‡(
p‹t
->
úq_high
 > 0) {

454 
	`úq_£t_chaöed_h™dÀr
(
p‹t
->
úq_high
,

455 
mx3_gpio_úq_h™dÀr
);

456 
	`úq_£t_h™dÀr_d©a
(
p‹t
->
úq_high
,Öort);

460 
îr
 = 
	`bgpio_öô
(&
p‹t
->
bgc
, &
pdev
->
dev
, 4,

461 
p‹t
->
ba£
 + 
GPIO_PSR
,

462 
p‹t
->
ba£
 + 
GPIO_DR
, 
NULL
,

463 
p‹t
->
ba£
 + 
GPIO_GDIR
, 
NULL
, 0);

464 i‡(
îr
)

465 
out_iounm≠
;

467 
p‹t
->
bgc
.
gc
.
to_úq
 = 
mxc_gpio_to_úq
;

468 
p‹t
->
bgc
.
gc
.
ba£
 = (
pdev
->
id
 < 0Ë? 
	`of_Æüs_gë_id
(
≈
, "gpio") * 32 :

469 
pdev
->
id
 * 32;

471 
îr
 = 
	`gpiochù_add
(&
p‹t
->
bgc
.
gc
);

472 i‡(
îr
)

473 
out_bgpio_ªmove
;

475 
úq_ba£
 = 
	`úq_Æloc_descs
(-1, 0, 32, 
	`numa_node_id
());

476 i‡(
úq_ba£
 < 0) {

477 
îr
 = 
úq_ba£
;

478 
out_gpiochù_ªmove
;

481 
p‹t
->
domaö
 = 
	`úq_domaö_add_Àgacy
(
≈
, 32, 
úq_ba£
, 0,

482 &
úq_domaö_sim∂e_›s
, 
NULL
);

483 i‡(!
p‹t
->
domaö
) {

484 
îr
 = -
ENODEV
;

485 
out_úqdesc_‰ì
;

489 
	`mxc_gpio_öô_gc
(
p‹t
, 
úq_ba£
);

491 
	`li°_add_èû
(&
p‹t
->
node
, &
mxc_gpio_p‹ts
);

495 
out_úqdesc_‰ì
:

496 
	`úq_‰ì_descs
(
úq_ba£
, 32);

497 
out_gpiochù_ªmove
:

498 
	`WARN_ON
(
	`gpiochù_ªmove
(&
p‹t
->
bgc
.
gc
) < 0);

499 
out_bgpio_ªmove
:

500 
	`bgpio_ªmove
(&
p‹t
->
bgc
);

501 
out_iounm≠
:

502 
	`iounm≠
(
p‹t
->
ba£
);

503 
out_ªÀa£_mem
:

504 
	`ªÀa£_mem_ªgi⁄
(
i‹es
->
°¨t
, 
	`ªsour˚_size
(iores));

505 
out_k‰ì
:

506 
	`k‰ì
(
p‹t
);

507 
	`dev_öfo
(&
pdev
->
dev
, "%†Áûed wôhÉºnÿ%d\n", 
__func__
, 
îr
);

508  
îr
;

509 
	}
}

511 
∂©f‹m_drivî
 
	gmxc_gpio_drivî
 = {

512 .
drivî
 = {

513 .
«me
 = "gpio-mxc",

514 .
	gow√r
 = 
THIS_MODULE
,

515 .
	gof_m©ch_èbÀ
 = 
mxc_gpio_dt_ids
,

517 .
	g¥obe
 = 
mxc_gpio_¥obe
,

518 .
	gid_èbÀ
 = 
mxc_gpio_devty≥
,

521 
__öô
 
	$gpio_mxc_öô
()

523  
	`∂©f‹m_drivî_ªgi°î
(&
mxc_gpio_drivî
);

524 
	}
}

525 
po°c‹e_öôˇŒ
(
gpio_mxc_öô
);

527 
MODULE_AUTHOR
("Freescale Semiconductor, "

530 
MODULE_DESCRIPTION
("Freescale MXC GPIO");

531 
MODULE_LICENSE
("GPL");

	@gpio-mxs.c

23 
	~<löux/îr.h
>

24 
	~<löux/öô.h
>

25 
	~<löux/öãºu±.h
>

26 
	~<löux/io.h
>

27 
	~<löux/úq.h
>

28 
	~<löux/úqdomaö.h
>

29 
	~<löux/gpio.h
>

30 
	~<löux/of.h
>

31 
	~<löux/of_addªss.h
>

32 
	~<löux/of_devi˚.h
>

33 
	~<löux/∂©f‹m_devi˚.h
>

34 
	~<löux/¶ab.h
>

35 
	~<löux/basic_mmio_gpio.h
>

36 
	~<löux/moduÀ.h
>

38 
	#MXS_SET
 0x4

	)

39 
	#MXS_CLR
 0x8

	)

41 
	#PINCTRL_DOUT
(
p
Ë((
	`is_imx23_gpio
’Ë? 0x0500 : 0x0700Ë+ (p->
id
Ë* 0x10)

	)

42 
	#PINCTRL_DIN
(
p
Ë((
	`is_imx23_gpio
’Ë? 0x0600 : 0x0900Ë+ (p->
id
Ë* 0x10)

	)

43 
	#PINCTRL_DOE
(
p
Ë((
	`is_imx23_gpio
’Ë? 0x0700 : 0x0b00Ë+ (p->
id
Ë* 0x10)

	)

44 
	#PINCTRL_PIN2IRQ
(
p
Ë((
	`is_imx23_gpio
’Ë? 0x0800 : 0x1000Ë+ (p->
id
Ë* 0x10)

	)

45 
	#PINCTRL_IRQEN
(
p
Ë((
	`is_imx23_gpio
’Ë? 0x0900 : 0x1100Ë+ (p->
id
Ë* 0x10)

	)

46 
	#PINCTRL_IRQLEV
(
p
Ë((
	`is_imx23_gpio
’Ë? 0x0a00 : 0x1200Ë+ (p->
id
Ë* 0x10)

	)

47 
	#PINCTRL_IRQPOL
(
p
Ë((
	`is_imx23_gpio
’Ë? 0x0b00 : 0x1300Ë+ (p->
id
Ë* 0x10)

	)

48 
	#PINCTRL_IRQSTAT
(
p
Ë((
	`is_imx23_gpio
’Ë? 0x0c00 : 0x1400Ë+ (p->
id
Ë* 0x10)

	)

50 
	#GPIO_INT_FALL_EDGE
 0x0

	)

51 
	#GPIO_INT_LOW_LEV
 0x1

	)

52 
	#GPIO_INT_RISE_EDGE
 0x2

	)

53 
	#GPIO_INT_HIGH_LEV
 0x3

	)

54 
	#GPIO_INT_LEV_MASK
 (1 << 0)

	)

55 
	#GPIO_INT_POL_MASK
 (1 << 1)

	)

57 
	emxs_gpio_id
 {

58 
	mIMX23_GPIO
,

59 
	mIMX28_GPIO
,

62 
	smxs_gpio_p‹t
 {

63 
__iomem
 *
	mba£
;

64 
	mid
;

65 
	múq
;

66 
úq_domaö
 *
	mdomaö
;

67 
bgpio_chù
 
	mbgc
;

68 
mxs_gpio_id
 
	mdevid
;

69 
u32
 
	mbŸh_edges
;

72 
ölöe
 
	$is_imx23_gpio
(
mxs_gpio_p‹t
 *
p‹t
)

74  
p‹t
->
devid
 =
IMX23_GPIO
;

75 
	}
}

77 
ölöe
 
	$is_imx28_gpio
(
mxs_gpio_p‹t
 *
p‹t
)

79  
p‹t
->
devid
 =
IMX28_GPIO
;

80 
	}
}

84 
	$mxs_gpio_£t_úq_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

86 
u32
 
vÆ
;

87 
u32
 
pö_mask
 = 1 << 
d
->
hwúq
;

88 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

89 
mxs_gpio_p‹t
 *
p‹t
 = 
gc
->
¥iv©e
;

90 
__iomem
 *
pö_addr
;

91 
edge
;

93 
p‹t
->
bŸh_edges
 &~
pö_mask
;

94 
ty≥
) {

95 
IRQ_TYPE_EDGE_BOTH
:

96 
vÆ
 = 
	`gpio_gë_vÆue
(
p‹t
->
bgc
.
gc
.
ba£
 + 
d
->
hwúq
);

97 i‡(
vÆ
)

98 
edge
 = 
GPIO_INT_FALL_EDGE
;

100 
edge
 = 
GPIO_INT_RISE_EDGE
;

101 
p‹t
->
bŸh_edges
 |
pö_mask
;

103 
IRQ_TYPE_EDGE_RISING
:

104 
edge
 = 
GPIO_INT_RISE_EDGE
;

106 
IRQ_TYPE_EDGE_FALLING
:

107 
edge
 = 
GPIO_INT_FALL_EDGE
;

109 
IRQ_TYPE_LEVEL_LOW
:

110 
edge
 = 
GPIO_INT_LOW_LEV
;

112 
IRQ_TYPE_LEVEL_HIGH
:

113 
edge
 = 
GPIO_INT_HIGH_LEV
;

116  -
EINVAL
;

120 
pö_addr
 = 
p‹t
->
ba£
 + 
	`PINCTRL_IRQLEV
(port);

121 i‡(
edge
 & 
GPIO_INT_LEV_MASK
)

122 
	`wrôñ
(
pö_mask
, 
pö_addr
 + 
MXS_SET
);

124 
	`wrôñ
(
pö_mask
, 
pö_addr
 + 
MXS_CLR
);

127 
pö_addr
 = 
p‹t
->
ba£
 + 
	`PINCTRL_IRQPOL
(port);

128 i‡(
edge
 & 
GPIO_INT_POL_MASK
)

129 
	`wrôñ
(
pö_mask
, 
pö_addr
 + 
MXS_SET
);

131 
	`wrôñ
(
pö_mask
, 
pö_addr
 + 
MXS_CLR
);

133 
	`wrôñ
(
pö_mask
,

134 
p‹t
->
ba£
 + 
	`PINCTRL_IRQSTAT
’‹tË+ 
MXS_CLR
);

137 
	}
}

139 
	$mxs_Êù_edge
(
mxs_gpio_p‹t
 *
p‹t
, 
u32
 
gpio
)

141 
u32
 
bô
, 
vÆ
, 
edge
;

142 
__iomem
 *
pö_addr
;

144 
bô
 = 1 << 
gpio
;

146 
pö_addr
 = 
p‹t
->
ba£
 + 
	`PINCTRL_IRQPOL
(port);

147 
vÆ
 = 
	`ªadl
(
pö_addr
);

148 
edge
 = 
vÆ
 & 
bô
;

150 i‡(
edge
)

151 
	`wrôñ
(
bô
, 
pö_addr
 + 
MXS_CLR
);

153 
	`wrôñ
(
bô
, 
pö_addr
 + 
MXS_SET
);

154 
	}
}

157 
	$mxs_gpio_úq_h™dÀr
(
u32
 
úq
, 
úq_desc
 *
desc
)

159 
u32
 
úq_°©
;

160 
mxs_gpio_p‹t
 *
p‹t
 = 
	`úq_gë_h™dÀr_d©a
(
úq
);

162 
desc
->
úq_d©a
.
chù
->
	`úq_ack
(&desc->irq_data);

164 
úq_°©
 = 
	`ªadl
(
p‹t
->
ba£
 + 
	`PINCTRL_IRQSTAT
(port)) &

165 
	`ªadl
(
p‹t
->
ba£
 + 
	`PINCTRL_IRQEN
(port));

167 
úq_°©
 != 0) {

168 
úqoff£t
 = 
	`Ês
(
úq_°©
) - 1;

169 i‡(
p‹t
->
bŸh_edges
 & (1 << 
úqoff£t
))

170 
	`mxs_Êù_edge
(
p‹t
, 
úqoff£t
);

172 
	`gíîic_h™dÀ_úq
(
	`úq_föd_m≠pög
(
p‹t
->
domaö
, 
úqoff£t
));

173 
úq_°©
 &~(1 << 
úqoff£t
);

175 
	}
}

186 
	$mxs_gpio_£t_wake_úq
(
úq_d©a
 *
d
, 
íabÀ
)

188 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

189 
mxs_gpio_p‹t
 *
p‹t
 = 
gc
->
¥iv©e
;

191 i‡(
íabÀ
)

192 
	`íabÀ_úq_wake
(
p‹t
->
úq
);

194 
	`dißbÀ_úq_wake
(
p‹t
->
úq
);

197 
	}
}

199 
__öô
 
	$mxs_gpio_öô_gc
(
mxs_gpio_p‹t
 *
p‹t
, 
úq_ba£
)

201 
úq_chù_gíîic
 *
gc
;

202 
úq_chù_ty≥
 *
˘
;

204 
gc
 = 
	`úq_Æloc_gíîic_chù
("gpio-mxs", 1, 
úq_ba£
,

205 
p‹t
->
ba£
, 
h™dÀ_Àvñ_úq
);

206 
gc
->
¥iv©e
 = 
p‹t
;

208 
˘
 = 
gc
->
chù_ty≥s
;

209 
˘
->
chù
.
úq_ack
 = 
úq_gc_ack_£t_bô
;

210 
˘
->
chù
.
úq_mask
 = 
úq_gc_mask_˛r_bô
;

211 
˘
->
chù
.
úq_unmask
 = 
úq_gc_mask_£t_bô
;

212 
˘
->
chù
.
úq_£t_ty≥
 = 
mxs_gpio_£t_úq_ty≥
;

213 
˘
->
chù
.
úq_£t_wake
 = 
mxs_gpio_£t_wake_úq
;

214 
˘
->
ªgs
.
ack
 = 
	`PINCTRL_IRQSTAT
(
p‹t
Ë+ 
MXS_CLR
;

215 
˘
->
ªgs
.
mask
 = 
	`PINCTRL_IRQEN
(
p‹t
);

217 
	`úq_£tup_gíîic_chù
(
gc
, 
	`IRQ_MSK
(32), 
IRQ_GC_INIT_NESTED_LOCK
,

218 
IRQ_NOREQUEST
, 0);

219 
	}
}

221 
	$mxs_gpio_to_úq
(
gpio_chù
 *
gc
, 
off£t
)

223 
bgpio_chù
 *
bgc
 = 
	`to_bgpio_chù
(
gc
);

224 
mxs_gpio_p‹t
 *
p‹t
 =

225 
	`c⁄èöî_of
(
bgc
, 
mxs_gpio_p‹t
, bgc);

227  
	`úq_föd_m≠pög
(
p‹t
->
domaö
, 
off£t
);

228 
	}
}

230 
∂©f‹m_devi˚_id
 
	gmxs_gpio_ids
[] = {

232 .
«me
 = "imx23-gpio",

233 .
	gdrivî_d©a
 = 
IMX23_GPIO
,

235 .
	g«me
 = "imx28-gpio",

236 .
	gdrivî_d©a
 = 
IMX28_GPIO
,

241 
MODULE_DEVICE_TABLE
(
∂©f‹m
, 
mxs_gpio_ids
);

243 c⁄° 
of_devi˚_id
 
	gmxs_gpio_dt_ids
[] = {

244 { .
com∑tibÀ
 = "f¶,imx23-gpio", .
	gd©a
 = (*Ë
IMX23_GPIO
, },

245 { .
	gcom∑tibÀ
 = "f¶,imx28-gpio", .
	gd©a
 = (*Ë
IMX28_GPIO
, },

248 
MODULE_DEVICE_TABLE
(
of
, 
mxs_gpio_dt_ids
);

250 
	$mxs_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

252 c⁄° 
of_devi˚_id
 *
of_id
 =

253 
	`of_m©ch_devi˚
(
mxs_gpio_dt_ids
, &
pdev
->
dev
);

254 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

255 
devi˚_node
 *
∑ª¡
;

256 
__iomem
 *
ba£
;

257 
mxs_gpio_p‹t
 *
p‹t
;

258 
ªsour˚
 *
i‹es
 = 
NULL
;

259 
úq_ba£
;

260 
îr
;

262 
p‹t
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*p‹t), 
GFP_KERNEL
);

263 i‡(!
p‹t
)

264  -
ENOMEM
;

266 i‡(
≈
) {

267 
p‹t
->
id
 = 
	`of_Æüs_gë_id
(
≈
, "gpio");

268 i‡(
p‹t
->
id
 < 0)

269  
p‹t
->
id
;

270 
p‹t
->
devid
 = (
mxs_gpio_id
Ë
of_id
->
d©a
;

272 
p‹t
->
id
 = 
pdev
->id;

273 
p‹t
->
devid
 = 
pdev
->
id_íåy
->
drivî_d©a
;

276 
p‹t
->
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

277 i‡(
p‹t
->
úq
 < 0)

278  
p‹t
->
úq
;

284 i‡(!
ba£
) {

285 i‡(
≈
) {

286 
∑ª¡
 = 
	`of_gë_∑ª¡
(
≈
);

287 
ba£
 = 
	`of_iom≠
(
∑ª¡
, 0);

288 
	`of_node_put
(
∑ª¡
);

289 i‡(!
ba£
)

290  -
EADDRNOTAVAIL
;

292 
i‹es
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

293 
ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
i‹es
);

294 i‡(
	`IS_ERR
(
ba£
))

295  
	`PTR_ERR
(
ba£
);

298 
p‹t
->
ba£
 = base;

304 
	`wrôñ
(~0U, 
p‹t
->
ba£
 + 
	`PINCTRL_PIN2IRQ
(port));

305 
	`wrôñ
(0, 
p‹t
->
ba£
 + 
	`PINCTRL_IRQEN
(port));

308 
	`wrôñ
(~0U, 
p‹t
->
ba£
 + 
	`PINCTRL_IRQSTAT
’‹tË+ 
MXS_CLR
);

310 
úq_ba£
 = 
	`úq_Æloc_descs
(-1, 0, 32, 
	`numa_node_id
());

311 i‡(
úq_ba£
 < 0)

312  
úq_ba£
;

314 
p‹t
->
domaö
 = 
	`úq_domaö_add_Àgacy
(
≈
, 32, 
úq_ba£
, 0,

315 &
úq_domaö_sim∂e_›s
, 
NULL
);

316 i‡(!
p‹t
->
domaö
) {

317 
îr
 = -
ENODEV
;

318 
out_úqdesc_‰ì
;

322 
	`mxs_gpio_öô_gc
(
p‹t
, 
úq_ba£
);

325 
	`úq_£t_chaöed_h™dÀr
(
p‹t
->
úq
, 
mxs_gpio_úq_h™dÀr
);

326 
	`úq_£t_h™dÀr_d©a
(
p‹t
->
úq
,Öort);

328 
îr
 = 
	`bgpio_öô
(&
p‹t
->
bgc
, &
pdev
->
dev
, 4,

329 
p‹t
->
ba£
 + 
	`PINCTRL_DIN
(port),

330 
p‹t
->
ba£
 + 
	`PINCTRL_DOUT
’‹tË+ 
MXS_SET
,

331 
p‹t
->
ba£
 + 
	`PINCTRL_DOUT
’‹tË+ 
MXS_CLR
,

332 
p‹t
->
ba£
 + 
	`PINCTRL_DOE
’‹t), 
NULL
, 0);

333 i‡(
îr
)

334 
out_úqdesc_‰ì
;

336 
p‹t
->
bgc
.
gc
.
to_úq
 = 
mxs_gpio_to_úq
;

337 
p‹t
->
bgc
.
gc
.
ba£
 =Ö‹t->
id
 * 32;

339 
îr
 = 
	`gpiochù_add
(&
p‹t
->
bgc
.
gc
);

340 i‡(
îr
)

341 
out_bgpio_ªmove
;

345 
out_bgpio_ªmove
:

346 
	`bgpio_ªmove
(&
p‹t
->
bgc
);

347 
out_úqdesc_‰ì
:

348 
	`úq_‰ì_descs
(
úq_ba£
, 32);

349  
îr
;

350 
	}
}

352 
∂©f‹m_drivî
 
	gmxs_gpio_drivî
 = {

353 .
drivî
 = {

354 .
«me
 = "gpio-mxs",

355 .
	gow√r
 = 
THIS_MODULE
,

356 .
	gof_m©ch_èbÀ
 = 
mxs_gpio_dt_ids
,

358 .
	g¥obe
 = 
mxs_gpio_¥obe
,

359 .
	gid_èbÀ
 = 
mxs_gpio_ids
,

362 
__öô
 
	$mxs_gpio_öô
()

364  
	`∂©f‹m_drivî_ªgi°î
(&
mxs_gpio_drivî
);

365 
	}
}

366 
po°c‹e_öôˇŒ
(
mxs_gpio_öô
);

368 
MODULE_AUTHOR
("Freescale Semiconductor, "

371 
MODULE_DESCRIPTION
("Freescale MXS GPIO");

372 
MODULE_LICENSE
("GPL");

	@gpio-omap.c

15 
	~<löux/öô.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/öãºu±.h
>

18 
	~<löux/sysc‹e_›s.h
>

19 
	~<löux/îr.h
>

20 
	~<löux/˛k.h
>

21 
	~<löux/io.h
>

22 
	~<löux/devi˚.h
>

23 
	~<löux/pm_ru¡ime.h
>

24 
	~<löux/pm.h
>

25 
	~<löux/of.h
>

26 
	~<löux/of_devi˚.h
>

27 
	~<löux/úqdomaö.h
>

28 
	~<löux/úqchù/chaöed_úq.h
>

29 
	~<löux/gpio.h
>

30 
	~<löux/∂©f‹m_d©a/gpio-om≠.h
>

32 
	#OFF_MODE
 1

	)

34 
LIST_HEAD
(
om≠_gpio_li°
);

36 
	sgpio_ªgs
 {

37 
u32
 
	múqíabÀ1
;

38 
u32
 
	múqíabÀ2
;

39 
u32
 
	mwake_í
;

40 
u32
 
	m˘æ
;

41 
u32
 
	m€
;

42 
u32
 
	mÀvñdëe˘0
;

43 
u32
 
	mÀvñdëe˘1
;

44 
u32
 
	mrisögdëe˘
;

45 
u32
 
	mÁŒögdëe˘
;

46 
u32
 
	md©aout
;

47 
u32
 
	mdeboun˚
;

48 
u32
 
	mdeboun˚_í
;

51 
	sgpio_b™k
 {

52 
li°_hód
 
	mnode
;

53 
__iomem
 *
	mba£
;

54 
u16
 
	múq
;

55 
úq_domaö
 *
	mdomaö
;

56 
u32
 
	mn⁄_wakeup_gpios
;

57 
u32
 
	míabÀd_n⁄_wakeup_gpios
;

58 
gpio_ªgs
 
	mc⁄ãxt
;

59 
u32
 
	mßved_d©aö
;

60 
u32
 
	mÀvñ_mask
;

61 
u32
 
	mtoggÀ_mask
;

62 
•ölock_t
 
	mlock
;

63 
gpio_chù
 
	mchù
;

64 
˛k
 *
	mdbck
;

65 
u32
 
	mmod_ußge
;

66 
u32
 
	múq_ußge
;

67 
u32
 
	mdbck_íabÀ_mask
;

68 
boﬁ
 
	mdbck_íabÀd
;

69 
devi˚
 *
	mdev
;

70 
boﬁ
 
	mis_mpuio
;

71 
boﬁ
 
	mdbck_Êag
;

72 
boﬁ
 
	mlo£s_c⁄ãxt
;

73 
boﬁ
 
	mc⁄ãxt_vÆid
;

74 
	m°ride
;

75 
u32
 
	mwidth
;

76 
	mc⁄ãxt_loss_cou¡
;

77 
	mpowî_mode
;

78 
boﬁ
 
	mw‹k¨ound_íabÀd
;

80 (*
	m£t_d©aout
)(
gpio_b™k
 *
	mb™k
, 
	mgpio
, 
	míabÀ
);

81 (*
	mgë_c⁄ãxt_loss_cou¡
)(
devi˚
 *
	mdev
);

83 
om≠_gpio_ªg_offs
 *
	mªgs
;

86 
	#GPIO_INDEX
(
b™k
, 
gpio
Ë(gpiÿ% b™k->
width
)

	)

87 
	#GPIO_BIT
(
b™k
, 
gpio
Ë(1 << 
	`GPIO_INDEX
(b™k, gpio))

	)

88 
	#GPIO_MOD_CTRL_BIT
 
	`BIT
(0)

	)

90 
	#BANK_USED
(
b™k
Ë(b™k->
mod_ußge
 || b™k->
úq_ußge
)

	)

91 
	#LINE_USED
(
löe
, 
off£t
Ë÷öê& (1 << off£t))

	)

93 
	$úq_to_gpio
(
gpio_b™k
 *
b™k
, 
gpio_úq
)

95  
b™k
->
chù
.
ba£
 + 
gpio_úq
;

96 
	}
}

98 
	$om≠_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

100 
gpio_b™k
 *
b™k
 = 
	`c⁄èöî_of
(
chù
, gpio_bank, chip);

102  
	`úq_föd_m≠pög
(
b™k
->
domaö
, 
off£t
);

103 
	}
}

105 
	$_£t_gpio_dúe˘i⁄
(
gpio_b™k
 *
b™k
, 
gpio
, 
is_öput
)

107 
__iomem
 *
ªg
 = 
b™k
->
ba£
;

108 
u32
 
l
;

110 
ªg
 +
b™k
->
ªgs
->
dúe˘i⁄
;

111 
l
 = 
	`__øw_ªadl
(
ªg
);

112 i‡(
is_öput
)

113 
l
 |1 << 
gpio
;

115 
l
 &~(1 << 
gpio
);

116 
	`__øw_wrôñ
(
l
, 
ªg
);

117 
b™k
->
c⁄ãxt
.
€
 = 
l
;

118 
	}
}

122 
	$_£t_gpio_d©aout_ªg
(
gpio_b™k
 *
b™k
, 
gpio
, 
íabÀ
)

124 
__iomem
 *
ªg
 = 
b™k
->
ba£
;

125 
u32
 
l
 = 
	`GPIO_BIT
(
b™k
, 
gpio
);

127 i‡(
íabÀ
) {

128 
ªg
 +
b™k
->
ªgs
->
£t_d©aout
;

129 
b™k
->
c⁄ãxt
.
d©aout
 |
l
;

131 
ªg
 +
b™k
->
ªgs
->
˛r_d©aout
;

132 
b™k
->
c⁄ãxt
.
d©aout
 &~
l
;

135 
	`__øw_wrôñ
(
l
, 
ªg
);

136 
	}
}

139 
	$_£t_gpio_d©aout_mask
(
gpio_b™k
 *
b™k
, 
gpio
, 
íabÀ
)

141 
__iomem
 *
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
d©aout
;

142 
u32
 
gpio_bô
 = 
	`GPIO_BIT
(
b™k
, 
gpio
);

143 
u32
 
l
;

145 
l
 = 
	`__øw_ªadl
(
ªg
);

146 i‡(
íabÀ
)

147 
l
 |
gpio_bô
;

149 
l
 &~
gpio_bô
;

150 
	`__øw_wrôñ
(
l
, 
ªg
);

151 
b™k
->
c⁄ãxt
.
d©aout
 = 
l
;

152 
	}
}

154 
	$_gë_gpio_d©aö
(
gpio_b™k
 *
b™k
, 
off£t
)

156 
__iomem
 *
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
d©aö
;

158  (
	`__øw_ªadl
(
ªg
Ë& (1 << 
off£t
)) != 0;

159 
	}
}

161 
	$_gë_gpio_d©aout
(
gpio_b™k
 *
b™k
, 
off£t
)

163 
__iomem
 *
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
d©aout
;

165  (
	`__øw_ªadl
(
ªg
Ë& (1 << 
off£t
)) != 0;

166 
	}
}

168 
ölöe
 
	$_gpio_rmw
(
__iomem
 *
ba£
, 
u32
 
ªg
, u32 
mask
, 
boﬁ
 
£t
)

170 
l
 = 
	`__øw_ªadl
(
ba£
 + 
ªg
);

172 i‡(
£t
)

173 
l
 |
mask
;

175 
l
 &~
mask
;

177 
	`__øw_wrôñ
(
l
, 
ba£
 + 
ªg
);

178 
	}
}

180 
ölöe
 
	$_gpio_dbck_íabÀ
(
gpio_b™k
 *
b™k
)

182 i‡(
b™k
->
dbck_íabÀ_mask
 && !b™k->
dbck_íabÀd
) {

183 
	`˛k_íabÀ
(
b™k
->
dbck
);

184 
b™k
->
dbck_íabÀd
 = 
åue
;

186 
	`__øw_wrôñ
(
b™k
->
dbck_íabÀ_mask
,

187 
b™k
->
ba£
 + b™k->
ªgs
->
deboun˚_í
);

189 
	}
}

191 
ölöe
 
	$_gpio_dbck_dißbÀ
(
gpio_b™k
 *
b™k
)

193 i‡(
b™k
->
dbck_íabÀ_mask
 && b™k->
dbck_íabÀd
) {

199 
	`__øw_wrôñ
(0, 
b™k
->
ba£
 + b™k->
ªgs
->
deboun˚_í
);

201 
	`˛k_dißbÀ
(
b™k
->
dbck
);

202 
b™k
->
dbck_íabÀd
 = 
Ál£
;

204 
	}
}

215 
	$_£t_gpio_deboun˚
(
gpio_b™k
 *
b™k
, 
gpio
,

216 
deboun˚
)

218 
__iomem
 *
ªg
;

219 
u32
 
vÆ
;

220 
u32
 
l
;

222 i‡(!
b™k
->
dbck_Êag
)

225 i‡(
deboun˚
 < 32)

226 
deboun˚
 = 0x01;

227 i‡(
deboun˚
 > 7936)

228 
deboun˚
 = 0xff;

230 
deboun˚
 = (debounce / 0x1f) - 1;

232 
l
 = 
	`GPIO_BIT
(
b™k
, 
gpio
);

234 
	`˛k_íabÀ
(
b™k
->
dbck
);

235 
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
deboun˚
;

236 
	`__øw_wrôñ
(
deboun˚
, 
ªg
);

238 
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
deboun˚_í
;

239 
vÆ
 = 
	`__øw_ªadl
(
ªg
);

241 i‡(
deboun˚
)

242 
vÆ
 |
l
;

244 
vÆ
 &~
l
;

245 
b™k
->
dbck_íabÀ_mask
 = 
vÆ
;

247 
	`__øw_wrôñ
(
vÆ
, 
ªg
);

248 
	`˛k_dißbÀ
(
b™k
->
dbck
);

257 
	`_gpio_dbck_íabÀ
(
b™k
);

258 i‡(
b™k
->
dbck_íabÀ_mask
) {

259 
b™k
->
c⁄ãxt
.
deboun˚
 = debounce;

260 
b™k
->
c⁄ãxt
.
deboun˚_í
 = 
vÆ
;

262 
	}
}

274 
	$_˛ór_gpio_deboun˚
(
gpio_b™k
 *
b™k
, 
gpio
)

276 
u32
 
gpio_bô
 = 
	`GPIO_BIT
(
b™k
, 
gpio
);

278 i‡(!
b™k
->
dbck_Êag
)

281 i‡(!(
b™k
->
dbck_íabÀ_mask
 & 
gpio_bô
))

284 
b™k
->
dbck_íabÀ_mask
 &~
gpio_bô
;

285 
b™k
->
c⁄ãxt
.
deboun˚_í
 &~
gpio_bô
;

286 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
deboun˚_í
,

287 
b™k
->
ba£
 + b™k->
ªgs
->
deboun˚_í
);

289 i‡(!
b™k
->
dbck_íabÀ_mask
) {

290 
b™k
->
c⁄ãxt
.
deboun˚
 = 0;

291 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
deboun˚
, b™k->
ba£
 +

292 
b™k
->
ªgs
->
deboun˚
);

293 
	`˛k_dißbÀ
(
b™k
->
dbck
);

294 
b™k
->
dbck_íabÀd
 = 
Ál£
;

296 
	}
}

298 
ölöe
 
	$£t_gpio_åiggî
(
gpio_b™k
 *
b™k
, 
gpio
,

299 
åiggî
)

301 
__iomem
 *
ba£
 = 
b™k
->base;

302 
u32
 
gpio_bô
 = 1 << 
gpio
;

304 
	`_gpio_rmw
(
ba£
, 
b™k
->
ªgs
->
Àvñdëe˘0
, 
gpio_bô
,

305 
åiggî
 & 
IRQ_TYPE_LEVEL_LOW
);

306 
	`_gpio_rmw
(
ba£
, 
b™k
->
ªgs
->
Àvñdëe˘1
, 
gpio_bô
,

307 
åiggî
 & 
IRQ_TYPE_LEVEL_HIGH
);

308 
	`_gpio_rmw
(
ba£
, 
b™k
->
ªgs
->
risögdëe˘
, 
gpio_bô
,

309 
åiggî
 & 
IRQ_TYPE_EDGE_RISING
);

310 
	`_gpio_rmw
(
ba£
, 
b™k
->
ªgs
->
ÁŒögdëe˘
, 
gpio_bô
,

311 
åiggî
 & 
IRQ_TYPE_EDGE_FALLING
);

313 
b™k
->
c⁄ãxt
.
Àvñdëe˘0
 =

314 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘0
);

315 
b™k
->
c⁄ãxt
.
Àvñdëe˘1
 =

316 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘1
);

317 
b™k
->
c⁄ãxt
.
risögdëe˘
 =

318 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
risögdëe˘
);

319 
b™k
->
c⁄ãxt
.
ÁŒögdëe˘
 =

320 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
ÁŒögdëe˘
);

322 i‡(
	`likñy
(!(
b™k
->
n⁄_wakeup_gpios
 & 
gpio_bô
))) {

323 
	`_gpio_rmw
(
ba£
, 
b™k
->
ªgs
->
wkup_í
, 
gpio_bô
, 
åiggî
 != 0);

324 
b™k
->
c⁄ãxt
.
wake_í
 =

325 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
wkup_í
);

329 i‡(!
b™k
->
ªgs
->
úq˘æ
) {

331 i‡(
b™k
->
n⁄_wakeup_gpios
) {

332 i‡(!(
b™k
->
n⁄_wakeup_gpios
 & 
gpio_bô
))

333 
exô
;

342 i‡(
åiggî
 & 
IRQ_TYPE_EDGE_BOTH
)

343 
b™k
->
íabÀd_n⁄_wakeup_gpios
 |
gpio_bô
;

345 
b™k
->
íabÀd_n⁄_wakeup_gpios
 &~
gpio_bô
;

348 
exô
:

349 
b™k
->
Àvñ_mask
 =

350 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘0
) |

351 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘1
);

352 
	}
}

354 #ifde‡
CONFIG_ARCH_OMAP1


359 
	$_toggÀ_gpio_edge_åiggîög
(
gpio_b™k
 *
b™k
, 
gpio
)

361 
__iomem
 *
ªg
 = 
b™k
->
ba£
;

362 
u32
 
l
 = 0;

364 i‡(!
b™k
->
ªgs
->
úq˘æ
)

367 
ªg
 +
b™k
->
ªgs
->
úq˘æ
;

369 
l
 = 
	`__øw_ªadl
(
ªg
);

370 i‡((
l
 >> 
gpio
) & 1)

371 
l
 &~(1 << 
gpio
);

373 
l
 |1 << 
gpio
;

375 
	`__øw_wrôñ
(
l
, 
ªg
);

376 
	}
}

378 
	$_toggÀ_gpio_edge_åiggîög
(
gpio_b™k
 *
b™k
, 
gpio
Ë{
	}
}

381 
	$_£t_gpio_åiggîög
(
gpio_b™k
 *
b™k
, 
gpio
,

382 
åiggî
)

384 
__iomem
 *
ªg
 = 
b™k
->
ba£
;

385 
__iomem
 *
ba£
 = 
b™k
->base;

386 
u32
 
l
 = 0;

388 i‡(
b™k
->
ªgs
->
Àvñdëe˘0
 && b™k->ªgs->
wkup_í
) {

389 
	`£t_gpio_åiggî
(
b™k
, 
gpio
, 
åiggî
);

390 } i‡(
b™k
->
ªgs
->
úq˘æ
) {

391 
ªg
 +
b™k
->
ªgs
->
úq˘æ
;

393 
l
 = 
	`__øw_ªadl
(
ªg
);

394 i‡((
åiggî
 & 
IRQ_TYPE_SENSE_MASK
Ë=
IRQ_TYPE_EDGE_BOTH
)

395 
b™k
->
toggÀ_mask
 |1 << 
gpio
;

396 i‡(
åiggî
 & 
IRQ_TYPE_EDGE_RISING
)

397 
l
 |1 << 
gpio
;

398 i‡(
åiggî
 & 
IRQ_TYPE_EDGE_FALLING
)

399 
l
 &~(1 << 
gpio
);

401  -
EINVAL
;

403 
	`__øw_wrôñ
(
l
, 
ªg
);

404 } i‡(
b™k
->
ªgs
->
edge˘æ1
) {

405 i‡(
gpio
 & 0x08)

406 
ªg
 +
b™k
->
ªgs
->
edge˘æ2
;

408 
ªg
 +
b™k
->
ªgs
->
edge˘æ1
;

410 
gpio
 &= 0x07;

411 
l
 = 
	`__øw_ªadl
(
ªg
);

412 
l
 &~(3 << (
gpio
 << 1));

413 i‡(
åiggî
 & 
IRQ_TYPE_EDGE_RISING
)

414 
l
 |2 << (
gpio
 << 1);

415 i‡(
åiggî
 & 
IRQ_TYPE_EDGE_FALLING
)

416 
l
 |1 << (
gpio
 << 1);

419 
	`_gpio_rmw
(
ba£
, 
b™k
->
ªgs
->
wkup_í
, 1 << 
gpio
, 
åiggî
);

420 
b™k
->
c⁄ãxt
.
wake_í
 =

421 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
wkup_í
);

422 
	`__øw_wrôñ
(
l
, 
ªg
);

425 
	}
}

427 
	$_íabÀ_gpio_moduÀ
(
gpio_b™k
 *
b™k
, 
off£t
)

429 i‡(
b™k
->
ªgs
->
pö˘æ
) {

430 
__iomem
 *
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
pö˘æ
;

433 
	`__øw_wrôñ
(
	`__øw_ªadl
(
ªg
Ë| (1 << 
off£t
),Ñeg);

436 i‡(
b™k
->
ªgs
->
˘æ
 && !
	`BANK_USED
(bank)) {

437 
__iomem
 *
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
˘æ
;

438 
u32
 
˘æ
;

440 
˘æ
 = 
	`__øw_ªadl
(
ªg
);

442 
˘æ
 &~
GPIO_MOD_CTRL_BIT
;

443 
	`__øw_wrôñ
(
˘æ
, 
ªg
);

444 
b™k
->
c⁄ãxt
.
˘æ
 = ctrl;

446 
	}
}

448 
	$_dißbÀ_gpio_moduÀ
(
gpio_b™k
 *
b™k
, 
off£t
)

450 
__iomem
 *
ba£
 = 
b™k
->base;

452 i‡(
b™k
->
ªgs
->
wkup_í
 &&

453 !
	`LINE_USED
(
b™k
->
mod_ußge
, 
off£t
) &&

454 !
	`LINE_USED
(
b™k
->
úq_ußge
, 
off£t
)) {

456 
	`_gpio_rmw
(
ba£
, 
b™k
->
ªgs
->
wkup_í
, 1 << 
off£t
, 0);

457 
b™k
->
c⁄ãxt
.
wake_í
 =

458 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
wkup_í
);

461 i‡(
b™k
->
ªgs
->
˘æ
 && !
	`BANK_USED
(bank)) {

462 
__iomem
 *
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
˘æ
;

463 
u32
 
˘æ
;

465 
˘æ
 = 
	`__øw_ªadl
(
ªg
);

467 
˘æ
 |
GPIO_MOD_CTRL_BIT
;

468 
	`__øw_wrôñ
(
˘æ
, 
ªg
);

469 
b™k
->
c⁄ãxt
.
˘æ
 = ctrl;

471 
	}
}

473 
	$gpio_is_öput
(
gpio_b™k
 *
b™k
, 
mask
)

475 
__iomem
 *
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
dúe˘i⁄
;

477  
	`__øw_ªadl
(
ªg
Ë& 
mask
;

478 
	}
}

480 
	$gpio_úq_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

482 
gpio_b™k
 *
b™k
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

483 
gpio
 = 0;

484 
ªtvÆ
;

485 
Êags
;

486 
off£t
;

488 i‡(!
	`BANK_USED
(
b™k
))

489 
	`pm_ru¡ime_gë_sync
(
b™k
->
dev
);

491 #ifde‡
CONFIG_ARCH_OMAP1


492 i‡(
d
->
úq
 > 
IH_MPUIO_BASE
)

493 
gpio
 = 
	`OMAP_MPUIO
(
d
->
úq
 - 
IH_MPUIO_BASE
);

496 i‡(!
gpio
)

497 
gpio
 = 
	`úq_to_gpio
(
b™k
, 
d
->
hwúq
);

499 i‡(
ty≥
 & ~
IRQ_TYPE_SENSE_MASK
)

500  -
EINVAL
;

502 i‡(!
b™k
->
ªgs
->
Àvñdëe˘0
 &&

503 (
ty≥
 & (
IRQ_TYPE_LEVEL_LOW
|
IRQ_TYPE_LEVEL_HIGH
)))

504  -
EINVAL
;

506 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

507 
off£t
 = 
	`GPIO_INDEX
(
b™k
, 
gpio
);

508 
ªtvÆ
 = 
	`_£t_gpio_åiggîög
(
b™k
, 
off£t
, 
ty≥
);

509 i‡(!
	`LINE_USED
(
b™k
->
mod_ußge
, 
off£t
)) {

510 
	`_íabÀ_gpio_moduÀ
(
b™k
, 
off£t
);

511 
	`_£t_gpio_dúe˘i⁄
(
b™k
, 
off£t
, 1);

512 } i‡(!
	`gpio_is_öput
(
b™k
, 1 << 
off£t
)) {

513 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

514  -
EINVAL
;

517 
b™k
->
úq_ußge
 |1 << 
	`GPIO_INDEX
(b™k, 
gpio
);

518 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

520 i‡(
ty≥
 & (
IRQ_TYPE_LEVEL_LOW
 | 
IRQ_TYPE_LEVEL_HIGH
))

521 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_Àvñ_úq
);

522 i‡(
ty≥
 & (
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
))

523 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_edge_úq
);

525  
ªtvÆ
;

526 
	}
}

528 
	$_˛ór_gpio_úqb™k
(
gpio_b™k
 *
b™k
, 
gpio_mask
)

530 
__iomem
 *
ªg
 = 
b™k
->
ba£
;

532 
ªg
 +
b™k
->
ªgs
->
úq°©us
;

533 
	`__øw_wrôñ
(
gpio_mask
, 
ªg
);

536 i‡(
b™k
->
ªgs
->
úq°©us2
) {

537 
ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
úq°©us2
;

538 
	`__øw_wrôñ
(
gpio_mask
, 
ªg
);

542 
	`__øw_ªadl
(
ªg
);

543 
	}
}

545 
ölöe
 
	$_˛ór_gpio_úq°©us
(
gpio_b™k
 *
b™k
, 
gpio
)

547 
	`_˛ór_gpio_úqb™k
(
b™k
, 
	`GPIO_BIT
(b™k, 
gpio
));

548 
	}
}

550 
u32
 
	$_gë_gpio_úqb™k_mask
(
gpio_b™k
 *
b™k
)

552 
__iomem
 *
ªg
 = 
b™k
->
ba£
;

553 
u32
 
l
;

554 
u32
 
mask
 = (1 << 
b™k
->
width
) - 1;

556 
ªg
 +
b™k
->
ªgs
->
úqíabÀ
;

557 
l
 = 
	`__øw_ªadl
(
ªg
);

558 i‡(
b™k
->
ªgs
->
úqíabÀ_öv
)

559 
l
 = ~l;

560 
l
 &
mask
;

561  
l
;

562 
	}
}

564 
	$_íabÀ_gpio_úqb™k
(
gpio_b™k
 *
b™k
, 
gpio_mask
)

566 
__iomem
 *
ªg
 = 
b™k
->
ba£
;

567 
u32
 
l
;

569 i‡(
b™k
->
ªgs
->
£t_úqíabÀ
) {

570 
ªg
 +
b™k
->
ªgs
->
£t_úqíabÀ
;

571 
l
 = 
gpio_mask
;

572 
b™k
->
c⁄ãxt
.
úqíabÀ1
 |
gpio_mask
;

574 
ªg
 +
b™k
->
ªgs
->
úqíabÀ
;

575 
l
 = 
	`__øw_ªadl
(
ªg
);

576 i‡(
b™k
->
ªgs
->
úqíabÀ_öv
)

577 
l
 &~
gpio_mask
;

579 
l
 |
gpio_mask
;

580 
b™k
->
c⁄ãxt
.
úqíabÀ1
 = 
l
;

583 
	`__øw_wrôñ
(
l
, 
ªg
);

584 
	}
}

586 
	$_dißbÀ_gpio_úqb™k
(
gpio_b™k
 *
b™k
, 
gpio_mask
)

588 
__iomem
 *
ªg
 = 
b™k
->
ba£
;

589 
u32
 
l
;

591 i‡(
b™k
->
ªgs
->
˛r_úqíabÀ
) {

592 
ªg
 +
b™k
->
ªgs
->
˛r_úqíabÀ
;

593 
l
 = 
gpio_mask
;

594 
b™k
->
c⁄ãxt
.
úqíabÀ1
 &~
gpio_mask
;

596 
ªg
 +
b™k
->
ªgs
->
úqíabÀ
;

597 
l
 = 
	`__øw_ªadl
(
ªg
);

598 i‡(
b™k
->
ªgs
->
úqíabÀ_öv
)

599 
l
 |
gpio_mask
;

601 
l
 &~
gpio_mask
;

602 
b™k
->
c⁄ãxt
.
úqíabÀ1
 = 
l
;

605 
	`__øw_wrôñ
(
l
, 
ªg
);

606 
	}
}

608 
ölöe
 
	$_£t_gpio_úqíabÀ
(
gpio_b™k
 *
b™k
, 
gpio
, 
íabÀ
)

610 i‡(
íabÀ
)

611 
	`_íabÀ_gpio_úqb™k
(
b™k
, 
	`GPIO_BIT
(b™k, 
gpio
));

613 
	`_dißbÀ_gpio_úqb™k
(
b™k
, 
	`GPIO_BIT
(b™k, 
gpio
));

614 
	}
}

624 
	$_£t_gpio_wakeup
(
gpio_b™k
 *
b™k
, 
gpio
, 
íabÀ
)

626 
u32
 
gpio_bô
 = 
	`GPIO_BIT
(
b™k
, 
gpio
);

627 
Êags
;

629 i‡(
b™k
->
n⁄_wakeup_gpios
 & 
gpio_bô
) {

630 
	`dev_îr
(
b™k
->
dev
,

631 "U«bÀÅÿmodify wakeu∞⁄Ç⁄-wakeu∞GPIO%d\n", 
gpio
);

632  -
EINVAL
;

635 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

636 i‡(
íabÀ
)

637 
b™k
->
c⁄ãxt
.
wake_í
 |
gpio_bô
;

639 
b™k
->
c⁄ãxt
.
wake_í
 &~
gpio_bô
;

641 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
wake_í
, b™k->
ba£
 + b™k->
ªgs
->
wkup_í
);

642 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

645 
	}
}

647 
	$_ª£t_gpio
(
gpio_b™k
 *
b™k
, 
gpio
)

649 
	`_£t_gpio_dúe˘i⁄
(
b™k
, 
	`GPIO_INDEX
(b™k, 
gpio
), 1);

650 
	`_£t_gpio_úqíabÀ
(
b™k
, 
gpio
, 0);

651 
	`_˛ór_gpio_úq°©us
(
b™k
, 
gpio
);

652 
	`_£t_gpio_åiggîög
(
b™k
, 
	`GPIO_INDEX
(b™k, 
gpio
), 
IRQ_TYPE_NONE
);

653 
	`_˛ór_gpio_deboun˚
(
b™k
, 
gpio
);

654 
	}
}

657 
	$gpio_wake_íabÀ
(
úq_d©a
 *
d
, 
íabÀ
)

659 
gpio_b™k
 *
b™k
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

660 
gpio
 = 
	`úq_to_gpio
(
b™k
, 
d
->
hwúq
);

662  
	`_£t_gpio_wakeup
(
b™k
, 
gpio
, 
íabÀ
);

663 
	}
}

665 
	$om≠_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

667 
gpio_b™k
 *
b™k
 = 
	`c⁄èöî_of
(
chù
, gpio_bank, chip);

668 
Êags
;

674 i‡(!
	`BANK_USED
(
b™k
))

675 
	`pm_ru¡ime_gë_sync
(
b™k
->
dev
);

677 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

682 i‡(!
	`LINE_USED
(
b™k
->
úq_ußge
, 
off£t
)) {

683 
	`_£t_gpio_åiggîög
(
b™k
, 
off£t
, 
IRQ_TYPE_NONE
);

684 
	`_íabÀ_gpio_moduÀ
(
b™k
, 
off£t
);

686 
b™k
->
mod_ußge
 |1 << 
off£t
;

687 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

690 
	}
}

692 
	$om≠_gpio_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

694 
gpio_b™k
 *
b™k
 = 
	`c⁄èöî_of
(
chù
, gpio_bank, chip);

695 
Êags
;

697 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

698 
b™k
->
mod_ußge
 &~(1 << 
off£t
);

699 
	`_dißbÀ_gpio_moduÀ
(
b™k
, 
off£t
);

700 
	`_ª£t_gpio
(
b™k
, b™k->
chù
.
ba£
 + 
off£t
);

701 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

707 i‡(!
	`BANK_USED
(
b™k
))

708 
	`pm_ru¡ime_put
(
b™k
->
dev
);

709 
	}
}

720 
	$gpio_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

722 
__iomem
 *
i§_ªg
 = 
NULL
;

723 
u32
 
i§
;

724 
bô
;

725 
gpio_b™k
 *
b™k
;

726 
unmasked
 = 0;

727 
úq_chù
 *
chù
 = 
	`úq_desc_gë_chù
(
desc
);

729 
	`chaöed_úq_íãr
(
chù
, 
desc
);

731 
b™k
 = 
	`úq_gë_h™dÀr_d©a
(
úq
);

732 
i§_ªg
 = 
b™k
->
ba£
 + b™k->
ªgs
->
úq°©us
;

733 
	`pm_ru¡ime_gë_sync
(
b™k
->
dev
);

735 i‡(
	`WARN_ON
(!
i§_ªg
))

736 
exô
;

739 
u32
 
i§_ßved
, 
Àvñ_mask
 = 0;

740 
u32
 
íabÀd
;

742 
íabÀd
 = 
	`_gë_gpio_úqb™k_mask
(
b™k
);

743 
i§_ßved
 = 
i§
 = 
	`__øw_ªadl
(
i§_ªg
Ë& 
íabÀd
;

745 i‡(
b™k
->
Àvñ_mask
)

746 
Àvñ_mask
 = 
b™k
->Àvñ_mask & 
íabÀd
;

751 
	`_dißbÀ_gpio_úqb™k
(
b™k
, 
i§_ßved
 & ~
Àvñ_mask
);

752 
	`_˛ór_gpio_úqb™k
(
b™k
, 
i§_ßved
 & ~
Àvñ_mask
);

753 
	`_íabÀ_gpio_úqb™k
(
b™k
, 
i§_ßved
 & ~
Àvñ_mask
);

757 i‡(!
Àvñ_mask
 && !
unmasked
) {

758 
unmasked
 = 1;

759 
	`chaöed_úq_exô
(
chù
, 
desc
);

762 i‡(!
i§
)

765 
i§
) {

766 
bô
 = 
	`__ffs
(
i§
);

767 
i§
 &~(1 << 
bô
);

776 i‡(
b™k
->
toggÀ_mask
 & (1 << 
bô
))

777 
	`_toggÀ_gpio_edge_åiggîög
(
b™k
, 
bô
);

779 
	`gíîic_h™dÀ_úq
(
	`úq_föd_m≠pög
(
b™k
->
domaö
, 
bô
));

786 
exô
:

787 i‡(!
unmasked
)

788 
	`chaöed_úq_exô
(
chù
, 
desc
);

789 
	`pm_ru¡ime_put
(
b™k
->
dev
);

790 
	}
}

792 
	$gpio_úq_shutdown
(
úq_d©a
 *
d
)

794 
gpio_b™k
 *
b™k
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

795 
gpio
 = 
	`úq_to_gpio
(
b™k
, 
d
->
hwúq
);

796 
Êags
;

797 
off£t
 = 
	`GPIO_INDEX
(
b™k
, 
gpio
);

799 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

800 
b™k
->
úq_ußge
 &~(1 << 
off£t
);

801 
	`_dißbÀ_gpio_moduÀ
(
b™k
, 
off£t
);

802 
	`_ª£t_gpio
(
b™k
, 
gpio
);

803 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

809 i‡(!
	`BANK_USED
(
b™k
))

810 
	`pm_ru¡ime_put
(
b™k
->
dev
);

811 
	}
}

813 
	$gpio_ack_úq
(
úq_d©a
 *
d
)

815 
gpio_b™k
 *
b™k
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

816 
gpio
 = 
	`úq_to_gpio
(
b™k
, 
d
->
hwúq
);

818 
	`_˛ór_gpio_úq°©us
(
b™k
, 
gpio
);

819 
	}
}

821 
	$gpio_mask_úq
(
úq_d©a
 *
d
)

823 
gpio_b™k
 *
b™k
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

824 
gpio
 = 
	`úq_to_gpio
(
b™k
, 
d
->
hwúq
);

825 
Êags
;

827 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

828 
	`_£t_gpio_úqíabÀ
(
b™k
, 
gpio
, 0);

829 
	`_£t_gpio_åiggîög
(
b™k
, 
	`GPIO_INDEX
(b™k, 
gpio
), 
IRQ_TYPE_NONE
);

830 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

831 
	}
}

833 
	$gpio_unmask_úq
(
úq_d©a
 *
d
)

835 
gpio_b™k
 *
b™k
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

836 
gpio
 = 
	`úq_to_gpio
(
b™k
, 
d
->
hwúq
);

837 
úq_mask
 = 
	`GPIO_BIT
(
b™k
, 
gpio
);

838 
u32
 
åiggî
 = 
	`úqd_gë_åiggî_ty≥
(
d
);

839 
Êags
;

841 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

842 i‡(
åiggî
)

843 
	`_£t_gpio_åiggîög
(
b™k
, 
	`GPIO_INDEX
(b™k, 
gpio
), 
åiggî
);

847 i‡(
b™k
->
Àvñ_mask
 & 
úq_mask
) {

848 
	`_£t_gpio_úqíabÀ
(
b™k
, 
gpio
, 0);

849 
	`_˛ór_gpio_úq°©us
(
b™k
, 
gpio
);

852 
	`_£t_gpio_úqíabÀ
(
b™k
, 
gpio
, 1);

853 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

854 
	}
}

856 
úq_chù
 
	ggpio_úq_chù
 = {

857 .
«me
 = "GPIO",

858 .
	gúq_shutdown
 = 
gpio_úq_shutdown
,

859 .
	gúq_ack
 = 
gpio_ack_úq
,

860 .
	gúq_mask
 = 
gpio_mask_úq
,

861 .
	gúq_unmask
 = 
gpio_unmask_úq
,

862 .
	gúq_£t_ty≥
 = 
gpio_úq_ty≥
,

863 .
	gúq_£t_wake
 = 
gpio_wake_íabÀ
,

868 
	$om≠_mpuio_su•íd_noúq
(
devi˚
 *
dev
)

870 
∂©f‹m_devi˚
 *
pdev
 = 
	`to_∂©f‹m_devi˚
(
dev
);

871 
gpio_b™k
 *
b™k
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

872 
__iomem
 *
mask_ªg
 = 
b™k
->
ba£
 +

873 
OMAP_MPUIO_GPIO_MASKIT
 / 
b™k
->
°ride
;

874 
Êags
;

876 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

877 
	`__øw_wrôñ
(0xfff‡& ~
b™k
->
c⁄ãxt
.
wake_í
, 
mask_ªg
);

878 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

881 
	}
}

883 
	$om≠_mpuio_ªsume_noúq
(
devi˚
 *
dev
)

885 
∂©f‹m_devi˚
 *
pdev
 = 
	`to_∂©f‹m_devi˚
(
dev
);

886 
gpio_b™k
 *
b™k
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

887 
__iomem
 *
mask_ªg
 = 
b™k
->
ba£
 +

888 
OMAP_MPUIO_GPIO_MASKIT
 / 
b™k
->
°ride
;

889 
Êags
;

891 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

892 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
wake_í
, 
mask_ªg
);

893 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

896 
	}
}

898 c⁄° 
dev_pm_›s
 
	gom≠_mpuio_dev_pm_›s
 = {

899 .
su•íd_noúq
 = 
om≠_mpuio_su•íd_noúq
,

900 .
	gªsume_noúq
 = 
om≠_mpuio_ªsume_noúq
,

904 
∂©f‹m_drivî
 
	gom≠_mpuio_drivî
 = {

905 .
drivî
 = {

906 .
«me
 = "mpuio",

907 .
	gpm
 = &
om≠_mpuio_dev_pm_›s
,

911 
∂©f‹m_devi˚
 
	gom≠_mpuio_devi˚
 = {

912 .
«me
 = "mpuio",

913 .
	gid
 = -1,

914 .
	gdev
 = {

915 .
drivî
 = &
om≠_mpuio_drivî
.driver,

920 
ölöe
 
	$mpuio_öô
(
gpio_b™k
 *
b™k
)

922 
	`∂©f‹m_£t_drvd©a
(&
om≠_mpuio_devi˚
, 
b™k
);

924 i‡(
	`∂©f‹m_drivî_ªgi°î
(&
om≠_mpuio_drivî
) == 0)

925 (Ë
	`∂©f‹m_devi˚_ªgi°î
(&
om≠_mpuio_devi˚
);

926 
	}
}

930 
	$gpio_öput
(
gpio_chù
 *
chù
, 
off£t
)

932 
gpio_b™k
 *
b™k
;

933 
Êags
;

935 
b™k
 = 
	`c⁄èöî_of
(
chù
, 
gpio_b™k
, chip);

936 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

937 
	`_£t_gpio_dúe˘i⁄
(
b™k
, 
off£t
, 1);

938 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

940 
	}
}

942 
	$gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

944 
gpio_b™k
 *
b™k
;

945 
u32
 
mask
;

947 
b™k
 = 
	`c⁄èöî_of
(
chù
, 
gpio_b™k
, chip);

948 
mask
 = (1 << 
off£t
);

950 i‡(
	`gpio_is_öput
(
b™k
, 
mask
))

951  
	`_gë_gpio_d©aö
(
b™k
, 
off£t
);

953  
	`_gë_gpio_d©aout
(
b™k
, 
off£t
);

954 
	}
}

956 
	$gpio_ouçut
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

958 
gpio_b™k
 *
b™k
;

959 
Êags
;

960 
ªtvÆ
 = 0;

962 
b™k
 = 
	`c⁄èöî_of
(
chù
, 
gpio_b™k
, chip);

963 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

965 i‡(
	`LINE_USED
(
b™k
->
úq_ußge
, 
off£t
)) {

966 
ªtvÆ
 = -
EINVAL
;

967 
exô
;

970 
b™k
->
	`£t_d©aout
(b™k, 
off£t
, 
vÆue
);

971 
	`_£t_gpio_dúe˘i⁄
(
b™k
, 
off£t
, 0);

973 
exô
:

974 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

975  
ªtvÆ
;

976 
	}
}

978 
	$gpio_deboun˚
(
gpio_chù
 *
chù
, 
off£t
,

979 
deboun˚
)

981 
gpio_b™k
 *
b™k
;

982 
Êags
;

984 
b™k
 = 
	`c⁄èöî_of
(
chù
, 
gpio_b™k
, chip);

986 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

987 
	`_£t_gpio_deboun˚
(
b™k
, 
off£t
, 
deboun˚
);

988 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

991 
	}
}

993 
	$gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

995 
gpio_b™k
 *
b™k
;

996 
Êags
;

998 
b™k
 = 
	`c⁄èöî_of
(
chù
, 
gpio_b™k
, chip);

999 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

1000 
b™k
->
	`£t_d©aout
(b™k, 
off£t
, 
vÆue
);

1001 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

1002 
	}
}

1006 
__öô
 
	$om≠_gpio_show_ªv
(
gpio_b™k
 *
b™k
)

1008 
boﬁ
 
ˇŒed
;

1009 
u32
 
ªv
;

1011 i‡(
ˇŒed
 || 
b™k
->
ªgs
->
ªvisi⁄
 =
USHRT_MAX
)

1014 
ªv
 = 
	`__øw_ªadw
(
b™k
->
ba£
 + b™k->
ªgs
->
ªvisi⁄
);

1015 
	`¥_öfo
("OMAP GPIO hardware version %d.%d\n",

1016 (
ªv
 >> 4) & 0x0f,Ñev & 0x0f);

1018 
ˇŒed
 = 
åue
;

1019 
	}
}

1024 
lock_˛ass_key
 
	ggpio_lock_˛ass
;

1026 
	$om≠_gpio_mod_öô
(
gpio_b™k
 *
b™k
)

1028 
__iomem
 *
ba£
 = 
b™k
->base;

1029 
u32
 
l
 = 0xffffffff;

1031 i‡(
b™k
->
width
 == 16)

1032 
l
 = 0xffff;

1034 i‡(
b™k
->
is_mpuio
) {

1035 
	`__øw_wrôñ
(
l
, 
b™k
->
ba£
 + b™k->
ªgs
->
úqíabÀ
);

1039 
	`_gpio_rmw
(
ba£
, 
b™k
->
ªgs
->
úqíabÀ
, 
l
, b™k->ªgs->
úqíabÀ_öv
);

1040 
	`_gpio_rmw
(
ba£
, 
b™k
->
ªgs
->
úq°©us
, 
l
, !b™k->ªgs->
úqíabÀ_öv
);

1041 i‡(
b™k
->
ªgs
->
deboun˚_í
)

1042 
	`__øw_wrôñ
(0, 
ba£
 + 
b™k
->
ªgs
->
deboun˚_í
);

1045 
b™k
->
c⁄ãxt
.
€
 = 
	`__øw_ªadl
(b™k->
ba£
 + b™k->
ªgs
->
dúe˘i⁄
);

1047 i‡(
b™k
->
ªgs
->
˘æ
)

1048 
	`__øw_wrôñ
(0, 
ba£
 + 
b™k
->
ªgs
->
˘æ
);

1050 
b™k
->
dbck
 = 
	`˛k_gë
(b™k->
dev
, "dbclk");

1051 i‡(
	`IS_ERR
(
b™k
->
dbck
))

1052 
	`dev_îr
(
b™k
->
dev
, "CouldÇot get gpio dbck\n");

1053 
	}
}

1056 
	$om≠_mpuio_Æloc_gc
(
gpio_b™k
 *
b™k
, 
úq_°¨t
,

1057 
num
)

1059 
úq_chù_gíîic
 *
gc
;

1060 
úq_chù_ty≥
 *
˘
;

1062 
gc
 = 
	`úq_Æloc_gíîic_chù
("MPUIO", 1, 
úq_°¨t
, 
b™k
->
ba£
,

1063 
h™dÀ_sim∂e_úq
);

1064 i‡(!
gc
) {

1065 
	`dev_îr
(
b™k
->
dev
, "Memoryálloc failed for gc\n");

1069 
˘
 = 
gc
->
chù_ty≥s
;

1072 
˘
->
chù
.
úq_mask
 = 
úq_gc_mask_£t_bô
;

1073 
˘
->
chù
.
úq_unmask
 = 
úq_gc_mask_˛r_bô
;

1074 
˘
->
chù
.
úq_£t_ty≥
 = 
gpio_úq_ty≥
;

1076 i‡(
b™k
->
ªgs
->
wkup_í
)

1077 
˘
->
chù
.
úq_£t_wake
 = 
gpio_wake_íabÀ
,

1079 
˘
->
ªgs
.
mask
 = 
OMAP_MPUIO_GPIO_INT
 / 
b™k
->
°ride
;

1080 
	`úq_£tup_gíîic_chù
(
gc
, 
	`IRQ_MSK
(
num
), 
IRQ_GC_INIT_MASK_CACHE
,

1081 
IRQ_NOREQUEST
 | 
IRQ_NOPROBE
, 0);

1082 
	}
}

1084 
	$om≠_gpio_chù_öô
(
gpio_b™k
 *
b™k
)

1086 
j
;

1087 
gpio
;

1093 
b™k
->
chù
.
ªque°
 = 
om≠_gpio_ªque°
;

1094 
b™k
->
chù
.
‰ì
 = 
om≠_gpio_‰ì
;

1095 
b™k
->
chù
.
dúe˘i⁄_öput
 = 
gpio_öput
;

1096 
b™k
->
chù
.
gë
 = 
gpio_gë
;

1097 
b™k
->
chù
.
dúe˘i⁄_ouçut
 = 
gpio_ouçut
;

1098 
b™k
->
chù
.
£t_deboun˚
 = 
gpio_deboun˚
;

1099 
b™k
->
chù
.
£t
 = 
gpio_£t
;

1100 
b™k
->
chù
.
to_úq
 = 
om≠_gpio_to_úq
;

1101 i‡(
b™k
->
is_mpuio
) {

1102 
b™k
->
chù
.
œbñ
 = "mpuio";

1103 i‡(
b™k
->
ªgs
->
wkup_í
)

1104 
b™k
->
chù
.
dev
 = &
om≠_mpuio_devi˚
.dev;

1105 
b™k
->
chù
.
ba£
 = 
	`OMAP_MPUIO
(0);

1107 
b™k
->
chù
.
œbñ
 = "gpio";

1108 
b™k
->
chù
.
ba£
 = 
gpio
;

1109 
gpio
 +
b™k
->
width
;

1111 
b™k
->
chù
.
ngpio
 = b™k->
width
;

1113 
	`gpiochù_add
(&
b™k
->
chù
);

1115 
j
 = 0; j < 
b™k
->
width
; j++) {

1116 
úq
 = 
	`úq_¸óã_m≠pög
(
b™k
->
domaö
, 
j
);

1117 
	`úq_£t_lockdï_˛ass
(
úq
, &
gpio_lock_˛ass
);

1118 
	`úq_£t_chù_d©a
(
úq
, 
b™k
);

1119 i‡(
b™k
->
is_mpuio
) {

1120 
	`om≠_mpuio_Æloc_gc
(
b™k
, 
úq
, b™k->
width
);

1122 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
gpio_úq_chù
,

1123 
h™dÀ_sim∂e_úq
);

1124 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

1127 
	`úq_£t_chaöed_h™dÀr
(
b™k
->
úq
, 
gpio_úq_h™dÀr
);

1128 
	`úq_£t_h™dÀr_d©a
(
b™k
->
úq
, bank);

1129 
	}
}

1131 c⁄° 
of_devi˚_id
 
	gom≠_gpio_m©ch
[];

1133 
	$om≠_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1135 
devi˚
 *
dev
 = &
pdev
->dev;

1136 
devi˚_node
 *
node
 = 
dev
->
of_node
;

1137 c⁄° 
of_devi˚_id
 *
m©ch
;

1138 c⁄° 
om≠_gpio_∂©f‹m_d©a
 *
pd©a
;

1139 
ªsour˚
 *
ªs
;

1140 
gpio_b™k
 *
b™k
;

1141 #ifde‡
CONFIG_ARCH_OMAP1


1142 
úq_ba£
;

1145 
m©ch
 = 
	`of_m©ch_devi˚
(
	`of_m©ch_±r
(
om≠_gpio_m©ch
), 
dev
);

1147 
pd©a
 = 
m©ch
 ? m©ch->
d©a
 : 
dev
->
∂©f‹m_d©a
;

1148 i‡(!
pd©a
)

1149  -
EINVAL
;

1151 
b™k
 = 
	`devm_kzÆloc
(
dev
, (
gpio_b™k
), 
GFP_KERNEL
);

1152 i‡(!
b™k
) {

1153 
	`dev_îr
(
dev
, "Memoryálloc failed\n");

1154  -
ENOMEM
;

1157 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

1158 i‡(
	`u∆ikñy
(!
ªs
)) {

1159 
	`dev_îr
(
dev
, "Invalid IRQÑesource\n");

1160  -
ENODEV
;

1163 
b™k
->
úq
 = 
ªs
->
°¨t
;

1164 
b™k
->
dev
 = dev;

1165 
b™k
->
dbck_Êag
 = 
pd©a
->dbck_flag;

1166 
b™k
->
°ride
 = 
pd©a
->
b™k_°ride
;

1167 
b™k
->
width
 = 
pd©a
->
b™k_width
;

1168 
b™k
->
is_mpuio
 = 
pd©a
->is_mpuio;

1169 
b™k
->
n⁄_wakeup_gpios
 = 
pd©a
->non_wakeup_gpios;

1170 
b™k
->
ªgs
 = 
pd©a
->regs;

1171 #ifde‡
CONFIG_OF_GPIO


1172 
b™k
->
chù
.
of_node
 = 
	`of_node_gë
(
node
);

1174 i‡(
node
) {

1175 i‡(!
	`of_¥›îty_ªad_boﬁ
(
node
, "ti,gpio-always-on"))

1176 
b™k
->
lo£s_c⁄ãxt
 = 
åue
;

1178 
b™k
->
lo£s_c⁄ãxt
 = 
pd©a
->loses_context;

1180 i‡(
b™k
->
lo£s_c⁄ãxt
)

1181 
b™k
->
gë_c⁄ãxt_loss_cou¡
 =

1182 
pd©a
->
gë_c⁄ãxt_loss_cou¡
;

1185 #ifde‡
CONFIG_ARCH_OMAP1


1191 
úq_ba£
 = 
	`úq_Æloc_descs
(-1, 0, 
b™k
->
width
, 0);

1192 i‡(
úq_ba£
 < 0) {

1193 
	`dev_îr
(
dev
, "Couldn'tállocate IRQÇumbers\n");

1194  -
ENODEV
;

1197 
b™k
->
domaö
 = 
	`úq_domaö_add_Àgacy
(
node
, b™k->
width
, 
úq_ba£
,

1198 0, &
úq_domaö_sim∂e_›s
, 
NULL
);

1200 
b™k
->
domaö
 = 
	`úq_domaö_add_löór
(
node
, b™k->
width
,

1201 &
úq_domaö_sim∂e_›s
, 
NULL
);

1203 i‡(!
b™k
->
domaö
) {

1204 
	`dev_îr
(
dev
, "Couldn'tÑegisterán IRQ domain\n");

1205  -
ENODEV
;

1208 i‡(
b™k
->
ªgs
->
£t_d©aout
 && b™k->ªgs->
˛r_d©aout
)

1209 
b™k
->
£t_d©aout
 = 
_£t_gpio_d©aout_ªg
;

1211 
b™k
->
£t_d©aout
 = 
_£t_gpio_d©aout_mask
;

1213 
	`•ö_lock_öô
(&
b™k
->
lock
);

1216 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

1217 i‡(
	`u∆ikñy
(!
ªs
)) {

1218 
	`dev_îr
(
dev
, "Invalid memÑesource\n");

1219 
	`úq_domaö_ªmove
(
b™k
->
domaö
);

1220  -
ENODEV
;

1223 i‡(!
	`devm_ªque°_mem_ªgi⁄
(
dev
, 
ªs
->
°¨t
, 
	`ªsour˚_size
(res),

1224 
pdev
->
«me
)) {

1225 
	`dev_îr
(
dev
, "Regionálready claimed\n");

1226 
	`úq_domaö_ªmove
(
b™k
->
domaö
);

1227  -
EBUSY
;

1230 
b™k
->
ba£
 = 
	`devm_i‹em≠
(
dev
, 
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

1231 i‡(!
b™k
->
ba£
) {

1232 
	`dev_îr
(
dev
, "CouldÇot ioremap\n");

1233 
	`úq_domaö_ªmove
(
b™k
->
domaö
);

1234  -
ENOMEM
;

1237 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
b™k
);

1239 
	`pm_ru¡ime_íabÀ
(
b™k
->
dev
);

1240 
	`pm_ru¡ime_úq_ß„
(
b™k
->
dev
);

1241 
	`pm_ru¡ime_gë_sync
(
b™k
->
dev
);

1243 i‡(
b™k
->
is_mpuio
)

1244 
	`mpuio_öô
(
b™k
);

1246 
	`om≠_gpio_mod_öô
(
b™k
);

1247 
	`om≠_gpio_chù_öô
(
b™k
);

1248 
	`om≠_gpio_show_ªv
(
b™k
);

1250 
	`pm_ru¡ime_put
(
b™k
->
dev
);

1252 
	`li°_add_èû
(&
b™k
->
node
, &
om≠_gpio_li°
);

1255 
	}
}

1257 #ifde‡
CONFIG_ARCH_OMAP2PLUS


1259 #i‡
deföed
(
CONFIG_PM_RUNTIME
)

1260 
om≠_gpio_ª°‹e_c⁄ãxt
(
gpio_b™k
 *
b™k
);

1262 
	$om≠_gpio_ru¡ime_su•íd
(
devi˚
 *
dev
)

1264 
∂©f‹m_devi˚
 *
pdev
 = 
	`to_∂©f‹m_devi˚
(
dev
);

1265 
gpio_b™k
 *
b™k
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1266 
u32
 
l1
 = 0, 
l2
 = 0;

1267 
Êags
;

1268 
u32
 
wake_low
, 
wake_hi
;

1270 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

1283 
wake_low
 = 
b™k
->
c⁄ãxt
.
Àvñdëe˘0
 & b™k->c⁄ãxt.
wake_í
;

1284 i‡(
wake_low
)

1285 
	`__øw_wrôñ
(
wake_low
 | 
b™k
->
c⁄ãxt
.
ÁŒögdëe˘
,

1286 
b™k
->
ba£
 + b™k->
ªgs
->
ÁŒögdëe˘
);

1287 
wake_hi
 = 
b™k
->
c⁄ãxt
.
Àvñdëe˘1
 & b™k->c⁄ãxt.
wake_í
;

1288 i‡(
wake_hi
)

1289 
	`__øw_wrôñ
(
wake_hi
 | 
b™k
->
c⁄ãxt
.
risögdëe˘
,

1290 
b™k
->
ba£
 + b™k->
ªgs
->
risögdëe˘
);

1292 i‡(!
b™k
->
íabÀd_n⁄_wakeup_gpios
)

1293 
upd©e_gpio_c⁄ãxt_cou¡
;

1295 i‡(
b™k
->
powî_mode
 !
OFF_MODE
) {

1296 
b™k
->
powî_mode
 = 0;

1297 
upd©e_gpio_c⁄ãxt_cou¡
;

1304 
b™k
->
ßved_d©aö
 = 
	`__øw_ªadl
(b™k->
ba£
 +

1305 
b™k
->
ªgs
->
d©aö
);

1306 
l1
 = 
b™k
->
c⁄ãxt
.
ÁŒögdëe˘
;

1307 
l2
 = 
b™k
->
c⁄ãxt
.
risögdëe˘
;

1309 
l1
 &~
b™k
->
íabÀd_n⁄_wakeup_gpios
;

1310 
l2
 &~
b™k
->
íabÀd_n⁄_wakeup_gpios
;

1312 
	`__øw_wrôñ
(
l1
, 
b™k
->
ba£
 + b™k->
ªgs
->
ÁŒögdëe˘
);

1313 
	`__øw_wrôñ
(
l2
, 
b™k
->
ba£
 + b™k->
ªgs
->
risögdëe˘
);

1315 
b™k
->
w‹k¨ound_íabÀd
 = 
åue
;

1317 
upd©e_gpio_c⁄ãxt_cou¡
:

1318 i‡(
b™k
->
gë_c⁄ãxt_loss_cou¡
)

1319 
b™k
->
c⁄ãxt_loss_cou¡
 =

1320 
b™k
->
	`gë_c⁄ãxt_loss_cou¡
(b™k->
dev
);

1322 
	`_gpio_dbck_dißbÀ
(
b™k
);

1323 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

1326 
	}
}

1328 
om≠_gpio_öô_c⁄ãxt
(
gpio_b™k
 *
p
);

1330 
	$om≠_gpio_ru¡ime_ªsume
(
devi˚
 *
dev
)

1332 
∂©f‹m_devi˚
 *
pdev
 = 
	`to_∂©f‹m_devi˚
(
dev
);

1333 
gpio_b™k
 *
b™k
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1334 
u32
 
l
 = 0, 
gí
, 
gí0
, 
gí1
;

1335 
Êags
;

1336 
c
;

1338 
	`•ö_lock_úqßve
(&
b™k
->
lock
, 
Êags
);

1345 i‡(
b™k
->
lo£s_c⁄ãxt
 && !b™k->
c⁄ãxt_vÆid
) {

1346 
	`om≠_gpio_öô_c⁄ãxt
(
b™k
);

1348 i‡(
b™k
->
gë_c⁄ãxt_loss_cou¡
)

1349 
b™k
->
c⁄ãxt_loss_cou¡
 =

1350 
b™k
->
	`gë_c⁄ãxt_loss_cou¡
(b™k->
dev
);

1353 
	`_gpio_dbck_íabÀ
(
b™k
);

1361 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
ÁŒögdëe˘
,

1362 
b™k
->
ba£
 + b™k->
ªgs
->
ÁŒögdëe˘
);

1363 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
risögdëe˘
,

1364 
b™k
->
ba£
 + b™k->
ªgs
->
risögdëe˘
);

1366 i‡(
b™k
->
lo£s_c⁄ãxt
) {

1367 i‡(!
b™k
->
gë_c⁄ãxt_loss_cou¡
) {

1368 
	`om≠_gpio_ª°‹e_c⁄ãxt
(
b™k
);

1370 
c
 = 
b™k
->
	`gë_c⁄ãxt_loss_cou¡
(b™k->
dev
);

1371 i‡(
c
 !
b™k
->
c⁄ãxt_loss_cou¡
) {

1372 
	`om≠_gpio_ª°‹e_c⁄ãxt
(
b™k
);

1374 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

1380 i‡(!
b™k
->
w‹k¨ound_íabÀd
) {

1381 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

1385 
l
 = 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
d©aö
);

1393 
l
 ^
b™k
->
ßved_d©aö
;

1394 
l
 &
b™k
->
íabÀd_n⁄_wakeup_gpios
;

1400 
gí0
 = 
l
 & 
b™k
->
c⁄ãxt
.
ÁŒögdëe˘
;

1401 
gí0
 &
b™k
->
ßved_d©aö
;

1403 
gí1
 = 
l
 & 
b™k
->
c⁄ãxt
.
risögdëe˘
;

1404 
gí1
 &~(
b™k
->
ßved_d©aö
);

1407 
gí
 = 
l
 & (~(
b™k
->
c⁄ãxt
.
ÁŒögdëe˘
) &

1408 ~(
b™k
->
c⁄ãxt
.
risögdëe˘
));

1410 
gí
 |
gí0
 | 
gí1
;

1412 i‡(
gí
) {

1413 
u32
 
ﬁd0
, 
ﬁd1
;

1415 
ﬁd0
 = 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘0
);

1416 
ﬁd1
 = 
	`__øw_ªadl
(
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘1
);

1418 i‡(!
b™k
->
ªgs
->
úq°©us_øw0
) {

1419 
	`__øw_wrôñ
(
ﬁd0
 | 
gí
, 
b™k
->
ba£
 +

1420 
b™k
->
ªgs
->
Àvñdëe˘0
);

1421 
	`__øw_wrôñ
(
ﬁd1
 | 
gí
, 
b™k
->
ba£
 +

1422 
b™k
->
ªgs
->
Àvñdëe˘1
);

1425 i‡(
b™k
->
ªgs
->
úq°©us_øw0
) {

1426 
	`__øw_wrôñ
(
ﬁd0
 | 
l
, 
b™k
->
ba£
 +

1427 
b™k
->
ªgs
->
Àvñdëe˘0
);

1428 
	`__øw_wrôñ
(
ﬁd1
 | 
l
, 
b™k
->
ba£
 +

1429 
b™k
->
ªgs
->
Àvñdëe˘1
);

1431 
	`__øw_wrôñ
(
ﬁd0
, 
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘0
);

1432 
	`__øw_wrôñ
(
ﬁd1
, 
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘1
);

1435 
b™k
->
w‹k¨ound_íabÀd
 = 
Ál£
;

1436 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lock
, 
Êags
);

1439 
	}
}

1442 
	$om≠2_gpio_¥ï¨e_f‹_idÀ
(
pwr_mode
)

1444 
gpio_b™k
 *
b™k
;

1446 
	`li°_f‹_óch_íåy
(
b™k
, &
om≠_gpio_li°
, 
node
) {

1447 i‡(!
	`BANK_USED
(
b™k
Ë|| !b™k->
lo£s_c⁄ãxt
)

1450 
b™k
->
powî_mode
 = 
pwr_mode
;

1452 
	`pm_ru¡ime_put_sync_su•íd
(
b™k
->
dev
);

1454 
	}
}

1456 
	$om≠2_gpio_ªsume_a·î_idÀ
()

1458 
gpio_b™k
 *
b™k
;

1460 
	`li°_f‹_óch_íåy
(
b™k
, &
om≠_gpio_li°
, 
node
) {

1461 i‡(!
	`BANK_USED
(
b™k
Ë|| !b™k->
lo£s_c⁄ãxt
)

1464 
	`pm_ru¡ime_gë_sync
(
b™k
->
dev
);

1466 
	}
}

1468 #i‡
deföed
(
CONFIG_PM_RUNTIME
)

1469 
	$om≠_gpio_öô_c⁄ãxt
(
gpio_b™k
 *
p
)

1471 
om≠_gpio_ªg_offs
 *
ªgs
 = 
p
->regs;

1472 
__iomem
 *
ba£
 = 
p
->base;

1474 
p
->
c⁄ãxt
.
˘æ
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->ctrl);

1475 
p
->
c⁄ãxt
.
€
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->
dúe˘i⁄
);

1476 
p
->
c⁄ãxt
.
wake_í
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->
wkup_í
);

1477 
p
->
c⁄ãxt
.
Àvñdëe˘0
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->leveldetect0);

1478 
p
->
c⁄ãxt
.
Àvñdëe˘1
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->leveldetect1);

1479 
p
->
c⁄ãxt
.
risögdëe˘
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->risingdetect);

1480 
p
->
c⁄ãxt
.
ÁŒögdëe˘
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->fallingdetect);

1481 
p
->
c⁄ãxt
.
úqíabÀ1
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->
úqíabÀ
);

1482 
p
->
c⁄ãxt
.
úqíabÀ2
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->irqenable2);

1484 i‡(
ªgs
->
£t_d©aout
 && 
p
->ªgs->
˛r_d©aout
)

1485 
p
->
c⁄ãxt
.
d©aout
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->
£t_d©aout
);

1487 
p
->
c⁄ãxt
.
d©aout
 = 
	`__øw_ªadl
(
ba£
 + 
ªgs
->dataout);

1489 
p
->
c⁄ãxt_vÆid
 = 
åue
;

1490 
	}
}

1492 
	$om≠_gpio_ª°‹e_c⁄ãxt
(
gpio_b™k
 *
b™k
)

1494 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
wake_í
,

1495 
b™k
->
ba£
 + b™k->
ªgs
->
wkup_í
);

1496 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
˘æ
, b™k->
ba£
 + b™k->
ªgs
->ctrl);

1497 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
Àvñdëe˘0
,

1498 
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘0
);

1499 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
Àvñdëe˘1
,

1500 
b™k
->
ba£
 + b™k->
ªgs
->
Àvñdëe˘1
);

1501 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
risögdëe˘
,

1502 
b™k
->
ba£
 + b™k->
ªgs
->
risögdëe˘
);

1503 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
ÁŒögdëe˘
,

1504 
b™k
->
ba£
 + b™k->
ªgs
->
ÁŒögdëe˘
);

1505 i‡(
b™k
->
ªgs
->
£t_d©aout
 && b™k->ªgs->
˛r_d©aout
)

1506 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
d©aout
,

1507 
b™k
->
ba£
 + b™k->
ªgs
->
£t_d©aout
);

1509 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
d©aout
,

1510 
b™k
->
ba£
 + b™k->
ªgs
->
d©aout
);

1511 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
€
, b™k->
ba£
 + b™k->
ªgs
->
dúe˘i⁄
);

1513 i‡(
b™k
->
dbck_íabÀ_mask
) {

1514 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
deboun˚
, b™k->
ba£
 +

1515 
b™k
->
ªgs
->
deboun˚
);

1516 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
deboun˚_í
,

1517 
b™k
->
ba£
 + b™k->
ªgs
->
deboun˚_í
);

1520 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
úqíabÀ1
,

1521 
b™k
->
ba£
 + b™k->
ªgs
->
úqíabÀ
);

1522 
	`__øw_wrôñ
(
b™k
->
c⁄ãxt
.
úqíabÀ2
,

1523 
b™k
->
ba£
 + b™k->
ªgs
->
úqíabÀ2
);

1524 
	}
}

1527 
	#om≠_gpio_ru¡ime_su•íd
 
NULL


	)

1528 
	#om≠_gpio_ru¡ime_ªsume
 
NULL


	)

1529 
	$om≠_gpio_öô_c⁄ãxt
(
gpio_b™k
 *
p
Ë{
	}
}

1532 c⁄° 
dev_pm_›s
 
	ggpio_pm_›s
 = {

1533 
SET_RUNTIME_PM_OPS
(
om≠_gpio_ru¡ime_su•íd
, 
om≠_gpio_ru¡ime_ªsume
,

1534 
NULL
)

1537 #i‡
deföed
(
CONFIG_OF
)

1538 
om≠_gpio_ªg_offs
 
	gom≠2_gpio_ªgs
 = {

1539 .
ªvisi⁄
 = 
OMAP24XX_GPIO_REVISION
,

1540 .
	gdúe˘i⁄
 = 
OMAP24XX_GPIO_OE
,

1541 .
	gd©aö
 = 
OMAP24XX_GPIO_DATAIN
,

1542 .
	gd©aout
 = 
OMAP24XX_GPIO_DATAOUT
,

1543 .
	g£t_d©aout
 = 
OMAP24XX_GPIO_SETDATAOUT
,

1544 .
	g˛r_d©aout
 = 
OMAP24XX_GPIO_CLEARDATAOUT
,

1545 .
	gúq°©us
 = 
OMAP24XX_GPIO_IRQSTATUS1
,

1546 .
	gúq°©us2
 = 
OMAP24XX_GPIO_IRQSTATUS2
,

1547 .
	gúqíabÀ
 = 
OMAP24XX_GPIO_IRQENABLE1
,

1548 .
	gúqíabÀ2
 = 
OMAP24XX_GPIO_IRQENABLE2
,

1549 .
	g£t_úqíabÀ
 = 
OMAP24XX_GPIO_SETIRQENABLE1
,

1550 .
	g˛r_úqíabÀ
 = 
OMAP24XX_GPIO_CLEARIRQENABLE1
,

1551 .
	gdeboun˚
 = 
OMAP24XX_GPIO_DEBOUNCE_VAL
,

1552 .
	gdeboun˚_í
 = 
OMAP24XX_GPIO_DEBOUNCE_EN
,

1553 .
	g˘æ
 = 
OMAP24XX_GPIO_CTRL
,

1554 .
	gwkup_í
 = 
OMAP24XX_GPIO_WAKE_EN
,

1555 .
	gÀvñdëe˘0
 = 
OMAP24XX_GPIO_LEVELDETECT0
,

1556 .
	gÀvñdëe˘1
 = 
OMAP24XX_GPIO_LEVELDETECT1
,

1557 .
	grisögdëe˘
 = 
OMAP24XX_GPIO_RISINGDETECT
,

1558 .
	gÁŒögdëe˘
 = 
OMAP24XX_GPIO_FALLINGDETECT
,

1561 
om≠_gpio_ªg_offs
 
	gom≠4_gpio_ªgs
 = {

1562 .
ªvisi⁄
 = 
OMAP4_GPIO_REVISION
,

1563 .
	gdúe˘i⁄
 = 
OMAP4_GPIO_OE
,

1564 .
	gd©aö
 = 
OMAP4_GPIO_DATAIN
,

1565 .
	gd©aout
 = 
OMAP4_GPIO_DATAOUT
,

1566 .
	g£t_d©aout
 = 
OMAP4_GPIO_SETDATAOUT
,

1567 .
	g˛r_d©aout
 = 
OMAP4_GPIO_CLEARDATAOUT
,

1568 .
	gúq°©us
 = 
OMAP4_GPIO_IRQSTATUS0
,

1569 .
	gúq°©us2
 = 
OMAP4_GPIO_IRQSTATUS1
,

1570 .
	gúqíabÀ
 = 
OMAP4_GPIO_IRQSTATUSSET0
,

1571 .
	gúqíabÀ2
 = 
OMAP4_GPIO_IRQSTATUSSET1
,

1572 .
	g£t_úqíabÀ
 = 
OMAP4_GPIO_IRQSTATUSSET0
,

1573 .
	g˛r_úqíabÀ
 = 
OMAP4_GPIO_IRQSTATUSCLR0
,

1574 .
	gdeboun˚
 = 
OMAP4_GPIO_DEBOUNCINGTIME
,

1575 .
	gdeboun˚_í
 = 
OMAP4_GPIO_DEBOUNCENABLE
,

1576 .
	g˘æ
 = 
OMAP4_GPIO_CTRL
,

1577 .
	gwkup_í
 = 
OMAP4_GPIO_IRQWAKEN0
,

1578 .
	gÀvñdëe˘0
 = 
OMAP4_GPIO_LEVELDETECT0
,

1579 .
	gÀvñdëe˘1
 = 
OMAP4_GPIO_LEVELDETECT1
,

1580 .
	grisögdëe˘
 = 
OMAP4_GPIO_RISINGDETECT
,

1581 .
	gÁŒögdëe˘
 = 
OMAP4_GPIO_FALLINGDETECT
,

1584 c⁄° 
om≠_gpio_∂©f‹m_d©a
 
	gom≠2_pd©a
 = {

1585 .
ªgs
 = &
om≠2_gpio_ªgs
,

1586 .
	gb™k_width
 = 32,

1587 .
	gdbck_Êag
 = 
Ál£
,

1590 c⁄° 
om≠_gpio_∂©f‹m_d©a
 
	gom≠3_pd©a
 = {

1591 .
ªgs
 = &
om≠2_gpio_ªgs
,

1592 .
	gb™k_width
 = 32,

1593 .
	gdbck_Êag
 = 
åue
,

1596 c⁄° 
om≠_gpio_∂©f‹m_d©a
 
	gom≠4_pd©a
 = {

1597 .
ªgs
 = &
om≠4_gpio_ªgs
,

1598 .
	gb™k_width
 = 32,

1599 .
	gdbck_Êag
 = 
åue
,

1602 c⁄° 
of_devi˚_id
 
	gom≠_gpio_m©ch
[] = {

1604 .
com∑tibÀ
 = "ti,omap4-gpio",

1605 .
	gd©a
 = &
om≠4_pd©a
,

1608 .
	gcom∑tibÀ
 = "ti,omap3-gpio",

1609 .
	gd©a
 = &
om≠3_pd©a
,

1612 .
	gcom∑tibÀ
 = "ti,omap2-gpio",

1613 .
	gd©a
 = &
om≠2_pd©a
,

1617 
MODULE_DEVICE_TABLE
(
of
, 
om≠_gpio_m©ch
);

1620 
∂©f‹m_drivî
 
	gom≠_gpio_drivî
 = {

1621 .
¥obe
 = 
om≠_gpio_¥obe
,

1622 .
	gdrivî
 = {

1623 .
«me
 = "omap_gpio",

1624 .
	gpm
 = &
gpio_pm_›s
,

1625 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
om≠_gpio_m©ch
),

1634 
__öô
 
	$om≠_gpio_drv_ªg
()

1636  
	`∂©f‹m_drivî_ªgi°î
(&
om≠_gpio_drivî
);

1637 
	}
}

1638 
po°c‹e_öôˇŒ
(
om≠_gpio_drv_ªg
);

	@gpio-palmas.c

21 
	~<löux/gpio.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/moduÀ.h
>

24 
	~<löux/mfd/∑lmas.h
>

25 
	~<löux/of.h
>

26 
	~<löux/of_devi˚.h
>

27 
	~<löux/∂©f‹m_devi˚.h
>

29 
	s∑lmas_gpio
 {

30 
gpio_chù
 
	mgpio_chù
;

31 
∑lmas
 *
	m∑lmas
;

34 
ölöe
 
∑lmas_gpio
 *
	$to_∑lmas_gpio
(
gpio_chù
 *
chù
)

36  
	`c⁄èöî_of
(
chù
, 
∑lmas_gpio
, 
gpio_chù
);

37 
	}
}

39 
	$∑lmas_gpio_gë
(
gpio_chù
 *
gc
, 
off£t
)

41 
∑lmas_gpio
 *
pg
 = 
	`to_∑lmas_gpio
(
gc
);

42 
∑lmas
 *∑lma†
pg
->palmas;

43 
vÆ
;

44 
ªt
;

46 
ªt
 = 
	`∑lmas_ªad
(
∑lmas
, 
PALMAS_GPIO_BASE
, 
PALMAS_GPIO_DATA_IN
, &
vÆ
);

47 i‡(
ªt
 < 0) {

48 
	`dev_îr
(
gc
->
dev
, "GPIO_DATA_INÑód faûed,Éº = %d\n", 
ªt
);

49  
ªt
;

51  !!(
vÆ
 & 
	`BIT
(
off£t
));

52 
	}
}

54 
	$∑lmas_gpio_£t
(
gpio_chù
 *
gc
, 
off£t
,

55 
vÆue
)

57 
∑lmas_gpio
 *
pg
 = 
	`to_∑lmas_gpio
(
gc
);

58 
∑lmas
 *∑lma†
pg
->palmas;

59 
ªt
;

61 i‡(
vÆue
)

62 
ªt
 = 
	`∑lmas_wrôe
(
∑lmas
, 
PALMAS_GPIO_BASE
,

63 
PALMAS_GPIO_SET_DATA_OUT
, 
	`BIT
(
off£t
));

65 
ªt
 = 
	`∑lmas_wrôe
(
∑lmas
, 
PALMAS_GPIO_BASE
,

66 
PALMAS_GPIO_CLEAR_DATA_OUT
, 
	`BIT
(
off£t
));

67 i‡(
ªt
 < 0)

68 
	`dev_îr
(
gc
->
dev
, "%s write failed,Érr = %d\n",

69 (
vÆue
) ? "GPIO_SET_DATA_OUT" : "GPIO_CLEAR_DATA_OUT",

70 
ªt
);

71 
	}
}

73 
	$∑lmas_gpio_ouçut
(
gpio_chù
 *
gc
, 
off£t
,

74 
vÆue
)

76 
∑lmas_gpio
 *
pg
 = 
	`to_∑lmas_gpio
(
gc
);

77 
∑lmas
 *∑lma†
pg
->palmas;

78 
ªt
;

81 
	`∑lmas_gpio_£t
(
gc
, 
off£t
, 
vÆue
);

83 
ªt
 = 
	`∑lmas_upd©e_bôs
(
∑lmas
, 
PALMAS_GPIO_BASE
,

84 
PALMAS_GPIO_DATA_DIR
, 
	`BIT
(
off£t
), BIT(offset));

85 i‡(
ªt
 < 0)

86 
	`dev_îr
(
gc
->
dev
, "GPIO_DATA_DIR wrôêÁûed,Éº = %d\n", 
ªt
);

87  
ªt
;

88 
	}
}

90 
	$∑lmas_gpio_öput
(
gpio_chù
 *
gc
, 
off£t
)

92 
∑lmas_gpio
 *
pg
 = 
	`to_∑lmas_gpio
(
gc
);

93 
∑lmas
 *∑lma†
pg
->palmas;

94 
ªt
;

96 
ªt
 = 
	`∑lmas_upd©e_bôs
(
∑lmas
, 
PALMAS_GPIO_BASE
,

97 
PALMAS_GPIO_DATA_DIR
, 
	`BIT
(
off£t
), 0);

98 i‡(
ªt
 < 0)

99 
	`dev_îr
(
gc
->
dev
, "GPIO_DATA_DIR wrôêÁûed,Éº = %d\n", 
ªt
);

100  
ªt
;

101 
	}
}

103 
	$∑lmas_gpio_to_úq
(
gpio_chù
 *
gc
, 
off£t
)

105 
∑lmas_gpio
 *
pg
 = 
	`to_∑lmas_gpio
(
gc
);

106 
∑lmas
 *∑lma†
pg
->palmas;

108  
	`∑lmas_úq_gë_vúq
(
∑lmas
, 
PALMAS_GPIO_0_IRQ
 + 
off£t
);

109 
	}
}

111 
	$∑lmas_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

113 
∑lmas
 *∑lma†
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

114 
∑lmas_∂©f‹m_d©a
 *
∑lmas_pd©a
;

115 
∑lmas_gpio
 *palmas_gpio;

116 
ªt
;

118 
∑lmas_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
,

119 (*
∑lmas_gpio
), 
GFP_KERNEL
);

120 i‡(!
∑lmas_gpio
) {

121 
	`dev_îr
(&
pdev
->
dev
, "CouldÇotállocateÖalmas_gpio\n");

122  -
ENOMEM
;

125 
∑lmas_gpio
->
∑lmas
 =Öalmas;

126 
∑lmas_gpio
->
gpio_chù
.
ow√r
 = 
THIS_MODULE
;

127 
∑lmas_gpio
->
gpio_chù
.
œbñ
 = 
	`dev_«me
(&
pdev
->
dev
);

128 
∑lmas_gpio
->
gpio_chù
.
ngpio
 = 8;

129 
∑lmas_gpio
->
gpio_chù
.
ˇn_¶ìp
 = 1;

130 
∑lmas_gpio
->
gpio_chù
.
dúe˘i⁄_öput
 = 
∑lmas_gpio_öput
;

131 
∑lmas_gpio
->
gpio_chù
.
dúe˘i⁄_ouçut
 = 
∑lmas_gpio_ouçut
;

132 
∑lmas_gpio
->
gpio_chù
.
to_úq
 = 
∑lmas_gpio_to_úq
;

133 
∑lmas_gpio
->
gpio_chù
.
£t
 = 
∑lmas_gpio_£t
;

134 
∑lmas_gpio
->
gpio_chù
.
gë
 = 
∑lmas_gpio_gë
;

135 
∑lmas_gpio
->
gpio_chù
.
dev
 = &
pdev
->dev;

136 #ifde‡
CONFIG_OF_GPIO


137 
∑lmas_gpio
->
gpio_chù
.
of_node
 = 
∑lmas
->
dev
->of_node;

139 
∑lmas_pd©a
 = 
	`dev_gë_∂©d©a
(
∑lmas
->
dev
);

140 i‡(
∑lmas_pd©a
 &&ÖÆmas_pd©a->
gpio_ba£
)

141 
∑lmas_gpio
->
gpio_chù
.
ba£
 = 
∑lmas_pd©a
->
gpio_ba£
;

143 
∑lmas_gpio
->
gpio_chù
.
ba£
 = -1;

145 
ªt
 = 
	`gpiochù_add
(&
∑lmas_gpio
->
gpio_chù
);

146 i‡(
ªt
 < 0) {

147 
	`dev_îr
(&
pdev
->
dev
, "CouldÇŸÑegi°î gpiochù, %d\n", 
ªt
);

148  
ªt
;

151 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
∑lmas_gpio
);

152  
ªt
;

153 
	}
}

155 
	$∑lmas_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

157 
∑lmas_gpio
 *∑lmas_gpiÿ
	`∂©f‹m_gë_drvd©a
(
pdev
);

159  
	`gpiochù_ªmove
(&
∑lmas_gpio
->
gpio_chù
);

160 
	}
}

162 
∂©f‹m_drivî
 
	g∑lmas_gpio_drivî
 = {

163 .
drivî
.
«me
 = "palmas-gpio",

164 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

165 .
	g¥obe
 = 
∑lmas_gpio_¥obe
,

166 .
	gªmove
 = 
∑lmas_gpio_ªmove
,

169 
__öô
 
	$∑lmas_gpio_öô
()

171  
	`∂©f‹m_drivî_ªgi°î
(&
∑lmas_gpio_drivî
);

172 
	}
}

173 
subsys_öôˇŒ
(
∑lmas_gpio_öô
);

175 
__exô
 
	$∑lmas_gpio_exô
()

177 
	`∂©f‹m_drivî_uƒegi°î
(&
∑lmas_gpio_drivî
);

178 
	}
}

179 
moduÀ_exô
(
∑lmas_gpio_exô
);

181 
MODULE_ALIAS
("platform:palmas-gpio");

182 
MODULE_AUTHOR
("Laxman Dewangan <ldewangan@nvidia.com>");

183 
MODULE_DESCRIPTION
("GPIO driver for TI Palmas series PMICs");

184 
MODULE_LICENSE
("GPL v2");

	@gpio-pca953x.c

14 
	~<löux/moduÀ.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/gpio.h
>

17 
	~<löux/öãºu±.h
>

18 
	~<löux/úq.h
>

19 
	~<löux/úqdomaö.h
>

20 
	~<löux/i2c.h
>

21 
	~<löux/i2c/pˇ953x.h
>

22 
	~<löux/ª£t.h
>

23 
	~<löux/¶ab.h
>

24 #ifde‡
CONFIG_OF_GPIO


25 
	~<löux/of_∂©f‹m.h
>

28 
	#PCA953X_INPUT
 0

	)

29 
	#PCA953X_OUTPUT
 1

	)

30 
	#PCA953X_INVERT
 2

	)

31 
	#PCA953X_DIRECTION
 3

	)

33 
	#REG_ADDR_AI
 0x80

	)

35 
	#PCA957X_IN
 0

	)

36 
	#PCA957X_INVRT
 1

	)

37 
	#PCA957X_BKEN
 2

	)

38 
	#PCA957X_PUPD
 3

	)

39 
	#PCA957X_CFG
 4

	)

40 
	#PCA957X_OUT
 5

	)

41 
	#PCA957X_MSK
 6

	)

42 
	#PCA957X_INTS
 7

	)

44 
	#PCA_GPIO_MASK
 0x00FF

	)

45 
	#PCA_INT
 0x0100

	)

46 
	#PCA953X_TYPE
 0x1000

	)

47 
	#PCA957X_TYPE
 0x2000

	)

49 c⁄° 
i2c_devi˚_id
 
	gpˇ953x_id
[] = {

50 { "pˇ9505", 40 | 
PCA953X_TYPE
 | 
PCA_INT
, },

51 { "pˇ9534", 8 | 
PCA953X_TYPE
 | 
PCA_INT
, },

52 { "pˇ9535", 16 | 
PCA953X_TYPE
 | 
PCA_INT
, },

53 { "pˇ9536", 4 | 
PCA953X_TYPE
, },

54 { "pˇ9537", 4 | 
PCA953X_TYPE
 | 
PCA_INT
, },

55 { "pˇ9538", 8 | 
PCA953X_TYPE
 | 
PCA_INT
, },

56 { "pˇ9539", 16 | 
PCA953X_TYPE
 | 
PCA_INT
, },

57 { "pˇ9554", 8 | 
PCA953X_TYPE
 | 
PCA_INT
, },

58 { "pˇ9555", 16 | 
PCA953X_TYPE
 | 
PCA_INT
, },

59 { "pˇ9556", 8 | 
PCA953X_TYPE
, },

60 { "pˇ9557", 8 | 
PCA953X_TYPE
, },

61 { "pˇ9574", 8 | 
PCA957X_TYPE
 | 
PCA_INT
, },

62 { "pˇ9575", 16 | 
PCA957X_TYPE
 | 
PCA_INT
, },

64 { "max7310", 8 | 
PCA953X_TYPE
, },

65 { "max7312", 16 | 
PCA953X_TYPE
 | 
PCA_INT
, },

66 { "max7313", 16 | 
PCA953X_TYPE
 | 
PCA_INT
, },

67 { "max7315", 8 | 
PCA953X_TYPE
 | 
PCA_INT
, },

68 { "pˇ6107", 8 | 
PCA953X_TYPE
 | 
PCA_INT
, },

69 { "tˇ6408", 8 | 
PCA953X_TYPE
 | 
PCA_INT
, },

70 { "tˇ6416", 16 | 
PCA953X_TYPE
 | 
PCA_INT
, },

71 { "tˇ6424", 24 | 
PCA953X_TYPE
 | 
PCA_INT
, },

74 
MODULE_DEVICE_TABLE
(
i2c
, 
pˇ953x_id
);

76 
	#MAX_BANK
 5

	)

77 
	#BANK_SZ
 8

	)

79 
	#NBANK
(
chù
Ë(chù->
gpio_chù
.
ngpio
 / 
BANK_SZ
)

	)

81 
	spˇ953x_chù
 {

82 
	mgpio_°¨t
;

83 
u8
 
	mªg_ouçut
[
MAX_BANK
];

84 
u8
 
	mªg_dúe˘i⁄
[
MAX_BANK
];

85 
muãx
 
	mi2c_lock
;

87 #ifde‡
CONFIG_GPIO_PCA953X_IRQ


88 
muãx
 
	múq_lock
;

89 
u8
 
	múq_mask
[
MAX_BANK
];

90 
u8
 
	múq_°©
[
MAX_BANK
];

91 
u8
 
	múq_åig_øi£
[
MAX_BANK
];

92 
u8
 
	múq_åig_ÁŒ
[
MAX_BANK
];

93 
úq_domaö
 *
	mdomaö
;

96 
i2c_˛õ¡
 *
	m˛õ¡
;

97 
gpio_chù
 
	mgpio_chù
;

98 c⁄° *c⁄° *
	m«mes
;

99 
	mchù_ty≥
;

102 
	$pˇ953x_ªad_sögÀ
(
pˇ953x_chù
 *
chù
, 
ªg
, 
u32
 *
vÆ
,

103 
off
)

105 
ªt
;

106 
b™k_shi·
 = 
	`Ês
((
chù
->
gpio_chù
.
ngpio
 - 1Ë/ 
BANK_SZ
);

107 
off£t
 = 
off
 / 
BANK_SZ
;

109 
ªt
 = 
	`i2c_smbus_ªad_byã_d©a
(
chù
->
˛õ¡
,

110 (
ªg
 << 
b™k_shi·
Ë+ 
off£t
);

111 *
vÆ
 = 
ªt
;

113 i‡(
ªt
 < 0) {

114 
	`dev_îr
(&
chù
->
˛õ¡
->
dev
, "failedÑeadingÑegister\n");

115  
ªt
;

119 
	}
}

121 
	$pˇ953x_wrôe_sögÀ
(
pˇ953x_chù
 *
chù
, 
ªg
, 
u32
 
vÆ
,

122 
off
)

124 
ªt
 = 0;

125 
b™k_shi·
 = 
	`Ês
((
chù
->
gpio_chù
.
ngpio
 - 1Ë/ 
BANK_SZ
);

126 
off£t
 = 
off
 / 
BANK_SZ
;

128 
ªt
 = 
	`i2c_smbus_wrôe_byã_d©a
(
chù
->
˛õ¡
,

129 (
ªg
 << 
b™k_shi·
Ë+ 
off£t
, 
vÆ
);

131 i‡(
ªt
 < 0) {

132 
	`dev_îr
(&
chù
->
˛õ¡
->
dev
, "failed writingÑegister\n");

133  
ªt
;

137 
	}
}

139 
	$pˇ953x_wrôe_ªgs
(
pˇ953x_chù
 *
chù
, 
ªg
, 
u8
 *
vÆ
)

141 
ªt
 = 0;

143 i‡(
chù
->
gpio_chù
.
ngpio
 <= 8)

144 
ªt
 = 
	`i2c_smbus_wrôe_byã_d©a
(
chù
->
˛õ¡
, 
ªg
, *
vÆ
);

145 i‡(
chù
->
gpio_chù
.
ngpio
 >= 24) {

146 
b™k_shi·
 = 
	`Ês
((
chù
->
gpio_chù
.
ngpio
 - 1Ë/ 
BANK_SZ
);

147 
ªt
 = 
	`i2c_smbus_wrôe_i2c_block_d©a
(
chù
->
˛õ¡
,

148 (
ªg
 << 
b™k_shi·
Ë| 
REG_ADDR_AI
,

149 
	`NBANK
(
chù
), 
vÆ
);

151 
chù
->
chù_ty≥
) {

152 
PCA953X_TYPE
:

153 
ªt
 = 
	`i2c_smbus_wrôe_w‹d_d©a
(
chù
->
˛õ¡
,

154 
ªg
 << 1, (
u16
Ë*
vÆ
);

156 
PCA957X_TYPE
:

157 
ªt
 = 
	`i2c_smbus_wrôe_byã_d©a
(
chù
->
˛õ¡
, 
ªg
 << 1,

158 
vÆ
[0]);

159 i‡(
ªt
 < 0)

161 
ªt
 = 
	`i2c_smbus_wrôe_byã_d©a
(
chù
->
˛õ¡
,

162 (
ªg
 << 1) + 1,

163 
vÆ
[1]);

168 i‡(
ªt
 < 0) {

169 
	`dev_îr
(&
chù
->
˛õ¡
->
dev
, "failed writingÑegister\n");

170  
ªt
;

174 
	}
}

176 
	$pˇ953x_ªad_ªgs
(
pˇ953x_chù
 *
chù
, 
ªg
, 
u8
 *
vÆ
)

178 
ªt
;

180 i‡(
chù
->
gpio_chù
.
ngpio
 <= 8) {

181 
ªt
 = 
	`i2c_smbus_ªad_byã_d©a
(
chù
->
˛õ¡
, 
ªg
);

182 *
vÆ
 = 
ªt
;

183 } i‡(
chù
->
gpio_chù
.
ngpio
 >= 24) {

184 
b™k_shi·
 = 
	`Ês
((
chù
->
gpio_chù
.
ngpio
 - 1Ë/ 
BANK_SZ
);

186 
ªt
 = 
	`i2c_smbus_ªad_i2c_block_d©a
(
chù
->
˛õ¡
,

187 (
ªg
 << 
b™k_shi·
Ë| 
REG_ADDR_AI
,

188 
	`NBANK
(
chù
), 
vÆ
);

190 
ªt
 = 
	`i2c_smbus_ªad_w‹d_d©a
(
chù
->
˛õ¡
, 
ªg
 << 1);

191 
vÆ
[0] = (
u16
)
ªt
 & 0xFF;

192 
vÆ
[1] = (
u16
)
ªt
 >> 8;

194 i‡(
ªt
 < 0) {

195 
	`dev_îr
(&
chù
->
˛õ¡
->
dev
, "failedÑeadingÑegister\n");

196  
ªt
;

200 
	}
}

202 
	$pˇ953x_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gc
, 
off
)

204 
pˇ953x_chù
 *
chù
;

205 
u8
 
ªg_vÆ
;

206 
ªt
, 
off£t
 = 0;

208 
chù
 = 
	`c⁄èöî_of
(
gc
, 
pˇ953x_chù
, 
gpio_chù
);

210 
	`muãx_lock
(&
chù
->
i2c_lock
);

211 
ªg_vÆ
 = 
chù
->
ªg_dúe˘i⁄
[
off
 / 
BANK_SZ
] | (1u << (off % BANK_SZ));

213 
chù
->
chù_ty≥
) {

214 
PCA953X_TYPE
:

215 
off£t
 = 
PCA953X_DIRECTION
;

217 
PCA957X_TYPE
:

218 
off£t
 = 
PCA957X_CFG
;

221 
ªt
 = 
	`pˇ953x_wrôe_sögÀ
(
chù
, 
off£t
, 
ªg_vÆ
, 
off
);

222 i‡(
ªt
)

223 
exô
;

225 
chù
->
ªg_dúe˘i⁄
[
off
 / 
BANK_SZ
] = 
ªg_vÆ
;

226 
ªt
 = 0;

227 
exô
:

228 
	`muãx_u∆ock
(&
chù
->
i2c_lock
);

229  
ªt
;

230 
	}
}

232 
	$pˇ953x_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
,

233 
off
, 
vÆ
)

235 
pˇ953x_chù
 *
chù
;

236 
u8
 
ªg_vÆ
;

237 
ªt
, 
off£t
 = 0;

239 
chù
 = 
	`c⁄èöî_of
(
gc
, 
pˇ953x_chù
, 
gpio_chù
);

241 
	`muãx_lock
(&
chù
->
i2c_lock
);

243 i‡(
vÆ
)

244 
ªg_vÆ
 = 
chù
->
ªg_ouçut
[
off
 / 
BANK_SZ
]

245 | (1u << (
off
 % 
BANK_SZ
));

247 
ªg_vÆ
 = 
chù
->
ªg_ouçut
[
off
 / 
BANK_SZ
]

248 & ~(1u << (
off
 % 
BANK_SZ
));

250 
chù
->
chù_ty≥
) {

251 
PCA953X_TYPE
:

252 
off£t
 = 
PCA953X_OUTPUT
;

254 
PCA957X_TYPE
:

255 
off£t
 = 
PCA957X_OUT
;

258 
ªt
 = 
	`pˇ953x_wrôe_sögÀ
(
chù
, 
off£t
, 
ªg_vÆ
, 
off
);

259 i‡(
ªt
)

260 
exô
;

262 
chù
->
ªg_ouçut
[
off
 / 
BANK_SZ
] = 
ªg_vÆ
;

265 
ªg_vÆ
 = 
chù
->
ªg_dúe˘i⁄
[
off
 / 
BANK_SZ
] & ~(1u << (off % BANK_SZ));

266 
chù
->
chù_ty≥
) {

267 
PCA953X_TYPE
:

268 
off£t
 = 
PCA953X_DIRECTION
;

270 
PCA957X_TYPE
:

271 
off£t
 = 
PCA957X_CFG
;

274 
ªt
 = 
	`pˇ953x_wrôe_sögÀ
(
chù
, 
off£t
, 
ªg_vÆ
, 
off
);

275 i‡(
ªt
)

276 
exô
;

278 
chù
->
ªg_dúe˘i⁄
[
off
 / 
BANK_SZ
] = 
ªg_vÆ
;

279 
ªt
 = 0;

280 
exô
:

281 
	`muãx_u∆ock
(&
chù
->
i2c_lock
);

282  
ªt
;

283 
	}
}

285 
	$pˇ953x_gpio_gë_vÆue
(
gpio_chù
 *
gc
, 
off
)

287 
pˇ953x_chù
 *
chù
;

288 
u32
 
ªg_vÆ
;

289 
ªt
, 
off£t
 = 0;

291 
chù
 = 
	`c⁄èöî_of
(
gc
, 
pˇ953x_chù
, 
gpio_chù
);

293 
	`muãx_lock
(&
chù
->
i2c_lock
);

294 
chù
->
chù_ty≥
) {

295 
PCA953X_TYPE
:

296 
off£t
 = 
PCA953X_INPUT
;

298 
PCA957X_TYPE
:

299 
off£t
 = 
PCA957X_IN
;

302 
ªt
 = 
	`pˇ953x_ªad_sögÀ
(
chù
, 
off£t
, &
ªg_vÆ
, 
off
);

303 
	`muãx_u∆ock
(&
chù
->
i2c_lock
);

304 i‡(
ªt
 < 0) {

312  (
ªg_vÆ
 & (1u << 
off
)) ? 1 : 0;

313 
	}
}

315 
	$pˇ953x_gpio_£t_vÆue
(
gpio_chù
 *
gc
, 
off
, 
vÆ
)

317 
pˇ953x_chù
 *
chù
;

318 
u8
 
ªg_vÆ
;

319 
ªt
, 
off£t
 = 0;

321 
chù
 = 
	`c⁄èöî_of
(
gc
, 
pˇ953x_chù
, 
gpio_chù
);

323 
	`muãx_lock
(&
chù
->
i2c_lock
);

324 i‡(
vÆ
)

325 
ªg_vÆ
 = 
chù
->
ªg_ouçut
[
off
 / 
BANK_SZ
]

326 | (1u << (
off
 % 
BANK_SZ
));

328 
ªg_vÆ
 = 
chù
->
ªg_ouçut
[
off
 / 
BANK_SZ
]

329 & ~(1u << (
off
 % 
BANK_SZ
));

331 
chù
->
chù_ty≥
) {

332 
PCA953X_TYPE
:

333 
off£t
 = 
PCA953X_OUTPUT
;

335 
PCA957X_TYPE
:

336 
off£t
 = 
PCA957X_OUT
;

339 
ªt
 = 
	`pˇ953x_wrôe_sögÀ
(
chù
, 
off£t
, 
ªg_vÆ
, 
off
);

340 i‡(
ªt
)

341 
exô
;

343 
chù
->
ªg_ouçut
[
off
 / 
BANK_SZ
] = 
ªg_vÆ
;

344 
exô
:

345 
	`muãx_u∆ock
(&
chù
->
i2c_lock
);

346 
	}
}

348 
	$pˇ953x_£tup_gpio
(
pˇ953x_chù
 *
chù
, 
gpios
)

350 
gpio_chù
 *
gc
;

352 
gc
 = &
chù
->
gpio_chù
;

354 
gc
->
dúe˘i⁄_öput
 = 
pˇ953x_gpio_dúe˘i⁄_öput
;

355 
gc
->
dúe˘i⁄_ouçut
 = 
pˇ953x_gpio_dúe˘i⁄_ouçut
;

356 
gc
->
gë
 = 
pˇ953x_gpio_gë_vÆue
;

357 
gc
->
£t
 = 
pˇ953x_gpio_£t_vÆue
;

358 
gc
->
ˇn_¶ìp
 = 1;

360 
gc
->
ba£
 = 
chù
->
gpio_°¨t
;

361 
gc
->
ngpio
 = 
gpios
;

362 
gc
->
œbñ
 = 
chù
->
˛õ¡
->
«me
;

363 
gc
->
dev
 = &
chù
->
˛õ¡
->dev;

364 
gc
->
ow√r
 = 
THIS_MODULE
;

365 
gc
->
«mes
 = 
chù
->names;

366 
	}
}

368 #ifde‡
CONFIG_GPIO_PCA953X_IRQ


369 
	$pˇ953x_gpio_to_úq
(
gpio_chù
 *
gc
, 
off
)

371 
pˇ953x_chù
 *
chù
;

373 
chù
 = 
	`c⁄èöî_of
(
gc
, 
pˇ953x_chù
, 
gpio_chù
);

374  
	`úq_¸óã_m≠pög
(
chù
->
domaö
, 
off
);

375 
	}
}

377 
	$pˇ953x_úq_mask
(
úq_d©a
 *
d
)

379 
pˇ953x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

381 
chù
->
úq_mask
[
d
->
hwúq
 / 
BANK_SZ
] &= ~(1 << (d->hwirq % BANK_SZ));

382 
	}
}

384 
	$pˇ953x_úq_unmask
(
úq_d©a
 *
d
)

386 
pˇ953x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

388 
chù
->
úq_mask
[
d
->
hwúq
 / 
BANK_SZ
] |= 1 << (d->hwirq % BANK_SZ);

389 
	}
}

391 
	$pˇ953x_úq_bus_lock
(
úq_d©a
 *
d
)

393 
pˇ953x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

395 
	`muãx_lock
(&
chù
->
úq_lock
);

396 
	}
}

398 
	$pˇ953x_úq_bus_sync_u∆ock
(
úq_d©a
 *
d
)

400 
pˇ953x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

401 
u8
 
√w_úqs
;

402 
Àvñ
, 
i
;

405 
i
 = 0; i < 
	`NBANK
(
chù
); i++) {

406 
√w_úqs
 = 
chù
->
úq_åig_ÁŒ
[
i
] | chù->
úq_åig_øi£
[i];

407 
√w_úqs
 &~
chù
->
ªg_dúe˘i⁄
[
i
];

409 
√w_úqs
) {

410 
Àvñ
 = 
	`__ffs
(
√w_úqs
);

411 
	`pˇ953x_gpio_dúe˘i⁄_öput
(&
chù
->
gpio_chù
,

412 
Àvñ
 + (
BANK_SZ
 * 
i
));

413 
√w_úqs
 &~(1 << 
Àvñ
);

417 
	`muãx_u∆ock
(&
chù
->
úq_lock
);

418 
	}
}

420 
	$pˇ953x_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

422 
pˇ953x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

423 
b™k_nb
 = 
d
->
hwúq
 / 
BANK_SZ
;

424 
u8
 
mask
 = 1 << (
d
->
hwúq
 % 
BANK_SZ
);

426 i‡(!(
ty≥
 & 
IRQ_TYPE_EDGE_BOTH
)) {

427 
	`dev_îr
(&
chù
->
˛õ¡
->
dev
, "irq %d: unsupportedÅype %d\n",

428 
d
->
úq
, 
ty≥
);

429  -
EINVAL
;

432 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_FALLING
)

433 
chù
->
úq_åig_ÁŒ
[
b™k_nb
] |
mask
;

435 
chù
->
úq_åig_ÁŒ
[
b™k_nb
] &~
mask
;

437 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_RISING
)

438 
chù
->
úq_åig_øi£
[
b™k_nb
] |
mask
;

440 
chù
->
úq_åig_øi£
[
b™k_nb
] &~
mask
;

443 
	}
}

445 
úq_chù
 
	gpˇ953x_úq_chù
 = {

446 .
«me
 = "pca953x",

447 .
	gúq_mask
 = 
pˇ953x_úq_mask
,

448 .
	gúq_unmask
 = 
pˇ953x_úq_unmask
,

449 .
	gúq_bus_lock
 = 
pˇ953x_úq_bus_lock
,

450 .
	gúq_bus_sync_u∆ock
 = 
pˇ953x_úq_bus_sync_u∆ock
,

451 .
	gúq_£t_ty≥
 = 
pˇ953x_úq_£t_ty≥
,

454 
u8
 
	$pˇ953x_úq_≥ndög
(
pˇ953x_chù
 *
chù
, 
u8
 *
≥ndög
)

456 
u8
 
cur_°©
[
MAX_BANK
];

457 
u8
 
ﬁd_°©
[
MAX_BANK
];

458 
u8
 
≥ndögs
 = 0;

459 
u8
 
åiggî
[
MAX_BANK
], 
åiggîs
 = 0;

460 
ªt
, 
i
, 
off£t
 = 0;

462 
chù
->
chù_ty≥
) {

463 
PCA953X_TYPE
:

464 
off£t
 = 
PCA953X_INPUT
;

466 
PCA957X_TYPE
:

467 
off£t
 = 
PCA957X_IN
;

470 
ªt
 = 
	`pˇ953x_ªad_ªgs
(
chù
, 
off£t
, 
cur_°©
);

471 i‡(
ªt
)

475 
i
 = 0; i < 
	`NBANK
(
chù
); i++)

476 
cur_°©
[
i
] &
chù
->
ªg_dúe˘i⁄
[i];

478 
	`mem˝y
(
ﬁd_°©
, 
chù
->
úq_°©
, 
	`NBANK
(chip));

480 
i
 = 0; i < 
	`NBANK
(
chù
); i++) {

481 
åiggî
[
i
] = (
cur_°©
[i] ^ 
ﬁd_°©
[i]Ë& 
chù
->
úq_mask
[i];

482 
åiggîs
 +
åiggî
[
i
];

485 i‡(!
åiggîs
)

488 
	`mem˝y
(
chù
->
úq_°©
, 
cur_°©
, 
	`NBANK
(chip));

490 
i
 = 0; i < 
	`NBANK
(
chù
); i++) {

491 
≥ndög
[
i
] = (
ﬁd_°©
[i] & 
chù
->
úq_åig_ÁŒ
[i]) |

492 (
cur_°©
[
i
] & 
chù
->
úq_åig_øi£
[i]);

493 
≥ndög
[
i
] &
åiggî
[i];

494 
≥ndögs
 +
≥ndög
[
i
];

497  
≥ndögs
;

498 
	}
}

500 
úqªtu∫_t
 
	$pˇ953x_úq_h™dÀr
(
úq
, *
devid
)

502 
pˇ953x_chù
 *
chù
 = 
devid
;

503 
u8
 
≥ndög
[
MAX_BANK
];

504 
u8
 
Àvñ
;

505 
i
;

507 i‡(!
	`pˇ953x_úq_≥ndög
(
chù
, 
≥ndög
))

508  
IRQ_HANDLED
;

510 
i
 = 0; i < 
	`NBANK
(
chù
); i++) {

511 
≥ndög
[
i
]) {

512 
Àvñ
 = 
	`__ffs
(
≥ndög
[
i
]);

513 
	`h™dÀ_√°ed_úq
(
	`úq_föd_m≠pög
(
chù
->
domaö
,

514 
Àvñ
 + (
BANK_SZ
 * 
i
)));

515 
≥ndög
[
i
] &~(1 << 
Àvñ
);

519  
IRQ_HANDLED
;

520 
	}
}

522 
	$pˇ953x_gpio_úq_m≠
(
úq_domaö
 *
d
, 
úq
,

523 
úq_hw_numbî_t
 
hwúq
)

525 
	`úq_˛ór_°©us_Êags
(
úq
, 
IRQ_NOREQUEST
);

526 
	`úq_£t_chù_d©a
(
úq
, 
d
->
ho°_d©a
);

527 
	`úq_£t_chù
(
úq
, &
pˇ953x_úq_chù
);

528 
	`úq_£t_√°ed_thªad
(
úq
, 
åue
);

529 #ifde‡
CONFIG_ARM


530 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

532 
	`úq_£t_n›robe
(
úq
);

536 
	}
}

538 c⁄° 
úq_domaö_›s
 
	gpˇ953x_úq_sim∂e_›s
 = {

539 .
m≠
 = 
pˇ953x_gpio_úq_m≠
,

540 .
	gxœã
 = 
úq_domaö_xœã_two˚Œ
,

543 
	$pˇ953x_úq_£tup
(
pˇ953x_chù
 *
chù
,

544 c⁄° 
i2c_devi˚_id
 *
id
,

545 
úq_ba£
)

547 
i2c_˛õ¡
 *
˛õ¡
 = 
chù
->client;

548 
ªt
, 
i
, 
off£t
 = 0;

550 i‡(
úq_ba£
 != -1

551 && (
id
->
drivî_d©a
 & 
PCA_INT
)) {

553 
chù
->
chù_ty≥
) {

554 
PCA953X_TYPE
:

555 
off£t
 = 
PCA953X_INPUT
;

557 
PCA957X_TYPE
:

558 
off£t
 = 
PCA957X_IN
;

561 
ªt
 = 
	`pˇ953x_ªad_ªgs
(
chù
, 
off£t
, chù->
úq_°©
);

562 i‡(
ªt
)

563  
ªt
;

570 
i
 = 0; i < 
	`NBANK
(
chù
); i++)

571 
chù
->
úq_°©
[
i
] &chù->
ªg_dúe˘i⁄
[i];

572 
	`muãx_öô
(&
chù
->
úq_lock
);

574 
chù
->
domaö
 = 
	`úq_domaö_add_sim∂e
(
˛õ¡
->
dev
.
of_node
,

575 
chù
->
gpio_chù
.
ngpio
,

576 
úq_ba£
,

577 &
pˇ953x_úq_sim∂e_›s
,

578 
chù
);

579 i‡(!
chù
->
domaö
)

580  -
ENODEV
;

582 
ªt
 = 
	`devm_ªque°_thªaded_úq
(&
˛õ¡
->
dev
,

583 
˛õ¡
->
úq
,

584 
NULL
,

585 
pˇ953x_úq_h™dÀr
,

586 
IRQF_TRIGGER_LOW
 | 
IRQF_ONESHOT
,

587 
	`dev_«me
(&
˛õ¡
->
dev
), 
chù
);

588 i‡(
ªt
) {

589 
	`dev_îr
(&
˛õ¡
->
dev
, "failedÅoÑequest irq %d\n",

590 
˛õ¡
->
úq
);

591  
ªt
;

594 
chù
->
gpio_chù
.
to_úq
 = 
pˇ953x_gpio_to_úq
;

598 
	}
}

601 
	$pˇ953x_úq_£tup
(
pˇ953x_chù
 *
chù
,

602 c⁄° 
i2c_devi˚_id
 *
id
,

603 
úq_ba£
)

605 
i2c_˛õ¡
 *
˛õ¡
 = 
chù
->client;

607 i‡(
úq_ba£
 !-1 && (
id
->
drivî_d©a
 & 
PCA_INT
))

608 
	`dev_w¨n
(&
˛õ¡
->
dev
, "interrupt supportÇot compiled in\n");

611 
	}
}

617 #ifde‡
CONFIG_OF_GPIO


623 
	$pˇ953x_gë_Æt_pd©a
(
i2c_˛õ¡
 *
˛õ¡
, *
gpio_ba£
, 
u32
 *
övît
)

625 
devi˚_node
 *
node
;

626 c⁄° 
__be32
 *
vÆ
;

627 
size
;

629 
node
 = 
˛õ¡
->
dev
.
of_node
;

630 i‡(
node
 =
NULL
)

633 *
gpio_ba£
 = -1;

634 
vÆ
 = 
	`of_gë_¥›îty
(
node
, "löux,gpio-ba£", &
size
);

635 
	`WARN
(
vÆ
, "%s: devi˚-åìÖr›îty 'löux,gpio-ba£' i†dïªˇãd!", 
__func__
);

636 i‡(
vÆ
) {

637 i‡(
size
 !(*
vÆ
))

638 
	`dev_w¨n
(&
˛õ¡
->
dev
, "%s: wrongÜinux,gpio-base\n",

639 
node
->
fuŒ_«me
);

641 *
gpio_ba£
 = 
	`be32_to_˝up
(
vÆ
);

644 
vÆ
 = 
	`of_gë_¥›îty
(
node
, "pﬁ¨ôy", 
NULL
);

645 
	`WARN
(
vÆ
, "%s: devi˚-åìÖr›îty 'pﬁ¨ôy' i†dïªˇãd!", 
__func__
);

646 i‡(
vÆ
)

647 *
övît
 = *
vÆ
;

648 
	}
}

651 
	$pˇ953x_gë_Æt_pd©a
(
i2c_˛õ¡
 *
˛õ¡
, *
gpio_ba£
, 
u32
 *
övît
)

653 *
gpio_ba£
 = -1;

654 
	}
}

657 
	$devi˚_pˇ953x_öô
(
pˇ953x_chù
 *
chù
, 
u32
 
övît
)

659 
ªt
;

660 
u8
 
vÆ
[
MAX_BANK
];

662 
ªt
 = 
	`pˇ953x_ªad_ªgs
(
chù
, 
PCA953X_OUTPUT
, chù->
ªg_ouçut
);

663 i‡(
ªt
)

664 
out
;

666 
ªt
 = 
	`pˇ953x_ªad_ªgs
(
chù
, 
PCA953X_DIRECTION
,

667 
chù
->
ªg_dúe˘i⁄
);

668 i‡(
ªt
)

669 
out
;

672 i‡(
övît
)

673 
	`mem£t
(
vÆ
, 0xFF, 
	`NBANK
(
chù
));

675 
	`mem£t
(
vÆ
, 0, 
	`NBANK
(
chù
));

677 
ªt
 = 
	`pˇ953x_wrôe_ªgs
(
chù
, 
PCA953X_INVERT
, 
vÆ
);

678 
out
:

679  
ªt
;

680 
	}
}

682 
	$devi˚_pˇ957x_öô
(
pˇ953x_chù
 *
chù
, 
u32
 
övît
)

684 
ªt
;

685 
u8
 
vÆ
[
MAX_BANK
];

688 
	`mem£t
(
vÆ
, 0, 
	`NBANK
(
chù
));

689 
	`pˇ953x_wrôe_ªgs
(
chù
, 
PCA957X_PUPD
, 
vÆ
);

690 
	`mem£t
(
vÆ
, 0xFF, 
	`NBANK
(
chù
));

691 
	`pˇ953x_wrôe_ªgs
(
chù
, 
PCA957X_CFG
, 
vÆ
);

692 
	`mem£t
(
vÆ
, 0, 
	`NBANK
(
chù
));

693 
	`pˇ953x_wrôe_ªgs
(
chù
, 
PCA957X_OUT
, 
vÆ
);

695 
ªt
 = 
	`pˇ953x_ªad_ªgs
(
chù
, 
PCA957X_IN
, 
vÆ
);

696 i‡(
ªt
)

697 
out
;

698 
ªt
 = 
	`pˇ953x_ªad_ªgs
(
chù
, 
PCA957X_OUT
, chù->
ªg_ouçut
);

699 i‡(
ªt
)

700 
out
;

701 
ªt
 = 
	`pˇ953x_ªad_ªgs
(
chù
, 
PCA957X_CFG
, chù->
ªg_dúe˘i⁄
);

702 i‡(
ªt
)

703 
out
;

706 i‡(
övît
)

707 
	`mem£t
(
vÆ
, 0xFF, 
	`NBANK
(
chù
));

709 
	`mem£t
(
vÆ
, 0, 
	`NBANK
(
chù
));

710 
	`pˇ953x_wrôe_ªgs
(
chù
, 
PCA957X_INVRT
, 
vÆ
);

713 
	`mem£t
(
vÆ
, 0x02, 
	`NBANK
(
chù
));

714 
	`pˇ953x_wrôe_ªgs
(
chù
, 
PCA957X_BKEN
, 
vÆ
);

717 
out
:

718  
ªt
;

719 
	}
}

721 
	$pˇ953x_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

722 c⁄° 
i2c_devi˚_id
 *
id
)

724 
pˇ953x_∂©f‹m_d©a
 *
pd©a
;

725 
pˇ953x_chù
 *
chù
;

726 
úq_ba£
 = 0;

727 
ªt
;

728 
u32
 
övît
 = 0;

730 
chù
 = 
	`devm_kzÆloc
(&
˛õ¡
->
dev
,

731 (
pˇ953x_chù
), 
GFP_KERNEL
);

732 i‡(
chù
 =
NULL
)

733  -
ENOMEM
;

735 
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

736 i‡(
pd©a
) {

737 
úq_ba£
 = 
pd©a
->irq_base;

738 
chù
->
gpio_°¨t
 = 
pd©a
->
gpio_ba£
;

739 
övît
 = 
pd©a
->invert;

740 
chù
->
«mes
 = 
pd©a
->names;

742 
	`pˇ953x_gë_Æt_pd©a
(
˛õ¡
, &
chù
->
gpio_°¨t
, &
övît
);

743 #ifde‡
CONFIG_OF_GPIO


745 i‡(
	`of_föd_¥›îty
(
˛õ¡
->
dev
.
of_node
, "öãºu±s", 
NULL
) == NULL)

746 
úq_ba£
 = -1;

750 
chù
->
˛õ¡
 = client;

752 
chù
->
chù_ty≥
 = 
id
->
drivî_d©a
 & (
PCA953X_TYPE
 | 
PCA957X_TYPE
);

754 
	`muãx_öô
(&
chù
->
i2c_lock
);

756 
ªt
 = 
	`devi˚_ª£t
(&
˛õ¡
->
dev
);

757 i‡(
ªt
 =-
ENODEV
)

758  -
EPROBE_DEFER
;

763 
	`pˇ953x_£tup_gpio
(
chù
, 
id
->
drivî_d©a
 & 
PCA_GPIO_MASK
);

765 i‡(
chù
->
chù_ty≥
 =
PCA953X_TYPE
)

766 
ªt
 = 
	`devi˚_pˇ953x_öô
(
chù
, 
övît
);

768 
ªt
 = 
	`devi˚_pˇ957x_öô
(
chù
, 
övît
);

769 i‡(
ªt
)

770  
ªt
;

772 
ªt
 = 
	`pˇ953x_úq_£tup
(
chù
, 
id
, 
úq_ba£
);

773 i‡(
ªt
)

774  
ªt
;

776 
ªt
 = 
	`gpiochù_add
(&
chù
->
gpio_chù
);

777 i‡(
ªt
)

778  
ªt
;

780 i‡(
pd©a
 &&Öd©a->
£tup
) {

781 
ªt
 = 
pd©a
->
	`£tup
(
˛õ¡
, 
chù
->
gpio_chù
.
ba£
,

782 
chù
->
gpio_chù
.
ngpio
, 
pd©a
->
c⁄ãxt
);

783 i‡(
ªt
 < 0)

784 
	`dev_w¨n
(&
˛õ¡
->
dev
, "£tu∞Áûed, %d\n", 
ªt
);

787 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
chù
);

789 
	}
}

791 
	$pˇ953x_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

793 
pˇ953x_∂©f‹m_d©a
 *
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

794 
pˇ953x_chù
 *
chù
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

795 
ªt
 = 0;

797 i‡(
pd©a
 &&Öd©a->
ã¨down
) {

798 
ªt
 = 
pd©a
->
	`ã¨down
(
˛õ¡
, 
chù
->
gpio_chù
.
ba£
,

799 
chù
->
gpio_chù
.
ngpio
, 
pd©a
->
c⁄ãxt
);

800 i‡(
ªt
 < 0) {

801 
	`dev_îr
(&
˛õ¡
->
dev
, "%s failed, %d\n",

802 "ã¨down", 
ªt
);

803  
ªt
;

807 
ªt
 = 
	`gpiochù_ªmove
(&
chù
->
gpio_chù
);

808 i‡(
ªt
) {

809 
	`dev_îr
(&
˛õ¡
->
dev
, "%s failed, %d\n",

810 "gpiochù_ªmove()", 
ªt
);

811  
ªt
;

815 
	}
}

817 c⁄° 
of_devi˚_id
 
	gpˇ953x_dt_ids
[] = {

818 { .
com∑tibÀ
 = "nxp,pca9505", },

819 { .
	gcom∑tibÀ
 = "nxp,pca9534", },

820 { .
	gcom∑tibÀ
 = "nxp,pca9535", },

821 { .
	gcom∑tibÀ
 = "nxp,pca9536", },

822 { .
	gcom∑tibÀ
 = "nxp,pca9537", },

823 { .
	gcom∑tibÀ
 = "nxp,pca9538", },

824 { .
	gcom∑tibÀ
 = "nxp,pca9539", },

825 { .
	gcom∑tibÀ
 = "nxp,pca9554", },

826 { .
	gcom∑tibÀ
 = "nxp,pca9555", },

827 { .
	gcom∑tibÀ
 = "nxp,pca9556", },

828 { .
	gcom∑tibÀ
 = "nxp,pca9557", },

829 { .
	gcom∑tibÀ
 = "nxp,pca9574", },

830 { .
	gcom∑tibÀ
 = "nxp,pca9575", },

832 { .
	gcom∑tibÀ
 = "maxim,max7310", },

833 { .
	gcom∑tibÀ
 = "maxim,max7312", },

834 { .
	gcom∑tibÀ
 = "maxim,max7313", },

835 { .
	gcom∑tibÀ
 = "maxim,max7315", },

837 { .
	gcom∑tibÀ
 = "ti,pca6107", },

838 { .
	gcom∑tibÀ
 = "ti,tca6408", },

839 { .
	gcom∑tibÀ
 = "ti,tca6416", },

840 { .
	gcom∑tibÀ
 = "ti,tca6424", },

844 
MODULE_DEVICE_TABLE
(
of
, 
pˇ953x_dt_ids
);

846 
i2c_drivî
 
	gpˇ953x_drivî
 = {

847 .
drivî
 = {

848 .
«me
 = "pca953x",

849 .
	gof_m©ch_èbÀ
 = 
pˇ953x_dt_ids
,

851 .
	g¥obe
 = 
pˇ953x_¥obe
,

852 .
	gªmove
 = 
pˇ953x_ªmove
,

853 .
	gid_èbÀ
 = 
pˇ953x_id
,

856 
__öô
 
	$pˇ953x_öô
()

858  
	`i2c_add_drivî
(&
pˇ953x_drivî
);

859 
	}
}

863 
subsys_öôˇŒ
(
pˇ953x_öô
);

865 
__exô
 
	$pˇ953x_exô
()

867 
	`i2c_dñ_drivî
(&
pˇ953x_drivî
);

868 
	}
}

869 
moduÀ_exô
(
pˇ953x_exô
);

871 
MODULE_AUTHOR
("eric miao <eric.miao@marvell.com>");

872 
MODULE_DESCRIPTION
("GPIOÉxpander driver for PCA953x");

873 
MODULE_LICENSE
("GPL");

	@gpio-pcf857x.c

21 
	~<löux/kî√l.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/gpio.h
>

24 
	~<löux/i2c.h
>

25 
	~<löux/i2c/pcf857x.h
>

26 
	~<löux/öãºu±.h
>

27 
	~<löux/úq.h
>

28 
	~<löux/úqdomaö.h
>

29 
	~<löux/moduÀ.h
>

30 
	~<löux/•ölock.h
>

31 
	~<löux/w‹kqueue.h
>

34 c⁄° 
i2c_devi˚_id
 
	gpcf857x_id
[] = {

51 
MODULE_DEVICE_TABLE
(
i2c
, 
pcf857x_id
);

65 
	spcf857x
 {

66 
gpio_chù
 
	mchù
;

67 
i2c_˛õ¡
 *
	m˛õ¡
;

68 
muãx
 
	mlock
;

69 
w‹k_°ru˘
 
	mw‹k
;

70 
úq_domaö
 *
	múq_domaö
;

71 
•ölock_t
 
	m¶ock
;

72 
	mout
;

73 
	m°©us
;

74 
	múq
;

76 (*
	mwrôe
)(
i2c_˛õ¡
 *
	m˛õ¡
, 
	md©a
);

77 (*
	mªad
)(
i2c_˛õ¡
 *
	m˛õ¡
);

84 
	$i2c_wrôe_À8
(
i2c_˛õ¡
 *
˛õ¡
, 
d©a
)

86  
	`i2c_smbus_wrôe_byã
(
˛õ¡
, 
d©a
);

87 
	}
}

89 
	$i2c_ªad_À8
(
i2c_˛õ¡
 *
˛õ¡
)

91  ()
	`i2c_smbus_ªad_byã
(
˛õ¡
);

92 
	}
}

96 
	$i2c_wrôe_À16
(
i2c_˛õ¡
 *
˛õ¡
, 
w‹d
)

98 
u8
 
buf
[2] = { 
w‹d
 & 0xff, word >> 8, };

99 
°©us
;

101 
°©us
 = 
	`i2c_ma°î_£nd
(
˛õ¡
, 
buf
, 2);

102  (
°©us
 < 0) ? status : 0;

103 
	}
}

105 
	$i2c_ªad_À16
(
i2c_˛õ¡
 *
˛õ¡
)

107 
u8
 
buf
[2];

108 
°©us
;

110 
°©us
 = 
	`i2c_ma°î_ªcv
(
˛õ¡
, 
buf
, 2);

111 i‡(
°©us
 < 0)

112  
°©us
;

113  (
buf
[1] << 8) | buf[0];

114 
	}
}

118 
	$pcf857x_öput
(
gpio_chù
 *
chù
, 
off£t
)

120 
pcf857x
 *
gpio
 = 
	`c⁄èöî_of
(
chù
, pcf857x, chip);

121 
°©us
;

123 
	`muãx_lock
(&
gpio
->
lock
);

124 
gpio
->
out
 |(1 << 
off£t
);

125 
°©us
 = 
gpio
->
	`wrôe
(gpio->
˛õ¡
, gpio->
out
);

126 
	`muãx_u∆ock
(&
gpio
->
lock
);

128  
°©us
;

129 
	}
}

131 
	$pcf857x_gë
(
gpio_chù
 *
chù
, 
off£t
)

133 
pcf857x
 *
gpio
 = 
	`c⁄èöî_of
(
chù
, pcf857x, chip);

134 
vÆue
;

136 
vÆue
 = 
gpio
->
	`ªad
(gpio->
˛õ¡
);

137  (
vÆue
 < 0Ë? 0 : (vÆuê& (1 << 
off£t
));

138 
	}
}

140 
	$pcf857x_ouçut
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

142 
pcf857x
 *
gpio
 = 
	`c⁄èöî_of
(
chù
, pcf857x, chip);

143 
bô
 = 1 << 
off£t
;

144 
°©us
;

146 
	`muãx_lock
(&
gpio
->
lock
);

147 i‡(
vÆue
)

148 
gpio
->
out
 |
bô
;

150 
gpio
->
out
 &~
bô
;

151 
°©us
 = 
gpio
->
	`wrôe
(gpio->
˛õ¡
, gpio->
out
);

152 
	`muãx_u∆ock
(&
gpio
->
lock
);

154  
°©us
;

155 
	}
}

157 
	$pcf857x_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

159 
	`pcf857x_ouçut
(
chù
, 
off£t
, 
vÆue
);

160 
	}
}

164 
	$pcf857x_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

166 
pcf857x
 *
gpio
 = 
	`c⁄èöî_of
(
chù
, pcf857x, chip);

168  
	`úq_¸óã_m≠pög
(
gpio
->
úq_domaö
, 
off£t
);

169 
	}
}

171 
	$pcf857x_úq_demux_w‹k
(
w‹k_°ru˘
 *
w‹k
)

173 
pcf857x
 *
gpio
 = 
	`c⁄èöî_of
(
w‹k
,

174 
pcf857x
,

175 
w‹k
);

176 
ch™ge
, 
i
, 
°©us
, 
Êags
;

178 
°©us
 = 
gpio
->
	`ªad
(gpio->
˛õ¡
);

180 
	`•ö_lock_úqßve
(&
gpio
->
¶ock
, 
Êags
);

182 
ch™ge
 = 
gpio
->
°©us
 ^ status;

183 
	`f‹_óch_£t_bô
(
i
, &
ch™ge
, 
gpio
->
chù
.
ngpio
)

184 
	`gíîic_h™dÀ_úq
(
	`úq_föd_m≠pög
(
gpio
->
úq_domaö
, 
i
));

185 
gpio
->
°©us
 = status;

187 
	`•ö_u∆ock_úqª°‹e
(&
gpio
->
¶ock
, 
Êags
);

188 
	}
}

190 
úqªtu∫_t
 
	$pcf857x_úq_demux
(
úq
, *
d©a
)

192 
pcf857x
 *
gpio
 = 
d©a
;

198 
	`scheduÀ_w‹k
(&
gpio
->
w‹k
);

200  
IRQ_HANDLED
;

201 
	}
}

203 
	$pcf857x_úq_domaö_m≠
(
úq_domaö
 *
domaö
, 
vúq
,

204 
úq_hw_numbî_t
 
hw
)

206 
	`úq_£t_chù_™d_h™dÀr
(
vúq
,

207 &
dummy_úq_chù
,

208 
h™dÀ_Àvñ_úq
);

210 
	}
}

212 
úq_domaö_›s
 
	gpcf857x_úq_domaö_›s
 = {

213 .
m≠
 = 
pcf857x_úq_domaö_m≠
,

216 
	$pcf857x_úq_domaö_˛ónup
(
pcf857x
 *
gpio
)

218 i‡(
gpio
->
úq_domaö
)

219 
	`úq_domaö_ªmove
(
gpio
->
úq_domaö
);

221 i‡(
gpio
->
úq
)

222 
	`‰ì_úq
(
gpio
->
úq
, gpio);

223 
	}
}

225 
	$pcf857x_úq_domaö_öô
(
pcf857x
 *
gpio
,

226 
pcf857x_∂©f‹m_d©a
 *
pd©a
,

227 
i2c_˛õ¡
 *
˛õ¡
)

229 
°©us
;

231 
gpio
->
úq_domaö
 = 
	`úq_domaö_add_löór
(
˛õ¡
->
dev
.
of_node
,

232 
gpio
->
chù
.
ngpio
,

233 &
pcf857x_úq_domaö_›s
,

234 
NULL
);

235 i‡(!
gpio
->
úq_domaö
)

236 
Áû
;

239 
°©us
 = 
	`ªque°_úq
(
˛õ¡
->
úq
, 
pcf857x_úq_demux
, 0,

240 
	`dev_«me
(&
˛õ¡
->
dev
), 
gpio
);

241 i‡(
°©us
)

242 
Áû
;

245 
	`INIT_WORK
(&
gpio
->
w‹k
, 
pcf857x_úq_demux_w‹k
);

246 
gpio
->
chù
.
to_úq
 = 
pcf857x_to_úq
;

247 
gpio
->
úq
 = 
˛õ¡
->irq;

251 
Áû
:

252 
	`pcf857x_úq_domaö_˛ónup
(
gpio
);

253  -
EINVAL
;

254 
	}
}

258 
	$pcf857x_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

259 c⁄° 
i2c_devi˚_id
 *
id
)

261 
pcf857x_∂©f‹m_d©a
 *
pd©a
;

262 
pcf857x
 *
gpio
;

263 
°©us
;

265 
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

266 i‡(!
pd©a
) {

267 
	`dev_dbg
(&
˛õ¡
->
dev
, "noÖlatform data\n");

271 
gpio
 = 
	`devm_kzÆloc
(&
˛õ¡
->
dev
, (*gpio), 
GFP_KERNEL
);

272 i‡(!
gpio
)

273  -
ENOMEM
;

275 
	`muãx_öô
(&
gpio
->
lock
);

276 
	`•ö_lock_öô
(&
gpio
->
¶ock
);

278 
gpio
->
chù
.
ba£
 = 
pd©a
 ?Öd©a->
gpio_ba£
 : -1;

279 
gpio
->
chù
.
ˇn_¶ìp
 = 1;

280 
gpio
->
chù
.
dev
 = &
˛õ¡
->dev;

281 
gpio
->
chù
.
ow√r
 = 
THIS_MODULE
;

282 
gpio
->
chù
.
gë
 = 
pcf857x_gë
;

283 
gpio
->
chù
.
£t
 = 
pcf857x_£t
;

284 
gpio
->
chù
.
dúe˘i⁄_öput
 = 
pcf857x_öput
;

285 
gpio
->
chù
.
dúe˘i⁄_ouçut
 = 
pcf857x_ouçut
;

286 
gpio
->
chù
.
ngpio
 = 
id
->
drivî_d©a
;

289 i‡(
pd©a
 && 
˛õ¡
->
úq
) {

290 
°©us
 = 
	`pcf857x_úq_domaö_öô
(
gpio
, 
pd©a
, 
˛õ¡
);

291 i‡(
°©us
 < 0) {

292 
	`dev_îr
(&
˛õ¡
->
dev
, "irq_domain init failed\n");

293 
Áû
;

308 i‡(
gpio
->
chù
.
ngpio
 == 8) {

309 
gpio
->
wrôe
 = 
i2c_wrôe_À8
;

310 
gpio
->
ªad
 = 
i2c_ªad_À8
;

312 i‡(!
	`i2c_check_fun˘i⁄Æôy
(
˛õ¡
->
ad≠ãr
,

313 
I2C_FUNC_SMBUS_BYTE
))

314 
°©us
 = -
EIO
;

318 
°©us
 = 
	`i2c_smbus_ªad_byã
(
˛õ¡
);

326 } i‡(
gpio
->
chù
.
ngpio
 == 16) {

327 
gpio
->
wrôe
 = 
i2c_wrôe_À16
;

328 
gpio
->
ªad
 = 
i2c_ªad_À16
;

330 i‡(!
	`i2c_check_fun˘i⁄Æôy
(
˛õ¡
->
ad≠ãr
, 
I2C_FUNC_I2C
))

331 
°©us
 = -
EIO
;

335 
°©us
 = 
	`i2c_ªad_À16
(
˛õ¡
);

338 
	`dev_dbg
(&
˛õ¡
->
dev
, "unsupportedÇumber of gpios\n");

339 
°©us
 = -
EINVAL
;

342 i‡(
°©us
 < 0)

343 
Áû
;

345 
gpio
->
chù
.
œbñ
 = 
˛õ¡
->
«me
;

347 
gpio
->
˛õ¡
 = client;

348 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
gpio
);

365 
gpio
->
out
 = 
pd©a
 ? ~pd©a->
n_œtch
 : ~0;

366 
gpio
->
°©us
 = gpio->
out
;

368 
°©us
 = 
	`gpiochù_add
(&
gpio
->
chù
);

369 i‡(
°©us
 < 0)

370 
Áû
;

375 i‡(
pd©a
 &&Öd©a->
£tup
) {

376 
°©us
 = 
pd©a
->
	`£tup
(
˛õ¡
,

377 
gpio
->
chù
.
ba£
, gpio->chù.
ngpio
,

378 
pd©a
->
c⁄ãxt
);

379 i‡(
°©us
 < 0)

380 
	`dev_w¨n
(&
˛õ¡
->
dev
, "£tu∞--> %d\n", 
°©us
);

383 
	`dev_öfo
(&
˛õ¡
->
dev
, "probed\n");

387 
Áû
:

388 
	`dev_dbg
(&
˛õ¡
->
dev
, "probeÉrror %d for '%s'\n",

389 
°©us
, 
˛õ¡
->
«me
);

391 i‡(
pd©a
 && 
˛õ¡
->
úq
)

392 
	`pcf857x_úq_domaö_˛ónup
(
gpio
);

394  
°©us
;

395 
	}
}

397 
	$pcf857x_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

399 
pcf857x_∂©f‹m_d©a
 *
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

400 
pcf857x
 *
gpio
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

401 
°©us
 = 0;

403 i‡(
pd©a
 &&Öd©a->
ã¨down
) {

404 
°©us
 = 
pd©a
->
	`ã¨down
(
˛õ¡
,

405 
gpio
->
chù
.
ba£
, gpio->chù.
ngpio
,

406 
pd©a
->
c⁄ãxt
);

407 i‡(
°©us
 < 0) {

408 
	`dev_îr
(&
˛õ¡
->
dev
, "%s --> %d\n",

409 "ã¨down", 
°©us
);

410  
°©us
;

414 i‡(
pd©a
 && 
˛õ¡
->
úq
)

415 
	`pcf857x_úq_domaö_˛ónup
(
gpio
);

417 
°©us
 = 
	`gpiochù_ªmove
(&
gpio
->
chù
);

418 i‡(
°©us
)

419 
	`dev_îr
(&
˛õ¡
->
dev
, "%†--> %d\n", "ªmove", 
°©us
);

420  
°©us
;

421 
	}
}

423 
i2c_drivî
 
	gpcf857x_drivî
 = {

424 .
drivî
 = {

425 .
«me
 = "pcf857x",

426 .
	gow√r
 = 
THIS_MODULE
,

428 .
	g¥obe
 = 
pcf857x_¥obe
,

429 .
	gªmove
 = 
pcf857x_ªmove
,

430 .
	gid_èbÀ
 = 
pcf857x_id
,

433 
__öô
 
	$pcf857x_öô
()

435  
	`i2c_add_drivî
(&
pcf857x_drivî
);

436 
	}
}

440 
subsys_öôˇŒ
(
pcf857x_öô
);

442 
__exô
 
	$pcf857x_exô
()

444 
	`i2c_dñ_drivî
(&
pcf857x_drivî
);

445 
	}
}

446 
moduÀ_exô
(
pcf857x_exô
);

448 
MODULE_LICENSE
("GPL");

449 
MODULE_AUTHOR
("David Brownell");

	@gpio-pch.c

17 
	~<löux/moduÀ.h
>

18 
	~<löux/kî√l.h
>

19 
	~<löux/pci.h
>

20 
	~<löux/gpio.h
>

21 
	~<löux/öãºu±.h
>

22 
	~<löux/úq.h
>

24 
	#PCH_EDGE_FALLING
 0

	)

25 
	#PCH_EDGE_RISING
 
	`BIT
(0)

	)

26 
	#PCH_LEVEL_L
 
	`BIT
(1)

	)

27 
	#PCH_LEVEL_H
 (
	`BIT
(0Ë| BIT(1))

	)

28 
	#PCH_EDGE_BOTH
 
	`BIT
(2)

	)

29 
	#PCH_IM_MASK
 (
	`BIT
(0Ë| BIT(1Ë| BIT(2))

	)

31 
	#PCH_IRQ_BASE
 24

	)

33 
	spch_ªgs
 {

34 
u32
 
	mõn
;

35 
u32
 
	mi°©us
;

36 
u32
 
	midi•
;

37 
u32
 
	mi˛r
;

38 
u32
 
	mimask
;

39 
u32
 
	mimask˛r
;

40 
u32
 
	mpo
;

41 
u32
 
	mpi
;

42 
u32
 
	mpm
;

43 
u32
 
	mim0
;

44 
u32
 
	mim1
;

45 
u32
 
	mª£rved
[3];

46 
u32
 
	mgpio_u£_£l
;

47 
u32
 
	mª£t
;

50 
	epch_ty≥_t
 {

51 
	mINTEL_EG20T_PCH
,

52 
	mOKISEMI_ML7223m_IOH
,

53 
	mOKISEMI_ML7223n_IOH


57 
	ggpio_pös
[] = {

58 [
INTEL_EG20T_PCH
] = 12,

59 [
OKISEMI_ML7223m_IOH
] = 8,

60 [
OKISEMI_ML7223n_IOH
] = 8,

74 
	spch_gpio_ªg_d©a
 {

75 
u32
 
	mõn_ªg
;

76 
u32
 
	mimask_ªg
;

77 
u32
 
	mpo_ªg
;

78 
u32
 
	mpm_ªg
;

79 
u32
 
	mim0_ªg
;

80 
u32
 
	mim1_ªg
;

81 
u32
 
	mgpio_u£_£l_ªg
;

97 
	spch_gpio
 {

98 
__iomem
 *
	mba£
;

99 
pch_ªgs
 
__iomem
 *
	mªg
;

100 
devi˚
 *
	mdev
;

101 
gpio_chù
 
	mgpio
;

102 
pch_gpio_ªg_d©a
 
	mpch_gpio_ªg
;

103 
	múq_ba£
;

104 
pch_ty≥_t
 
	mioh
;

105 
•ölock_t
 
	m•ölock
;

108 
	$pch_gpio_£t
(
gpio_chù
 *
gpio
, 
ƒ
, 
vÆ
)

110 
u32
 
ªg_vÆ
;

111 
pch_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, pch_gpio, gpio);

112 
Êags
;

114 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

115 
ªg_vÆ
 = 
	`i‹ód32
(&
chù
->
ªg
->
po
);

116 i‡(
vÆ
)

117 
ªg_vÆ
 |(1 << 
ƒ
);

119 
ªg_vÆ
 &~(1 << 
ƒ
);

121 
	`iowrôe32
(
ªg_vÆ
, &
chù
->
ªg
->
po
);

122 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

123 
	}
}

125 
	$pch_gpio_gë
(
gpio_chù
 *
gpio
, 
ƒ
)

127 
pch_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, pch_gpio, gpio);

129  
	`i‹ód32
(&
chù
->
ªg
->
pi
Ë& (1 << 
ƒ
);

130 
	}
}

132 
	$pch_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gpio
, 
ƒ
,

133 
vÆ
)

135 
pch_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, pch_gpio, gpio);

136 
u32
 
pm
;

137 
u32
 
ªg_vÆ
;

138 
Êags
;

140 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

141 
pm
 = 
	`i‹ód32
(&
chù
->
ªg
->pmË& ((1 << 
gpio_pös
[chù->
ioh
]) - 1);

142 
pm
 |(1 << 
ƒ
);

143 
	`iowrôe32
(
pm
, &
chù
->
ªg
->pm);

145 
ªg_vÆ
 = 
	`i‹ód32
(&
chù
->
ªg
->
po
);

146 i‡(
vÆ
)

147 
ªg_vÆ
 |(1 << 
ƒ
);

149 
ªg_vÆ
 &~(1 << 
ƒ
);

150 
	`iowrôe32
(
ªg_vÆ
, &
chù
->
ªg
->
po
);

151 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

154 
	}
}

156 
	$pch_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gpio
, 
ƒ
)

158 
pch_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, pch_gpio, gpio);

159 
u32
 
pm
;

160 
Êags
;

162 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

163 
pm
 = 
	`i‹ód32
(&
chù
->
ªg
->pmË& ((1 << 
gpio_pös
[chù->
ioh
]) - 1);

164 
pm
 &~(1 << 
ƒ
);

165 
	`iowrôe32
(
pm
, &
chù
->
ªg
->pm);

166 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

169 
	}
}

174 
	$pch_gpio_ßve_ªg_c⁄f
(
pch_gpio
 *
chù
)

176 
chù
->
pch_gpio_ªg
.
õn_ªg
 = 
	`i‹ód32
(&chù->
ªg
->
õn
);

177 
chù
->
pch_gpio_ªg
.
imask_ªg
 = 
	`i‹ód32
(&chù->
ªg
->
imask
);

178 
chù
->
pch_gpio_ªg
.
po_ªg
 = 
	`i‹ód32
(&chù->
ªg
->
po
);

179 
chù
->
pch_gpio_ªg
.
pm_ªg
 = 
	`i‹ód32
(&chù->
ªg
->
pm
);

180 
chù
->
pch_gpio_ªg
.
im0_ªg
 = 
	`i‹ód32
(&chù->
ªg
->
im0
);

181 i‡(
chù
->
ioh
 =
INTEL_EG20T_PCH
)

182 
chù
->
pch_gpio_ªg
.
im1_ªg
 = 
	`i‹ód32
(&chù->
ªg
->
im1
);

183 i‡(
chù
->
ioh
 =
OKISEMI_ML7223n_IOH
)

184 
chù
->
pch_gpio_ªg
.
gpio_u£_£l_ªg
 =\

185 
	`i‹ód32
(&
chù
->
ªg
->
gpio_u£_£l
);

186 
	}
}

191 
	$pch_gpio_ª°‹e_ªg_c⁄f
(
pch_gpio
 *
chù
)

193 
	`iowrôe32
(
chù
->
pch_gpio_ªg
.
õn_ªg
, &chù->
ªg
->
õn
);

194 
	`iowrôe32
(
chù
->
pch_gpio_ªg
.
imask_ªg
, &chù->
ªg
->
imask
);

196 
	`iowrôe32
(
chù
->
pch_gpio_ªg
.
po_ªg
, &chù->
ªg
->
po
);

198 
	`iowrôe32
(
chù
->
pch_gpio_ªg
.
pm_ªg
, &chù->
ªg
->
pm
);

199 
	`iowrôe32
(
chù
->
pch_gpio_ªg
.
im0_ªg
, &chù->
ªg
->
im0
);

200 i‡(
chù
->
ioh
 =
INTEL_EG20T_PCH
)

201 
	`iowrôe32
(
chù
->
pch_gpio_ªg
.
im1_ªg
, &chù->
ªg
->
im1
);

202 i‡(
chù
->
ioh
 =
OKISEMI_ML7223n_IOH
)

203 
	`iowrôe32
(
chù
->
pch_gpio_ªg
.
gpio_u£_£l_ªg
,

204 &
chù
->
ªg
->
gpio_u£_£l
);

205 
	}
}

207 
	$pch_gpio_to_úq
(
gpio_chù
 *
gpio
, 
off£t
)

209 
pch_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, pch_gpio, gpio);

210  
chù
->
úq_ba£
 + 
off£t
;

211 
	}
}

213 
	$pch_gpio_£tup
(
pch_gpio
 *
chù
)

215 
gpio_chù
 *
gpio
 = &
chù
->gpio;

217 
gpio
->
œbñ
 = 
	`dev_«me
(
chù
->
dev
);

218 
gpio
->
dev
 = 
chù
->dev;

219 
gpio
->
ow√r
 = 
THIS_MODULE
;

220 
gpio
->
dúe˘i⁄_öput
 = 
pch_gpio_dúe˘i⁄_öput
;

221 
gpio
->
gë
 = 
pch_gpio_gë
;

222 
gpio
->
dúe˘i⁄_ouçut
 = 
pch_gpio_dúe˘i⁄_ouçut
;

223 
gpio
->
£t
 = 
pch_gpio_£t
;

224 
gpio
->
dbg_show
 = 
NULL
;

225 
gpio
->
ba£
 = -1;

226 
gpio
->
ngpio
 = 
gpio_pös
[
chù
->
ioh
];

227 
gpio
->
ˇn_¶ìp
 = 0;

228 
gpio
->
to_úq
 = 
pch_gpio_to_úq
;

229 
	}
}

231 
	$pch_úq_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

233 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

234 
pch_gpio
 *
chù
 = 
gc
->
¥iv©e
;

235 
u32
 
im
, 
im_pos
, 
vÆ
;

236 
u32
 
__iomem
 *
im_ªg
;

237 
Êags
;

238 
ch
, 
úq
 = 
d
->irq;

240 
ch
 = 
úq
 - 
chù
->
úq_ba£
;

241 i‡(
úq
 <
chù
->
úq_ba£
 + 7) {

242 
im_ªg
 = &
chù
->
ªg
->
im0
;

243 
im_pos
 = 
ch
;

245 
im_ªg
 = &
chù
->
ªg
->
im1
;

246 
im_pos
 = 
ch
 - 8;

248 
	`dev_dbg
(
chù
->
dev
, "%s:irq=%dÅype=%d ch=%dÖos=%d\n",

249 
__func__
, 
úq
, 
ty≥
, 
ch
, 
im_pos
);

251 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

253 
ty≥
) {

254 
IRQ_TYPE_EDGE_RISING
:

255 
vÆ
 = 
PCH_EDGE_RISING
;

257 
IRQ_TYPE_EDGE_FALLING
:

258 
vÆ
 = 
PCH_EDGE_FALLING
;

260 
IRQ_TYPE_EDGE_BOTH
:

261 
vÆ
 = 
PCH_EDGE_BOTH
;

263 
IRQ_TYPE_LEVEL_HIGH
:

264 
vÆ
 = 
PCH_LEVEL_H
;

266 
IRQ_TYPE_LEVEL_LOW
:

267 
vÆ
 = 
PCH_LEVEL_L
;

270 
u∆ock
;

274 
im
 = 
	`i‹ód32
(
im_ªg
Ë& ~(
PCH_IM_MASK
 << (
im_pos
 * 4));

275 
	`iowrôe32
(
im
 | (
vÆ
 << (
im_pos
 * 4)), 
im_ªg
);

278 i‡(
ty≥
 & (
IRQ_TYPE_LEVEL_LOW
 | 
IRQ_TYPE_LEVEL_HIGH
))

279 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_Àvñ_úq
);

280 i‡(
ty≥
 & (
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
))

281 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_edge_úq
);

283 
u∆ock
:

284 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

286 
	}
}

288 
	$pch_úq_unmask
(
úq_d©a
 *
d
)

290 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

291 
pch_gpio
 *
chù
 = 
gc
->
¥iv©e
;

293 
	`iowrôe32
(1 << (
d
->
úq
 - 
chù
->
úq_ba£
), &chù->
ªg
->
imask˛r
);

294 
	}
}

296 
	$pch_úq_mask
(
úq_d©a
 *
d
)

298 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

299 
pch_gpio
 *
chù
 = 
gc
->
¥iv©e
;

301 
	`iowrôe32
(1 << (
d
->
úq
 - 
chù
->
úq_ba£
), &chù->
ªg
->
imask
);

302 
	}
}

304 
	$pch_úq_ack
(
úq_d©a
 *
d
)

306 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

307 
pch_gpio
 *
chù
 = 
gc
->
¥iv©e
;

309 
	`iowrôe32
(1 << (
d
->
úq
 - 
chù
->
úq_ba£
), &chù->
ªg
->
i˛r
);

310 
	}
}

312 
úqªtu∫_t
 
	$pch_gpio_h™dÀr
(
úq
, *
dev_id
)

314 
pch_gpio
 *
chù
 = 
dev_id
;

315 
u32
 
ªg_vÆ
 = 
	`i‹ód32
(&
chù
->
ªg
->
i°©us
);

316 
i
, 
ªt
 = 
IRQ_NONE
;

318 
i
 = 0; i < 
gpio_pös
[
chù
->
ioh
]; i++) {

319 i‡(
ªg_vÆ
 & 
	`BIT
(
i
)) {

320 
	`dev_dbg
(
chù
->
dev
, "%s:[%d]:irq=%d status=0x%x\n",

321 
__func__
, 
i
, 
úq
, 
ªg_vÆ
);

322 
	`gíîic_h™dÀ_úq
(
chù
->
úq_ba£
 + 
i
);

323 
ªt
 = 
IRQ_HANDLED
;

326  
ªt
;

327 
	}
}

329 
	$pch_gpio_Æloc_gíîic_chù
(
pch_gpio
 *
chù
,

330 
úq_°¨t
, 
num
)

332 
úq_chù_gíîic
 *
gc
;

333 
úq_chù_ty≥
 *
˘
;

335 
gc
 = 
	`úq_Æloc_gíîic_chù
("pch_gpio", 1, 
úq_°¨t
, 
chù
->
ba£
,

336 
h™dÀ_sim∂e_úq
);

337 
gc
->
¥iv©e
 = 
chù
;

338 
˘
 = 
gc
->
chù_ty≥s
;

340 
˘
->
chù
.
úq_ack
 = 
pch_úq_ack
;

341 
˘
->
chù
.
úq_mask
 = 
pch_úq_mask
;

342 
˘
->
chù
.
úq_unmask
 = 
pch_úq_unmask
;

343 
˘
->
chù
.
úq_£t_ty≥
 = 
pch_úq_ty≥
;

345 
	`úq_£tup_gíîic_chù
(
gc
, 
	`IRQ_MSK
(
num
), 
IRQ_GC_INIT_MASK_CACHE
,

346 
IRQ_NOREQUEST
 | 
IRQ_NOPROBE
, 0);

347 
	}
}

349 
	$pch_gpio_¥obe
(
pci_dev
 *
pdev
,

350 c⁄° 
pci_devi˚_id
 *
id
)

352 
s32
 
ªt
;

353 
pch_gpio
 *
chù
;

354 
úq_ba£
;

355 
u32
 
msk
;

357 
chù
 = 
	`kzÆloc
((*chù), 
GFP_KERNEL
);

358 i‡(
chù
 =
NULL
)

359  -
ENOMEM
;

361 
chù
->
dev
 = &
pdev
->dev;

362 
ªt
 = 
	`pci_íabÀ_devi˚
(
pdev
);

363 i‡(
ªt
) {

364 
	`dev_îr
(&
pdev
->
dev
, "%†:Öci_íabÀ_devi˚ FAILED", 
__func__
);

365 
îr_pci_íabÀ
;

368 
ªt
 = 
	`pci_ªque°_ªgi⁄s
(
pdev
, 
KBUILD_MODNAME
);

369 i‡(
ªt
) {

370 
	`dev_îr
(&
pdev
->
dev
, "pci_ªque°_ªgi⁄†FAILED-%d", 
ªt
);

371 
îr_ªque°_ªgi⁄s
;

374 
chù
->
ba£
 = 
	`pci_iom≠
(
pdev
, 1, 0);

375 i‡(!
chù
->
ba£
) {

376 
	`dev_îr
(&
pdev
->
dev
, "%†:Öci_iom≠ FAILED", 
__func__
);

377 
ªt
 = -
ENOMEM
;

378 
îr_iom≠
;

381 i‡(
pdev
->
devi˚
 == 0x8803)

382 
chù
->
ioh
 = 
INTEL_EG20T_PCH
;

383 i‡(
pdev
->
devi˚
 == 0x8014)

384 
chù
->
ioh
 = 
OKISEMI_ML7223m_IOH
;

385 i‡(
pdev
->
devi˚
 == 0x8043)

386 
chù
->
ioh
 = 
OKISEMI_ML7223n_IOH
;

388 
chù
->
ªg
 = chù->
ba£
;

389 
	`pci_£t_drvd©a
(
pdev
, 
chù
);

390 
	`•ö_lock_öô
(&
chù
->
•ölock
);

391 
	`pch_gpio_£tup
(
chù
);

392 
ªt
 = 
	`gpiochù_add
(&
chù
->
gpio
);

393 i‡(
ªt
) {

394 
	`dev_îr
(&
pdev
->
dev
, "PCH gpio: FailedÅoÑegister GPIO\n");

395 
îr_gpiochù_add
;

398 
úq_ba£
 = 
	`úq_Æloc_descs
(-1, 0, 
gpio_pös
[
chù
->
ioh
], 
NUMA_NO_NODE
);

399 i‡(
úq_ba£
 < 0) {

400 
	`dev_w¨n
(&
pdev
->
dev
, "PCH gpio: FailedÅo get IRQ baseÇum\n");

401 
chù
->
úq_ba£
 = -1;

402 
íd
;

404 
chù
->
úq_ba£
 = irq_base;

407 
msk
 = (1 << 
gpio_pös
[
chù
->
ioh
]) - 1;

408 
	`iowrôe32
(
msk
, &
chù
->
ªg
->
imask
);

409 
	`iowrôe32
(
msk
, &
chù
->
ªg
->
õn
);

411 
ªt
 = 
	`ªque°_úq
(
pdev
->
úq
, 
pch_gpio_h™dÀr
,

412 
IRQF_SHARED
, 
KBUILD_MODNAME
, 
chù
);

413 i‡(
ªt
 != 0) {

414 
	`dev_îr
(&
pdev
->
dev
,

415 "%†ªque°_úq faûed\n", 
__func__
);

416 
îr_ªque°_úq
;

419 
	`pch_gpio_Æloc_gíîic_chù
(
chù
, 
úq_ba£
, 
gpio_pös
[chù->
ioh
]);

421 
íd
:

424 
îr_ªque°_úq
:

425 
	`úq_‰ì_descs
(
úq_ba£
, 
gpio_pös
[
chù
->
ioh
]);

427 i‡(
	`gpiochù_ªmove
(&
chù
->
gpio
))

428 
	`dev_îr
(&
pdev
->
dev
, "%†gpiochù_ªmovêÁûed\n", 
__func__
);

430 
îr_gpiochù_add
:

431 
	`pci_iounm≠
(
pdev
, 
chù
->
ba£
);

433 
îr_iom≠
:

434 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

436 
îr_ªque°_ªgi⁄s
:

437 
	`pci_dißbÀ_devi˚
(
pdev
);

439 
îr_pci_íabÀ
:

440 
	`k‰ì
(
chù
);

441 
	`dev_îr
(&
pdev
->
dev
, "%†FaûedÑëu∫†%d\n", 
__func__
, 
ªt
);

442  
ªt
;

443 
	}
}

445 
	$pch_gpio_ªmove
(
pci_dev
 *
pdev
)

447 
îr
;

448 
pch_gpio
 *
chù
 = 
	`pci_gë_drvd©a
(
pdev
);

450 i‡(
chù
->
úq_ba£
 != -1) {

451 
	`‰ì_úq
(
pdev
->
úq
, 
chù
);

453 
	`úq_‰ì_descs
(
chù
->
úq_ba£
, 
gpio_pös
[chù->
ioh
]);

456 
îr
 = 
	`gpiochù_ªmove
(&
chù
->
gpio
);

457 i‡(
îr
)

458 
	`dev_îr
(&
pdev
->
dev
, "Failed gpiochip_remove\n");

460 
	`pci_iounm≠
(
pdev
, 
chù
->
ba£
);

461 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

462 
	`pci_dißbÀ_devi˚
(
pdev
);

463 
	`k‰ì
(
chù
);

464 
	}
}

466 #ifde‡
CONFIG_PM


467 
	$pch_gpio_su•íd
(
pci_dev
 *
pdev
, 
pm_mesßge_t
 
°©e
)

469 
s32
 
ªt
;

470 
pch_gpio
 *
chù
 = 
	`pci_gë_drvd©a
(
pdev
);

471 
Êags
;

473 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

474 
	`pch_gpio_ßve_ªg_c⁄f
(
chù
);

475 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

477 
ªt
 = 
	`pci_ßve_°©e
(
pdev
);

478 i‡(
ªt
) {

479 
	`dev_îr
(&
pdev
->
dev
, "pci_ßve_°©êFaûed-%d\n", 
ªt
);

480  
ªt
;

482 
	`pci_dißbÀ_devi˚
(
pdev
);

483 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D0
);

484 
ªt
 = 
	`pci_íabÀ_wake
(
pdev
, 
PCI_D0
, 1);

485 i‡(
ªt
)

486 
	`dev_îr
(&
pdev
->
dev
, "pci_íabÀ_wakêFaûed -%d\n", 
ªt
);

489 
	}
}

491 
	$pch_gpio_ªsume
(
pci_dev
 *
pdev
)

493 
s32
 
ªt
;

494 
pch_gpio
 *
chù
 = 
	`pci_gë_drvd©a
(
pdev
);

495 
Êags
;

497 
ªt
 = 
	`pci_íabÀ_wake
(
pdev
, 
PCI_D0
, 0);

499 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D0
);

500 
ªt
 = 
	`pci_íabÀ_devi˚
(
pdev
);

501 i‡(
ªt
) {

502 
	`dev_îr
(&
pdev
->
dev
, "pci_íabÀ_devi˚ Faûed-%d ", 
ªt
);

503  
ªt
;

505 
	`pci_ª°‹e_°©e
(
pdev
);

507 
	`•ö_lock_úqßve
(&
chù
->
•ölock
, 
Êags
);

508 
	`iowrôe32
(0x01, &
chù
->
ªg
->
ª£t
);

509 
	`iowrôe32
(0x00, &
chù
->
ªg
->
ª£t
);

510 
	`pch_gpio_ª°‹e_ªg_c⁄f
(
chù
);

511 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
•ölock
, 
Êags
);

514 
	}
}

516 
	#pch_gpio_su•íd
 
NULL


	)

517 
	#pch_gpio_ªsume
 
NULL


	)

520 
	#PCI_VENDOR_ID_ROHM
 0x10DB

	)

521 
DEFINE_PCI_DEVICE_TABLE
(
pch_gpio_pcidev_id
) = {

522 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 0x8803) },

523 { 
PCI_DEVICE
(
PCI_VENDOR_ID_ROHM
, 0x8014) },

524 { 
PCI_DEVICE
(
PCI_VENDOR_ID_ROHM
, 0x8043) },

525 { 
PCI_DEVICE
(
PCI_VENDOR_ID_ROHM
, 0x8803) },

528 
MODULE_DEVICE_TABLE
(
pci
, 
pch_gpio_pcidev_id
);

530 
pci_drivî
 
	gpch_gpio_drivî
 = {

531 .
«me
 = "pch_gpio",

532 .
	gid_èbÀ
 = 
pch_gpio_pcidev_id
,

533 .
	g¥obe
 = 
pch_gpio_¥obe
,

534 .
	gªmove
 = 
pch_gpio_ªmove
,

535 .
	gsu•íd
 = 
pch_gpio_su•íd
,

536 .
	gªsume
 = 
pch_gpio_ªsume


539 
moduÀ_pci_drivî
(
pch_gpio_drivî
);

541 
MODULE_DESCRIPTION
("PCH GPIO PCI Driver");

542 
MODULE_LICENSE
("GPL");

	@gpio-pl061.c

12 
	~<löux/•ölock.h
>

13 
	~<löux/î∫o.h
>

14 
	~<löux/moduÀ.h
>

15 
	~<löux/io.h
>

16 
	~<löux/i›‹t.h
>

17 
	~<löux/úq.h
>

18 
	~<löux/úqdomaö.h
>

19 
	~<löux/úqchù/chaöed_úq.h
>

20 
	~<löux/bô›s.h
>

21 
	~<löux/w‹kqueue.h
>

22 
	~<löux/gpio.h
>

23 
	~<löux/devi˚.h
>

24 
	~<löux/amba/bus.h
>

25 
	~<löux/amba/∂061.h
>

26 
	~<löux/¶ab.h
>

27 
	~<löux/pö˘æ/c⁄sumî.h
>

28 
	~<löux/pm.h
>

30 
	#GPIODIR
 0x400

	)

31 
	#GPIOIS
 0x404

	)

32 
	#GPIOIBE
 0x408

	)

33 
	#GPIOIEV
 0x40C

	)

34 
	#GPIOIE
 0x410

	)

35 
	#GPIORIS
 0x414

	)

36 
	#GPIOMIS
 0x418

	)

37 
	#GPIOIC
 0x41C

	)

39 
	#PL061_GPIO_NR
 8

	)

41 #ifde‡
CONFIG_PM


42 
	s∂061_c⁄ãxt_ßve_ªgs
 {

43 
u8
 
	mgpio_d©a
;

44 
u8
 
	mgpio_dú
;

45 
u8
 
	mgpio_is
;

46 
u8
 
	mgpio_ibe
;

47 
u8
 
	mgpio_õv
;

48 
u8
 
	mgpio_õ
;

52 
	s∂061_gpio
 {

53 
•ölock_t
 
	mlock
;

55 
__iomem
 *
	mba£
;

56 
úq_domaö
 *
	mdomaö
;

57 
gpio_chù
 
	mgc
;

59 #ifde‡
CONFIG_PM


60 
∂061_c⁄ãxt_ßve_ªgs
 
	mcßve_ªgs
;

64 
	$∂061_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

70 
gpio
 = 
chù
->
ba£
 + 
off£t
;

72  
	`pö˘æ_ªque°_gpio
(
gpio
);

73 
	}
}

75 
	$∂061_gpio_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

77 
gpio
 = 
chù
->
ba£
 + 
off£t
;

79 
	`pö˘æ_‰ì_gpio
(
gpio
);

80 
	}
}

82 
	$∂061_dúe˘i⁄_öput
(
gpio_chù
 *
gc
, 
off£t
)

84 
∂061_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gc
, pl061_gpio, gc);

85 
Êags
;

86 
gpiodú
;

88 i‡(
off£t
 >
gc
->
ngpio
)

89  -
EINVAL
;

91 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

92 
gpiodú
 = 
	`ªadb
(
chù
->
ba£
 + 
GPIODIR
);

93 
gpiodú
 &~(1 << 
off£t
);

94 
	`wrôeb
(
gpiodú
, 
chù
->
ba£
 + 
GPIODIR
);

95 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

98 
	}
}

100 
	$∂061_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
, 
off£t
,

101 
vÆue
)

103 
∂061_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gc
, pl061_gpio, gc);

104 
Êags
;

105 
gpiodú
;

107 i‡(
off£t
 >
gc
->
ngpio
)

108  -
EINVAL
;

110 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

111 
	`wrôeb
(!!
vÆue
 << 
off£t
, 
chù
->
ba£
 + (1 << (offset + 2)));

112 
gpiodú
 = 
	`ªadb
(
chù
->
ba£
 + 
GPIODIR
);

113 
gpiodú
 |1 << 
off£t
;

114 
	`wrôeb
(
gpiodú
, 
chù
->
ba£
 + 
GPIODIR
);

120 
	`wrôeb
(!!
vÆue
 << 
off£t
, 
chù
->
ba£
 + (1 << (offset + 2)));

121 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

124 
	}
}

126 
	$∂061_gë_vÆue
(
gpio_chù
 *
gc
, 
off£t
)

128 
∂061_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gc
, pl061_gpio, gc);

130  !!
	`ªadb
(
chù
->
ba£
 + (1 << (
off£t
 + 2)));

131 
	}
}

133 
	$∂061_£t_vÆue
(
gpio_chù
 *
gc
, 
off£t
, 
vÆue
)

135 
∂061_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gc
, pl061_gpio, gc);

137 
	`wrôeb
(!!
vÆue
 << 
off£t
, 
chù
->
ba£
 + (1 << (offset + 2)));

138 
	}
}

140 
	$∂061_to_úq
(
gpio_chù
 *
gc
, 
off£t
)

142 
∂061_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gc
, pl061_gpio, gc);

144  
	`úq_¸óã_m≠pög
(
chù
->
domaö
, 
off£t
);

145 
	}
}

147 
	$∂061_úq_ty≥
(
úq_d©a
 *
d
, 
åiggî
)

149 
∂061_gpio
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

150 
off£t
 = 
	`úqd_to_hwúq
(
d
);

151 
Êags
;

152 
u8
 
gpiois
, 
gpioibe
, 
gpioõv
;

154 i‡(
off£t
 < 0 || off£à>
PL061_GPIO_NR
)

155  -
EINVAL
;

157 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

159 
gpioõv
 = 
	`ªadb
(
chù
->
ba£
 + 
GPIOIEV
);

161 
gpiois
 = 
	`ªadb
(
chù
->
ba£
 + 
GPIOIS
);

162 i‡(
åiggî
 & (
IRQ_TYPE_LEVEL_HIGH
 | 
IRQ_TYPE_LEVEL_LOW
)) {

163 
gpiois
 |1 << 
off£t
;

164 i‡(
åiggî
 & 
IRQ_TYPE_LEVEL_HIGH
)

165 
gpioõv
 |1 << 
off£t
;

167 
gpioõv
 &~(1 << 
off£t
);

169 
gpiois
 &~(1 << 
off£t
);

170 
	`wrôeb
(
gpiois
, 
chù
->
ba£
 + 
GPIOIS
);

172 
gpioibe
 = 
	`ªadb
(
chù
->
ba£
 + 
GPIOIBE
);

173 i‡((
åiggî
 & 
IRQ_TYPE_EDGE_BOTH
) == IRQ_TYPE_EDGE_BOTH)

174 
gpioibe
 |1 << 
off£t
;

176 
gpioibe
 &~(1 << 
off£t
);

177 i‡(
åiggî
 & 
IRQ_TYPE_EDGE_RISING
)

178 
gpioõv
 |1 << 
off£t
;

179 i‡(
åiggî
 & 
IRQ_TYPE_EDGE_FALLING
)

180 
gpioõv
 &~(1 << 
off£t
);

182 
	`wrôeb
(
gpioibe
, 
chù
->
ba£
 + 
GPIOIBE
);

184 
	`wrôeb
(
gpioõv
, 
chù
->
ba£
 + 
GPIOIEV
);

186 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

189 
	}
}

191 
	$∂061_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

193 
≥ndög
;

194 
off£t
;

195 
∂061_gpio
 *
chù
 = 
	`úq_desc_gë_h™dÀr_d©a
(
desc
);

196 
úq_chù
 *
úqchù
 = 
	`úq_desc_gë_chù
(
desc
);

198 
	`chaöed_úq_íãr
(
úqchù
, 
desc
);

200 
≥ndög
 = 
	`ªadb
(
chù
->
ba£
 + 
GPIOMIS
);

201 
	`wrôeb
(
≥ndög
, 
chù
->
ba£
 + 
GPIOIC
);

202 i‡(
≥ndög
) {

203 
	`f‹_óch_£t_bô
(
off£t
, &
≥ndög
, 
PL061_GPIO_NR
)

204 
	`gíîic_h™dÀ_úq
(
	`∂061_to_úq
(&
chù
->
gc
, 
off£t
));

207 
	`chaöed_úq_exô
(
úqchù
, 
desc
);

208 
	}
}

210 
	$∂061_úq_mask
(
úq_d©a
 *
d
)

212 
∂061_gpio
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

213 
u8
 
mask
 = 1 << (
	`úqd_to_hwúq
(
d
Ë% 
PL061_GPIO_NR
);

214 
u8
 
gpioõ
;

216 
	`•ö_lock
(&
chù
->
lock
);

217 
gpioõ
 = 
	`ªadb
(
chù
->
ba£
 + 
GPIOIE
Ë& ~
mask
;

218 
	`wrôeb
(
gpioõ
, 
chù
->
ba£
 + 
GPIOIE
);

219 
	`•ö_u∆ock
(&
chù
->
lock
);

220 
	}
}

222 
	$∂061_úq_unmask
(
úq_d©a
 *
d
)

224 
∂061_gpio
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

225 
u8
 
mask
 = 1 << (
	`úqd_to_hwúq
(
d
Ë% 
PL061_GPIO_NR
);

226 
u8
 
gpioõ
;

228 
	`•ö_lock
(&
chù
->
lock
);

229 
gpioõ
 = 
	`ªadb
(
chù
->
ba£
 + 
GPIOIE
Ë| 
mask
;

230 
	`wrôeb
(
gpioõ
, 
chù
->
ba£
 + 
GPIOIE
);

231 
	`•ö_u∆ock
(&
chù
->
lock
);

232 
	}
}

234 
úq_chù
 
	g∂061_úqchù
 = {

235 .
«me
 = "pl061 gpio",

236 .
	gúq_mask
 = 
∂061_úq_mask
,

237 .
	gúq_unmask
 = 
∂061_úq_unmask
,

238 .
	gúq_£t_ty≥
 = 
∂061_úq_ty≥
,

241 
	$∂061_úq_m≠
(
úq_domaö
 *
d
, 
vúq
,

242 
úq_hw_numbî_t
 
hw
)

244 
∂061_gpio
 *
chù
 = 
d
->
ho°_d©a
;

246 
	`úq_£t_chù_™d_h™dÀr_«me
(
vúq
, &
∂061_úqchù
, 
h™dÀ_sim∂e_úq
,

248 
	`úq_£t_chù_d©a
(
vúq
, 
chù
);

249 
	`úq_£t_úq_ty≥
(
vúq
, 
IRQ_TYPE_NONE
);

252 
	}
}

254 c⁄° 
úq_domaö_›s
 
	g∂061_domaö_›s
 = {

255 .
m≠
 = 
∂061_úq_m≠
,

256 .
	gxœã
 = 
úq_domaö_xœã_two˚Œ
,

259 
	$∂061_¥obe
(
amba_devi˚
 *
adev
, c⁄° 
amba_id
 *
id
)

261 
devi˚
 *
dev
 = &
adev
->dev;

262 
∂061_∂©f‹m_d©a
 *
pd©a
 = 
dev
->
∂©f‹m_d©a
;

263 
∂061_gpio
 *
chù
;

264 
ªt
, 
úq
, 
i
, 
úq_ba£
;

266 
chù
 = 
	`devm_kzÆloc
(
dev
, (*chù), 
GFP_KERNEL
);

267 i‡(
chù
 =
NULL
)

268  -
ENOMEM
;

270 i‡(
pd©a
) {

271 
chù
->
gc
.
ba£
 = 
pd©a
->
gpio_ba£
;

272 
úq_ba£
 = 
pd©a
->irq_base;

273 i‡(
úq_ba£
 <= 0)

274  -
ENODEV
;

276 
chù
->
gc
.
ba£
 = -1;

277 
úq_ba£
 = 0;

280 i‡(!
	`devm_ªque°_mem_ªgi⁄
(
dev
, 
adev
->
ªs
.
°¨t
,

281 
	`ªsour˚_size
(&
adev
->
ªs
), "pl061"))

282  -
EBUSY
;

284 
chù
->
ba£
 = 
	`devm_i‹em≠
(
dev
, 
adev
->
ªs
.
°¨t
,

285 
	`ªsour˚_size
(&
adev
->
ªs
));

286 i‡(!
chù
->
ba£
)

287  -
ENOMEM
;

289 
	`•ö_lock_öô
(&
chù
->
lock
);

291 
chù
->
gc
.
ªque°
 = 
∂061_gpio_ªque°
;

292 
chù
->
gc
.
‰ì
 = 
∂061_gpio_‰ì
;

293 
chù
->
gc
.
dúe˘i⁄_öput
 = 
∂061_dúe˘i⁄_öput
;

294 
chù
->
gc
.
dúe˘i⁄_ouçut
 = 
∂061_dúe˘i⁄_ouçut
;

295 
chù
->
gc
.
gë
 = 
∂061_gë_vÆue
;

296 
chù
->
gc
.
£t
 = 
∂061_£t_vÆue
;

297 
chù
->
gc
.
to_úq
 = 
∂061_to_úq
;

298 
chù
->
gc
.
ngpio
 = 
PL061_GPIO_NR
;

299 
chù
->
gc
.
œbñ
 = 
	`dev_«me
(
dev
);

300 
chù
->
gc
.
dev
 = dev;

301 
chù
->
gc
.
ow√r
 = 
THIS_MODULE
;

303 
ªt
 = 
	`gpiochù_add
(&
chù
->
gc
);

304 i‡(
ªt
)

305  
ªt
;

310 
	`wrôeb
(0, 
chù
->
ba£
 + 
GPIOIE
);

311 
úq
 = 
adev
->irq[0];

312 i‡(
úq
 < 0)

313  -
ENODEV
;

315 
	`úq_£t_chaöed_h™dÀr
(
úq
, 
∂061_úq_h™dÀr
);

316 
	`úq_£t_h™dÀr_d©a
(
úq
, 
chù
);

318 
chù
->
domaö
 = 
	`úq_domaö_add_sim∂e
(
adev
->
dev
.
of_node
, 
PL061_GPIO_NR
,

319 
úq_ba£
, &
∂061_domaö_›s
, 
chù
);

320 i‡(!
chù
->
domaö
)

321  -
ENODEV
;

323 
i
 = 0; i < 
PL061_GPIO_NR
; i++) {

324 i‡(
pd©a
) {

325 i‡(
pd©a
->
dúe˘i⁄s
 & (1 << 
i
))

326 
	`∂061_dúe˘i⁄_ouçut
(&
chù
->
gc
, 
i
,

327 
pd©a
->
vÆues
 & (1 << 
i
));

329 
	`∂061_dúe˘i⁄_öput
(&
chù
->
gc
, 
i
);

333 
	`amba_£t_drvd©a
(
adev
, 
chù
);

336 
	}
}

338 #ifde‡
CONFIG_PM


339 
	$∂061_su•íd
(
devi˚
 *
dev
)

341 
∂061_gpio
 *
chù
 = 
	`dev_gë_drvd©a
(
dev
);

342 
off£t
;

344 
chù
->
cßve_ªgs
.
gpio_d©a
 = 0;

345 
chù
->
cßve_ªgs
.
gpio_dú
 = 
	`ªadb
(chù->
ba£
 + 
GPIODIR
);

346 
chù
->
cßve_ªgs
.
gpio_is
 = 
	`ªadb
(chù->
ba£
 + 
GPIOIS
);

347 
chù
->
cßve_ªgs
.
gpio_ibe
 = 
	`ªadb
(chù->
ba£
 + 
GPIOIBE
);

348 
chù
->
cßve_ªgs
.
gpio_õv
 = 
	`ªadb
(chù->
ba£
 + 
GPIOIEV
);

349 
chù
->
cßve_ªgs
.
gpio_õ
 = 
	`ªadb
(chù->
ba£
 + 
GPIOIE
);

351 
off£t
 = 0; off£à< 
PL061_GPIO_NR
; offset++) {

352 i‡(
chù
->
cßve_ªgs
.
gpio_dú
 & (1 << 
off£t
))

353 
chù
->
cßve_ªgs
.
gpio_d©a
 |=

354 
	`∂061_gë_vÆue
(&
chù
->
gc
, 
off£t
) << offset;

358 
	}
}

360 
	$∂061_ªsume
(
devi˚
 *
dev
)

362 
∂061_gpio
 *
chù
 = 
	`dev_gë_drvd©a
(
dev
);

363 
off£t
;

365 
off£t
 = 0; off£à< 
PL061_GPIO_NR
; offset++) {

366 i‡(
chù
->
cßve_ªgs
.
gpio_dú
 & (1 << 
off£t
))

367 
	`∂061_dúe˘i⁄_ouçut
(&
chù
->
gc
, 
off£t
,

368 
chù
->
cßve_ªgs
.
gpio_d©a
 &

369 (1 << 
off£t
));

371 
	`∂061_dúe˘i⁄_öput
(&
chù
->
gc
, 
off£t
);

374 
	`wrôeb
(
chù
->
cßve_ªgs
.
gpio_is
, chù->
ba£
 + 
GPIOIS
);

375 
	`wrôeb
(
chù
->
cßve_ªgs
.
gpio_ibe
, chù->
ba£
 + 
GPIOIBE
);

376 
	`wrôeb
(
chù
->
cßve_ªgs
.
gpio_õv
, chù->
ba£
 + 
GPIOIEV
);

377 
	`wrôeb
(
chù
->
cßve_ªgs
.
gpio_õ
, chù->
ba£
 + 
GPIOIE
);

380 
	}
}

382 c⁄° 
dev_pm_›s
 
	g∂061_dev_pm_›s
 = {

383 .
su•íd
 = 
∂061_su•íd
,

384 .
	gªsume
 = 
∂061_ªsume
,

385 .
	g‰ìze
 = 
∂061_su•íd
,

386 .
	gª°‹e
 = 
∂061_ªsume
,

390 
amba_id
 
	g∂061_ids
[] = {

392 .
id
 = 0x00041061,

393 .
	gmask
 = 0x000fffff,

398 
MODULE_DEVICE_TABLE
(
amba
, 
∂061_ids
);

400 
amba_drivî
 
	g∂061_gpio_drivî
 = {

401 .
drv
 = {

402 .
«me
 = "pl061_gpio",

403 #ifde‡
CONFIG_PM


404 .
	gpm
 = &
∂061_dev_pm_›s
,

407 .
	gid_èbÀ
 = 
∂061_ids
,

408 .
	g¥obe
 = 
∂061_¥obe
,

411 
__öô
 
	$∂061_gpio_öô
()

413  
	`amba_drivî_ªgi°î
(&
∂061_gpio_drivî
);

414 
	}
}

415 
moduÀ_öô
(
∂061_gpio_öô
);

417 
MODULE_AUTHOR
("Baruch Siach <baruch@tkos.co.il>");

418 
MODULE_DESCRIPTION
("PL061 GPIO driver");

419 
MODULE_LICENSE
("GPL");

	@gpio-pxa.c

14 
	~<löux/moduÀ.h
>

15 
	~<löux/˛k.h
>

16 
	~<löux/îr.h
>

17 
	~<löux/gpio.h
>

18 
	~<löux/gpio-pxa.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/úq.h
>

21 
	~<löux/úqdomaö.h
>

22 
	~<löux/úqchù/chaöed_úq.h
>

23 
	~<löux/io.h
>

24 
	~<löux/of.h
>

25 
	~<löux/of_devi˚.h
>

26 
	~<löux/∂©f‹m_devi˚.h
>

27 
	~<löux/sysc‹e_›s.h
>

28 
	~<löux/¶ab.h
>

30 
	~<mach/úqs.h
>

50 
	#GPLR_OFFSET
 0x00

	)

51 
	#GPDR_OFFSET
 0x0C

	)

52 
	#GPSR_OFFSET
 0x18

	)

53 
	#GPCR_OFFSET
 0x24

	)

54 
	#GRER_OFFSET
 0x30

	)

55 
	#GFER_OFFSET
 0x3C

	)

56 
	#GEDR_OFFSET
 0x48

	)

57 
	#GAFR_OFFSET
 0x54

	)

58 
	#ED_MASK_OFFSET
 0x9C

	)

60 
	#BANK_OFF
(
n
Ë((“Ë< 3Ë? (nË<< 2 : 0x100 + ((“Ë- 3Ë<< 2))

	)

62 
	gpxa_œ°_gpio
;

63 
	gúq_ba£
;

65 #ifde‡
CONFIG_OF


66 
úq_domaö
 *
	gdomaö
;

67 
devi˚_node
 *
	gpxa_gpio_of_node
;

70 
	spxa_gpio_chù
 {

71 
gpio_chù
 
	mchù
;

72 
__iomem
 *
	mªgba£
;

73 
	mœbñ
[10];

75 
	múq_mask
;

76 
	múq_edge_ri£
;

77 
	múq_edge_ÁŒ
;

78 (*
	m£t_wake
)(
	mgpio
, 
	m⁄
);

80 #ifde‡
CONFIG_PM


81 
	mßved_g∂r
;

82 
	mßved_gpdr
;

83 
	mßved_gªr
;

84 
	mßved_g„r
;

88 
	epxa_gpio_ty≥
 {

89 
	mPXA25X_GPIO
 = 0,

90 
	mPXA26X_GPIO
,

91 
	mPXA27X_GPIO
,

92 
	mPXA3XX_GPIO
,

93 
	mPXA93X_GPIO
,

94 
	mMMP_GPIO
 = 0x10,

95 
	mMMP2_GPIO
,

98 
	spxa_gpio_id
 {

99 
pxa_gpio_ty≥
 
	mty≥
;

100 
	mgpio_nums
;

103 
DEFINE_SPINLOCK
(
gpio_lock
);

104 
pxa_gpio_chù
 *
	gpxa_gpio_chùs
;

105 
pxa_gpio_ty≥
 
	ggpio_ty≥
;

106 
__iomem
 *
	ggpio_ªg_ba£
;

108 
pxa_gpio_id
 
	gpxa25x_id
 = {

109 .
ty≥
 = 
PXA25X_GPIO
,

110 .
	ggpio_nums
 = 85,

113 
pxa_gpio_id
 
	gpxa26x_id
 = {

114 .
ty≥
 = 
PXA26X_GPIO
,

115 .
	ggpio_nums
 = 90,

118 
pxa_gpio_id
 
	gpxa27x_id
 = {

119 .
ty≥
 = 
PXA27X_GPIO
,

120 .
	ggpio_nums
 = 121,

123 
pxa_gpio_id
 
	gpxa3xx_id
 = {

124 .
ty≥
 = 
PXA3XX_GPIO
,

125 .
	ggpio_nums
 = 128,

128 
pxa_gpio_id
 
	gpxa93x_id
 = {

129 .
ty≥
 = 
PXA93X_GPIO
,

130 .
	ggpio_nums
 = 192,

133 
pxa_gpio_id
 
	gmmp_id
 = {

134 .
ty≥
 = 
MMP_GPIO
,

135 .
	ggpio_nums
 = 128,

138 
pxa_gpio_id
 
	gmmp2_id
 = {

139 .
ty≥
 = 
MMP2_GPIO
,

140 .
	ggpio_nums
 = 192,

143 
	#f‹_óch_gpio_chù
(
i
, 
c
) \

144 
i
 = 0, 
c
 = &
pxa_gpio_chùs
[0]; i <
pxa_œ°_gpio
; i +32, c++)

	)

146 
ölöe
 
__iomem
 *
	$gpio_chù_ba£
(
gpio_chù
 *
c
)

148  
	`c⁄èöî_of
(
c
, 
pxa_gpio_chù
, 
chù
)->
ªgba£
;

149 
	}
}

151 
ölöe
 
pxa_gpio_chù
 *
	$gpio_to_pxachù
(
gpio
)

153  &
pxa_gpio_chùs
[
	`gpio_to_b™k
(
gpio
)];

154 
	}
}

156 
ölöe
 
	$gpio_is_pxa_ty≥
(
ty≥
)

158  (
ty≥
 & 
MMP_GPIO
) == 0;

159 
	}
}

161 
ölöe
 
	$gpio_is_mmp_ty≥
(
ty≥
)

163  (
ty≥
 & 
MMP_GPIO
) != 0;

164 
	}
}

169 
ölöe
 
	$__gpio_is_övîãd
(
gpio
)

171 i‡((
gpio_ty≥
 =
PXA26X_GPIO
Ë&& (
gpio
 > 85))

174 
	}
}

182 
ölöe
 
	$__gpio_is_occupõd
(
gpio
)

184 
pxa_gpio_chù
 *
pxachù
;

185 
__iomem
 *
ba£
;

186 
ga‰
 = 0, 
gpdr
 = 0;

187 
ªt
, 
af
 = 0, 
dú
 = 0;

189 
pxachù
 = 
	`gpio_to_pxachù
(
gpio
);

190 
ba£
 = 
	`gpio_chù_ba£
(&
pxachù
->
chù
);

191 
gpdr
 = 
	`ªadl_ªœxed
(
ba£
 + 
GPDR_OFFSET
);

193 
gpio_ty≥
) {

194 
PXA25X_GPIO
:

195 
PXA26X_GPIO
:

196 
PXA27X_GPIO
:

197 
ga‰
 = 
	`ªadl_ªœxed
(
ba£
 + 
GAFR_OFFSET
);

198 
af
 = (
ga‰
 >> ((
gpio
 & 0xf) * 2)) & 0x3;

199 
dú
 = 
gpdr
 & 
	`GPIO_bô
(
gpio
);

201 i‡(
	`__gpio_is_övîãd
(
gpio
))

202 
ªt
 = (
af
 !1Ë|| (
dú
 == 0);

204 
ªt
 = (
af
 !0Ë|| (
dú
 != 0);

207 
ªt
 = 
gpdr
 & 
	`GPIO_bô
(
gpio
);

210  
ªt
;

211 
	}
}

213 
	$pxa_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

215  
chù
->
ba£
 + 
off£t
 + 
úq_ba£
;

216 
	}
}

218 
	$pxa_úq_to_gpio
(
úq
)

220  
úq
 - 
úq_ba£
;

221 
	}
}

223 
	$pxa_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

225 
__iomem
 *
ba£
 = 
	`gpio_chù_ba£
(
chù
);

226 
uöt32_t
 
vÆue
, 
mask
 = 1 << 
off£t
;

227 
Êags
;

229 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

231 
vÆue
 = 
	`ªadl_ªœxed
(
ba£
 + 
GPDR_OFFSET
);

232 i‡(
	`__gpio_is_övîãd
(
chù
->
ba£
 + 
off£t
))

233 
vÆue
 |
mask
;

235 
vÆue
 &~
mask
;

236 
	`wrôñ_ªœxed
(
vÆue
, 
ba£
 + 
GPDR_OFFSET
);

238 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

240 
	}
}

242 
	$pxa_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

243 
off£t
, 
vÆue
)

245 
__iomem
 *
ba£
 = 
	`gpio_chù_ba£
(
chù
);

246 
uöt32_t
 
tmp
, 
mask
 = 1 << 
off£t
;

247 
Êags
;

249 
	`wrôñ_ªœxed
(
mask
, 
ba£
 + (
vÆue
 ? 
GPSR_OFFSET
 : 
GPCR_OFFSET
));

251 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

253 
tmp
 = 
	`ªadl_ªœxed
(
ba£
 + 
GPDR_OFFSET
);

254 i‡(
	`__gpio_is_övîãd
(
chù
->
ba£
 + 
off£t
))

255 
tmp
 &~
mask
;

257 
tmp
 |
mask
;

258 
	`wrôñ_ªœxed
(
tmp
, 
ba£
 + 
GPDR_OFFSET
);

260 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

262 
	}
}

264 
	$pxa_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

266  
	`ªadl_ªœxed
(
	`gpio_chù_ba£
(
chù
Ë+ 
GPLR_OFFSET
Ë& (1 << 
off£t
);

267 
	}
}

269 
	$pxa_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

271 
	`wrôñ_ªœxed
(1 << 
off£t
, 
	`gpio_chù_ba£
(
chù
) +

272 (
vÆue
 ? 
GPSR_OFFSET
 : 
GPCR_OFFSET
));

273 
	}
}

275 #ifde‡
CONFIG_OF_GPIO


276 
	$pxa_gpio_of_xœã
(
gpio_chù
 *
gc
,

277 c⁄° 
of_ph™dÀ_¨gs
 *
gpio•ec
,

278 
u32
 *
Êags
)

280 i‡(
gpio•ec
->
¨gs
[0] > 
pxa_œ°_gpio
)

281  -
EINVAL
;

283 i‡(
gc
 !&
pxa_gpio_chùs
[
gpio•ec
->
¨gs
[0] / 32].
chù
)

284  -
EINVAL
;

286 i‡(
Êags
)

287 *
Êags
 = 
gpio•ec
->
¨gs
[1];

289  
gpio•ec
->
¨gs
[0] % 32;

290 
	}
}

293 
pxa_öô_gpio_chù
(
gpio_íd
,

294 (*
£t_wake
)(, ))

296 
i
, 
gpio
, 
nb™ks
 = 
	`gpio_to_b™k
(
gpio_íd
) + 1;

297 
pxa_gpio_chù
 *
chùs
;

299 
chùs
 = 
	`kzÆloc
(
nb™ks
 * (
pxa_gpio_chù
), 
GFP_KERNEL
);

300 i‡(
chùs
 =
NULL
) {

301 
	`¥_îr
("%s: faûedÅÿÆloˇã GPIO chùs\n", 
__func__
);

302  -
ENOMEM
;

305 
i
 = 0, 
gpio
 = 0; i < 
nb™ks
; i++, gpio += 32) {

306 
gpio_chù
 *
c
 = &
chùs
[
i
].
chù
;

308 
	`•rötf
(
chùs
[
i
].
œbñ
, "gpio-%d", i);

309 
chùs
[
i
].
ªgba£
 = 
gpio_ªg_ba£
 + 
	`BANK_OFF
(i);

310 
chùs
[
i
].
£t_wake
 = set_wake;

312 
c
->
ba£
 = 
gpio
;

313 
c
->
œbñ
 = 
chùs
[
i
].label;

315 
c
->
dúe˘i⁄_öput
 = 
pxa_gpio_dúe˘i⁄_öput
;

316 
c
->
dúe˘i⁄_ouçut
 = 
pxa_gpio_dúe˘i⁄_ouçut
;

317 
c
->
gë
 = 
pxa_gpio_gë
;

318 
c
->
£t
 = 
pxa_gpio_£t
;

319 
c
->
to_úq
 = 
pxa_gpio_to_úq
;

320 #ifde‡
CONFIG_OF_GPIO


321 
c
->
of_node
 = 
pxa_gpio_of_node
;

322 
c
->
of_xœã
 = 
pxa_gpio_of_xœã
;

323 
c
->
of_gpio_n_˚Œs
 = 2;

327 
c
->
ngpio
 = (
gpio
 + 31 > 
gpio_íd
) ? (gpio_end - gpio + 1) : 32;

328 
	`gpiochù_add
(
c
);

330 
pxa_gpio_chùs
 = 
chùs
;

332 
	}
}

337 
ölöe
 
	$upd©e_edge_dëe˘
(
pxa_gpio_chù
 *
c
)

339 
uöt32_t
 
gªr
, 
g„r
;

341 
gªr
 = 
	`ªadl_ªœxed
(
c
->
ªgba£
 + 
GRER_OFFSET
Ë& ~c->
úq_mask
;

342 
g„r
 = 
	`ªadl_ªœxed
(
c
->
ªgba£
 + 
GFER_OFFSET
Ë& ~c->
úq_mask
;

343 
gªr
 |
c
->
úq_edge_ri£
 & c->
úq_mask
;

344 
g„r
 |
c
->
úq_edge_ÁŒ
 & c->
úq_mask
;

345 
	`wrôñ_ªœxed
(
gªr
, 
c
->
ªgba£
 + 
GRER_OFFSET
);

346 
	`wrôñ_ªœxed
(
g„r
, 
c
->
ªgba£
 + 
GFER_OFFSET
);

347 
	}
}

349 
	$pxa_gpio_úq_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

351 
pxa_gpio_chù
 *
c
;

352 
gpio
 = 
	`pxa_úq_to_gpio
(
d
->
úq
);

353 
gpdr
, 
mask
 = 
	`GPIO_bô
(
gpio
);

355 
c
 = 
	`gpio_to_pxachù
(
gpio
);

357 i‡(
ty≥
 =
IRQ_TYPE_PROBE
) {

361 i‡((
c
->
úq_edge_ri£
 | c->
úq_edge_ÁŒ
Ë& 
	`GPIO_bô
(
gpio
))

364 i‡(
	`__gpio_is_occupõd
(
gpio
))

367 
ty≥
 = 
IRQ_TYPE_EDGE_RISING
 | 
IRQ_TYPE_EDGE_FALLING
;

370 
gpdr
 = 
	`ªadl_ªœxed
(
c
->
ªgba£
 + 
GPDR_OFFSET
);

372 i‡(
	`__gpio_is_övîãd
(
gpio
))

373 
	`wrôñ_ªœxed
(
gpdr
 | 
mask
, 
c
->
ªgba£
 + 
GPDR_OFFSET
);

375 
	`wrôñ_ªœxed
(
gpdr
 & ~
mask
, 
c
->
ªgba£
 + 
GPDR_OFFSET
);

377 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_RISING
)

378 
c
->
úq_edge_ri£
 |
mask
;

380 
c
->
úq_edge_ri£
 &~
mask
;

382 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_FALLING
)

383 
c
->
úq_edge_ÁŒ
 |
mask
;

385 
c
->
úq_edge_ÁŒ
 &~
mask
;

387 
	`upd©e_edge_dëe˘
(
c
);

389 
	`¥_debug
("%s: IRQ%d (GPIO%dË-Édge%s%s\n", 
__func__
, 
d
->
úq
, 
gpio
,

390 ((
ty≥
 & 
IRQ_TYPE_EDGE_RISING
) ? "Ñising" : ""),

391 ((
ty≥
 & 
IRQ_TYPE_EDGE_FALLING
) ? " falling" : ""));

393 
	}
}

395 
	$pxa_gpio_demux_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

397 
pxa_gpio_chù
 *
c
;

398 
lo›
, 
gpio
, 
gpio_ba£
, 
n
;

399 
gedr
;

400 
úq_chù
 *
chù
 = 
	`úq_desc_gë_chù
(
desc
);

402 
	`chaöed_úq_íãr
(
chù
, 
desc
);

405 
lo›
 = 0;

406 
	`f‹_óch_gpio_chù
(
gpio
, 
c
) {

407 
gpio_ba£
 = 
c
->
chù
.
ba£
;

409 
gedr
 = 
	`ªadl_ªœxed
(
c
->
ªgba£
 + 
GEDR_OFFSET
);

410 
gedr
 = ged∏& 
c
->
úq_mask
;

411 
	`wrôñ_ªœxed
(
gedr
, 
c
->
ªgba£
 + 
GEDR_OFFSET
);

413 
	`f‹_óch_£t_bô
(
n
, &
gedr
, 
BITS_PER_LONG
) {

414 
lo›
 = 1;

416 
	`gíîic_h™dÀ_úq
(
	`gpio_to_úq
(
gpio_ba£
 + 
n
));

419 } 
lo›
);

421 
	`chaöed_úq_exô
(
chù
, 
desc
);

422 
	}
}

424 
	$pxa_ack_muxed_gpio
(
úq_d©a
 *
d
)

426 
gpio
 = 
	`pxa_úq_to_gpio
(
d
->
úq
);

427 
pxa_gpio_chù
 *
c
 = 
	`gpio_to_pxachù
(
gpio
);

429 
	`wrôñ_ªœxed
(
	`GPIO_bô
(
gpio
), 
c
->
ªgba£
 + 
GEDR_OFFSET
);

430 
	}
}

432 
	$pxa_mask_muxed_gpio
(
úq_d©a
 *
d
)

434 
gpio
 = 
	`pxa_úq_to_gpio
(
d
->
úq
);

435 
pxa_gpio_chù
 *
c
 = 
	`gpio_to_pxachù
(
gpio
);

436 
uöt32_t
 
gªr
, 
g„r
;

438 
c
->
úq_mask
 &~
	`GPIO_bô
(
gpio
);

440 
gªr
 = 
	`ªadl_ªœxed
(
c
->
ªgba£
 + 
GRER_OFFSET
Ë& ~
	`GPIO_bô
(
gpio
);

441 
g„r
 = 
	`ªadl_ªœxed
(
c
->
ªgba£
 + 
GFER_OFFSET
Ë& ~
	`GPIO_bô
(
gpio
);

442 
	`wrôñ_ªœxed
(
gªr
, 
c
->
ªgba£
 + 
GRER_OFFSET
);

443 
	`wrôñ_ªœxed
(
g„r
, 
c
->
ªgba£
 + 
GFER_OFFSET
);

444 
	}
}

446 
	$pxa_gpio_£t_wake
(
úq_d©a
 *
d
, 
⁄
)

448 
gpio
 = 
	`pxa_úq_to_gpio
(
d
->
úq
);

449 
pxa_gpio_chù
 *
c
 = 
	`gpio_to_pxachù
(
gpio
);

451 i‡(
c
->
£t_wake
)

452  
c
->
	`£t_wake
(
gpio
, 
⁄
);

455 
	}
}

457 
	$pxa_unmask_muxed_gpio
(
úq_d©a
 *
d
)

459 
gpio
 = 
	`pxa_úq_to_gpio
(
d
->
úq
);

460 
pxa_gpio_chù
 *
c
 = 
	`gpio_to_pxachù
(
gpio
);

462 
c
->
úq_mask
 |
	`GPIO_bô
(
gpio
);

463 
	`upd©e_edge_dëe˘
(
c
);

464 
	}
}

466 
úq_chù
 
	gpxa_muxed_gpio_chù
 = {

467 .
«me
 = "GPIO",

468 .
	gúq_ack
 = 
pxa_ack_muxed_gpio
,

469 .
	gúq_mask
 = 
pxa_mask_muxed_gpio
,

470 .
	gúq_unmask
 = 
pxa_unmask_muxed_gpio
,

471 .
	gúq_£t_ty≥
 = 
pxa_gpio_úq_ty≥
,

472 .
	gúq_£t_wake
 = 
pxa_gpio_£t_wake
,

475 
	$pxa_gpio_nums
(
∂©f‹m_devi˚
 *
pdev
)

477 c⁄° 
∂©f‹m_devi˚_id
 *
id
 = 
	`∂©f‹m_gë_devi˚_id
(
pdev
);

478 
pxa_gpio_id
 *
pxa_id
 = (pxa_gpio_id *)
id
->
drivî_d©a
;

479 
cou¡
 = 0;

481 
pxa_id
->
ty≥
) {

482 
PXA25X_GPIO
:

483 
PXA26X_GPIO
:

484 
PXA27X_GPIO
:

485 
PXA3XX_GPIO
:

486 
PXA93X_GPIO
:

487 
MMP_GPIO
:

488 
MMP2_GPIO
:

489 
gpio_ty≥
 = 
pxa_id
->
ty≥
;

490 
cou¡
 = 
pxa_id
->
gpio_nums
 - 1;

493 
cou¡
 = -
EINVAL
;

496  
cou¡
;

497 
	}
}

499 #ifde‡
CONFIG_OF


500 
of_devi˚_id
 
	gpxa_gpio_dt_ids
[] = {

501 { .
com∑tibÀ
 = "öãl,pxa25x-gpio", .
	gd©a
 = &
pxa25x_id
, },

502 { .
	gcom∑tibÀ
 = "öãl,pxa26x-gpio", .
	gd©a
 = &
pxa26x_id
, },

503 { .
	gcom∑tibÀ
 = "öãl,pxa27x-gpio", .
	gd©a
 = &
pxa27x_id
, },

504 { .
	gcom∑tibÀ
 = "öãl,pxa3xx-gpio", .
	gd©a
 = &
pxa3xx_id
, },

505 { .
	gcom∑tibÀ
 = "m¨vñl,pxa93x-gpio", .
	gd©a
 = &
pxa93x_id
, },

506 { .
	gcom∑tibÀ
 = "m¨vñl,mmp-gpio", .
	gd©a
 = &
mmp_id
, },

507 { .
	gcom∑tibÀ
 = "m¨vñl,mmp2-gpio", .
	gd©a
 = &
mmp2_id
, },

511 
	$pxa_úq_domaö_m≠
(
úq_domaö
 *
d
, 
úq
,

512 
úq_hw_numbî_t
 
hw
)

514 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
pxa_muxed_gpio_chù
,

515 
h™dÀ_edge_úq
);

516 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
 | 
IRQF_PROBE
);

518 
	}
}

520 c⁄° 
úq_domaö_›s
 
	gpxa_úq_domaö_›s
 = {

521 .
m≠
 = 
pxa_úq_domaö_m≠
,

522 .
	gxœã
 = 
úq_domaö_xœã_two˚Œ
,

525 
	$pxa_gpio_¥obe_dt
(
∂©f‹m_devi˚
 *
pdev
)

527 
ªt
, 
ƒ_gpios
;

528 
devi˚_node
 *
¥ev
, *
√xt
, *
≈
 = 
pdev
->
dev
.
of_node
;

529 c⁄° 
of_devi˚_id
 *
of_id
 =

530 
	`of_m©ch_devi˚
(
pxa_gpio_dt_ids
, &
pdev
->
dev
);

531 c⁄° 
pxa_gpio_id
 *
gpio_id
;

533 i‡(!
of_id
 || !of_id->
d©a
) {

534 
	`dev_îr
(&
pdev
->
dev
, "FailedÅo find gpio controller\n");

535  -
EFAULT
;

537 
gpio_id
 = 
of_id
->
d©a
;

538 
gpio_ty≥
 = 
gpio_id
->
ty≥
;

540 
√xt
 = 
	`of_gë_√xt_chûd
(
≈
, 
NULL
);

541 
¥ev
 = 
√xt
;

542 i‡(!
√xt
) {

543 
	`dev_îr
(&
pdev
->
dev
, "FailedÅo find child gpioÇode\n");

544 
ªt
 = -
EINVAL
;

545 
îr
;

547 
	`of_node_put
(
¥ev
);

548 
ƒ_gpios
 = 
gpio_id
->
gpio_nums
;

549 
pxa_œ°_gpio
 = 
ƒ_gpios
 - 1;

551 
úq_ba£
 = 
	`úq_Æloc_descs
(-1, 0, 
ƒ_gpios
, 0);

552 i‡(
úq_ba£
 < 0) {

553 
	`dev_îr
(&
pdev
->
dev
, "FailedÅoállocate IRQÇumbers\n");

554 
îr
;

556 
domaö
 = 
	`úq_domaö_add_Àgacy
(
≈
, 
ƒ_gpios
, 
úq_ba£
, 0,

557 &
pxa_úq_domaö_›s
, 
NULL
);

558 
pxa_gpio_of_node
 = 
≈
;

560 
îr
:

561 
	`iounm≠
(
gpio_ªg_ba£
);

562  
ªt
;

563 
	}
}

565 
	#pxa_gpio_¥obe_dt
(
pdev
Ë(-1)

	)

568 
	$pxa_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

570 
pxa_gpio_chù
 *
c
;

571 
ªsour˚
 *
ªs
;

572 
˛k
 *clk;

573 
pxa_gpio_∂©f‹m_d©a
 *
öfo
;

574 
gpio
, 
úq
, 
ªt
, 
u£_of
 = 0;

575 
úq0
 = 0, 
úq1
 = 0, 
úq_mux
, 
gpio_off£t
 = 0;

577 
öfo
 = 
	`dev_gë_∂©d©a
(&
pdev
->
dev
);

578 i‡(
öfo
) {

579 
úq_ba£
 = 
öfo
->irq_base;

580 i‡(
úq_ba£
 <= 0)

581  -
EINVAL
;

582 
pxa_œ°_gpio
 = 
	`pxa_gpio_nums
(
pdev
);

584 
úq_ba£
 = 0;

585 
u£_of
 = 1;

586 
ªt
 = 
	`pxa_gpio_¥obe_dt
(
pdev
);

587 i‡(
ªt
 < 0)

588  -
EINVAL
;

591 i‡(!
pxa_œ°_gpio
)

592  -
EINVAL
;

594 
úq0
 = 
	`∂©f‹m_gë_úq_by«me
(
pdev
, "gpio0");

595 
úq1
 = 
	`∂©f‹m_gë_úq_by«me
(
pdev
, "gpio1");

596 
úq_mux
 = 
	`∂©f‹m_gë_úq_by«me
(
pdev
, "gpio_mux");

597 i‡((
úq0
 > 0 && 
úq1
 <= 0) || (irq0 <= 0 && irq1 > 0)

598 || (
úq_mux
 <= 0))

599  -
EINVAL
;

600 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

601 i‡(!
ªs
)

602  -
EINVAL
;

603 
gpio_ªg_ba£
 = 
	`i‹em≠
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

604 i‡(!
gpio_ªg_ba£
)

605  -
EINVAL
;

607 i‡(
úq0
 > 0)

608 
gpio_off£t
 = 2;

610 
˛k
 = 
	`˛k_gë
(&
pdev
->
dev
, 
NULL
);

611 i‡(
	`IS_ERR
(
˛k
)) {

612 
	`dev_îr
(&
pdev
->
dev
, "Error %ldÅo get gpio clock\n",

613 
	`PTR_ERR
(
˛k
));

614 
	`iounm≠
(
gpio_ªg_ba£
);

615  
	`PTR_ERR
(
˛k
);

617 
ªt
 = 
	`˛k_¥ï¨e_íabÀ
(
˛k
);

618 i‡(
ªt
) {

619 
	`˛k_put
(
˛k
);

620 
	`iounm≠
(
gpio_ªg_ba£
);

621  
ªt
;

625 
	`pxa_öô_gpio_chù
(
pxa_œ°_gpio
, 
öfo
 ? info->
gpio_£t_wake
 : 
NULL
);

628 
	`f‹_óch_gpio_chù
(
gpio
, 
c
) {

629 
	`wrôñ_ªœxed
(0, 
c
->
ªgba£
 + 
GFER_OFFSET
);

630 
	`wrôñ_ªœxed
(0, 
c
->
ªgba£
 + 
GRER_OFFSET
);

631 
	`wrôñ_ªœxed
(~0, 
c
->
ªgba£
 + 
GEDR_OFFSET
);

633 i‡(
	`gpio_is_mmp_ty≥
(
gpio_ty≥
))

634 
	`wrôñ_ªœxed
(~0, 
c
->
ªgba£
 + 
ED_MASK_OFFSET
);

637 i‡(!
u£_of
) {

638 #ifde‡
CONFIG_ARCH_PXA


639 
úq
 = 
	`gpio_to_úq
(0);

640 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
pxa_muxed_gpio_chù
,

641 
h™dÀ_edge_úq
);

642 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
 | 
IRQF_PROBE
);

643 
	`úq_£t_chaöed_h™dÀr
(
IRQ_GPIO0
, 
pxa_gpio_demux_h™dÀr
);

645 
úq
 = 
	`gpio_to_úq
(1);

646 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
pxa_muxed_gpio_chù
,

647 
h™dÀ_edge_úq
);

648 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
 | 
IRQF_PROBE
);

649 
	`úq_£t_chaöed_h™dÀr
(
IRQ_GPIO1
, 
pxa_gpio_demux_h™dÀr
);

652 
úq
 = 
	`gpio_to_úq
(
gpio_off£t
);

653 
úq
 <
	`gpio_to_úq
(
pxa_œ°_gpio
); irq++) {

654 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
pxa_muxed_gpio_chù
,

655 
h™dÀ_edge_úq
);

656 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
 | 
IRQF_PROBE
);

660 
	`úq_£t_chaöed_h™dÀr
(
úq_mux
, 
pxa_gpio_demux_h™dÀr
);

662 
	}
}

664 c⁄° 
∂©f‹m_devi˚_id
 
	ggpio_id_èbÀ
[] = {

665 { "pxa25x-gpio", ()&
pxa25x_id
 },

666 { "pxa26x-gpio", ()&
pxa26x_id
 },

667 { "pxa27x-gpio", ()&
pxa27x_id
 },

668 { "pxa3xx-gpio", ()&
pxa3xx_id
 },

669 { "pxa93x-gpio", ()&
pxa93x_id
 },

670 { "mmp-gpio", ()&
mmp_id
 },

671 { "mmp2-gpio", ()&
mmp2_id
 },

675 
∂©f‹m_drivî
 
	gpxa_gpio_drivî
 = {

676 .
¥obe
 = 
pxa_gpio_¥obe
,

677 .
	gdrivî
 = {

678 .
«me
 = "pxa-gpio",

679 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
pxa_gpio_dt_ids
),

681 .
	gid_èbÀ
 = 
gpio_id_èbÀ
,

684 
__öô
 
	$pxa_gpio_öô
()

686  
	`∂©f‹m_drivî_ªgi°î
(&
pxa_gpio_drivî
);

687 
	}
}

688 
po°c‹e_öôˇŒ
(
pxa_gpio_öô
);

690 #ifde‡
CONFIG_PM


691 
	$pxa_gpio_su•íd
()

693 
pxa_gpio_chù
 *
c
;

694 
gpio
;

696 
	`f‹_óch_gpio_chù
(
gpio
, 
c
) {

697 
c
->
ßved_g∂r
 = 
	`ªadl_ªœxed
(c->
ªgba£
 + 
GPLR_OFFSET
);

698 
c
->
ßved_gpdr
 = 
	`ªadl_ªœxed
(c->
ªgba£
 + 
GPDR_OFFSET
);

699 
c
->
ßved_gªr
 = 
	`ªadl_ªœxed
(c->
ªgba£
 + 
GRER_OFFSET
);

700 
c
->
ßved_g„r
 = 
	`ªadl_ªœxed
(c->
ªgba£
 + 
GFER_OFFSET
);

703 
	`wrôñ_ªœxed
(0xffffffff, 
c
->
ªgba£
 + 
GEDR_OFFSET
);

706 
	}
}

708 
	$pxa_gpio_ªsume
()

710 
pxa_gpio_chù
 *
c
;

711 
gpio
;

713 
	`f‹_óch_gpio_chù
(
gpio
, 
c
) {

715 
	`wrôñ_ªœxed
(
c
->
ßved_g∂r
, c->
ªgba£
 + 
GPSR_OFFSET
);

716 
	`wrôñ_ªœxed
(~
c
->
ßved_g∂r
, c->
ªgba£
 + 
GPCR_OFFSET
);

718 
	`wrôñ_ªœxed
(
c
->
ßved_gªr
, c->
ªgba£
 + 
GRER_OFFSET
);

719 
	`wrôñ_ªœxed
(
c
->
ßved_g„r
, c->
ªgba£
 + 
GFER_OFFSET
);

720 
	`wrôñ_ªœxed
(
c
->
ßved_gpdr
, c->
ªgba£
 + 
GPDR_OFFSET
);

722 
	}
}

724 
	#pxa_gpio_su•íd
 
NULL


	)

725 
	#pxa_gpio_ªsume
 
NULL


	)

728 
sysc‹e_›s
 
	gpxa_gpio_sysc‹e_›s
 = {

729 .
su•íd
 = 
pxa_gpio_su•íd
,

730 .
	gªsume
 = 
pxa_gpio_ªsume
,

733 
__öô
 
	$pxa_gpio_sysöô
()

735 
	`ªgi°î_sysc‹e_›s
(&
pxa_gpio_sysc‹e_›s
);

737 
	}
}

738 
po°c‹e_öôˇŒ
(
pxa_gpio_sysöô
);

	@gpio-rc5t583.c

23 
	~<löux/öô.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/¶ab.h
>

26 
	~<löux/moduÀ.h
>

27 
	~<löux/∂©f‹m_devi˚.h
>

28 
	~<löux/devi˚.h
>

29 
	~<löux/gpio.h
>

30 
	~<löux/mfd/rc5t583.h
>

32 
	src5t583_gpio
 {

33 
gpio_chù
 
	mgpio_chù
;

34 
rc5t583
 *
	mrc5t583
;

37 
ölöe
 
rc5t583_gpio
 *
	$to_rc5t583_gpio
(
gpio_chù
 *
chù
)

39  
	`c⁄èöî_of
(
chù
, 
rc5t583_gpio
, 
gpio_chù
);

40 
	}
}

42 
	$rc5t583_gpio_gë
(
gpio_chù
 *
gc
, 
off£t
)

44 
rc5t583_gpio
 *rc5t583_gpiÿ
	`to_rc5t583_gpio
(
gc
);

45 
devi˚
 *
∑ª¡
 = 
rc5t583_gpio
->
rc5t583
->
dev
;

46 
uöt8_t
 
vÆ
 = 0;

47 
ªt
;

49 
ªt
 = 
	`rc5t583_ªad
(
∑ª¡
, 
RC5T583_GPIO_MON_IOIN
, &
vÆ
);

50 i‡(
ªt
 < 0)

51  
ªt
;

53  !!(
vÆ
 & 
	`BIT
(
off£t
));

54 
	}
}

56 
	$rc5t583_gpio_£t
(
gpio_chù
 *
gc
, 
off£t
, 
vÆ
)

58 
rc5t583_gpio
 *rc5t583_gpiÿ
	`to_rc5t583_gpio
(
gc
);

59 
devi˚
 *
∑ª¡
 = 
rc5t583_gpio
->
rc5t583
->
dev
;

60 i‡(
vÆ
)

61 
	`rc5t583_£t_bôs
(
∑ª¡
, 
RC5T583_GPIO_IOOUT
, 
	`BIT
(
off£t
));

63 
	`rc5t583_˛ór_bôs
(
∑ª¡
, 
RC5T583_GPIO_IOOUT
, 
	`BIT
(
off£t
));

64 
	}
}

66 
	$rc5t583_gpio_dú_öput
(
gpio_chù
 *
gc
, 
off£t
)

68 
rc5t583_gpio
 *rc5t583_gpiÿ
	`to_rc5t583_gpio
(
gc
);

69 
devi˚
 *
∑ª¡
 = 
rc5t583_gpio
->
rc5t583
->
dev
;

70 
ªt
;

72 
ªt
 = 
	`rc5t583_˛ór_bôs
(
∑ª¡
, 
RC5T583_GPIO_IOSEL
, 
	`BIT
(
off£t
));

73 i‡(
ªt
 < 0)

74  
ªt
;

77  
	`rc5t583_˛ór_bôs
(
∑ª¡
, 
RC5T583_GPIO_PGSEL
, 
	`BIT
(
off£t
));

78 
	}
}

80 
	$rc5t583_gpio_dú_ouçut
(
gpio_chù
 *
gc
, 
off£t
,

81 
vÆue
)

83 
rc5t583_gpio
 *rc5t583_gpiÿ
	`to_rc5t583_gpio
(
gc
);

84 
devi˚
 *
∑ª¡
 = 
rc5t583_gpio
->
rc5t583
->
dev
;

85 
ªt
;

87 
	`rc5t583_gpio_£t
(
gc
, 
off£t
, 
vÆue
);

88 
ªt
 = 
	`rc5t583_£t_bôs
(
∑ª¡
, 
RC5T583_GPIO_IOSEL
, 
	`BIT
(
off£t
));

89 i‡(
ªt
 < 0)

90  
ªt
;

93  
	`rc5t583_˛ór_bôs
(
∑ª¡
, 
RC5T583_GPIO_PGSEL
, 
	`BIT
(
off£t
));

94 
	}
}

96 
	$rc5t583_gpio_to_úq
(
gpio_chù
 *
gc
, 
off£t
)

98 
rc5t583_gpio
 *rc5t583_gpiÿ
	`to_rc5t583_gpio
(
gc
);

100 i‡((
off£t
 >= 0) && (offset < 8))

101  
rc5t583_gpio
->
rc5t583
->
úq_ba£
 +

102 
RC5T583_IRQ_GPIO0
 + 
off£t
;

103  -
EINVAL
;

104 
	}
}

106 
	$rc5t583_gpio_‰ì
(
gpio_chù
 *
gc
, 
off£t
)

108 
rc5t583_gpio
 *rc5t583_gpiÿ
	`to_rc5t583_gpio
(
gc
);

109 
devi˚
 *
∑ª¡
 = 
rc5t583_gpio
->
rc5t583
->
dev
;

111 
	`rc5t583_£t_bôs
(
∑ª¡
, 
RC5T583_GPIO_PGSEL
, 
	`BIT
(
off£t
));

112 
	}
}

114 
	$rc5t583_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

116 
rc5t583
 *rc5t583 = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

117 
rc5t583_∂©f‹m_d©a
 *
pd©a
 = 
	`dev_gë_∂©d©a
(
rc5t583
->
dev
);

118 
rc5t583_gpio
 *rc5t583_gpio;

120 
rc5t583_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*rc5t583_gpio),

121 
GFP_KERNEL
);

122 i‡(!
rc5t583_gpio
) {

123 
	`dev_w¨n
(&
pdev
->
dev
, "Memállocation forÑc5t583_gpio failed");

124  -
ENOMEM
;

127 
rc5t583_gpio
->
gpio_chù
.
œbñ
 = "gpio-rc5t583",

128 
rc5t583_gpio
->
gpio_chù
.
ow√r
 = 
THIS_MODULE
,

129 
rc5t583_gpio
->
gpio_chù
.
‰ì
 = 
rc5t583_gpio_‰ì
,

130 
rc5t583_gpio
->
gpio_chù
.
dúe˘i⁄_öput
 = 
rc5t583_gpio_dú_öput
,

131 
rc5t583_gpio
->
gpio_chù
.
dúe˘i⁄_ouçut
 = 
rc5t583_gpio_dú_ouçut
,

132 
rc5t583_gpio
->
gpio_chù
.
£t
 = 
rc5t583_gpio_£t
,

133 
rc5t583_gpio
->
gpio_chù
.
gë
 = 
rc5t583_gpio_gë
,

134 
rc5t583_gpio
->
gpio_chù
.
to_úq
 = 
rc5t583_gpio_to_úq
,

135 
rc5t583_gpio
->
gpio_chù
.
ngpio
 = 
RC5T583_MAX_GPIO
,

136 
rc5t583_gpio
->
gpio_chù
.
ˇn_¶ìp
 = 1,

137 
rc5t583_gpio
->
gpio_chù
.
dev
 = &
pdev
->dev;

138 
rc5t583_gpio
->
gpio_chù
.
ba£
 = -1;

139 
rc5t583_gpio
->
rc5t583
 =Ñc5t583;

141 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

142 
rc5t583_gpio
->
gpio_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

144 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
rc5t583_gpio
);

146  
	`gpiochù_add
(&
rc5t583_gpio
->
gpio_chù
);

147 
	}
}

149 
	$rc5t583_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

151 
rc5t583_gpio
 *rc5t583_gpiÿ
	`∂©f‹m_gë_drvd©a
(
pdev
);

153  
	`gpiochù_ªmove
(&
rc5t583_gpio
->
gpio_chù
);

154 
	}
}

156 
∂©f‹m_drivî
 
	grc5t583_gpio_drivî
 = {

157 .
drivî
 = {

158 .
«me
 = "rc5t583-gpio",

159 .
	gow√r
 = 
THIS_MODULE
,

161 .
	g¥obe
 = 
rc5t583_gpio_¥obe
,

162 .
	gªmove
 = 
rc5t583_gpio_ªmove
,

165 
__öô
 
	$rc5t583_gpio_öô
()

167  
	`∂©f‹m_drivî_ªgi°î
(&
rc5t583_gpio_drivî
);

168 
	}
}

169 
subsys_öôˇŒ
(
rc5t583_gpio_öô
);

171 
__exô
 
	$rc5t583_gpio_exô
()

173 
	`∂©f‹m_drivî_uƒegi°î
(&
rc5t583_gpio_drivî
);

174 
	}
}

175 
moduÀ_exô
(
rc5t583_gpio_exô
);

177 
MODULE_AUTHOR
("Laxman Dewangan <ldewangan@nvidia.com>");

178 
MODULE_DESCRIPTION
("GPIO interface for RC5T583");

179 
MODULE_LICENSE
("GPL v2");

180 
MODULE_ALIAS
("platform:rc5t583-gpio");

	@gpio-rcar.c

16 
	~<löux/îr.h
>

17 
	~<löux/gpio.h
>

18 
	~<löux/öô.h
>

19 
	~<löux/öãºu±.h
>

20 
	~<löux/io.h
>

21 
	~<löux/i›‹t.h
>

22 
	~<löux/úq.h
>

23 
	~<löux/úqdomaö.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/pö˘æ/c⁄sumî.h
>

26 
	~<löux/∂©f‹m_d©a/gpio-rˇr.h
>

27 
	~<löux/∂©f‹m_devi˚.h
>

28 
	~<löux/•ölock.h
>

29 
	~<löux/¶ab.h
>

31 
	sgpio_rˇr_¥iv
 {

32 
__iomem
 *
	mba£
;

33 
•ölock_t
 
	mlock
;

34 
gpio_rˇr_c⁄fig
 
	mc⁄fig
;

35 
∂©f‹m_devi˚
 *
	mpdev
;

36 
gpio_chù
 
	mgpio_chù
;

37 
úq_chù
 
	múq_chù
;

38 
úq_domaö
 *
	múq_domaö
;

41 
	#IOINTSEL
 0x00

	)

42 
	#INOUTSEL
 0x04

	)

43 
	#OUTDT
 0x08

	)

44 
	#INDT
 0x0c

	)

45 
	#INTDT
 0x10

	)

46 
	#INTCLR
 0x14

	)

47 
	#INTMSK
 0x18

	)

48 
	#MSKCLR
 0x1c

	)

49 
	#POSNEG
 0x20

	)

50 
	#EDGLEVEL
 0x24

	)

51 
	#FILONOFF
 0x28

	)

53 
ölöe
 
u32
 
	$gpio_rˇr_ªad
(
gpio_rˇr_¥iv
 *
p
, 
offs
)

55  
	`i‹ód32
(
p
->
ba£
 + 
offs
);

56 
	}
}

58 
ölöe
 
	$gpio_rˇr_wrôe
(
gpio_rˇr_¥iv
 *
p
, 
offs
,

59 
u32
 
vÆue
)

61 
	`iowrôe32
(
vÆue
, 
p
->
ba£
 + 
offs
);

62 
	}
}

64 
	$gpio_rˇr_modify_bô
(
gpio_rˇr_¥iv
 *
p
, 
offs
,

65 
bô
, 
boﬁ
 
vÆue
)

67 
u32
 
tmp
 = 
	`gpio_rˇr_ªad
(
p
, 
offs
);

69 i‡(
vÆue
)

70 
tmp
 |
	`BIT
(
bô
);

72 
tmp
 &~
	`BIT
(
bô
);

74 
	`gpio_rˇr_wrôe
(
p
, 
offs
, 
tmp
);

75 
	}
}

77 
	$gpio_rˇr_úq_dißbÀ
(
úq_d©a
 *
d
)

79 
gpio_rˇr_¥iv
 *
p
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

81 
	`gpio_rˇr_wrôe
(
p
, 
INTMSK
, ~
	`BIT
(
	`úqd_to_hwúq
(
d
)));

82 
	}
}

84 
	$gpio_rˇr_úq_íabÀ
(
úq_d©a
 *
d
)

86 
gpio_rˇr_¥iv
 *
p
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

88 
	`gpio_rˇr_wrôe
(
p
, 
MSKCLR
, 
	`BIT
(
	`úqd_to_hwúq
(
d
)));

89 
	}
}

91 
	$gpio_rˇr_c⁄fig_öãºu±_öput_mode
(
gpio_rˇr_¥iv
 *
p
,

92 
hwúq
,

93 
boﬁ
 
a˘ive_high_risög_edge
,

94 
boﬁ
 
Àvñ_åiggî
)

96 
Êags
;

103 
	`•ö_lock_úqßve
(&
p
->
lock
, 
Êags
);

106 
	`gpio_rˇr_modify_bô
(
p
, 
POSNEG
, 
hwúq
, !
a˘ive_high_risög_edge
);

109 
	`gpio_rˇr_modify_bô
(
p
, 
EDGLEVEL
, 
hwúq
, !
Àvñ_åiggî
);

112 
	`gpio_rˇr_modify_bô
(
p
, 
IOINTSEL
, 
hwúq
, 
åue
);

115 i‡(!
Àvñ_åiggî
)

116 
	`gpio_rˇr_wrôe
(
p
, 
INTCLR
, 
	`BIT
(
hwúq
));

118 
	`•ö_u∆ock_úqª°‹e
(&
p
->
lock
, 
Êags
);

119 
	}
}

121 
	$gpio_rˇr_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

123 
gpio_rˇr_¥iv
 *
p
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

124 
hwúq
 = 
	`úqd_to_hwúq
(
d
);

126 
	`dev_dbg
(&
p
->
pdev
->
dev
, "£n£ irq = %d,Åy≥ = %d\n", 
hwúq
, 
ty≥
);

128 
ty≥
 & 
IRQ_TYPE_SENSE_MASK
) {

129 
IRQ_TYPE_LEVEL_HIGH
:

130 
	`gpio_rˇr_c⁄fig_öãºu±_öput_mode
(
p
, 
hwúq
, 
åue
,Årue);

132 
IRQ_TYPE_LEVEL_LOW
:

133 
	`gpio_rˇr_c⁄fig_öãºu±_öput_mode
(
p
, 
hwúq
, 
Ál£
, 
åue
);

135 
IRQ_TYPE_EDGE_RISING
:

136 
	`gpio_rˇr_c⁄fig_öãºu±_öput_mode
(
p
, 
hwúq
, 
åue
, 
Ál£
);

138 
IRQ_TYPE_EDGE_FALLING
:

139 
	`gpio_rˇr_c⁄fig_öãºu±_öput_mode
(
p
, 
hwúq
, 
Ál£
, false);

142  -
EINVAL
;

145 
	}
}

147 
úqªtu∫_t
 
	$gpio_rˇr_úq_h™dÀr
(
úq
, *
dev_id
)

149 
gpio_rˇr_¥iv
 *
p
 = 
dev_id
;

150 
u32
 
≥ndög
;

151 
off£t
, 
úqs_h™dÀd
 = 0;

153 (
≥ndög
 = 
	`gpio_rˇr_ªad
(
p
, 
INTDT
))) {

154 
off£t
 = 
	`__ffs
(
≥ndög
);

155 
	`gpio_rˇr_wrôe
(
p
, 
INTCLR
, 
	`BIT
(
off£t
));

156 
	`gíîic_h™dÀ_úq
(
	`úq_föd_m≠pög
(
p
->
úq_domaö
, 
off£t
));

157 
úqs_h™dÀd
++;

160  
úqs_h™dÀd
 ? 
IRQ_HANDLED
 : 
IRQ_NONE
;

161 
	}
}

163 
ölöe
 
gpio_rˇr_¥iv
 *
	$gpio_to_¥iv
(
gpio_chù
 *
chù
)

165  
	`c⁄èöî_of
(
chù
, 
gpio_rˇr_¥iv
, 
gpio_chù
);

166 
	}
}

168 
	$gpio_rˇr_c⁄fig_gíîÆ_öput_ouçut_mode
(
gpio_chù
 *
chù
,

169 
gpio
,

170 
boﬁ
 
ouçut
)

172 
gpio_rˇr_¥iv
 *
p
 = 
	`gpio_to_¥iv
(
chù
);

173 
Êags
;

180 
	`•ö_lock_úqßve
(&
p
->
lock
, 
Êags
);

183 
	`gpio_rˇr_modify_bô
(
p
, 
POSNEG
, 
gpio
, 
Ál£
);

186 
	`gpio_rˇr_modify_bô
(
p
, 
IOINTSEL
, 
gpio
, 
Ál£
);

189 
	`gpio_rˇr_modify_bô
(
p
, 
INOUTSEL
, 
gpio
, 
ouçut
);

191 
	`•ö_u∆ock_úqª°‹e
(&
p
->
lock
, 
Êags
);

192 
	}
}

194 
	$gpio_rˇr_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

196  
	`pö˘æ_ªque°_gpio
(
chù
->
ba£
 + 
off£t
);

197 
	}
}

199 
	$gpio_rˇr_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

201 
	`pö˘æ_‰ì_gpio
(
chù
->
ba£
 + 
off£t
);

206 
	`gpio_rˇr_c⁄fig_gíîÆ_öput_ouçut_mode
(
chù
, 
off£t
, 
Ál£
);

207 
	}
}

209 
	$gpio_rˇr_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

211 
	`gpio_rˇr_c⁄fig_gíîÆ_öput_ouçut_mode
(
chù
, 
off£t
, 
Ál£
);

213 
	}
}

215 
	$gpio_rˇr_gë
(
gpio_chù
 *
chù
, 
off£t
)

217  ()(
	`gpio_rˇr_ªad
(
	`gpio_to_¥iv
(
chù
), 
INDT
Ë& 
	`BIT
(
off£t
));

218 
	}
}

220 
	$gpio_rˇr_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

222 
gpio_rˇr_¥iv
 *
p
 = 
	`gpio_to_¥iv
(
chù
);

223 
Êags
;

225 
	`•ö_lock_úqßve
(&
p
->
lock
, 
Êags
);

226 
	`gpio_rˇr_modify_bô
(
p
, 
OUTDT
, 
off£t
, 
vÆue
);

227 
	`•ö_u∆ock_úqª°‹e
(&
p
->
lock
, 
Êags
);

228 
	}
}

230 
	$gpio_rˇr_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
,

231 
vÆue
)

234 
	`gpio_rˇr_£t
(
chù
, 
off£t
, 
vÆue
);

235 
	`gpio_rˇr_c⁄fig_gíîÆ_öput_ouçut_mode
(
chù
, 
off£t
, 
åue
);

237 
	}
}

239 
	$gpio_rˇr_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

241  
	`úq_¸óã_m≠pög
(
	`gpio_to_¥iv
(
chù
)->
úq_domaö
, 
off£t
);

242 
	}
}

244 
	$gpio_rˇr_úq_domaö_m≠
(
úq_domaö
 *
h
, 
vúq
,

245 
úq_hw_numbî_t
 
hw
)

247 
gpio_rˇr_¥iv
 *
p
 = 
h
->
ho°_d©a
;

249 
	`dev_dbg
(&
p
->
pdev
->
dev
, "m≠ hw irq = %d, vúq = %d\n", ()
hw
, 
vúq
);

251 
	`úq_£t_chù_d©a
(
vúq
, 
h
->
ho°_d©a
);

252 
	`úq_£t_chù_™d_h™dÀr
(
vúq
, &
p
->
úq_chù
, 
h™dÀ_Àvñ_úq
);

253 
	`£t_úq_Êags
(
vúq
, 
IRQF_VALID
);

255 
	}
}

257 
úq_domaö_›s
 
	ggpio_rˇr_úq_domaö_›s
 = {

258 .
m≠
 = 
gpio_rˇr_úq_domaö_m≠
,

261 
	$gpio_rˇr_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

263 
gpio_rˇr_c⁄fig
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

264 
gpio_rˇr_¥iv
 *
p
;

265 
ªsour˚
 *
io
, *
úq
;

266 
gpio_chù
 *gpio_chip;

267 
úq_chù
 *irq_chip;

268 c⁄° *
«me
 = 
	`dev_«me
(&
pdev
->
dev
);

269 
ªt
;

271 
p
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*p), 
GFP_KERNEL
);

272 i‡(!
p
) {

273 
	`dev_îr
(&
pdev
->
dev
, "failedÅoállocate driver data\n");

274 
ªt
 = -
ENOMEM
;

275 
îr0
;

279 i‡(
pd©a
)

280 
p
->
c⁄fig
 = *
pd©a
;

282 
p
->
pdev
 =Ödev;

283 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
p
);

284 
	`•ö_lock_öô
(&
p
->
lock
);

286 
io
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

287 
úq
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

289 i‡(!
io
 || !
úq
) {

290 
	`dev_îr
(&
pdev
->
dev
, "missing IRQ or IOMEM\n");

291 
ªt
 = -
EINVAL
;

292 
îr0
;

295 
p
->
ba£
 = 
	`devm_i‹em≠_noˇche
(&
pdev
->
dev
, 
io
->
°¨t
,

296 
	`ªsour˚_size
(
io
));

297 i‡(!
p
->
ba£
) {

298 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑemap I/O memory\n");

299 
ªt
 = -
ENXIO
;

300 
îr0
;

303 
gpio_chù
 = &
p
->gpio_chip;

304 
gpio_chù
->
ªque°
 = 
gpio_rˇr_ªque°
;

305 
gpio_chù
->
‰ì
 = 
gpio_rˇr_‰ì
;

306 
gpio_chù
->
dúe˘i⁄_öput
 = 
gpio_rˇr_dúe˘i⁄_öput
;

307 
gpio_chù
->
gë
 = 
gpio_rˇr_gë
;

308 
gpio_chù
->
dúe˘i⁄_ouçut
 = 
gpio_rˇr_dúe˘i⁄_ouçut
;

309 
gpio_chù
->
£t
 = 
gpio_rˇr_£t
;

310 
gpio_chù
->
to_úq
 = 
gpio_rˇr_to_úq
;

311 
gpio_chù
->
œbñ
 = 
«me
;

312 
gpio_chù
->
ow√r
 = 
THIS_MODULE
;

313 
gpio_chù
->
ba£
 = 
p
->
c⁄fig
.
gpio_ba£
;

314 
gpio_chù
->
ngpio
 = 
p
->
c⁄fig
.
numbî_of_pös
;

316 
úq_chù
 = &
p
->irq_chip;

317 
úq_chù
->
«me
 =Çame;

318 
úq_chù
->
úq_mask
 = 
gpio_rˇr_úq_dißbÀ
;

319 
úq_chù
->
úq_unmask
 = 
gpio_rˇr_úq_íabÀ
;

320 
úq_chù
->
úq_íabÀ
 = 
gpio_rˇr_úq_íabÀ
;

321 
úq_chù
->
úq_dißbÀ
 = 
gpio_rˇr_úq_dißbÀ
;

322 
úq_chù
->
úq_£t_ty≥
 = 
gpio_rˇr_úq_£t_ty≥
;

323 
úq_chù
->
Êags
 = 
IRQCHIP_SKIP_SET_WAKE
 | 
IRQCHIP_SET_TYPE_MASKED
;

325 
p
->
úq_domaö
 = 
	`úq_domaö_add_sim∂e
(
pdev
->
dev
.
of_node
,

326 
p
->
c⁄fig
.
numbî_of_pös
,

327 
p
->
c⁄fig
.
úq_ba£
,

328 &
gpio_rˇr_úq_domaö_›s
, 
p
);

329 i‡(!
p
->
úq_domaö
) {

330 
ªt
 = -
ENXIO
;

331 
	`dev_îr
(&
pdev
->
dev
, "cannot initialize irq domain\n");

332 
îr0
;

335 i‡(
	`devm_ªque°_úq
(&
pdev
->
dev
, 
úq
->
°¨t
,

336 
gpio_rˇr_úq_h™dÀr
, 
IRQF_SHARED
, 
«me
, 
p
)) {

337 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑequest IRQ\n");

338 
ªt
 = -
ENOENT
;

339 
îr1
;

342 
ªt
 = 
	`gpiochù_add
(
gpio_chù
);

343 i‡(
ªt
) {

344 
	`dev_îr
(&
pdev
->
dev
, "failedÅoádd GPIO controller\n");

345 
îr1
;

348 
	`dev_öfo
(&
pdev
->
dev
, "drivög %d GPIOs\n", 
p
->
c⁄fig
.
numbî_of_pös
);

351 i‡(
p
->
c⁄fig
.
úq_ba£
) {

352 
ªt
 = 
	`úq_föd_m≠pög
(
p
->
úq_domaö
, 0);

353 i‡(
p
->
c⁄fig
.
úq_ba£
 !
ªt
)

354 
	`dev_w¨n
(&
pdev
->
dev
, "irq base mismatch (%u/%u)\n",

355 
p
->
c⁄fig
.
úq_ba£
, 
ªt
);

358 
ªt
 = 
	`gpiochù_add_pö_ønge
(
gpio_chù
, 
p
->
c⁄fig
.
p˘l_«me
, 0,

359 
gpio_chù
->
ba£
, gpio_chù->
ngpio
);

360 i‡(
ªt
 < 0)

361 
	`dev_w¨n
(&
pdev
->
dev
, "failedÅoáddÖinÑange\n");

365 
îr1
:

366 
	`úq_domaö_ªmove
(
p
->
úq_domaö
);

367 
îr0
:

368  
ªt
;

369 
	}
}

371 
	$gpio_rˇr_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

373 
gpio_rˇr_¥iv
 *
p
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

374 
ªt
;

376 
ªt
 = 
	`gpiochù_ªmove
(&
p
->
gpio_chù
);

377 i‡(
ªt
)

378  
ªt
;

380 
	`úq_domaö_ªmove
(
p
->
úq_domaö
);

382 
	}
}

384 
∂©f‹m_drivî
 
	ggpio_rˇr_devi˚_drivî
 = {

385 .
¥obe
 = 
gpio_rˇr_¥obe
,

386 .
	gªmove
 = 
gpio_rˇr_ªmove
,

387 .
	gdrivî
 = {

388 .
«me
 = "gpio_rcar",

392 
moduÀ_∂©f‹m_drivî
(
gpio_rˇr_devi˚_drivî
);

394 
MODULE_AUTHOR
("Magnus Damm");

395 
MODULE_DESCRIPTION
("Renesas R-Car GPIO Driver");

396 
MODULE_LICENSE
("GPL v2");

	@gpio-rdc321x.c

22 
	~<löux/moduÀ.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/öô.h
>

25 
	~<löux/•ölock.h
>

26 
	~<löux/∂©f‹m_devi˚.h
>

27 
	~<löux/pci.h
>

28 
	~<löux/gpio.h
>

29 
	~<löux/mfd/rdc321x.h
>

30 
	~<löux/¶ab.h
>

32 
	srdc321x_gpio
 {

33 
•ölock_t
 
	mlock
;

34 
pci_dev
 *
	msb_pdev
;

35 
u32
 
	md©a_ªg
[2];

36 
	mªg1_˘æ_ba£
;

37 
	mªg1_d©a_ba£
;

38 
	mªg2_˘æ_ba£
;

39 
	mªg2_d©a_ba£
;

40 
gpio_chù
 
	mchù
;

44 
	$rdc_gpio_gë_vÆue
(
gpio_chù
 *
chù
, 
gpio
)

46 
rdc321x_gpio
 *
gpch
;

47 
u32
 
vÆue
 = 0;

48 
ªg
;

50 
gpch
 = 
	`c⁄èöî_of
(
chù
, 
rdc321x_gpio
, chip);

51 
ªg
 = 
gpio
 < 32 ? 
gpch
->
ªg1_d©a_ba£
 : gpch->
ªg2_d©a_ba£
;

53 
	`•ö_lock
(&
gpch
->
lock
);

54 
	`pci_wrôe_c⁄fig_dw‹d
(
gpch
->
sb_pdev
, 
ªg
,

55 
gpch
->
d©a_ªg
[
gpio
 < 32 ? 0 : 1]);

56 
	`pci_ªad_c⁄fig_dw‹d
(
gpch
->
sb_pdev
, 
ªg
, &
vÆue
);

57 
	`•ö_u∆ock
(&
gpch
->
lock
);

59  (1 << (
gpio
 & 0x1f)Ë& 
vÆue
 ? 1 : 0;

60 
	}
}

62 
	$rdc_gpio_£t_vÆue_im∂
(
gpio_chù
 *
chù
,

63 
gpio
, 
vÆue
)

65 
rdc321x_gpio
 *
gpch
;

66 
ªg
 = (
gpio
 < 32) ? 0 : 1;

68 
gpch
 = 
	`c⁄èöî_of
(
chù
, 
rdc321x_gpio
, chip);

70 i‡(
vÆue
)

71 
gpch
->
d©a_ªg
[
ªg
] |1 << (
gpio
 & 0x1f);

73 
gpch
->
d©a_ªg
[
ªg
] &~(1 << (
gpio
 & 0x1f));

75 
	`pci_wrôe_c⁄fig_dw‹d
(
gpch
->
sb_pdev
,

76 
ªg
 ? 
gpch
->
ªg2_d©a_ba£
 : gpch->
ªg1_d©a_ba£
,

77 
gpch
->
d©a_ªg
[
ªg
]);

78 
	}
}

81 
	$rdc_gpio_£t_vÆue
(
gpio_chù
 *
chù
,

82 
gpio
, 
vÆue
)

84 
rdc321x_gpio
 *
gpch
;

86 
gpch
 = 
	`c⁄èöî_of
(
chù
, 
rdc321x_gpio
, chip);

87 
	`•ö_lock
(&
gpch
->
lock
);

88 
	`rdc_gpio_£t_vÆue_im∂
(
chù
, 
gpio
, 
vÆue
);

89 
	`•ö_u∆ock
(&
gpch
->
lock
);

90 
	}
}

92 
	$rdc_gpio_c⁄fig
(
gpio_chù
 *
chù
,

93 
gpio
, 
vÆue
)

95 
rdc321x_gpio
 *
gpch
;

96 
îr
;

97 
u32
 
ªg
;

99 
gpch
 = 
	`c⁄èöî_of
(
chù
, 
rdc321x_gpio
, chip);

101 
	`•ö_lock
(&
gpch
->
lock
);

102 
îr
 = 
	`pci_ªad_c⁄fig_dw‹d
(
gpch
->
sb_pdev
, 
gpio
 < 32 ?

103 
gpch
->
ªg1_˘æ_ba£
 : gpch->
ªg2_˘æ_ba£
, &
ªg
);

104 i‡(
îr
)

105 
u∆ock
;

107 
ªg
 |1 << (
gpio
 & 0x1f);

109 
îr
 = 
	`pci_wrôe_c⁄fig_dw‹d
(
gpch
->
sb_pdev
, 
gpio
 < 32 ?

110 
gpch
->
ªg1_˘æ_ba£
 : gpch->
ªg2_˘æ_ba£
, 
ªg
);

111 i‡(
îr
)

112 
u∆ock
;

114 
	`rdc_gpio_£t_vÆue_im∂
(
chù
, 
gpio
, 
vÆue
);

116 
u∆ock
:

117 
	`•ö_u∆ock
(&
gpch
->
lock
);

119  
îr
;

120 
	}
}

123 
	$rdc_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
gpio
)

125  
	`rdc_gpio_c⁄fig
(
chù
, 
gpio
, 1);

126 
	}
}

131 
	$rdc321x_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

133 
îr
;

134 
ªsour˚
 *
r
;

135 
rdc321x_gpio
 *
rdc321x_gpio_dev
;

136 
rdc321x_gpio_pd©a
 *
pd©a
;

138 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

139 i‡(!
pd©a
) {

140 
	`dev_îr
(&
pdev
->
dev
, "noÖlatform data supplied\n");

141  -
ENODEV
;

144 
rdc321x_gpio_dev
 = 
	`kzÆloc
((
rdc321x_gpio
), 
GFP_KERNEL
);

145 i‡(!
rdc321x_gpio_dev
) {

146 
	`dev_îr
(&
pdev
->
dev
, "failedÅoállocateÖrivate data\n");

147  -
ENOMEM
;

150 
r
 = 
	`∂©f‹m_gë_ªsour˚_by«me
(
pdev
, 
IORESOURCE_IO
, "gpio-reg1");

151 i‡(!
r
) {

152 
	`dev_îr
(&
pdev
->
dev
, "failedÅo get gpio-reg1Ñesource\n");

153 
îr
 = -
ENODEV
;

154 
out_‰ì
;

157 
	`•ö_lock_öô
(&
rdc321x_gpio_dev
->
lock
);

158 
rdc321x_gpio_dev
->
sb_pdev
 = 
pd©a
->sb_pdev;

159 
rdc321x_gpio_dev
->
ªg1_˘æ_ba£
 = 
r
->
°¨t
;

160 
rdc321x_gpio_dev
->
ªg1_d©a_ba£
 = 
r
->
°¨t
 + 0x4;

162 
r
 = 
	`∂©f‹m_gë_ªsour˚_by«me
(
pdev
, 
IORESOURCE_IO
, "gpio-reg2");

163 i‡(!
r
) {

164 
	`dev_îr
(&
pdev
->
dev
, "failedÅo get gpio-reg2Ñesource\n");

165 
îr
 = -
ENODEV
;

166 
out_‰ì
;

169 
rdc321x_gpio_dev
->
ªg2_˘æ_ba£
 = 
r
->
°¨t
;

170 
rdc321x_gpio_dev
->
ªg2_d©a_ba£
 = 
r
->
°¨t
 + 0x4;

172 
rdc321x_gpio_dev
->
chù
.
œbñ
 = "rdc321x-gpio";

173 
rdc321x_gpio_dev
->
chù
.
ow√r
 = 
THIS_MODULE
;

174 
rdc321x_gpio_dev
->
chù
.
dúe˘i⁄_öput
 = 
rdc_gpio_dúe˘i⁄_öput
;

175 
rdc321x_gpio_dev
->
chù
.
dúe˘i⁄_ouçut
 = 
rdc_gpio_c⁄fig
;

176 
rdc321x_gpio_dev
->
chù
.
gë
 = 
rdc_gpio_gë_vÆue
;

177 
rdc321x_gpio_dev
->
chù
.
£t
 = 
rdc_gpio_£t_vÆue
;

178 
rdc321x_gpio_dev
->
chù
.
ba£
 = 0;

179 
rdc321x_gpio_dev
->
chù
.
ngpio
 = 
pd©a
->
max_gpios
;

181 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
rdc321x_gpio_dev
);

186 
îr
 = 
	`pci_ªad_c⁄fig_dw‹d
(
rdc321x_gpio_dev
->
sb_pdev
,

187 
rdc321x_gpio_dev
->
ªg1_d©a_ba£
,

188 &
rdc321x_gpio_dev
->
d©a_ªg
[0]);

189 i‡(
îr
)

190 
out_drvd©a
;

192 
îr
 = 
	`pci_ªad_c⁄fig_dw‹d
(
rdc321x_gpio_dev
->
sb_pdev
,

193 
rdc321x_gpio_dev
->
ªg2_d©a_ba£
,

194 &
rdc321x_gpio_dev
->
d©a_ªg
[1]);

195 i‡(
îr
)

196 
out_drvd©a
;

198 
	`dev_öfo
(&
pdev
->
dev
, "registering %d GPIOs\n",

199 
rdc321x_gpio_dev
->
chù
.
ngpio
);

200  
	`gpiochù_add
(&
rdc321x_gpio_dev
->
chù
);

202 
out_drvd©a
:

203 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

204 
out_‰ì
:

205 
	`k‰ì
(
rdc321x_gpio_dev
);

206  
îr
;

207 
	}
}

209 
	$rdc321x_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

211 
ªt
;

212 
rdc321x_gpio
 *
rdc321x_gpio_dev
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

214 
ªt
 = 
	`gpiochù_ªmove
(&
rdc321x_gpio_dev
->
chù
);

215 i‡(
ªt
)

216 
	`dev_îr
(&
pdev
->
dev
, "failedÅo unregister chip\n");

218 
	`k‰ì
(
rdc321x_gpio_dev
);

219 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

221  
ªt
;

222 
	}
}

224 
∂©f‹m_drivî
 
	grdc321x_gpio_drivî
 = {

225 .
drivî
.
«me
 = "rdc321x-gpio",

226 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

227 .
	g¥obe
 = 
rdc321x_gpio_¥obe
,

228 .
	gªmove
 = 
rdc321x_gpio_ªmove
,

231 
moduÀ_∂©f‹m_drivî
(
rdc321x_gpio_drivî
);

233 
MODULE_AUTHOR
("Florian Fainelli <florian@openwrt.org>");

234 
MODULE_DESCRIPTION
("RDC321x GPIO driver");

235 
MODULE_LICENSE
("GPL");

236 
MODULE_ALIAS
("platform:rdc321x-gpio");

	@gpio-sa1100.c

10 
	~<löux/gpio.h
>

11 
	~<löux/öô.h
>

12 
	~<löux/moduÀ.h
>

14 
	~<mach/h¨dw¨e.h
>

15 
	~<mach/úqs.h
>

17 
	$ß1100_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

19  
GPLR
 & 
	`GPIO_GPIO
(
off£t
);

20 
	}
}

22 
	$ß1100_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

24 i‡(
vÆue
)

25 
GPSR
 = 
	`GPIO_GPIO
(
off£t
);

27 
GPCR
 = 
	`GPIO_GPIO
(
off£t
);

28 
	}
}

30 
	$ß1100_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

32 
Êags
;

34 
	`loˇl_úq_ßve
(
Êags
);

35 
GPDR
 &~
	`GPIO_GPIO
(
off£t
);

36 
	`loˇl_úq_ª°‹e
(
Êags
);

38 
	}
}

40 
	$ß1100_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

42 
Êags
;

44 
	`loˇl_úq_ßve
(
Êags
);

45 
	`ß1100_gpio_£t
(
chù
, 
off£t
, 
vÆue
);

46 
GPDR
 |
	`GPIO_GPIO
(
off£t
);

47 
	`loˇl_úq_ª°‹e
(
Êags
);

49 
	}
}

51 
	$ß1100_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

53  
off£t
 < 11 ? (
IRQ_GPIO0
 + off£tË: (
IRQ_GPIO11
 - 11 + offset);

54 
	}
}

56 
gpio_chù
 
	gß1100_gpio_chù
 = {

57 .
œbñ
 = "gpio",

58 .
	gdúe˘i⁄_öput
 = 
ß1100_dúe˘i⁄_öput
,

59 .
	gdúe˘i⁄_ouçut
 = 
ß1100_dúe˘i⁄_ouçut
,

60 .
	g£t
 = 
ß1100_gpio_£t
,

61 .
	ggë
 = 
ß1100_gpio_gë
,

62 .
	gto_úq
 = 
ß1100_to_úq
,

63 .
	gba£
 = 0,

64 .
	gngpio
 = 
GPIO_MAX
 + 1,

67 
__öô
 
	$ß1100_öô_gpio
()

69 
	`gpiochù_add
(&
ß1100_gpio_chù
);

70 
	}
}

	@gpio-samsung.c

17 
	~<löux/kî√l.h
>

18 
	~<löux/úq.h
>

19 
	~<löux/io.h
>

20 
	~<löux/gpio.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/•ölock.h
>

23 
	~<löux/moduÀ.h
>

24 
	~<löux/öãºu±.h
>

25 
	~<löux/devi˚.h
>

26 
	~<löux/i›‹t.h
>

27 
	~<löux/of.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/of_addªss.h
>

31 
	~<asm/úq.h
>

33 
	~<mach/h¨dw¨e.h
>

34 
	~<mach/m≠.h
>

35 
	~<mach/ªgs-gpio.h
>

37 
	~<∂©/˝u.h
>

38 
	~<∂©/gpio-c‹e.h
>

39 
	~<∂©/gpio-cfg.h
>

40 
	~<∂©/gpio-cfg-hñ≥rs.h
>

41 
	~<∂©/pm.h
>

43 
	$ßmsung_gpio_£çuŒ_updown
(
ßmsung_gpio_chù
 *
chù
,

44 
off
, 
ßmsung_gpio_puŒ_t
 
puŒ
)

46 
__iomem
 *
ªg
 = 
chù
->
ba£
 + 0x08;

47 
shi·
 = 
off
 * 2;

48 
u32
 
pup
;

50 
pup
 = 
	`__øw_ªadl
(
ªg
);

51 
pup
 &~(3 << 
shi·
);

52 
pup
 |
puŒ
 << 
shi·
;

53 
	`__øw_wrôñ
(
pup
, 
ªg
);

56 
	}
}

58 
ßmsung_gpio_puŒ_t
 
	$ßmsung_gpio_gëpuŒ_updown
(
ßmsung_gpio_chù
 *
chù
,

59 
off
)

61 
__iomem
 *
ªg
 = 
chù
->
ba£
 + 0x08;

62 
shi·
 = 
off
 * 2;

63 
u32
 
pup
 = 
	`__øw_ªadl
(
ªg
);

65 
pup
 >>
shi·
;

66 
pup
 &= 0x3;

68  (
__f‹˚
 
ßmsung_gpio_puŒ_t
)
pup
;

69 
	}
}

71 
	$s3c2443_gpio_£çuŒ
(
ßmsung_gpio_chù
 *
chù
,

72 
off
, 
ßmsung_gpio_puŒ_t
 
puŒ
)

74 
puŒ
) {

75 
S3C_GPIO_PULL_NONE
:

76 
puŒ
 = 0x01;

78 
S3C_GPIO_PULL_UP
:

79 
puŒ
 = 0x00;

81 
S3C_GPIO_PULL_DOWN
:

82 
puŒ
 = 0x02;

85  
	`ßmsung_gpio_£çuŒ_updown
(
chù
, 
off
, 
puŒ
);

86 
	}
}

88 
ßmsung_gpio_puŒ_t
 
	$s3c2443_gpio_gëpuŒ
(
ßmsung_gpio_chù
 *
chù
,

89 
off
)

91 
ßmsung_gpio_puŒ_t
 
puŒ
;

93 
puŒ
 = 
	`ßmsung_gpio_gëpuŒ_updown
(
chù
, 
off
);

95 
puŒ
) {

97 
puŒ
 = 
S3C_GPIO_PULL_UP
;

101 
puŒ
 = 
S3C_GPIO_PULL_NONE
;

104 
puŒ
 = 
S3C_GPIO_PULL_DOWN
;

108  
puŒ
;

109 
	}
}

111 
	$s3c24xx_gpio_£çuŒ_1
(
ßmsung_gpio_chù
 *
chù
,

112 
off
, 
ßmsung_gpio_puŒ_t
 
puŒ
,

113 
ßmsung_gpio_puŒ_t
 
updown
)

115 
__iomem
 *
ªg
 = 
chù
->
ba£
 + 0x08;

116 
u32
 
pup
 = 
	`__øw_ªadl
(
ªg
);

118 i‡(
puŒ
 =
updown
)

119 
pup
 &~(1 << 
off
);

120 i‡(
puŒ
 =
S3C_GPIO_PULL_NONE
)

121 
pup
 |(1 << 
off
);

123  -
EINVAL
;

125 
	`__øw_wrôñ
(
pup
, 
ªg
);

127 
	}
}

129 
ßmsung_gpio_puŒ_t
 
	$s3c24xx_gpio_gëpuŒ_1
(
ßmsung_gpio_chù
 *
chù
,

130 
off
,

131 
ßmsung_gpio_puŒ_t
 
updown
)

133 
__iomem
 *
ªg
 = 
chù
->
ba£
 + 0x08;

134 
u32
 
pup
 = 
	`__øw_ªadl
(
ªg
);

136 
pup
 &(1 << 
off
);

137  
pup
 ? 
S3C_GPIO_PULL_NONE
 : 
updown
;

138 
	}
}

140 
ßmsung_gpio_puŒ_t
 
	$s3c24xx_gpio_gëpuŒ_1up
(
ßmsung_gpio_chù
 *
chù
,

141 
off
)

143  
	`s3c24xx_gpio_gëpuŒ_1
(
chù
, 
off
, 
S3C_GPIO_PULL_UP
);

144 
	}
}

146 
	$s3c24xx_gpio_£çuŒ_1up
(
ßmsung_gpio_chù
 *
chù
,

147 
off
, 
ßmsung_gpio_puŒ_t
 
puŒ
)

149  
	`s3c24xx_gpio_£çuŒ_1
(
chù
, 
off
, 
puŒ
, 
S3C_GPIO_PULL_UP
);

150 
	}
}

152 
ßmsung_gpio_puŒ_t
 
	$s3c24xx_gpio_gëpuŒ_1down
(
ßmsung_gpio_chù
 *
chù
,

153 
off
)

155  
	`s3c24xx_gpio_gëpuŒ_1
(
chù
, 
off
, 
S3C_GPIO_PULL_DOWN
);

156 
	}
}

158 
	$s3c24xx_gpio_£çuŒ_1down
(
ßmsung_gpio_chù
 *
chù
,

159 
off
, 
ßmsung_gpio_puŒ_t
 
puŒ
)

161  
	`s3c24xx_gpio_£çuŒ_1
(
chù
, 
off
, 
puŒ
, 
S3C_GPIO_PULL_DOWN
);

162 
	}
}

164 
	$exynos_gpio_£çuŒ
(
ßmsung_gpio_chù
 *
chù
,

165 
off
, 
ßmsung_gpio_puŒ_t
 
puŒ
)

167 i‡(
puŒ
 =
S3C_GPIO_PULL_UP
)

168 
puŒ
 = 3;

170  
	`ßmsung_gpio_£çuŒ_updown
(
chù
, 
off
, 
puŒ
);

171 
	}
}

173 
ßmsung_gpio_puŒ_t
 
	$exynos_gpio_gëpuŒ
(
ßmsung_gpio_chù
 *
chù
,

174 
off
)

176 
ßmsung_gpio_puŒ_t
 
puŒ
;

178 
puŒ
 = 
	`ßmsung_gpio_gëpuŒ_updown
(
chù
, 
off
);

180 i‡(
puŒ
 == 3)

181 
puŒ
 = 
S3C_GPIO_PULL_UP
;

183  
puŒ
;

184 
	}
}

200 
	$ßmsung_gpio_£tcfg_2bô
(
ßmsung_gpio_chù
 *
chù
,

201 
off
, 
cfg
)

203 
__iomem
 *
ªg
 = 
chù
->
ba£
;

204 
shi·
 = 
off
 * 2;

205 
u32
 
c⁄
;

207 i‡(
	`ßmsung_gpio_is_cfg_•ecül
(
cfg
)) {

208 
cfg
 &= 0xf;

209 i‡(
cfg
 > 3)

210  -
EINVAL
;

212 
cfg
 <<
shi·
;

215 
c⁄
 = 
	`__øw_ªadl
(
ªg
);

216 
c⁄
 &~(0x3 << 
shi·
);

217 
c⁄
 |
cfg
;

218 
	`__øw_wrôñ
(
c⁄
, 
ªg
);

221 
	}
}

233 
	$ßmsung_gpio_gëcfg_2bô
(
ßmsung_gpio_chù
 *
chù
,

234 
off
)

236 
u32
 
c⁄
;

238 
c⁄
 = 
	`__øw_ªadl
(
chù
->
ba£
);

239 
c⁄
 >>
off
 * 2;

240 
c⁄
 &= 3;

243  
	`S3C_GPIO_SPECIAL
(
c⁄
);

244 
	}
}

263 
	$ßmsung_gpio_£tcfg_4bô
(
ßmsung_gpio_chù
 *
chù
,

264 
off
, 
cfg
)

266 
__iomem
 *
ªg
 = 
chù
->
ba£
;

267 
shi·
 = (
off
 & 7) * 4;

268 
u32
 
c⁄
;

270 i‡(
off
 < 8 && 
chù
->chù.
ngpio
 > 8)

271 
ªg
 -= 4;

273 i‡(
	`ßmsung_gpio_is_cfg_•ecül
(
cfg
)) {

274 
cfg
 &= 0xf;

275 
cfg
 <<
shi·
;

278 
c⁄
 = 
	`__øw_ªadl
(
ªg
);

279 
c⁄
 &~(0x‡<< 
shi·
);

280 
c⁄
 |
cfg
;

281 
	`__øw_wrôñ
(
c⁄
, 
ªg
);

284 
	}
}

298 
	$ßmsung_gpio_gëcfg_4bô
(
ßmsung_gpio_chù
 *
chù
,

299 
off
)

301 
__iomem
 *
ªg
 = 
chù
->
ba£
;

302 
shi·
 = (
off
 & 7) * 4;

303 
u32
 
c⁄
;

305 i‡(
off
 < 8 && 
chù
->chù.
ngpio
 > 8)

306 
ªg
 -= 4;

308 
c⁄
 = 
	`__øw_ªadl
(
ªg
);

309 
c⁄
 >>
shi·
;

310 
c⁄
 &= 0xf;

313  
	`S3C_GPIO_SPECIAL
(
c⁄
);

314 
	}
}

316 #ifde‡
CONFIG_PLAT_S3C24XX


328 
	$s3c24xx_gpio_£tcfg_ab™k
(
ßmsung_gpio_chù
 *
chù
,

329 
off
, 
cfg
)

331 
__iomem
 *
ªg
 = 
chù
->
ba£
;

332 
shi·
 = 
off
;

333 
u32
 
c⁄
;

335 i‡(
	`ßmsung_gpio_is_cfg_•ecül
(
cfg
)) {

336 
cfg
 &= 0xf;

339 
cfg
 -= 1;

340 i‡(
cfg
 > 1)

341  -
EINVAL
;

343 
cfg
 <<
shi·
;

346 
c⁄
 = 
	`__øw_ªadl
(
ªg
);

347 
c⁄
 &~(0x1 << 
shi·
);

348 
c⁄
 |
cfg
;

349 
	`__øw_wrôñ
(
c⁄
, 
ªg
);

352 
	}
}

366 
	$s3c24xx_gpio_gëcfg_ab™k
(
ßmsung_gpio_chù
 *
chù
,

367 
off
)

369 
u32
 
c⁄
;

371 
c⁄
 = 
	`__øw_ªadl
(
chù
->
ba£
);

372 
c⁄
 >>
off
;

373 
c⁄
 &= 1;

374 
c⁄
++;

376  
	`S3C_GPIO_SFN
(
c⁄
);

377 
	}
}

380 #i‡
deföed
(
CONFIG_CPU_S5P6440
Ë|| deföed(
CONFIG_CPU_S5P6450
)

381 
	$s5p64x0_gpio_£tcfg_rb™k
(
ßmsung_gpio_chù
 *
chù
,

382 
off
, 
cfg
)

384 
__iomem
 *
ªg
 = 
chù
->
ba£
;

385 
shi·
;

386 
u32
 
c⁄
;

388 
off
) {

395 
shi·
 = (
off
 & 7) * 4;

396 
ªg
 -= 4;

399 
shi·
 = ((
off
 + 1) & 7) * 4;

400 
ªg
 -= 4;

402 
shi·
 = ((
off
 + 1) & 7) * 4;

406 i‡(
	`ßmsung_gpio_is_cfg_•ecül
(
cfg
)) {

407 
cfg
 &= 0xf;

408 
cfg
 <<
shi·
;

411 
c⁄
 = 
	`__øw_ªadl
(
ªg
);

412 
c⁄
 &~(0x‡<< 
shi·
);

413 
c⁄
 |
cfg
;

414 
	`__øw_wrôñ
(
c⁄
, 
ªg
);

417 
	}
}

420 
__öô
 
	$ßmsung_gpiﬁib_£t_cfg
(
ßmsung_gpio_cfg
 *
chùcfg
,

421 
ƒ_chùs
)

423 ; 
ƒ_chùs
 > 0;Çr_chùs--, 
chùcfg
++) {

424 i‡(!
chùcfg
->
£t_c⁄fig
)

425 
chùcfg
->
£t_c⁄fig
 = 
ßmsung_gpio_£tcfg_4bô
;

426 i‡(!
chùcfg
->
gë_c⁄fig
)

427 
chùcfg
->
gë_c⁄fig
 = 
ßmsung_gpio_gëcfg_4bô
;

428 i‡(!
chùcfg
->
£t_puŒ
)

429 
chùcfg
->
£t_puŒ
 = 
ßmsung_gpio_£çuŒ_updown
;

430 i‡(!
chùcfg
->
gë_puŒ
)

431 
chùcfg
->
gë_puŒ
 = 
ßmsung_gpio_gëpuŒ_updown
;

433 
	}
}

435 
ßmsung_gpio_cfg
 
	gs3c24xx_gpiocfg_deÁu…
 = {

436 .
£t_c⁄fig
 = 
ßmsung_gpio_£tcfg_2bô
,

437 .
	ggë_c⁄fig
 = 
ßmsung_gpio_gëcfg_2bô
,

440 #ifde‡
CONFIG_PLAT_S3C24XX


441 
ßmsung_gpio_cfg
 
	gs3c24xx_gpiocfg_b™ka
 = {

442 .
£t_c⁄fig
 = 
s3c24xx_gpio_£tcfg_ab™k
,

443 .
	ggë_c⁄fig
 = 
s3c24xx_gpio_gëcfg_ab™k
,

447 #i‡
deföed
(
CONFIG_ARCH_EXYNOS4
Ë|| deföed(
CONFIG_SOC_EXYNOS5250
)

448 
ßmsung_gpio_cfg
 
	gexynos_gpio_cfg
 = {

449 .
£t_puŒ
 = 
exynos_gpio_£çuŒ
,

450 .
	ggë_puŒ
 = 
exynos_gpio_gëpuŒ
,

451 .
	g£t_c⁄fig
 = 
ßmsung_gpio_£tcfg_4bô
,

452 .
	ggë_c⁄fig
 = 
ßmsung_gpio_gëcfg_4bô
,

456 #i‡
deföed
(
CONFIG_CPU_S5P6440
Ë|| deföed(
CONFIG_CPU_S5P6450
)

457 
ßmsung_gpio_cfg
 
	gs5p64x0_gpio_cfg_rb™k
 = {

458 .
cfg_eöt
 = 0x3,

459 .
	g£t_c⁄fig
 = 
s5p64x0_gpio_£tcfg_rb™k
,

460 .
	ggë_c⁄fig
 = 
ßmsung_gpio_gëcfg_4bô
,

461 .
	g£t_puŒ
 = 
ßmsung_gpio_£çuŒ_updown
,

462 .
	ggë_puŒ
 = 
ßmsung_gpio_gëpuŒ_updown
,

466 
ßmsung_gpio_cfg
 
	gßmsung_gpio_cfgs
[] = {

468 .
cfg_eöt
 = 0x0,

471 .
cfg_eöt
 = 0x3,

474 .
cfg_eöt
 = 0x7,

477 .
cfg_eöt
 = 0xF,

480 .
cfg_eöt
 = 0x0,

481 .
	g£t_c⁄fig
 = 
ßmsung_gpio_£tcfg_2bô
,

482 .
	ggë_c⁄fig
 = 
ßmsung_gpio_gëcfg_2bô
,

485 .
cfg_eöt
 = 0x2,

486 .
	g£t_c⁄fig
 = 
ßmsung_gpio_£tcfg_2bô
,

487 .
	ggë_c⁄fig
 = 
ßmsung_gpio_gëcfg_2bô
,

490 .
cfg_eöt
 = 0x3,

491 .
	g£t_c⁄fig
 = 
ßmsung_gpio_£tcfg_2bô
,

492 .
	ggë_c⁄fig
 = 
ßmsung_gpio_gëcfg_2bô
,

495 .
£t_c⁄fig
 = 
ßmsung_gpio_£tcfg_2bô
,

496 .
	ggë_c⁄fig
 = 
ßmsung_gpio_gëcfg_2bô
,

499 .
£t_puŒ
 = 
exynos_gpio_£çuŒ
,

500 .
	ggë_puŒ
 = 
exynos_gpio_gëpuŒ
,

503 .
cfg_eöt
 = 0x3,

504 .
	g£t_puŒ
 = 
exynos_gpio_£çuŒ
,

505 .
	ggë_puŒ
 = 
exynos_gpio_gëpuŒ
,

521 
	$ßmsung_gpiﬁib_2bô_öput
(
gpio_chù
 *
chù
, 
off£t
)

523 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

524 
__iomem
 *
ba£
 = 
ourchù
->base;

525 
Êags
;

526 
c⁄
;

528 
	`ßmsung_gpio_lock
(
ourchù
, 
Êags
);

530 
c⁄
 = 
	`__øw_ªadl
(
ba£
 + 0x00);

531 
c⁄
 &~(3 << (
off£t
 * 2));

533 
	`__øw_wrôñ
(
c⁄
, 
ba£
 + 0x00);

535 
	`ßmsung_gpio_u∆ock
(
ourchù
, 
Êags
);

537 
	}
}

539 
	$ßmsung_gpiﬁib_2bô_ouçut
(
gpio_chù
 *
chù
,

540 
off£t
, 
vÆue
)

542 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

543 
__iomem
 *
ba£
 = 
ourchù
->base;

544 
Êags
;

545 
d©
;

546 
c⁄
;

548 
	`ßmsung_gpio_lock
(
ourchù
, 
Êags
);

550 
d©
 = 
	`__øw_ªadl
(
ba£
 + 0x04);

551 
d©
 &~(1 << 
off£t
);

552 i‡(
vÆue
)

553 
d©
 |1 << 
off£t
;

554 
	`__øw_wrôñ
(
d©
, 
ba£
 + 0x04);

556 
c⁄
 = 
	`__øw_ªadl
(
ba£
 + 0x00);

557 
c⁄
 &~(3 << (
off£t
 * 2));

558 
c⁄
 |1 << (
off£t
 * 2);

560 
	`__øw_wrôñ
(
c⁄
, 
ba£
 + 0x00);

561 
	`__øw_wrôñ
(
d©
, 
ba£
 + 0x04);

563 
	`ßmsung_gpio_u∆ock
(
ourchù
, 
Êags
);

565 
	}
}

583 
	$ßmsung_gpiﬁib_4bô_öput
(
gpio_chù
 *
chù
,

584 
off£t
)

586 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

587 
__iomem
 *
ba£
 = 
ourchù
->base;

588 
c⁄
;

590 
c⁄
 = 
	`__øw_ªadl
(
ba£
 + 
GPIOCON_OFF
);

591 i‡(
ourchù
->
bôm≠_gpio_öt
 & 
	`BIT
(
off£t
))

592 
c⁄
 |0x‡<< 
	`c⁄_4bô_shi·
(
off£t
);

594 
c⁄
 &~(0x‡<< 
	`c⁄_4bô_shi·
(
off£t
));

595 
	`__øw_wrôñ
(
c⁄
, 
ba£
 + 
GPIOCON_OFF
);

597 
	`¥_debug
("%s: %p: CONÇow %08lx\n", 
__func__
, 
ba£
, 
c⁄
);

600 
	}
}

602 
	$ßmsung_gpiﬁib_4bô_ouçut
(
gpio_chù
 *
chù
,

603 
off£t
, 
vÆue
)

605 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

606 
__iomem
 *
ba£
 = 
ourchù
->base;

607 
c⁄
;

608 
d©
;

610 
c⁄
 = 
	`__øw_ªadl
(
ba£
 + 
GPIOCON_OFF
);

611 
c⁄
 &~(0x‡<< 
	`c⁄_4bô_shi·
(
off£t
));

612 
c⁄
 |0x1 << 
	`c⁄_4bô_shi·
(
off£t
);

614 
d©
 = 
	`__øw_ªadl
(
ba£
 + 
GPIODAT_OFF
);

616 i‡(
vÆue
)

617 
d©
 |1 << 
off£t
;

619 
d©
 &~(1 << 
off£t
);

621 
	`__øw_wrôñ
(
d©
, 
ba£
 + 
GPIODAT_OFF
);

622 
	`__øw_wrôñ
(
c⁄
, 
ba£
 + 
GPIOCON_OFF
);

623 
	`__øw_wrôñ
(
d©
, 
ba£
 + 
GPIODAT_OFF
);

625 
	`¥_debug
("%s: %p: CON %08lx, DAT %08lx\n", 
__func__
, 
ba£
, 
c⁄
, 
d©
);

628 
	}
}

652 
	$ßmsung_gpiﬁib_4bô2_öput
(
gpio_chù
 *
chù
,

653 
off£t
)

655 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

656 
__iomem
 *
ba£
 = 
ourchù
->base;

657 
__iomem
 *
ªgc⁄
 = 
ba£
;

658 
c⁄
;

660 i‡(
off£t
 > 7)

661 
off£t
 -= 8;

663 
ªgc⁄
 -= 4;

665 
c⁄
 = 
	`__øw_ªadl
(
ªgc⁄
);

666 
c⁄
 &~(0x‡<< 
	`c⁄_4bô_shi·
(
off£t
));

667 
	`__øw_wrôñ
(
c⁄
, 
ªgc⁄
);

669 
	`¥_debug
("%s: %p: CON %08lx\n", 
__func__
, 
ba£
, 
c⁄
);

672 
	}
}

674 
	$ßmsung_gpiﬁib_4bô2_ouçut
(
gpio_chù
 *
chù
,

675 
off£t
, 
vÆue
)

677 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

678 
__iomem
 *
ba£
 = 
ourchù
->base;

679 
__iomem
 *
ªgc⁄
 = 
ba£
;

680 
c⁄
;

681 
d©
;

682 
c⁄_off£t
 = 
off£t
;

684 i‡(
c⁄_off£t
 > 7)

685 
c⁄_off£t
 -= 8;

687 
ªgc⁄
 -= 4;

689 
c⁄
 = 
	`__øw_ªadl
(
ªgc⁄
);

690 
c⁄
 &~(0x‡<< 
	`c⁄_4bô_shi·
(
c⁄_off£t
));

691 
c⁄
 |0x1 << 
	`c⁄_4bô_shi·
(
c⁄_off£t
);

693 
d©
 = 
	`__øw_ªadl
(
ba£
 + 
GPIODAT_OFF
);

695 i‡(
vÆue
)

696 
d©
 |1 << 
off£t
;

698 
d©
 &~(1 << 
off£t
);

700 
	`__øw_wrôñ
(
d©
, 
ba£
 + 
GPIODAT_OFF
);

701 
	`__øw_wrôñ
(
c⁄
, 
ªgc⁄
);

702 
	`__øw_wrôñ
(
d©
, 
ba£
 + 
GPIODAT_OFF
);

704 
	`¥_debug
("%s: %p: CON %08lx, DAT %08lx\n", 
__func__
, 
ba£
, 
c⁄
, 
d©
);

707 
	}
}

709 #ifde‡
CONFIG_PLAT_S3C24XX


712 
	$s3c24xx_gpiﬁib_b™ka_öput
(
gpio_chù
 *
chù
, 
off£t
)

714  -
EINVAL
;

715 
	}
}

717 
	$s3c24xx_gpiﬁib_b™ka_ouçut
(
gpio_chù
 *
chù
,

718 
off£t
, 
vÆue
)

720 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

721 
__iomem
 *
ba£
 = 
ourchù
->base;

722 
Êags
;

723 
d©
;

724 
c⁄
;

726 
	`loˇl_úq_ßve
(
Êags
);

728 
c⁄
 = 
	`__øw_ªadl
(
ba£
 + 0x00);

729 
d©
 = 
	`__øw_ªadl
(
ba£
 + 0x04);

731 
d©
 &~(1 << 
off£t
);

732 i‡(
vÆue
)

733 
d©
 |1 << 
off£t
;

735 
	`__øw_wrôñ
(
d©
, 
ba£
 + 0x04);

737 
c⁄
 &~(1 << 
off£t
);

739 
	`__øw_wrôñ
(
c⁄
, 
ba£
 + 0x00);

740 
	`__øw_wrôñ
(
d©
, 
ba£
 + 0x04);

742 
	`loˇl_úq_ª°‹e
(
Êags
);

744 
	}
}

749 
	$s5p64x0_gpiﬁib_rb™k_öput
(
gpio_chù
 *
chù
,

750 
off£t
)

752 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

753 
__iomem
 *
ba£
 = 
ourchù
->base;

754 
__iomem
 *
ªgc⁄
 = 
ba£
;

755 
c⁄
;

756 
Êags
;

758 
off£t
) {

760 
off£t
 += 1;

767 
ªgc⁄
 -= 4;

770 
off£t
 -= 7;

774 
	`ßmsung_gpio_lock
(
ourchù
, 
Êags
);

776 
c⁄
 = 
	`__øw_ªadl
(
ªgc⁄
);

777 
c⁄
 &~(0x‡<< 
	`c⁄_4bô_shi·
(
off£t
));

778 
	`__øw_wrôñ
(
c⁄
, 
ªgc⁄
);

780 
	`ßmsung_gpio_u∆ock
(
ourchù
, 
Êags
);

783 
	}
}

785 
	$s5p64x0_gpiﬁib_rb™k_ouçut
(
gpio_chù
 *
chù
,

786 
off£t
, 
vÆue
)

788 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

789 
__iomem
 *
ba£
 = 
ourchù
->base;

790 
__iomem
 *
ªgc⁄
 = 
ba£
;

791 
c⁄
;

792 
d©
;

793 
Êags
;

794 
c⁄_off£t
 = 
off£t
;

796 
c⁄_off£t
) {

798 
c⁄_off£t
 += 1;

805 
ªgc⁄
 -= 4;

808 
c⁄_off£t
 -= 7;

812 
	`ßmsung_gpio_lock
(
ourchù
, 
Êags
);

814 
c⁄
 = 
	`__øw_ªadl
(
ªgc⁄
);

815 
c⁄
 &~(0x‡<< 
	`c⁄_4bô_shi·
(
c⁄_off£t
));

816 
c⁄
 |0x1 << 
	`c⁄_4bô_shi·
(
c⁄_off£t
);

818 
d©
 = 
	`__øw_ªadl
(
ba£
 + 
GPIODAT_OFF
);

819 i‡(
vÆue
)

820 
d©
 |1 << 
off£t
;

822 
d©
 &~(1 << 
off£t
);

824 
	`__øw_wrôñ
(
c⁄
, 
ªgc⁄
);

825 
	`__øw_wrôñ
(
d©
, 
ba£
 + 
GPIODAT_OFF
);

827 
	`ßmsung_gpio_u∆ock
(
ourchù
, 
Êags
);

830 
	}
}

832 
	$ßmsung_gpiﬁib_£t
(
gpio_chù
 *
chù
,

833 
off£t
, 
vÆue
)

835 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

836 
__iomem
 *
ba£
 = 
ourchù
->base;

837 
Êags
;

838 
d©
;

840 
	`ßmsung_gpio_lock
(
ourchù
, 
Êags
);

842 
d©
 = 
	`__øw_ªadl
(
ba£
 + 0x04);

843 
d©
 &~(1 << 
off£t
);

844 i‡(
vÆue
)

845 
d©
 |1 << 
off£t
;

846 
	`__øw_wrôñ
(
d©
, 
ba£
 + 0x04);

848 
	`ßmsung_gpio_u∆ock
(
ourchù
, 
Êags
);

849 
	}
}

851 
	$ßmsung_gpiﬁib_gë
(
gpio_chù
 *
chù
, 
off£t
)

853 
ßmsung_gpio_chù
 *
ourchù
 = 
	`to_ßmsung_gpio
(
chù
);

854 
vÆ
;

856 
vÆ
 = 
	`__øw_ªadl
(
ourchù
->
ba£
 + 0x04);

857 
vÆ
 >>
off£t
;

858 
vÆ
 &= 1;

860  
vÆ
;

861 
	}
}

875 #ifde‡
CONFIG_S3C_GPIO_TRACK


876 
ßmsung_gpio_chù
 *
	gs3c_gpios
[
S3C_GPIO_END
];

878 
__öô
 
	$s3c_gpiﬁib_åack
(
ßmsung_gpio_chù
 *
chù
)

880 
g≤
;

881 
i
;

883 
g≤
 = 
chù
->chù.
ba£
;

884 
i
 = 0; i < 
chù
->chù.
ngpio
; i++, 
g≤
++) {

885 
	`BUG_ON
(
g≤
 >
	`ARRAY_SIZE
(
s3c_gpios
));

886 
s3c_gpios
[
g≤
] = 
chù
;

888 
	}
}

901 
__öô
 
	$ßmsung_gpiﬁib_add
(
ßmsung_gpio_chù
 *
chù
)

903 
gpio_chù
 *
gc
 = &
chù
->chip;

904 
ªt
;

906 
	`BUG_ON
(!
chù
->
ba£
);

907 
	`BUG_ON
(!
gc
->
œbñ
);

908 
	`BUG_ON
(!
gc
->
ngpio
);

910 
	`•ö_lock_öô
(&
chù
->
lock
);

912 i‡(!
gc
->
dúe˘i⁄_öput
)

913 
gc
->
dúe˘i⁄_öput
 = 
ßmsung_gpiﬁib_2bô_öput
;

914 i‡(!
gc
->
dúe˘i⁄_ouçut
)

915 
gc
->
dúe˘i⁄_ouçut
 = 
ßmsung_gpiﬁib_2bô_ouçut
;

916 i‡(!
gc
->
£t
)

917 
gc
->
£t
 = 
ßmsung_gpiﬁib_£t
;

918 i‡(!
gc
->
gë
)

919 
gc
->
gë
 = 
ßmsung_gpiﬁib_gë
;

921 #ifde‡
CONFIG_PM


922 i‡(
chù
->
pm
 !
NULL
) {

923 i‡(!
chù
->
pm
->
ßve
 || !chù->pm->
ªsume
)

924 
	`¥_îr
("gpio: %s has missing PM functions\n",

925 
gc
->
œbñ
);

927 
	`¥_îr
("gpio: %†ha†nÿPM fun˘i⁄\n", 
gc
->
œbñ
);

931 
ªt
 = 
	`gpiochù_add
(
gc
);

932 i‡(
ªt
 >= 0)

933 
	`s3c_gpiﬁib_åack
(
chù
);

934 
	}
}

936 #i‡
deföed
(
CONFIG_PLAT_S3C24XX
Ë&& deföed(
CONFIG_OF
)

937 
	$s3c24xx_gpio_xœã
(
gpio_chù
 *
gc
,

938 c⁄° 
of_ph™dÀ_¨gs
 *
gpio•ec
, 
u32
 *
Êags
)

940 
pö
;

942 i‡(
	`WARN_ON
(
gc
->
of_gpio_n_˚Œs
 < 3))

943  -
EINVAL
;

945 i‡(
	`WARN_ON
(
gpio•ec
->
¨gs_cou¡
 < 
gc
->
of_gpio_n_˚Œs
))

946  -
EINVAL
;

948 i‡(
gpio•ec
->
¨gs
[0] > 
gc
->
ngpio
)

949  -
EINVAL
;

951 
pö
 = 
gc
->
ba£
 + 
gpio•ec
->
¨gs
[0];

953 i‡(
	`s3c_gpio_cfgpö
(
pö
, 
	`S3C_GPIO_SFN
(
gpio•ec
->
¨gs
[1])))

954 
	`¥_w¨n
("gpio_xlate: failedÅo setÖin function\n");

955 i‡(
	`s3c_gpio_£çuŒ
(
pö
, 
gpio•ec
->
¨gs
[2] & 0xffff))

956 
	`¥_w¨n
("gpio_xlate: failedÅo setÖinÖull up/down\n");

958 i‡(
Êags
)

959 *
Êags
 = 
gpio•ec
->
¨gs
[2] >> 16;

961  
gpio•ec
->
¨gs
[0];

962 
	}
}

964 c⁄° 
of_devi˚_id
 
	gs3c24xx_gpio_dt_m©ch
[] 
	g__öôd©a
 = {

965 { .
com∑tibÀ
 = "samsung,s3c24xx-gpio", },

969 
__öô
 
	$s3c24xx_gpiﬁib_©èch_o‚ode
(
ßmsung_gpio_chù
 *
chù
,

970 
u64
 
ba£
, u64 
off£t
)

972 
gpio_chù
 *
gc
 = &
chù
->chip;

973 
u64
 
addªss
;

975 i‡(!
	`of_have_p›uœãd_dt
())

978 
addªss
 = 
chù
->
ba£
 ? ba£ + ((
u32
)chù->ba£ & 0xfffË: ba£ + 
off£t
;

979 
gc
->
of_node
 = 
	`of_föd_m©chög_node_by_addªss
(
NULL
,

980 
s3c24xx_gpio_dt_m©ch
, 
addªss
);

981 i‡(!
gc
->
of_node
) {

982 
	`¥_öfo
("gpio: deviceÅreeÇodeÇot found for gpio controller"

983 " wôh ba£áddªs†%08Œx\n", 
addªss
);

986 
gc
->
of_gpio_n_˚Œs
 = 3;

987 
gc
->
of_xœã
 = 
s3c24xx_gpio_xœã
;

988 
	}
}

990 
__öô
 
	$s3c24xx_gpiﬁib_©èch_o‚ode
(
ßmsung_gpio_chù
 *
chù
,

991 
u64
 
ba£
, u64 
off£t
)

994 
	}
}

997 
__öô
 
	$s3c24xx_gpiﬁib_add_chùs
(
ßmsung_gpio_chù
 *
chù
,

998 
ƒ_chùs
, 
__iomem
 *
ba£
)

1000 
i
;

1001 
gpio_chù
 *
gc
 = &
chù
->chip;

1003 
i
 = 0 ; i < 
ƒ_chùs
; i++, 
chù
++) {

1005 i‡(
chù
->chù.
ba£
 >
S3C_GPIO_END
)

1008 i‡(!
chù
->
c⁄fig
)

1009 
chù
->
c⁄fig
 = &
s3c24xx_gpiocfg_deÁu…
;

1010 i‡(!
chù
->
pm
)

1011 
chù
->
pm
 = 
	`__gpio_pm
(&
ßmsung_gpio_pm_2bô
);

1012 i‡((
ba£
 !
NULL
Ë&& (
chù
->base == NULL))

1013 
chù
->
ba£
 = ba£ + ((
i
) * 0x10);

1015 i‡(!
gc
->
dúe˘i⁄_öput
)

1016 
gc
->
dúe˘i⁄_öput
 = 
ßmsung_gpiﬁib_2bô_öput
;

1017 i‡(!
gc
->
dúe˘i⁄_ouçut
)

1018 
gc
->
dúe˘i⁄_ouçut
 = 
ßmsung_gpiﬁib_2bô_ouçut
;

1020 
	`ßmsung_gpiﬁib_add
(
chù
);

1022 
	`s3c24xx_gpiﬁib_©èch_o‚ode
(
chù
, 
S3C24XX_PA_GPIO
, 
i
 * 0x10);

1024 
	}
}

1026 
__öô
 
	$ßmsung_gpiﬁib_add_2bô_chùs
(
ßmsung_gpio_chù
 *
chù
,

1027 
ƒ_chùs
, 
__iomem
 *
ba£
,

1028 
off£t
)

1030 
i
;

1032 
i
 = 0 ; i < 
ƒ_chùs
; i++, 
chù
++) {

1033 
chù
->chù.
dúe˘i⁄_öput
 = 
ßmsung_gpiﬁib_2bô_öput
;

1034 
chù
->chù.
dúe˘i⁄_ouçut
 = 
ßmsung_gpiﬁib_2bô_ouçut
;

1036 i‡(!
chù
->
c⁄fig
)

1037 
chù
->
c⁄fig
 = &
ßmsung_gpio_cfgs
[7];

1038 i‡(!
chù
->
pm
)

1039 
chù
->
pm
 = 
	`__gpio_pm
(&
ßmsung_gpio_pm_2bô
);

1040 i‡((
ba£
 !
NULL
Ë&& (
chù
->base == NULL))

1041 
chù
->
ba£
 = ba£ + ((
i
Ë* 
off£t
);

1043 
	`ßmsung_gpiﬁib_add
(
chù
);

1045 
	}
}

1063 
__öô
 
	$ßmsung_gpiﬁib_add_4bô_chùs
(
ßmsung_gpio_chù
 *
chù
,

1064 
ƒ_chùs
, 
__iomem
 *
ba£
)

1066 
i
;

1068 
i
 = 0 ; i < 
ƒ_chùs
; i++, 
chù
++) {

1069 
chù
->chù.
dúe˘i⁄_öput
 = 
ßmsung_gpiﬁib_4bô_öput
;

1070 
chù
->chù.
dúe˘i⁄_ouçut
 = 
ßmsung_gpiﬁib_4bô_ouçut
;

1072 i‡(!
chù
->
c⁄fig
)

1073 
chù
->
c⁄fig
 = &
ßmsung_gpio_cfgs
[2];

1074 i‡(!
chù
->
pm
)

1075 
chù
->
pm
 = 
	`__gpio_pm
(&
ßmsung_gpio_pm_4bô
);

1076 i‡((
ba£
 !
NULL
Ë&& (
chù
->base == NULL))

1077 
chù
->
ba£
 = ba£ + ((
i
) * 0x20);

1079 
chù
->
bôm≠_gpio_öt
 = 0;

1081 
	`ßmsung_gpiﬁib_add
(
chù
);

1083 
	}
}

1085 
__öô
 
	$ßmsung_gpiﬁib_add_4bô2_chùs
(
ßmsung_gpio_chù
 *
chù
,

1086 
ƒ_chùs
)

1088 ; 
ƒ_chùs
 > 0;Çr_chùs--, 
chù
++) {

1089 
chù
->chù.
dúe˘i⁄_öput
 = 
ßmsung_gpiﬁib_4bô2_öput
;

1090 
chù
->chù.
dúe˘i⁄_ouçut
 = 
ßmsung_gpiﬁib_4bô2_ouçut
;

1092 i‡(!
chù
->
c⁄fig
)

1093 
chù
->
c⁄fig
 = &
ßmsung_gpio_cfgs
[2];

1094 i‡(!
chù
->
pm
)

1095 
chù
->
pm
 = 
	`__gpio_pm
(&
ßmsung_gpio_pm_4bô
);

1097 
	`ßmsung_gpiﬁib_add
(
chù
);

1099 
	}
}

1101 
__öô
 
	$s5p64x0_gpiﬁib_add_rb™k
(
ßmsung_gpio_chù
 *
chù
,

1102 
ƒ_chùs
)

1104 ; 
ƒ_chùs
 > 0;Çr_chùs--, 
chù
++) {

1105 
chù
->chù.
dúe˘i⁄_öput
 = 
s5p64x0_gpiﬁib_rb™k_öput
;

1106 
chù
->chù.
dúe˘i⁄_ouçut
 = 
s5p64x0_gpiﬁib_rb™k_ouçut
;

1108 i‡(!
chù
->
pm
)

1109 
chù
->
pm
 = 
	`__gpio_pm
(&
ßmsung_gpio_pm_4bô
);

1111 
	`ßmsung_gpiﬁib_add
(
chù
);

1113 
	}
}

1115 
	$ßmsung_gpiﬁib_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

1117 
ßmsung_gpio_chù
 *
ßmsung_chù
 = 
	`c⁄èöî_of
(
chù
, samsung_gpio_chip, chip);

1119  
ßmsung_chù
->
úq_ba£
 + 
off£t
;

1120 
	}
}

1122 #ifde‡
CONFIG_PLAT_S3C24XX


1123 
	$s3c24xx_gpiﬁib_fb™k_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

1125 i‡(
off£t
 < 4) {

1126 i‡(
	`soc_is_s3c2412
())

1127  
IRQ_EINT0_2412
 + 
off£t
;

1129  
IRQ_EINT0
 + 
off£t
;

1132 i‡(
off£t
 < 8)

1133  
IRQ_EINT4
 + 
off£t
 - 4;

1135  -
EINVAL
;

1136 
	}
}

1139 #ifde‡
CONFIG_PLAT_S3C64XX


1140 
	$s3c64xx_gpiﬁib_mb™k_to_úq
(
gpio_chù
 *
chù
, 
pö
)

1142  
pö
 < 5 ? 
	`IRQ_EINT
(23Ë+Öö : -
ENXIO
;

1143 
	}
}

1145 
	$s3c64xx_gpiﬁib_lb™k_to_úq
(
gpio_chù
 *
chù
, 
pö
)

1147  
pö
 >8 ? 
	`IRQ_EINT
(16Ë+Öö - 8 : -
ENXIO
;

1148 
	}
}

1151 
ßmsung_gpio_chù
 
	gs3c24xx_gpios
[] = {

1152 #ifde‡
CONFIG_PLAT_S3C24XX


1154 .
c⁄fig
 = &
s3c24xx_gpiocfg_b™ka
,

1155 .
	gchù
 = {

1156 .
ba£
 = 
S3C2410_GPA
(0),

1157 .
	gow√r
 = 
THIS_MODULE
,

1158 .
	gœbñ
 = "GPIOA",

1159 .
	gngpio
 = 24,

1160 .
	gdúe˘i⁄_öput
 = 
s3c24xx_gpiﬁib_b™ka_öput
,

1161 .
	gdúe˘i⁄_ouçut
 = 
s3c24xx_gpiﬁib_b™ka_ouçut
,

1164 .
	gchù
 = {

1165 .
ba£
 = 
S3C2410_GPB
(0),

1166 .
	gow√r
 = 
THIS_MODULE
,

1167 .
	gœbñ
 = "GPIOB",

1168 .
	gngpio
 = 16,

1171 .
	gchù
 = {

1172 .
ba£
 = 
S3C2410_GPC
(0),

1173 .
	gow√r
 = 
THIS_MODULE
,

1174 .
	gœbñ
 = "GPIOC",

1175 .
	gngpio
 = 16,

1178 .
	gchù
 = {

1179 .
ba£
 = 
S3C2410_GPD
(0),

1180 .
	gow√r
 = 
THIS_MODULE
,

1181 .
	gœbñ
 = "GPIOD",

1182 .
	gngpio
 = 16,

1185 .
	gchù
 = {

1186 .
ba£
 = 
S3C2410_GPE
(0),

1187 .
	gœbñ
 = "GPIOE",

1188 .
	gow√r
 = 
THIS_MODULE
,

1189 .
	gngpio
 = 16,

1192 .
	gchù
 = {

1193 .
ba£
 = 
S3C2410_GPF
(0),

1194 .
	gow√r
 = 
THIS_MODULE
,

1195 .
	gœbñ
 = "GPIOF",

1196 .
	gngpio
 = 8,

1197 .
	gto_úq
 = 
s3c24xx_gpiﬁib_fb™k_to_úq
,

1200 .
	gúq_ba£
 = 
IRQ_EINT8
,

1201 .
	gchù
 = {

1202 .
ba£
 = 
S3C2410_GPG
(0),

1203 .
	gow√r
 = 
THIS_MODULE
,

1204 .
	gœbñ
 = "GPIOG",

1205 .
	gngpio
 = 16,

1206 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

1209 .
	gchù
 = {

1210 .
ba£
 = 
S3C2410_GPH
(0),

1211 .
	gow√r
 = 
THIS_MODULE
,

1212 .
	gœbñ
 = "GPIOH",

1213 .
	gngpio
 = 11,

1218 .
	gba£
 = 
S3C2440_GPJCON
,

1219 .
	gchù
 = {

1220 .
ba£
 = 
S3C2410_GPJ
(0),

1221 .
	gow√r
 = 
THIS_MODULE
,

1222 .
	gœbñ
 = "GPIOJ",

1223 .
	gngpio
 = 16,

1226 .
	gba£
 = 
S3C2443_GPKCON
,

1227 .
	gchù
 = {

1228 .
ba£
 = 
S3C2410_GPK
(0),

1229 .
	gow√r
 = 
THIS_MODULE
,

1230 .
	gœbñ
 = "GPIOK",

1231 .
	gngpio
 = 16,

1234 .
	gba£
 = 
S3C2443_GPLCON
,

1235 .
	gchù
 = {

1236 .
ba£
 = 
S3C2410_GPL
(0),

1237 .
	gow√r
 = 
THIS_MODULE
,

1238 .
	gœbñ
 = "GPIOL",

1239 .
	gngpio
 = 15,

1242 .
	gba£
 = 
S3C2443_GPMCON
,

1243 .
	gchù
 = {

1244 .
ba£
 = 
S3C2410_GPM
(0),

1245 .
	gow√r
 = 
THIS_MODULE
,

1246 .
	gœbñ
 = "GPIOM",

1247 .
	gngpio
 = 2,

1279 
ßmsung_gpio_chù
 
	gs3c64xx_gpios_4bô
[] = {

1280 #ifde‡
CONFIG_PLAT_S3C64XX


1282 .
chù
 = {

1283 .
ba£
 = 
S3C64XX_GPA
(0),

1284 .
	gngpio
 = 
S3C64XX_GPIO_A_NR
,

1285 .
	gœbñ
 = "GPA",

1288 .
	gchù
 = {

1289 .
ba£
 = 
S3C64XX_GPB
(0),

1290 .
	gngpio
 = 
S3C64XX_GPIO_B_NR
,

1291 .
	gœbñ
 = "GPB",

1294 .
	gchù
 = {

1295 .
ba£
 = 
S3C64XX_GPC
(0),

1296 .
	gngpio
 = 
S3C64XX_GPIO_C_NR
,

1297 .
	gœbñ
 = "GPC",

1300 .
	gchù
 = {

1301 .
ba£
 = 
S3C64XX_GPD
(0),

1302 .
	gngpio
 = 
S3C64XX_GPIO_D_NR
,

1303 .
	gœbñ
 = "GPD",

1306 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[0],

1307 .
	gchù
 = {

1308 .
ba£
 = 
S3C64XX_GPE
(0),

1309 .
	gngpio
 = 
S3C64XX_GPIO_E_NR
,

1310 .
	gœbñ
 = "GPE",

1313 .
	gba£
 = 
S3C64XX_GPG_BASE
,

1314 .
	gchù
 = {

1315 .
ba£
 = 
S3C64XX_GPG
(0),

1316 .
	gngpio
 = 
S3C64XX_GPIO_G_NR
,

1317 .
	gœbñ
 = "GPG",

1320 .
	gba£
 = 
S3C64XX_GPM_BASE
,

1321 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[1],

1322 .
	gchù
 = {

1323 .
ba£
 = 
S3C64XX_GPM
(0),

1324 .
	gngpio
 = 
S3C64XX_GPIO_M_NR
,

1325 .
	gœbñ
 = "GPM",

1326 .
	gto_úq
 = 
s3c64xx_gpiﬁib_mb™k_to_úq
,

1332 
ßmsung_gpio_chù
 
	gs3c64xx_gpios_4bô2
[] = {

1333 #ifde‡
CONFIG_PLAT_S3C64XX


1335 .
ba£
 = 
S3C64XX_GPH_BASE
 + 0x4,

1336 .
	gchù
 = {

1337 .
ba£
 = 
S3C64XX_GPH
(0),

1338 .
	gngpio
 = 
S3C64XX_GPIO_H_NR
,

1339 .
	gœbñ
 = "GPH",

1342 .
	gba£
 = 
S3C64XX_GPK_BASE
 + 0x4,

1343 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[0],

1344 .
	gchù
 = {

1345 .
ba£
 = 
S3C64XX_GPK
(0),

1346 .
	gngpio
 = 
S3C64XX_GPIO_K_NR
,

1347 .
	gœbñ
 = "GPK",

1350 .
	gba£
 = 
S3C64XX_GPL_BASE
 + 0x4,

1351 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[1],

1352 .
	gchù
 = {

1353 .
ba£
 = 
S3C64XX_GPL
(0),

1354 .
	gngpio
 = 
S3C64XX_GPIO_L_NR
,

1355 .
	gœbñ
 = "GPL",

1356 .
	gto_úq
 = 
s3c64xx_gpiﬁib_lb™k_to_úq
,

1362 
ßmsung_gpio_chù
 
	gs3c64xx_gpios_2bô
[] = {

1363 #ifde‡
CONFIG_PLAT_S3C64XX


1365 .
ba£
 = 
S3C64XX_GPF_BASE
,

1366 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[6],

1367 .
	gchù
 = {

1368 .
ba£
 = 
S3C64XX_GPF
(0),

1369 .
	gngpio
 = 
S3C64XX_GPIO_F_NR
,

1370 .
	gœbñ
 = "GPF",

1373 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[7],

1374 .
	gchù
 = {

1375 .
ba£
 = 
S3C64XX_GPI
(0),

1376 .
	gngpio
 = 
S3C64XX_GPIO_I_NR
,

1377 .
	gœbñ
 = "GPI",

1380 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[7],

1381 .
	gchù
 = {

1382 .
ba£
 = 
S3C64XX_GPJ
(0),

1383 .
	gngpio
 = 
S3C64XX_GPIO_J_NR
,

1384 .
	gœbñ
 = "GPJ",

1387 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[6],

1388 .
	gchù
 = {

1389 .
ba£
 = 
S3C64XX_GPO
(0),

1390 .
	gngpio
 = 
S3C64XX_GPIO_O_NR
,

1391 .
	gœbñ
 = "GPO",

1394 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[6],

1395 .
	gchù
 = {

1396 .
ba£
 = 
S3C64XX_GPP
(0),

1397 .
	gngpio
 = 
S3C64XX_GPIO_P_NR
,

1398 .
	gœbñ
 = "GPP",

1401 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[6],

1402 .
	gchù
 = {

1403 .
ba£
 = 
S3C64XX_GPQ
(0),

1404 .
	gngpio
 = 
S3C64XX_GPIO_Q_NR
,

1405 .
	gœbñ
 = "GPQ",

1408 .
	gba£
 = 
S3C64XX_GPN_BASE
,

1409 .
	gúq_ba£
 = 
IRQ_EINT
(0),

1410 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[5],

1411 .
	gchù
 = {

1412 .
ba£
 = 
S3C64XX_GPN
(0),

1413 .
	gngpio
 = 
S3C64XX_GPIO_N_NR
,

1414 .
	gœbñ
 = "GPN",

1415 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

1438 
ßmsung_gpio_chù
 
	gs5p6440_gpios_4bô
[] = {

1439 #ifde‡
CONFIG_CPU_S5P6440


1441 .
chù
 = {

1442 .
ba£
 = 
S5P6440_GPA
(0),

1443 .
	gngpio
 = 
S5P6440_GPIO_A_NR
,

1444 .
	gœbñ
 = "GPA",

1447 .
	gchù
 = {

1448 .
ba£
 = 
S5P6440_GPB
(0),

1449 .
	gngpio
 = 
S5P6440_GPIO_B_NR
,

1450 .
	gœbñ
 = "GPB",

1453 .
	gchù
 = {

1454 .
ba£
 = 
S5P6440_GPC
(0),

1455 .
	gngpio
 = 
S5P6440_GPIO_C_NR
,

1456 .
	gœbñ
 = "GPC",

1459 .
	gba£
 = 
S5P64X0_GPG_BASE
,

1460 .
	gchù
 = {

1461 .
ba£
 = 
S5P6440_GPG
(0),

1462 .
	gngpio
 = 
S5P6440_GPIO_G_NR
,

1463 .
	gœbñ
 = "GPG",

1469 
ßmsung_gpio_chù
 
	gs5p6440_gpios_4bô2
[] = {

1470 #ifde‡
CONFIG_CPU_S5P6440


1472 .
ba£
 = 
S5P64X0_GPH_BASE
 + 0x4,

1473 .
	gchù
 = {

1474 .
ba£
 = 
S5P6440_GPH
(0),

1475 .
	gngpio
 = 
S5P6440_GPIO_H_NR
,

1476 .
	gœbñ
 = "GPH",

1482 
ßmsung_gpio_chù
 
	gs5p6440_gpios_rb™k
[] = {

1483 #ifde‡
CONFIG_CPU_S5P6440


1485 .
ba£
 = 
S5P64X0_GPR_BASE
 + 0x4,

1486 .
	gc⁄fig
 = &
s5p64x0_gpio_cfg_rb™k
,

1487 .
	gchù
 = {

1488 .
ba£
 = 
S5P6440_GPR
(0),

1489 .
	gngpio
 = 
S5P6440_GPIO_R_NR
,

1490 .
	gœbñ
 = "GPR",

1496 
ßmsung_gpio_chù
 
	gs5p6440_gpios_2bô
[] = {

1497 #ifde‡
CONFIG_CPU_S5P6440


1499 .
ba£
 = 
S5P64X0_GPF_BASE
,

1500 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[6],

1501 .
	gchù
 = {

1502 .
ba£
 = 
S5P6440_GPF
(0),

1503 .
	gngpio
 = 
S5P6440_GPIO_F_NR
,

1504 .
	gœbñ
 = "GPF",

1507 .
	gba£
 = 
S5P64X0_GPI_BASE
,

1508 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[4],

1509 .
	gchù
 = {

1510 .
ba£
 = 
S5P6440_GPI
(0),

1511 .
	gngpio
 = 
S5P6440_GPIO_I_NR
,

1512 .
	gœbñ
 = "GPI",

1515 .
	gba£
 = 
S5P64X0_GPJ_BASE
,

1516 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[4],

1517 .
	gchù
 = {

1518 .
ba£
 = 
S5P6440_GPJ
(0),

1519 .
	gngpio
 = 
S5P6440_GPIO_J_NR
,

1520 .
	gœbñ
 = "GPJ",

1523 .
	gba£
 = 
S5P64X0_GPN_BASE
,

1524 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[5],

1525 .
	gchù
 = {

1526 .
ba£
 = 
S5P6440_GPN
(0),

1527 .
	gngpio
 = 
S5P6440_GPIO_N_NR
,

1528 .
	gœbñ
 = "GPN",

1531 .
	gba£
 = 
S5P64X0_GPP_BASE
,

1532 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[6],

1533 .
	gchù
 = {

1534 .
ba£
 = 
S5P6440_GPP
(0),

1535 .
	gngpio
 = 
S5P6440_GPIO_P_NR
,

1536 .
	gœbñ
 = "GPP",

1566 
ßmsung_gpio_chù
 
	gs5p6450_gpios_4bô
[] = {

1567 #ifde‡
CONFIG_CPU_S5P6450


1569 .
chù
 = {

1570 .
ba£
 = 
S5P6450_GPA
(0),

1571 .
	gngpio
 = 
S5P6450_GPIO_A_NR
,

1572 .
	gœbñ
 = "GPA",

1575 .
	gchù
 = {

1576 .
ba£
 = 
S5P6450_GPB
(0),

1577 .
	gngpio
 = 
S5P6450_GPIO_B_NR
,

1578 .
	gœbñ
 = "GPB",

1581 .
	gchù
 = {

1582 .
ba£
 = 
S5P6450_GPC
(0),

1583 .
	gngpio
 = 
S5P6450_GPIO_C_NR
,

1584 .
	gœbñ
 = "GPC",

1587 .
	gchù
 = {

1588 .
ba£
 = 
S5P6450_GPD
(0),

1589 .
	gngpio
 = 
S5P6450_GPIO_D_NR
,

1590 .
	gœbñ
 = "GPD",

1593 .
	gba£
 = 
S5P6450_GPK_BASE
,

1594 .
	gchù
 = {

1595 .
ba£
 = 
S5P6450_GPK
(0),

1596 .
	gngpio
 = 
S5P6450_GPIO_K_NR
,

1597 .
	gœbñ
 = "GPK",

1603 
ßmsung_gpio_chù
 
	gs5p6450_gpios_4bô2
[] = {

1604 #ifde‡
CONFIG_CPU_S5P6450


1606 .
ba£
 = 
S5P64X0_GPG_BASE
 + 0x4,

1607 .
	gchù
 = {

1608 .
ba£
 = 
S5P6450_GPG
(0),

1609 .
	gngpio
 = 
S5P6450_GPIO_G_NR
,

1610 .
	gœbñ
 = "GPG",

1613 .
	gba£
 = 
S5P64X0_GPH_BASE
 + 0x4,

1614 .
	gchù
 = {

1615 .
ba£
 = 
S5P6450_GPH
(0),

1616 .
	gngpio
 = 
S5P6450_GPIO_H_NR
,

1617 .
	gœbñ
 = "GPH",

1623 
ßmsung_gpio_chù
 
	gs5p6450_gpios_rb™k
[] = {

1624 #ifde‡
CONFIG_CPU_S5P6450


1626 .
ba£
 = 
S5P64X0_GPR_BASE
 + 0x4,

1627 .
	gc⁄fig
 = &
s5p64x0_gpio_cfg_rb™k
,

1628 .
	gchù
 = {

1629 .
ba£
 = 
S5P6450_GPR
(0),

1630 .
	gngpio
 = 
S5P6450_GPIO_R_NR
,

1631 .
	gœbñ
 = "GPR",

1637 
ßmsung_gpio_chù
 
	gs5p6450_gpios_2bô
[] = {

1638 #ifde‡
CONFIG_CPU_S5P6450


1640 .
ba£
 = 
S5P64X0_GPF_BASE
,

1641 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[6],

1642 .
	gchù
 = {

1643 .
ba£
 = 
S5P6450_GPF
(0),

1644 .
	gngpio
 = 
S5P6450_GPIO_F_NR
,

1645 .
	gœbñ
 = "GPF",

1648 .
	gba£
 = 
S5P64X0_GPI_BASE
,

1649 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[4],

1650 .
	gchù
 = {

1651 .
ba£
 = 
S5P6450_GPI
(0),

1652 .
	gngpio
 = 
S5P6450_GPIO_I_NR
,

1653 .
	gœbñ
 = "GPI",

1656 .
	gba£
 = 
S5P64X0_GPJ_BASE
,

1657 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[4],

1658 .
	gchù
 = {

1659 .
ba£
 = 
S5P6450_GPJ
(0),

1660 .
	gngpio
 = 
S5P6450_GPIO_J_NR
,

1661 .
	gœbñ
 = "GPJ",

1664 .
	gba£
 = 
S5P64X0_GPN_BASE
,

1665 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[5],

1666 .
	gchù
 = {

1667 .
ba£
 = 
S5P6450_GPN
(0),

1668 .
	gngpio
 = 
S5P6450_GPIO_N_NR
,

1669 .
	gœbñ
 = "GPN",

1672 .
	gba£
 = 
S5P64X0_GPP_BASE
,

1673 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[6],

1674 .
	gchù
 = {

1675 .
ba£
 = 
S5P6450_GPP
(0),

1676 .
	gngpio
 = 
S5P6450_GPIO_P_NR
,

1677 .
	gœbñ
 = "GPP",

1680 .
	gba£
 = 
S5P6450_GPQ_BASE
,

1681 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[5],

1682 .
	gchù
 = {

1683 .
ba£
 = 
S5P6450_GPQ
(0),

1684 .
	gngpio
 = 
S5P6450_GPIO_Q_NR
,

1685 .
	gœbñ
 = "GPQ",

1688 .
	gba£
 = 
S5P6450_GPS_BASE
,

1689 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[6],

1690 .
	gchù
 = {

1691 .
ba£
 = 
S5P6450_GPS
(0),

1692 .
	gngpio
 = 
S5P6450_GPIO_S_NR
,

1693 .
	gœbñ
 = "GPS",

1738 
ßmsung_gpio_chù
 
	gs5pc100_gpios_4bô
[] = {

1739 #ifde‡
CONFIG_CPU_S5PC100


1741 .
chù
 = {

1742 .
ba£
 = 
S5PC100_GPA0
(0),

1743 .
	gngpio
 = 
S5PC100_GPIO_A0_NR
,

1744 .
	gœbñ
 = "GPA0",

1747 .
	gchù
 = {

1748 .
ba£
 = 
S5PC100_GPA1
(0),

1749 .
	gngpio
 = 
S5PC100_GPIO_A1_NR
,

1750 .
	gœbñ
 = "GPA1",

1753 .
	gchù
 = {

1754 .
ba£
 = 
S5PC100_GPB
(0),

1755 .
	gngpio
 = 
S5PC100_GPIO_B_NR
,

1756 .
	gœbñ
 = "GPB",

1759 .
	gchù
 = {

1760 .
ba£
 = 
S5PC100_GPC
(0),

1761 .
	gngpio
 = 
S5PC100_GPIO_C_NR
,

1762 .
	gœbñ
 = "GPC",

1765 .
	gchù
 = {

1766 .
ba£
 = 
S5PC100_GPD
(0),

1767 .
	gngpio
 = 
S5PC100_GPIO_D_NR
,

1768 .
	gœbñ
 = "GPD",

1771 .
	gchù
 = {

1772 .
ba£
 = 
S5PC100_GPE0
(0),

1773 .
	gngpio
 = 
S5PC100_GPIO_E0_NR
,

1774 .
	gœbñ
 = "GPE0",

1777 .
	gchù
 = {

1778 .
ba£
 = 
S5PC100_GPE1
(0),

1779 .
	gngpio
 = 
S5PC100_GPIO_E1_NR
,

1780 .
	gœbñ
 = "GPE1",

1783 .
	gchù
 = {

1784 .
ba£
 = 
S5PC100_GPF0
(0),

1785 .
	gngpio
 = 
S5PC100_GPIO_F0_NR
,

1786 .
	gœbñ
 = "GPF0",

1789 .
	gchù
 = {

1790 .
ba£
 = 
S5PC100_GPF1
(0),

1791 .
	gngpio
 = 
S5PC100_GPIO_F1_NR
,

1792 .
	gœbñ
 = "GPF1",

1795 .
	gchù
 = {

1796 .
ba£
 = 
S5PC100_GPF2
(0),

1797 .
	gngpio
 = 
S5PC100_GPIO_F2_NR
,

1798 .
	gœbñ
 = "GPF2",

1801 .
	gchù
 = {

1802 .
ba£
 = 
S5PC100_GPF3
(0),

1803 .
	gngpio
 = 
S5PC100_GPIO_F3_NR
,

1804 .
	gœbñ
 = "GPF3",

1807 .
	gchù
 = {

1808 .
ba£
 = 
S5PC100_GPG0
(0),

1809 .
	gngpio
 = 
S5PC100_GPIO_G0_NR
,

1810 .
	gœbñ
 = "GPG0",

1813 .
	gchù
 = {

1814 .
ba£
 = 
S5PC100_GPG1
(0),

1815 .
	gngpio
 = 
S5PC100_GPIO_G1_NR
,

1816 .
	gœbñ
 = "GPG1",

1819 .
	gchù
 = {

1820 .
ba£
 = 
S5PC100_GPG2
(0),

1821 .
	gngpio
 = 
S5PC100_GPIO_G2_NR
,

1822 .
	gœbñ
 = "GPG2",

1825 .
	gchù
 = {

1826 .
ba£
 = 
S5PC100_GPG3
(0),

1827 .
	gngpio
 = 
S5PC100_GPIO_G3_NR
,

1828 .
	gœbñ
 = "GPG3",

1831 .
	gchù
 = {

1832 .
ba£
 = 
S5PC100_GPI
(0),

1833 .
	gngpio
 = 
S5PC100_GPIO_I_NR
,

1834 .
	gœbñ
 = "GPI",

1837 .
	gchù
 = {

1838 .
ba£
 = 
S5PC100_GPJ0
(0),

1839 .
	gngpio
 = 
S5PC100_GPIO_J0_NR
,

1840 .
	gœbñ
 = "GPJ0",

1843 .
	gchù
 = {

1844 .
ba£
 = 
S5PC100_GPJ1
(0),

1845 .
	gngpio
 = 
S5PC100_GPIO_J1_NR
,

1846 .
	gœbñ
 = "GPJ1",

1849 .
	gchù
 = {

1850 .
ba£
 = 
S5PC100_GPJ2
(0),

1851 .
	gngpio
 = 
S5PC100_GPIO_J2_NR
,

1852 .
	gœbñ
 = "GPJ2",

1855 .
	gchù
 = {

1856 .
ba£
 = 
S5PC100_GPJ3
(0),

1857 .
	gngpio
 = 
S5PC100_GPIO_J3_NR
,

1858 .
	gœbñ
 = "GPJ3",

1861 .
	gchù
 = {

1862 .
ba£
 = 
S5PC100_GPJ4
(0),

1863 .
	gngpio
 = 
S5PC100_GPIO_J4_NR
,

1864 .
	gœbñ
 = "GPJ4",

1867 .
	gchù
 = {

1868 .
ba£
 = 
S5PC100_GPK0
(0),

1869 .
	gngpio
 = 
S5PC100_GPIO_K0_NR
,

1870 .
	gœbñ
 = "GPK0",

1873 .
	gchù
 = {

1874 .
ba£
 = 
S5PC100_GPK1
(0),

1875 .
	gngpio
 = 
S5PC100_GPIO_K1_NR
,

1876 .
	gœbñ
 = "GPK1",

1879 .
	gchù
 = {

1880 .
ba£
 = 
S5PC100_GPK2
(0),

1881 .
	gngpio
 = 
S5PC100_GPIO_K2_NR
,

1882 .
	gœbñ
 = "GPK2",

1885 .
	gchù
 = {

1886 .
ba£
 = 
S5PC100_GPK3
(0),

1887 .
	gngpio
 = 
S5PC100_GPIO_K3_NR
,

1888 .
	gœbñ
 = "GPK3",

1891 .
	gchù
 = {

1892 .
ba£
 = 
S5PC100_GPL0
(0),

1893 .
	gngpio
 = 
S5PC100_GPIO_L0_NR
,

1894 .
	gœbñ
 = "GPL0",

1897 .
	gchù
 = {

1898 .
ba£
 = 
S5PC100_GPL1
(0),

1899 .
	gngpio
 = 
S5PC100_GPIO_L1_NR
,

1900 .
	gœbñ
 = "GPL1",

1903 .
	gchù
 = {

1904 .
ba£
 = 
S5PC100_GPL2
(0),

1905 .
	gngpio
 = 
S5PC100_GPIO_L2_NR
,

1906 .
	gœbñ
 = "GPL2",

1909 .
	gchù
 = {

1910 .
ba£
 = 
S5PC100_GPL3
(0),

1911 .
	gngpio
 = 
S5PC100_GPIO_L3_NR
,

1912 .
	gœbñ
 = "GPL3",

1915 .
	gchù
 = {

1916 .
ba£
 = 
S5PC100_GPL4
(0),

1917 .
	gngpio
 = 
S5PC100_GPIO_L4_NR
,

1918 .
	gœbñ
 = "GPL4",

1921 .
	gba£
 = (
S5P_VA_GPIO
 + 0xC00),

1922 .
	gúq_ba£
 = 
IRQ_EINT
(0),

1923 .
	gchù
 = {

1924 .
ba£
 = 
S5PC100_GPH0
(0),

1925 .
	gngpio
 = 
S5PC100_GPIO_H0_NR
,

1926 .
	gœbñ
 = "GPH0",

1927 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

1930 .
	gba£
 = (
S5P_VA_GPIO
 + 0xC20),

1931 .
	gúq_ba£
 = 
IRQ_EINT
(8),

1932 .
	gchù
 = {

1933 .
ba£
 = 
S5PC100_GPH1
(0),

1934 .
	gngpio
 = 
S5PC100_GPIO_H1_NR
,

1935 .
	gœbñ
 = "GPH1",

1936 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

1939 .
	gba£
 = (
S5P_VA_GPIO
 + 0xC40),

1940 .
	gúq_ba£
 = 
IRQ_EINT
(16),

1941 .
	gchù
 = {

1942 .
ba£
 = 
S5PC100_GPH2
(0),

1943 .
	gngpio
 = 
S5PC100_GPIO_H2_NR
,

1944 .
	gœbñ
 = "GPH2",

1945 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

1948 .
	gba£
 = (
S5P_VA_GPIO
 + 0xC60),

1949 .
	gúq_ba£
 = 
IRQ_EINT
(24),

1950 .
	gchù
 = {

1951 .
ba£
 = 
S5PC100_GPH3
(0),

1952 .
	gngpio
 = 
S5PC100_GPIO_H3_NR
,

1953 .
	gœbñ
 = "GPH3",

1954 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

1971 
ßmsung_gpio_chù
 
	gs5pv210_gpios_4bô
[] = {

1972 #ifde‡
CONFIG_CPU_S5PV210


1974 .
chù
 = {

1975 .
ba£
 = 
S5PV210_GPA0
(0),

1976 .
	gngpio
 = 
S5PV210_GPIO_A0_NR
,

1977 .
	gœbñ
 = "GPA0",

1980 .
	gchù
 = {

1981 .
ba£
 = 
S5PV210_GPA1
(0),

1982 .
	gngpio
 = 
S5PV210_GPIO_A1_NR
,

1983 .
	gœbñ
 = "GPA1",

1986 .
	gchù
 = {

1987 .
ba£
 = 
S5PV210_GPB
(0),

1988 .
	gngpio
 = 
S5PV210_GPIO_B_NR
,

1989 .
	gœbñ
 = "GPB",

1992 .
	gchù
 = {

1993 .
ba£
 = 
S5PV210_GPC0
(0),

1994 .
	gngpio
 = 
S5PV210_GPIO_C0_NR
,

1995 .
	gœbñ
 = "GPC0",

1998 .
	gchù
 = {

1999 .
ba£
 = 
S5PV210_GPC1
(0),

2000 .
	gngpio
 = 
S5PV210_GPIO_C1_NR
,

2001 .
	gœbñ
 = "GPC1",

2004 .
	gchù
 = {

2005 .
ba£
 = 
S5PV210_GPD0
(0),

2006 .
	gngpio
 = 
S5PV210_GPIO_D0_NR
,

2007 .
	gœbñ
 = "GPD0",

2010 .
	gchù
 = {

2011 .
ba£
 = 
S5PV210_GPD1
(0),

2012 .
	gngpio
 = 
S5PV210_GPIO_D1_NR
,

2013 .
	gœbñ
 = "GPD1",

2016 .
	gchù
 = {

2017 .
ba£
 = 
S5PV210_GPE0
(0),

2018 .
	gngpio
 = 
S5PV210_GPIO_E0_NR
,

2019 .
	gœbñ
 = "GPE0",

2022 .
	gchù
 = {

2023 .
ba£
 = 
S5PV210_GPE1
(0),

2024 .
	gngpio
 = 
S5PV210_GPIO_E1_NR
,

2025 .
	gœbñ
 = "GPE1",

2028 .
	gchù
 = {

2029 .
ba£
 = 
S5PV210_GPF0
(0),

2030 .
	gngpio
 = 
S5PV210_GPIO_F0_NR
,

2031 .
	gœbñ
 = "GPF0",

2034 .
	gchù
 = {

2035 .
ba£
 = 
S5PV210_GPF1
(0),

2036 .
	gngpio
 = 
S5PV210_GPIO_F1_NR
,

2037 .
	gœbñ
 = "GPF1",

2040 .
	gchù
 = {

2041 .
ba£
 = 
S5PV210_GPF2
(0),

2042 .
	gngpio
 = 
S5PV210_GPIO_F2_NR
,

2043 .
	gœbñ
 = "GPF2",

2046 .
	gchù
 = {

2047 .
ba£
 = 
S5PV210_GPF3
(0),

2048 .
	gngpio
 = 
S5PV210_GPIO_F3_NR
,

2049 .
	gœbñ
 = "GPF3",

2052 .
	gchù
 = {

2053 .
ba£
 = 
S5PV210_GPG0
(0),

2054 .
	gngpio
 = 
S5PV210_GPIO_G0_NR
,

2055 .
	gœbñ
 = "GPG0",

2058 .
	gchù
 = {

2059 .
ba£
 = 
S5PV210_GPG1
(0),

2060 .
	gngpio
 = 
S5PV210_GPIO_G1_NR
,

2061 .
	gœbñ
 = "GPG1",

2064 .
	gchù
 = {

2065 .
ba£
 = 
S5PV210_GPG2
(0),

2066 .
	gngpio
 = 
S5PV210_GPIO_G2_NR
,

2067 .
	gœbñ
 = "GPG2",

2070 .
	gchù
 = {

2071 .
ba£
 = 
S5PV210_GPG3
(0),

2072 .
	gngpio
 = 
S5PV210_GPIO_G3_NR
,

2073 .
	gœbñ
 = "GPG3",

2076 .
	gchù
 = {

2077 .
ba£
 = 
S5PV210_GPI
(0),

2078 .
	gngpio
 = 
S5PV210_GPIO_I_NR
,

2079 .
	gœbñ
 = "GPI",

2082 .
	gchù
 = {

2083 .
ba£
 = 
S5PV210_GPJ0
(0),

2084 .
	gngpio
 = 
S5PV210_GPIO_J0_NR
,

2085 .
	gœbñ
 = "GPJ0",

2088 .
	gchù
 = {

2089 .
ba£
 = 
S5PV210_GPJ1
(0),

2090 .
	gngpio
 = 
S5PV210_GPIO_J1_NR
,

2091 .
	gœbñ
 = "GPJ1",

2094 .
	gchù
 = {

2095 .
ba£
 = 
S5PV210_GPJ2
(0),

2096 .
	gngpio
 = 
S5PV210_GPIO_J2_NR
,

2097 .
	gœbñ
 = "GPJ2",

2100 .
	gchù
 = {

2101 .
ba£
 = 
S5PV210_GPJ3
(0),

2102 .
	gngpio
 = 
S5PV210_GPIO_J3_NR
,

2103 .
	gœbñ
 = "GPJ3",

2106 .
	gchù
 = {

2107 .
ba£
 = 
S5PV210_GPJ4
(0),

2108 .
	gngpio
 = 
S5PV210_GPIO_J4_NR
,

2109 .
	gœbñ
 = "GPJ4",

2112 .
	gchù
 = {

2113 .
ba£
 = 
S5PV210_MP01
(0),

2114 .
	gngpio
 = 
S5PV210_GPIO_MP01_NR
,

2115 .
	gœbñ
 = "MP01",

2118 .
	gchù
 = {

2119 .
ba£
 = 
S5PV210_MP02
(0),

2120 .
	gngpio
 = 
S5PV210_GPIO_MP02_NR
,

2121 .
	gœbñ
 = "MP02",

2124 .
	gchù
 = {

2125 .
ba£
 = 
S5PV210_MP03
(0),

2126 .
	gngpio
 = 
S5PV210_GPIO_MP03_NR
,

2127 .
	gœbñ
 = "MP03",

2130 .
	gchù
 = {

2131 .
ba£
 = 
S5PV210_MP04
(0),

2132 .
	gngpio
 = 
S5PV210_GPIO_MP04_NR
,

2133 .
	gœbñ
 = "MP04",

2136 .
	gchù
 = {

2137 .
ba£
 = 
S5PV210_MP05
(0),

2138 .
	gngpio
 = 
S5PV210_GPIO_MP05_NR
,

2139 .
	gœbñ
 = "MP05",

2142 .
	gba£
 = (
S5P_VA_GPIO
 + 0xC00),

2143 .
	gúq_ba£
 = 
IRQ_EINT
(0),

2144 .
	gchù
 = {

2145 .
ba£
 = 
S5PV210_GPH0
(0),

2146 .
	gngpio
 = 
S5PV210_GPIO_H0_NR
,

2147 .
	gœbñ
 = "GPH0",

2148 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2151 .
	gba£
 = (
S5P_VA_GPIO
 + 0xC20),

2152 .
	gúq_ba£
 = 
IRQ_EINT
(8),

2153 .
	gchù
 = {

2154 .
ba£
 = 
S5PV210_GPH1
(0),

2155 .
	gngpio
 = 
S5PV210_GPIO_H1_NR
,

2156 .
	gœbñ
 = "GPH1",

2157 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2160 .
	gba£
 = (
S5P_VA_GPIO
 + 0xC40),

2161 .
	gúq_ba£
 = 
IRQ_EINT
(16),

2162 .
	gchù
 = {

2163 .
ba£
 = 
S5PV210_GPH2
(0),

2164 .
	gngpio
 = 
S5PV210_GPIO_H2_NR
,

2165 .
	gœbñ
 = "GPH2",

2166 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2169 .
	gba£
 = (
S5P_VA_GPIO
 + 0xC60),

2170 .
	gúq_ba£
 = 
IRQ_EINT
(24),

2171 .
	gchù
 = {

2172 .
ba£
 = 
S5PV210_GPH3
(0),

2173 .
	gngpio
 = 
S5PV210_GPIO_H3_NR
,

2174 .
	gœbñ
 = "GPH3",

2175 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2192 #ifde‡
CONFIG_ARCH_EXYNOS4


2193 
ßmsung_gpio_chù
 
	gexynos4_gpios_1
[] = {

2195 .
chù
 = {

2196 .
ba£
 = 
EXYNOS4_GPA0
(0),

2197 .
	gngpio
 = 
EXYNOS4_GPIO_A0_NR
,

2198 .
	gœbñ
 = "GPA0",

2201 .
	gchù
 = {

2202 .
ba£
 = 
EXYNOS4_GPA1
(0),

2203 .
	gngpio
 = 
EXYNOS4_GPIO_A1_NR
,

2204 .
	gœbñ
 = "GPA1",

2207 .
	gchù
 = {

2208 .
ba£
 = 
EXYNOS4_GPB
(0),

2209 .
	gngpio
 = 
EXYNOS4_GPIO_B_NR
,

2210 .
	gœbñ
 = "GPB",

2213 .
	gchù
 = {

2214 .
ba£
 = 
EXYNOS4_GPC0
(0),

2215 .
	gngpio
 = 
EXYNOS4_GPIO_C0_NR
,

2216 .
	gœbñ
 = "GPC0",

2219 .
	gchù
 = {

2220 .
ba£
 = 
EXYNOS4_GPC1
(0),

2221 .
	gngpio
 = 
EXYNOS4_GPIO_C1_NR
,

2222 .
	gœbñ
 = "GPC1",

2225 .
	gchù
 = {

2226 .
ba£
 = 
EXYNOS4_GPD0
(0),

2227 .
	gngpio
 = 
EXYNOS4_GPIO_D0_NR
,

2228 .
	gœbñ
 = "GPD0",

2231 .
	gchù
 = {

2232 .
ba£
 = 
EXYNOS4_GPD1
(0),

2233 .
	gngpio
 = 
EXYNOS4_GPIO_D1_NR
,

2234 .
	gœbñ
 = "GPD1",

2237 .
	gchù
 = {

2238 .
ba£
 = 
EXYNOS4_GPE0
(0),

2239 .
	gngpio
 = 
EXYNOS4_GPIO_E0_NR
,

2240 .
	gœbñ
 = "GPE0",

2243 .
	gchù
 = {

2244 .
ba£
 = 
EXYNOS4_GPE1
(0),

2245 .
	gngpio
 = 
EXYNOS4_GPIO_E1_NR
,

2246 .
	gœbñ
 = "GPE1",

2249 .
	gchù
 = {

2250 .
ba£
 = 
EXYNOS4_GPE2
(0),

2251 .
	gngpio
 = 
EXYNOS4_GPIO_E2_NR
,

2252 .
	gœbñ
 = "GPE2",

2255 .
	gchù
 = {

2256 .
ba£
 = 
EXYNOS4_GPE3
(0),

2257 .
	gngpio
 = 
EXYNOS4_GPIO_E3_NR
,

2258 .
	gœbñ
 = "GPE3",

2261 .
	gchù
 = {

2262 .
ba£
 = 
EXYNOS4_GPE4
(0),

2263 .
	gngpio
 = 
EXYNOS4_GPIO_E4_NR
,

2264 .
	gœbñ
 = "GPE4",

2267 .
	gchù
 = {

2268 .
ba£
 = 
EXYNOS4_GPF0
(0),

2269 .
	gngpio
 = 
EXYNOS4_GPIO_F0_NR
,

2270 .
	gœbñ
 = "GPF0",

2273 .
	gchù
 = {

2274 .
ba£
 = 
EXYNOS4_GPF1
(0),

2275 .
	gngpio
 = 
EXYNOS4_GPIO_F1_NR
,

2276 .
	gœbñ
 = "GPF1",

2279 .
	gchù
 = {

2280 .
ba£
 = 
EXYNOS4_GPF2
(0),

2281 .
	gngpio
 = 
EXYNOS4_GPIO_F2_NR
,

2282 .
	gœbñ
 = "GPF2",

2285 .
	gchù
 = {

2286 .
ba£
 = 
EXYNOS4_GPF3
(0),

2287 .
	gngpio
 = 
EXYNOS4_GPIO_F3_NR
,

2288 .
	gœbñ
 = "GPF3",

2294 #ifde‡
CONFIG_ARCH_EXYNOS4


2295 
ßmsung_gpio_chù
 
	gexynos4_gpios_2
[] = {

2297 .
chù
 = {

2298 .
ba£
 = 
EXYNOS4_GPJ0
(0),

2299 .
	gngpio
 = 
EXYNOS4_GPIO_J0_NR
,

2300 .
	gœbñ
 = "GPJ0",

2303 .
	gchù
 = {

2304 .
ba£
 = 
EXYNOS4_GPJ1
(0),

2305 .
	gngpio
 = 
EXYNOS4_GPIO_J1_NR
,

2306 .
	gœbñ
 = "GPJ1",

2309 .
	gchù
 = {

2310 .
ba£
 = 
EXYNOS4_GPK0
(0),

2311 .
	gngpio
 = 
EXYNOS4_GPIO_K0_NR
,

2312 .
	gœbñ
 = "GPK0",

2315 .
	gchù
 = {

2316 .
ba£
 = 
EXYNOS4_GPK1
(0),

2317 .
	gngpio
 = 
EXYNOS4_GPIO_K1_NR
,

2318 .
	gœbñ
 = "GPK1",

2321 .
	gchù
 = {

2322 .
ba£
 = 
EXYNOS4_GPK2
(0),

2323 .
	gngpio
 = 
EXYNOS4_GPIO_K2_NR
,

2324 .
	gœbñ
 = "GPK2",

2327 .
	gchù
 = {

2328 .
ba£
 = 
EXYNOS4_GPK3
(0),

2329 .
	gngpio
 = 
EXYNOS4_GPIO_K3_NR
,

2330 .
	gœbñ
 = "GPK3",

2333 .
	gchù
 = {

2334 .
ba£
 = 
EXYNOS4_GPL0
(0),

2335 .
	gngpio
 = 
EXYNOS4_GPIO_L0_NR
,

2336 .
	gœbñ
 = "GPL0",

2339 .
	gchù
 = {

2340 .
ba£
 = 
EXYNOS4_GPL1
(0),

2341 .
	gngpio
 = 
EXYNOS4_GPIO_L1_NR
,

2342 .
	gœbñ
 = "GPL1",

2345 .
	gchù
 = {

2346 .
ba£
 = 
EXYNOS4_GPL2
(0),

2347 .
	gngpio
 = 
EXYNOS4_GPIO_L2_NR
,

2348 .
	gœbñ
 = "GPL2",

2351 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[8],

2352 .
	gchù
 = {

2353 .
ba£
 = 
EXYNOS4_GPY0
(0),

2354 .
	gngpio
 = 
EXYNOS4_GPIO_Y0_NR
,

2355 .
	gœbñ
 = "GPY0",

2358 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[8],

2359 .
	gchù
 = {

2360 .
ba£
 = 
EXYNOS4_GPY1
(0),

2361 .
	gngpio
 = 
EXYNOS4_GPIO_Y1_NR
,

2362 .
	gœbñ
 = "GPY1",

2365 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[8],

2366 .
	gchù
 = {

2367 .
ba£
 = 
EXYNOS4_GPY2
(0),

2368 .
	gngpio
 = 
EXYNOS4_GPIO_Y2_NR
,

2369 .
	gœbñ
 = "GPY2",

2372 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[8],

2373 .
	gchù
 = {

2374 .
ba£
 = 
EXYNOS4_GPY3
(0),

2375 .
	gngpio
 = 
EXYNOS4_GPIO_Y3_NR
,

2376 .
	gœbñ
 = "GPY3",

2379 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[8],

2380 .
	gchù
 = {

2381 .
ba£
 = 
EXYNOS4_GPY4
(0),

2382 .
	gngpio
 = 
EXYNOS4_GPIO_Y4_NR
,

2383 .
	gœbñ
 = "GPY4",

2386 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[8],

2387 .
	gchù
 = {

2388 .
ba£
 = 
EXYNOS4_GPY5
(0),

2389 .
	gngpio
 = 
EXYNOS4_GPIO_Y5_NR
,

2390 .
	gœbñ
 = "GPY5",

2393 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[8],

2394 .
	gchù
 = {

2395 .
ba£
 = 
EXYNOS4_GPY6
(0),

2396 .
	gngpio
 = 
EXYNOS4_GPIO_Y6_NR
,

2397 .
	gœbñ
 = "GPY6",

2400 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[9],

2401 .
	gúq_ba£
 = 
IRQ_EINT
(0),

2402 .
	gchù
 = {

2403 .
ba£
 = 
EXYNOS4_GPX0
(0),

2404 .
	gngpio
 = 
EXYNOS4_GPIO_X0_NR
,

2405 .
	gœbñ
 = "GPX0",

2406 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2409 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[9],

2410 .
	gúq_ba£
 = 
IRQ_EINT
(8),

2411 .
	gchù
 = {

2412 .
ba£
 = 
EXYNOS4_GPX1
(0),

2413 .
	gngpio
 = 
EXYNOS4_GPIO_X1_NR
,

2414 .
	gœbñ
 = "GPX1",

2415 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2418 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[9],

2419 .
	gúq_ba£
 = 
IRQ_EINT
(16),

2420 .
	gchù
 = {

2421 .
ba£
 = 
EXYNOS4_GPX2
(0),

2422 .
	gngpio
 = 
EXYNOS4_GPIO_X2_NR
,

2423 .
	gœbñ
 = "GPX2",

2424 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2427 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[9],

2428 .
	gúq_ba£
 = 
IRQ_EINT
(24),

2429 .
	gchù
 = {

2430 .
ba£
 = 
EXYNOS4_GPX3
(0),

2431 .
	gngpio
 = 
EXYNOS4_GPIO_X3_NR
,

2432 .
	gœbñ
 = "GPX3",

2433 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2439 #ifde‡
CONFIG_ARCH_EXYNOS4


2440 
ßmsung_gpio_chù
 
	gexynos4_gpios_3
[] = {

2442 .
chù
 = {

2443 .
ba£
 = 
EXYNOS4_GPZ
(0),

2444 .
	gngpio
 = 
EXYNOS4_GPIO_Z_NR
,

2445 .
	gœbñ
 = "GPZ",

2451 #ifde‡
CONFIG_SOC_EXYNOS5250


2452 
ßmsung_gpio_chù
 
	gexynos5_gpios_1
[] = {

2454 .
chù
 = {

2455 .
ba£
 = 
EXYNOS5_GPA0
(0),

2456 .
	gngpio
 = 
EXYNOS5_GPIO_A0_NR
,

2457 .
	gœbñ
 = "GPA0",

2460 .
	gchù
 = {

2461 .
ba£
 = 
EXYNOS5_GPA1
(0),

2462 .
	gngpio
 = 
EXYNOS5_GPIO_A1_NR
,

2463 .
	gœbñ
 = "GPA1",

2466 .
	gchù
 = {

2467 .
ba£
 = 
EXYNOS5_GPA2
(0),

2468 .
	gngpio
 = 
EXYNOS5_GPIO_A2_NR
,

2469 .
	gœbñ
 = "GPA2",

2472 .
	gchù
 = {

2473 .
ba£
 = 
EXYNOS5_GPB0
(0),

2474 .
	gngpio
 = 
EXYNOS5_GPIO_B0_NR
,

2475 .
	gœbñ
 = "GPB0",

2478 .
	gchù
 = {

2479 .
ba£
 = 
EXYNOS5_GPB1
(0),

2480 .
	gngpio
 = 
EXYNOS5_GPIO_B1_NR
,

2481 .
	gœbñ
 = "GPB1",

2484 .
	gchù
 = {

2485 .
ba£
 = 
EXYNOS5_GPB2
(0),

2486 .
	gngpio
 = 
EXYNOS5_GPIO_B2_NR
,

2487 .
	gœbñ
 = "GPB2",

2490 .
	gchù
 = {

2491 .
ba£
 = 
EXYNOS5_GPB3
(0),

2492 .
	gngpio
 = 
EXYNOS5_GPIO_B3_NR
,

2493 .
	gœbñ
 = "GPB3",

2496 .
	gchù
 = {

2497 .
ba£
 = 
EXYNOS5_GPC0
(0),

2498 .
	gngpio
 = 
EXYNOS5_GPIO_C0_NR
,

2499 .
	gœbñ
 = "GPC0",

2502 .
	gchù
 = {

2503 .
ba£
 = 
EXYNOS5_GPC1
(0),

2504 .
	gngpio
 = 
EXYNOS5_GPIO_C1_NR
,

2505 .
	gœbñ
 = "GPC1",

2508 .
	gchù
 = {

2509 .
ba£
 = 
EXYNOS5_GPC2
(0),

2510 .
	gngpio
 = 
EXYNOS5_GPIO_C2_NR
,

2511 .
	gœbñ
 = "GPC2",

2514 .
	gchù
 = {

2515 .
ba£
 = 
EXYNOS5_GPC3
(0),

2516 .
	gngpio
 = 
EXYNOS5_GPIO_C3_NR
,

2517 .
	gœbñ
 = "GPC3",

2520 .
	gchù
 = {

2521 .
ba£
 = 
EXYNOS5_GPD0
(0),

2522 .
	gngpio
 = 
EXYNOS5_GPIO_D0_NR
,

2523 .
	gœbñ
 = "GPD0",

2526 .
	gchù
 = {

2527 .
ba£
 = 
EXYNOS5_GPD1
(0),

2528 .
	gngpio
 = 
EXYNOS5_GPIO_D1_NR
,

2529 .
	gœbñ
 = "GPD1",

2532 .
	gchù
 = {

2533 .
ba£
 = 
EXYNOS5_GPY0
(0),

2534 .
	gngpio
 = 
EXYNOS5_GPIO_Y0_NR
,

2535 .
	gœbñ
 = "GPY0",

2538 .
	gchù
 = {

2539 .
ba£
 = 
EXYNOS5_GPY1
(0),

2540 .
	gngpio
 = 
EXYNOS5_GPIO_Y1_NR
,

2541 .
	gœbñ
 = "GPY1",

2544 .
	gchù
 = {

2545 .
ba£
 = 
EXYNOS5_GPY2
(0),

2546 .
	gngpio
 = 
EXYNOS5_GPIO_Y2_NR
,

2547 .
	gœbñ
 = "GPY2",

2550 .
	gchù
 = {

2551 .
ba£
 = 
EXYNOS5_GPY3
(0),

2552 .
	gngpio
 = 
EXYNOS5_GPIO_Y3_NR
,

2553 .
	gœbñ
 = "GPY3",

2556 .
	gchù
 = {

2557 .
ba£
 = 
EXYNOS5_GPY4
(0),

2558 .
	gngpio
 = 
EXYNOS5_GPIO_Y4_NR
,

2559 .
	gœbñ
 = "GPY4",

2562 .
	gchù
 = {

2563 .
ba£
 = 
EXYNOS5_GPY5
(0),

2564 .
	gngpio
 = 
EXYNOS5_GPIO_Y5_NR
,

2565 .
	gœbñ
 = "GPY5",

2568 .
	gchù
 = {

2569 .
ba£
 = 
EXYNOS5_GPY6
(0),

2570 .
	gngpio
 = 
EXYNOS5_GPIO_Y6_NR
,

2571 .
	gœbñ
 = "GPY6",

2574 .
	gchù
 = {

2575 .
ba£
 = 
EXYNOS5_GPC4
(0),

2576 .
	gngpio
 = 
EXYNOS5_GPIO_C4_NR
,

2577 .
	gœbñ
 = "GPC4",

2580 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[9],

2581 .
	gúq_ba£
 = 
IRQ_EINT
(0),

2582 .
	gchù
 = {

2583 .
ba£
 = 
EXYNOS5_GPX0
(0),

2584 .
	gngpio
 = 
EXYNOS5_GPIO_X0_NR
,

2585 .
	gœbñ
 = "GPX0",

2586 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2589 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[9],

2590 .
	gúq_ba£
 = 
IRQ_EINT
(8),

2591 .
	gchù
 = {

2592 .
ba£
 = 
EXYNOS5_GPX1
(0),

2593 .
	gngpio
 = 
EXYNOS5_GPIO_X1_NR
,

2594 .
	gœbñ
 = "GPX1",

2595 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2598 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[9],

2599 .
	gúq_ba£
 = 
IRQ_EINT
(16),

2600 .
	gchù
 = {

2601 .
ba£
 = 
EXYNOS5_GPX2
(0),

2602 .
	gngpio
 = 
EXYNOS5_GPIO_X2_NR
,

2603 .
	gœbñ
 = "GPX2",

2604 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2607 .
	gc⁄fig
 = &
ßmsung_gpio_cfgs
[9],

2608 .
	gúq_ba£
 = 
IRQ_EINT
(24),

2609 .
	gchù
 = {

2610 .
ba£
 = 
EXYNOS5_GPX3
(0),

2611 .
	gngpio
 = 
EXYNOS5_GPIO_X3_NR
,

2612 .
	gœbñ
 = "GPX3",

2613 .
	gto_úq
 = 
ßmsung_gpiﬁib_to_úq
,

2619 #ifde‡
CONFIG_SOC_EXYNOS5250


2620 
ßmsung_gpio_chù
 
	gexynos5_gpios_2
[] = {

2622 .
chù
 = {

2623 .
ba£
 = 
EXYNOS5_GPE0
(0),

2624 .
	gngpio
 = 
EXYNOS5_GPIO_E0_NR
,

2625 .
	gœbñ
 = "GPE0",

2628 .
	gchù
 = {

2629 .
ba£
 = 
EXYNOS5_GPE1
(0),

2630 .
	gngpio
 = 
EXYNOS5_GPIO_E1_NR
,

2631 .
	gœbñ
 = "GPE1",

2634 .
	gchù
 = {

2635 .
ba£
 = 
EXYNOS5_GPF0
(0),

2636 .
	gngpio
 = 
EXYNOS5_GPIO_F0_NR
,

2637 .
	gœbñ
 = "GPF0",

2640 .
	gchù
 = {

2641 .
ba£
 = 
EXYNOS5_GPF1
(0),

2642 .
	gngpio
 = 
EXYNOS5_GPIO_F1_NR
,

2643 .
	gœbñ
 = "GPF1",

2646 .
	gchù
 = {

2647 .
ba£
 = 
EXYNOS5_GPG0
(0),

2648 .
	gngpio
 = 
EXYNOS5_GPIO_G0_NR
,

2649 .
	gœbñ
 = "GPG0",

2652 .
	gchù
 = {

2653 .
ba£
 = 
EXYNOS5_GPG1
(0),

2654 .
	gngpio
 = 
EXYNOS5_GPIO_G1_NR
,

2655 .
	gœbñ
 = "GPG1",

2658 .
	gchù
 = {

2659 .
ba£
 = 
EXYNOS5_GPG2
(0),

2660 .
	gngpio
 = 
EXYNOS5_GPIO_G2_NR
,

2661 .
	gœbñ
 = "GPG2",

2664 .
	gchù
 = {

2665 .
ba£
 = 
EXYNOS5_GPH0
(0),

2666 .
	gngpio
 = 
EXYNOS5_GPIO_H0_NR
,

2667 .
	gœbñ
 = "GPH0",

2670 .
	gchù
 = {

2671 .
ba£
 = 
EXYNOS5_GPH1
(0),

2672 .
	gngpio
 = 
EXYNOS5_GPIO_H1_NR
,

2673 .
	gœbñ
 = "GPH1",

2680 #ifde‡
CONFIG_SOC_EXYNOS5250


2681 
ßmsung_gpio_chù
 
	gexynos5_gpios_3
[] = {

2683 .
chù
 = {

2684 .
ba£
 = 
EXYNOS5_GPV0
(0),

2685 .
	gngpio
 = 
EXYNOS5_GPIO_V0_NR
,

2686 .
	gœbñ
 = "GPV0",

2689 .
	gchù
 = {

2690 .
ba£
 = 
EXYNOS5_GPV1
(0),

2691 .
	gngpio
 = 
EXYNOS5_GPIO_V1_NR
,

2692 .
	gœbñ
 = "GPV1",

2695 .
	gchù
 = {

2696 .
ba£
 = 
EXYNOS5_GPV2
(0),

2697 .
	gngpio
 = 
EXYNOS5_GPIO_V2_NR
,

2698 .
	gœbñ
 = "GPV2",

2701 .
	gchù
 = {

2702 .
ba£
 = 
EXYNOS5_GPV3
(0),

2703 .
	gngpio
 = 
EXYNOS5_GPIO_V3_NR
,

2704 .
	gœbñ
 = "GPV3",

2707 .
	gchù
 = {

2708 .
ba£
 = 
EXYNOS5_GPV4
(0),

2709 .
	gngpio
 = 
EXYNOS5_GPIO_V4_NR
,

2710 .
	gœbñ
 = "GPV4",

2716 #ifde‡
CONFIG_SOC_EXYNOS5250


2717 
ßmsung_gpio_chù
 
	gexynos5_gpios_4
[] = {

2719 .
chù
 = {

2720 .
ba£
 = 
EXYNOS5_GPZ
(0),

2721 .
	gngpio
 = 
EXYNOS5_GPIO_Z_NR
,

2722 .
	gœbñ
 = "GPZ",

2729 #i‡
deföed
(
CONFIG_ARCH_EXYNOS
Ë&& deföed(
CONFIG_OF
)

2730 
	$exynos_gpio_xœã
(
gpio_chù
 *
gc
,

2731 c⁄° 
of_ph™dÀ_¨gs
 *
gpio•ec
, 
u32
 *
Êags
)

2733 
pö
;

2735 i‡(
	`WARN_ON
(
gc
->
of_gpio_n_˚Œs
 < 4))

2736  -
EINVAL
;

2738 i‡(
	`WARN_ON
(
gpio•ec
->
¨gs_cou¡
 < 
gc
->
of_gpio_n_˚Œs
))

2739  -
EINVAL
;

2741 i‡(
gpio•ec
->
¨gs
[0] > 
gc
->
ngpio
)

2742  -
EINVAL
;

2744 
pö
 = 
gc
->
ba£
 + 
gpio•ec
->
¨gs
[0];

2746 i‡(
	`s3c_gpio_cfgpö
(
pö
, 
	`S3C_GPIO_SFN
(
gpio•ec
->
¨gs
[1])))

2747 
	`¥_w¨n
("gpio_xlate: failedÅo setÖin function\n");

2748 i‡(
	`s3c_gpio_£çuŒ
(
pö
, 
gpio•ec
->
¨gs
[2] & 0xffff))

2749 
	`¥_w¨n
("gpio_xlate: failedÅo setÖinÖull up/down\n");

2750 i‡(
	`s5p_gpio_£t_drv°r
(
pö
, 
gpio•ec
->
¨gs
[3]))

2751 
	`¥_w¨n
("gpio_xlate: failedÅo setÖin drive strength\n");

2753 i‡(
Êags
)

2754 *
Êags
 = 
gpio•ec
->
¨gs
[2] >> 16;

2756  
gpio•ec
->
¨gs
[0];

2757 
	}
}

2759 c⁄° 
of_devi˚_id
 
	gexynos_gpio_dt_m©ch
[] 
	g__öôd©a
 = {

2760 { .
com∑tibÀ
 = "samsung,exynos4-gpio", },

2764 
__öô
 
	$exynos_gpiﬁib_©èch_o‚ode
(
ßmsung_gpio_chù
 *
chù
,

2765 
u64
 
ba£
, u64 
off£t
)

2767 
gpio_chù
 *
gc
 = &
chù
->chip;

2768 
u64
 
addªss
;

2770 i‡(!
	`of_have_p›uœãd_dt
())

2773 
addªss
 = 
chù
->
ba£
 ? ba£ + ((
u32
)chù->ba£ & 0xfffË: ba£ + 
off£t
;

2774 
gc
->
of_node
 = 
	`of_föd_m©chög_node_by_addªss
(
NULL
,

2775 
exynos_gpio_dt_m©ch
, 
addªss
);

2776 i‡(!
gc
->
of_node
) {

2777 
	`¥_öfo
("gpio: deviceÅreeÇodeÇot found for gpio controller"

2778 " wôh ba£áddªs†%08Œx\n", 
addªss
);

2781 
gc
->
of_gpio_n_˚Œs
 = 4;

2782 
gc
->
of_xœã
 = 
exynos_gpio_xœã
;

2783 
	}
}

2784 #ñi‡
deföed
(
CONFIG_ARCH_EXYNOS
)

2785 
__öô
 
	$exynos_gpiﬁib_©èch_o‚ode
(
ßmsung_gpio_chù
 *
chù
,

2786 
u64
 
ba£
, u64 
off£t
)

2789 
	}
}

2792 
__öô
 
	$exynos4_gpiﬁib_öô
()

2794 #ifde‡
CONFIG_CPU_EXYNOS4210


2795 
ßmsung_gpio_chù
 *
chù
;

2796 
i
, 
ƒ_chùs
;

2797 
__iomem
 *
gpio_ba£1
, *
gpio_ba£2
, *
gpio_ba£3
;

2798 
group
 = 0;

2799 
__iomem
 *
gpx_ba£
;

2802 
gpio_ba£1
 = 
	`i‹em≠
(
EXYNOS4_PA_GPIO1
, 
SZ_4K
);

2803 i‡(
gpio_ba£1
 =
NULL
) {

2804 
	`¥_îr
("unableÅo ioremap for gpio_base1\n");

2805 
îr_i‹em≠1
;

2808 
chù
 = 
exynos4_gpios_1
;

2809 
ƒ_chùs
 = 
	`ARRAY_SIZE
(
exynos4_gpios_1
);

2811 
i
 = 0; i < 
ƒ_chùs
; i++, 
chù
++) {

2812 i‡(!
chù
->
c⁄fig
) {

2813 
chù
->
c⁄fig
 = &
exynos_gpio_cfg
;

2814 
chù
->
group
 = group++;

2816 
	`exynos_gpiﬁib_©èch_o‚ode
(
chù
,

2817 
EXYNOS4_PA_GPIO1
, 
i
 * 0x20);

2819 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
exynos4_gpios_1
,

2820 
ƒ_chùs
, 
gpio_ba£1
);

2823 
gpio_ba£2
 = 
	`i‹em≠
(
EXYNOS4_PA_GPIO2
, 
SZ_4K
);

2824 i‡(
gpio_ba£2
 =
NULL
) {

2825 
	`¥_îr
("unableÅo ioremap for gpio_base2\n");

2826 
îr_i‹em≠2
;

2830 
chù
 = &
exynos4_gpios_2
[16];

2831 
gpx_ba£
 = 
gpio_ba£2
 + 0xC00;

2832 
i
 = 0; i < 4; i++, 
chù
++, 
gpx_ba£
 += 0x20)

2833 
chù
->
ba£
 = 
gpx_ba£
;

2835 
chù
 = 
exynos4_gpios_2
;

2836 
ƒ_chùs
 = 
	`ARRAY_SIZE
(
exynos4_gpios_2
);

2838 
i
 = 0; i < 
ƒ_chùs
; i++, 
chù
++) {

2839 i‡(!
chù
->
c⁄fig
) {

2840 
chù
->
c⁄fig
 = &
exynos_gpio_cfg
;

2841 
chù
->
group
 = group++;

2843 
	`exynos_gpiﬁib_©èch_o‚ode
(
chù
,

2844 
EXYNOS4_PA_GPIO2
, 
i
 * 0x20);

2846 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
exynos4_gpios_2
,

2847 
ƒ_chùs
, 
gpio_ba£2
);

2850 
gpio_ba£3
 = 
	`i‹em≠
(
EXYNOS4_PA_GPIO3
, 
SZ_256
);

2851 i‡(
gpio_ba£3
 =
NULL
) {

2852 
	`¥_îr
("unableÅo ioremap for gpio_base3\n");

2853 
îr_i‹em≠3
;

2856 
chù
 = 
exynos4_gpios_3
;

2857 
ƒ_chùs
 = 
	`ARRAY_SIZE
(
exynos4_gpios_3
);

2859 
i
 = 0; i < 
ƒ_chùs
; i++, 
chù
++) {

2860 i‡(!
chù
->
c⁄fig
) {

2861 
chù
->
c⁄fig
 = &
exynos_gpio_cfg
;

2862 
chù
->
group
 = group++;

2864 
	`exynos_gpiﬁib_©èch_o‚ode
(
chù
,

2865 
EXYNOS4_PA_GPIO3
, 
i
 * 0x20);

2867 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
exynos4_gpios_3
,

2868 
ƒ_chùs
, 
gpio_ba£3
);

2870 #i‡
	`deföed
(
CONFIG_CPU_EXYNOS4210
Ë&& deföed(
CONFIG_S5P_GPIO_INT
)

2871 
	`s5p_ªgi°î_gpioöt_b™k
(
IRQ_GPIO_XA
, 0, 
IRQ_GPIO1_NR_GROUPS
);

2872 
	`s5p_ªgi°î_gpioöt_b™k
(
IRQ_GPIO_XB
, 
IRQ_GPIO1_NR_GROUPS
, 
IRQ_GPIO2_NR_GROUPS
);

2877 
îr_i‹em≠3
:

2878 
	`iounm≠
(
gpio_ba£2
);

2879 
îr_i‹em≠2
:

2880 
	`iounm≠
(
gpio_ba£1
);

2881 
îr_i‹em≠1
:

2884 
	}
}

2886 
__öô
 
	$exynos5_gpiﬁib_öô
()

2888 #ifde‡
CONFIG_SOC_EXYNOS5250


2889 
ßmsung_gpio_chù
 *
chù
;

2890 
i
, 
ƒ_chùs
;

2891 
__iomem
 *
gpio_ba£1
, *
gpio_ba£2
, *
gpio_ba£3
, *
gpio_ba£4
;

2892 
group
 = 0;

2893 
__iomem
 *
gpx_ba£
;

2896 
gpio_ba£1
 = 
	`i‹em≠
(
EXYNOS5_PA_GPIO1
, 
SZ_4K
);

2897 i‡(
gpio_ba£1
 =
NULL
) {

2898 
	`¥_îr
("unableÅo ioremap for gpio_base1\n");

2899 
îr_i‹em≠1
;

2903 
exynos5_gpios_1
[20].
ba£
 = 
gpio_ba£1
 + 0x2E0;

2906 
chù
 = &
exynos5_gpios_1
[21];

2907 
gpx_ba£
 = 
gpio_ba£1
 + 0xC00;

2908 
i
 = 0; i < 4; i++, 
chù
++, 
gpx_ba£
 += 0x20)

2909 
chù
->
ba£
 = 
gpx_ba£
;

2911 
chù
 = 
exynos5_gpios_1
;

2912 
ƒ_chùs
 = 
	`ARRAY_SIZE
(
exynos5_gpios_1
);

2914 
i
 = 0; i < 
ƒ_chùs
; i++, 
chù
++) {

2915 i‡(!
chù
->
c⁄fig
) {

2916 
chù
->
c⁄fig
 = &
exynos_gpio_cfg
;

2917 
chù
->
group
 = group++;

2919 
	`exynos_gpiﬁib_©èch_o‚ode
(
chù
,

2920 
EXYNOS5_PA_GPIO1
, 
i
 * 0x20);

2922 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
exynos5_gpios_1
,

2923 
ƒ_chùs
, 
gpio_ba£1
);

2926 
gpio_ba£2
 = 
	`i‹em≠
(
EXYNOS5_PA_GPIO2
, 
SZ_4K
);

2927 i‡(
gpio_ba£2
 =
NULL
) {

2928 
	`¥_îr
("unableÅo ioremap for gpio_base2\n");

2929 
îr_i‹em≠2
;

2932 
chù
 = 
exynos5_gpios_2
;

2933 
ƒ_chùs
 = 
	`ARRAY_SIZE
(
exynos5_gpios_2
);

2935 
i
 = 0; i < 
ƒ_chùs
; i++, 
chù
++) {

2936 i‡(!
chù
->
c⁄fig
) {

2937 
chù
->
c⁄fig
 = &
exynos_gpio_cfg
;

2938 
chù
->
group
 = group++;

2940 
	`exynos_gpiﬁib_©èch_o‚ode
(
chù
,

2941 
EXYNOS5_PA_GPIO2
, 
i
 * 0x20);

2943 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
exynos5_gpios_2
,

2944 
ƒ_chùs
, 
gpio_ba£2
);

2947 
gpio_ba£3
 = 
	`i‹em≠
(
EXYNOS5_PA_GPIO3
, 
SZ_4K
);

2948 i‡(
gpio_ba£3
 =
NULL
) {

2949 
	`¥_îr
("unableÅo ioremap for gpio_base3\n");

2950 
îr_i‹em≠3
;

2954 
exynos5_gpios_3
[0].
ba£
 = 
gpio_ba£3
;

2955 
exynos5_gpios_3
[1].
ba£
 = 
gpio_ba£3
 + 0x20;

2956 
exynos5_gpios_3
[2].
ba£
 = 
gpio_ba£3
 + 0x60;

2957 
exynos5_gpios_3
[3].
ba£
 = 
gpio_ba£3
 + 0x80;

2958 
exynos5_gpios_3
[4].
ba£
 = 
gpio_ba£3
 + 0xC0;

2960 
chù
 = 
exynos5_gpios_3
;

2961 
ƒ_chùs
 = 
	`ARRAY_SIZE
(
exynos5_gpios_3
);

2963 
i
 = 0; i < 
ƒ_chùs
; i++, 
chù
++) {

2964 i‡(!
chù
->
c⁄fig
) {

2965 
chù
->
c⁄fig
 = &
exynos_gpio_cfg
;

2966 
chù
->
group
 = group++;

2968 
	`exynos_gpiﬁib_©èch_o‚ode
(
chù
,

2969 
EXYNOS5_PA_GPIO3
, 
i
 * 0x20);

2971 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
exynos5_gpios_3
,

2972 
ƒ_chùs
, 
gpio_ba£3
);

2975 
gpio_ba£4
 = 
	`i‹em≠
(
EXYNOS5_PA_GPIO4
, 
SZ_4K
);

2976 i‡(
gpio_ba£4
 =
NULL
) {

2977 
	`¥_îr
("unableÅo ioremap for gpio_base4\n");

2978 
îr_i‹em≠4
;

2981 
chù
 = 
exynos5_gpios_4
;

2982 
ƒ_chùs
 = 
	`ARRAY_SIZE
(
exynos5_gpios_4
);

2984 
i
 = 0; i < 
ƒ_chùs
; i++, 
chù
++) {

2985 i‡(!
chù
->
c⁄fig
) {

2986 
chù
->
c⁄fig
 = &
exynos_gpio_cfg
;

2987 
chù
->
group
 = group++;

2989 
	`exynos_gpiﬁib_©èch_o‚ode
(
chù
,

2990 
EXYNOS5_PA_GPIO4
, 
i
 * 0x20);

2992 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
exynos5_gpios_4
,

2993 
ƒ_chùs
, 
gpio_ba£4
);

2996 
îr_i‹em≠4
:

2997 
	`iounm≠
(
gpio_ba£3
);

2998 
îr_i‹em≠3
:

2999 
	`iounm≠
(
gpio_ba£2
);

3000 
îr_i‹em≠2
:

3001 
	`iounm≠
(
gpio_ba£1
);

3002 
îr_i‹em≠1
:

3006 
	}
}

3009 
__öô
 
	$ßmsung_gpiﬁib_öô
()

3011 
ßmsung_gpio_chù
 *
chù
;

3012 
i
, 
ƒ_chùs
;

3013 
group
 = 0;

3015 #i‡
	`deföed
(
CONFIG_PINCTRL_EXYNOS
Ë|| deföed(
CONFIG_PINCTRL_EXYNOS5440
)

3027 
devi˚_node
 *
p˘æ_≈
;

3028 c⁄° 
of_devi˚_id
 
exynos_pö˘æ_ids
[] = {

3029 { .
com∑tibÀ
 = "samsung,exynos4210-pinctrl", },

3030 { .
com∑tibÀ
 = "samsung,exynos4x12-pinctrl", },

3031 { .
com∑tibÀ
 = "samsung,exynos5250-pinctrl", },

3032 { .
com∑tibÀ
 = "samsung,exynos5440-pinctrl", },

3035 
	`f‹_óch_m©chög_node
(
p˘æ_≈
, 
exynos_pö˘æ_ids
)

3036 i‡(
p˘æ_≈
 && 
	`of_devi˚_is_avaûabÀ
(pctrl_np))

3037  -
ENODEV
;

3040 
	`ßmsung_gpiﬁib_£t_cfg
(
ßmsung_gpio_cfgs
, 
	`ARRAY_SIZE
(samsung_gpio_cfgs));

3042 i‡(
	`soc_is_s3c24xx
()) {

3043 
	`s3c24xx_gpiﬁib_add_chùs
(
s3c24xx_gpios
,

3044 
	`ARRAY_SIZE
(
s3c24xx_gpios
), 
S3C24XX_VA_GPIO
);

3045 } i‡(
	`soc_is_s3c64xx
()) {

3046 
	`ßmsung_gpiﬁib_add_2bô_chùs
(
s3c64xx_gpios_2bô
,

3047 
	`ARRAY_SIZE
(
s3c64xx_gpios_2bô
),

3048 
S3C64XX_VA_GPIO
 + 0xE0, 0x20);

3049 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
s3c64xx_gpios_4bô
,

3050 
	`ARRAY_SIZE
(
s3c64xx_gpios_4bô
),

3051 
S3C64XX_VA_GPIO
);

3052 
	`ßmsung_gpiﬁib_add_4bô2_chùs
(
s3c64xx_gpios_4bô2
,

3053 
	`ARRAY_SIZE
(
s3c64xx_gpios_4bô2
));

3054 } i‡(
	`soc_is_s5p6440
()) {

3055 
	`ßmsung_gpiﬁib_add_2bô_chùs
(
s5p6440_gpios_2bô
,

3056 
	`ARRAY_SIZE
(
s5p6440_gpios_2bô
), 
NULL
, 0x0);

3057 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
s5p6440_gpios_4bô
,

3058 
	`ARRAY_SIZE
(
s5p6440_gpios_4bô
), 
S5P_VA_GPIO
);

3059 
	`ßmsung_gpiﬁib_add_4bô2_chùs
(
s5p6440_gpios_4bô2
,

3060 
	`ARRAY_SIZE
(
s5p6440_gpios_4bô2
));

3061 
	`s5p64x0_gpiﬁib_add_rb™k
(
s5p6440_gpios_rb™k
,

3062 
	`ARRAY_SIZE
(
s5p6440_gpios_rb™k
));

3063 } i‡(
	`soc_is_s5p6450
()) {

3064 
	`ßmsung_gpiﬁib_add_2bô_chùs
(
s5p6450_gpios_2bô
,

3065 
	`ARRAY_SIZE
(
s5p6450_gpios_2bô
), 
NULL
, 0x0);

3066 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
s5p6450_gpios_4bô
,

3067 
	`ARRAY_SIZE
(
s5p6450_gpios_4bô
), 
S5P_VA_GPIO
);

3068 
	`ßmsung_gpiﬁib_add_4bô2_chùs
(
s5p6450_gpios_4bô2
,

3069 
	`ARRAY_SIZE
(
s5p6450_gpios_4bô2
));

3070 
	`s5p64x0_gpiﬁib_add_rb™k
(
s5p6450_gpios_rb™k
,

3071 
	`ARRAY_SIZE
(
s5p6450_gpios_rb™k
));

3072 } i‡(
	`soc_is_s5pc100
()) {

3073 
group
 = 0;

3074 
chù
 = 
s5pc100_gpios_4bô
;

3075 
ƒ_chùs
 = 
	`ARRAY_SIZE
(
s5pc100_gpios_4bô
);

3077 
i
 = 0; i < 
ƒ_chùs
; i++, 
chù
++) {

3078 i‡(!
chù
->
c⁄fig
) {

3079 
chù
->
c⁄fig
 = &
ßmsung_gpio_cfgs
[3];

3080 
chù
->
group
 = group++;

3083 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
s5pc100_gpios_4bô
, 
ƒ_chùs
, 
S5P_VA_GPIO
);

3084 #i‡
	`deföed
(
CONFIG_CPU_S5PC100
Ë&& deföed(
CONFIG_S5P_GPIO_INT
)

3085 
	`s5p_ªgi°î_gpioöt_b™k
(
IRQ_GPIOINT
, 0, 
S5P_GPIOINT_GROUP_MAXNR
);

3087 } i‡(
	`soc_is_s5pv210
()) {

3088 
group
 = 0;

3089 
chù
 = 
s5pv210_gpios_4bô
;

3090 
ƒ_chùs
 = 
	`ARRAY_SIZE
(
s5pv210_gpios_4bô
);

3092 
i
 = 0; i < 
ƒ_chùs
; i++, 
chù
++) {

3093 i‡(!
chù
->
c⁄fig
) {

3094 
chù
->
c⁄fig
 = &
ßmsung_gpio_cfgs
[3];

3095 
chù
->
group
 = group++;

3098 
	`ßmsung_gpiﬁib_add_4bô_chùs
(
s5pv210_gpios_4bô
, 
ƒ_chùs
, 
S5P_VA_GPIO
);

3099 #i‡
	`deföed
(
CONFIG_CPU_S5PV210
Ë&& deföed(
CONFIG_S5P_GPIO_INT
)

3100 
	`s5p_ªgi°î_gpioöt_b™k
(
IRQ_GPIOINT
, 0, 
S5P_GPIOINT_GROUP_MAXNR
);

3102 } i‡(
	`soc_is_exynos4210
()) {

3103 
	`exynos4_gpiﬁib_öô
();

3104 } i‡(
	`soc_is_exynos5250
()) {

3105 
	`exynos5_gpiﬁib_öô
();

3107 
	`WARN
(1, "Unknown SoC in gpio-samsung,Ço GPIOsádded\n");

3108  -
ENODEV
;

3112 
	}
}

3113 
c‹e_öôˇŒ
(
ßmsung_gpiﬁib_öô
);

3115 
	$s3c_gpio_cfgpö
(
pö
, 
c⁄fig
)

3117 
ßmsung_gpio_chù
 *
chù
 = 
	`ßmsung_gpiﬁib_gëchù
(
pö
);

3118 
Êags
;

3119 
off£t
;

3120 
ªt
;

3122 i‡(!
chù
)

3123  -
EINVAL
;

3125 
off£t
 = 
pö
 - 
chù
->chù.
ba£
;

3127 
	`ßmsung_gpio_lock
(
chù
, 
Êags
);

3128 
ªt
 = 
	`ßmsung_gpio_do_£tcfg
(
chù
, 
off£t
, 
c⁄fig
);

3129 
	`ßmsung_gpio_u∆ock
(
chù
, 
Êags
);

3131  
ªt
;

3132 
	}
}

3133 
EXPORT_SYMBOL
(
s3c_gpio_cfgpö
);

3135 
	$s3c_gpio_cfgpö_ønge
(
°¨t
, 
ƒ
,

3136 
cfg
)

3138 
ªt
;

3140 ; 
ƒ
 > 0;Çr--, 
°¨t
++) {

3141 
ªt
 = 
	`s3c_gpio_cfgpö
(
°¨t
, 
cfg
);

3142 i‡(
ªt
 != 0)

3143  
ªt
;

3147 
	}
}

3148 
EXPORT_SYMBOL_GPL
(
s3c_gpio_cfgpö_ønge
);

3150 
	$s3c_gpio_cfgÆl_ønge
(
°¨t
, 
ƒ
,

3151 
cfg
, 
ßmsung_gpio_puŒ_t
 
puŒ
)

3153 
ªt
;

3155 ; 
ƒ
 > 0;Çr--, 
°¨t
++) {

3156 
	`s3c_gpio_£çuŒ
(
°¨t
, 
puŒ
);

3157 
ªt
 = 
	`s3c_gpio_cfgpö
(
°¨t
, 
cfg
);

3158 i‡(
ªt
 != 0)

3159  
ªt
;

3163 
	}
}

3164 
EXPORT_SYMBOL_GPL
(
s3c_gpio_cfgÆl_ønge
);

3166 
	$s3c_gpio_gëcfg
(
pö
)

3168 
ßmsung_gpio_chù
 *
chù
 = 
	`ßmsung_gpiﬁib_gëchù
(
pö
);

3169 
Êags
;

3170 
ªt
 = 0;

3171 
off£t
;

3173 i‡(
chù
) {

3174 
off£t
 = 
pö
 - 
chù
->chù.
ba£
;

3176 
	`ßmsung_gpio_lock
(
chù
, 
Êags
);

3177 
ªt
 = 
	`ßmsung_gpio_do_gëcfg
(
chù
, 
off£t
);

3178 
	`ßmsung_gpio_u∆ock
(
chù
, 
Êags
);

3181  
ªt
;

3182 
	}
}

3183 
EXPORT_SYMBOL
(
s3c_gpio_gëcfg
);

3185 
	$s3c_gpio_£çuŒ
(
pö
, 
ßmsung_gpio_puŒ_t
 
puŒ
)

3187 
ßmsung_gpio_chù
 *
chù
 = 
	`ßmsung_gpiﬁib_gëchù
(
pö
);

3188 
Êags
;

3189 
off£t
, 
ªt
;

3191 i‡(!
chù
)

3192  -
EINVAL
;

3194 
off£t
 = 
pö
 - 
chù
->chù.
ba£
;

3196 
	`ßmsung_gpio_lock
(
chù
, 
Êags
);

3197 
ªt
 = 
	`ßmsung_gpio_do_£çuŒ
(
chù
, 
off£t
, 
puŒ
);

3198 
	`ßmsung_gpio_u∆ock
(
chù
, 
Êags
);

3200  
ªt
;

3201 
	}
}

3202 
EXPORT_SYMBOL
(
s3c_gpio_£çuŒ
);

3204 
ßmsung_gpio_puŒ_t
 
	$s3c_gpio_gëpuŒ
(
pö
)

3206 
ßmsung_gpio_chù
 *
chù
 = 
	`ßmsung_gpiﬁib_gëchù
(
pö
);

3207 
Êags
;

3208 
off£t
;

3209 
u32
 
pup
 = 0;

3211 i‡(
chù
) {

3212 
off£t
 = 
pö
 - 
chù
->chù.
ba£
;

3214 
	`ßmsung_gpio_lock
(
chù
, 
Êags
);

3215 
pup
 = 
	`ßmsung_gpio_do_gëpuŒ
(
chù
, 
off£t
);

3216 
	`ßmsung_gpio_u∆ock
(
chù
, 
Êags
);

3219  (
__f‹˚
 
ßmsung_gpio_puŒ_t
)
pup
;

3220 
	}
}

3221 
EXPORT_SYMBOL
(
s3c_gpio_gëpuŒ
);

3223 #ifde‡
CONFIG_S5P_GPIO_DRVSTR


3224 
s5p_gpio_drv°r_t
 
	$s5p_gpio_gë_drv°r
(
pö
)

3226 
ßmsung_gpio_chù
 *
chù
 = 
	`ßmsung_gpiﬁib_gëchù
(
pö
);

3227 
off
;

3228 
__iomem
 *
ªg
;

3229 
shi·
;

3230 
u32
 
drv°r
;

3232 i‡(!
chù
)

3233  -
EINVAL
;

3235 
off
 = 
pö
 - 
chù
->chù.
ba£
;

3236 
shi·
 = 
off
 * 2;

3237 
ªg
 = 
chù
->
ba£
 + 0x0C;

3239 
drv°r
 = 
	`__øw_ªadl
(
ªg
);

3240 
drv°r
 = drv°∏>> 
shi·
;

3241 
drv°r
 &= 0x3;

3243  (
__f‹˚
 
s5p_gpio_drv°r_t
)
drv°r
;

3244 
	}
}

3245 
EXPORT_SYMBOL
(
s5p_gpio_gë_drv°r
);

3247 
	$s5p_gpio_£t_drv°r
(
pö
, 
s5p_gpio_drv°r_t
 
drv°r
)

3249 
ßmsung_gpio_chù
 *
chù
 = 
	`ßmsung_gpiﬁib_gëchù
(
pö
);

3250 
off
;

3251 
__iomem
 *
ªg
;

3252 
shi·
;

3253 
u32
 
tmp
;

3255 i‡(!
chù
)

3256  -
EINVAL
;

3258 
off
 = 
pö
 - 
chù
->chù.
ba£
;

3259 
shi·
 = 
off
 * 2;

3260 
ªg
 = 
chù
->
ba£
 + 0x0C;

3262 
tmp
 = 
	`__øw_ªadl
(
ªg
);

3263 
tmp
 &~(0x3 << 
shi·
);

3264 
tmp
 |
drv°r
 << 
shi·
;

3266 
	`__øw_wrôñ
(
tmp
, 
ªg
);

3269 
	}
}

3270 
EXPORT_SYMBOL
(
s5p_gpio_£t_drv°r
);

3273 #ifde‡
CONFIG_PLAT_S3C24XX


3274 
	$s3c2410_modify_misc¸
(
˛ór
, 
ch™ge
)

3276 
Êags
;

3277 
misc¸
;

3279 
	`loˇl_úq_ßve
(
Êags
);

3280 
misc¸
 = 
	`__øw_ªadl
(
S3C24XX_MISCCR
);

3281 
misc¸
 &~
˛ór
;

3282 
misc¸
 ^
ch™ge
;

3283 
	`__øw_wrôñ
(
misc¸
, 
S3C24XX_MISCCR
);

3284 
	`loˇl_úq_ª°‹e
(
Êags
);

3286  
misc¸
;

3287 
	}
}

3288 
EXPORT_SYMBOL
(
s3c2410_modify_misc¸
);

	@gpio-sch.c

21 
	~<löux/öô.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/moduÀ.h
>

24 
	~<löux/io.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/a˝i.h
>

27 
	~<löux/∂©f‹m_devi˚.h
>

28 
	~<löux/pci_ids.h
>

30 
	~<löux/gpio.h
>

32 
DEFINE_SPINLOCK
(
gpio_lock
);

34 
	#CGEN
 (0x00)

	)

35 
	#CGIO
 (0x04)

	)

36 
	#CGLV
 (0x08)

	)

38 
	#RGEN
 (0x20)

	)

39 
	#RGIO
 (0x24)

	)

40 
	#RGLV
 (0x28)

	)

42 
	ggpio_ba
;

44 
	$sch_gpio_c‹e_dúe˘i⁄_ö
(
gpio_chù
 *
gc
, 
gpio_num
)

46 
u8
 
cuº_dús
;

47 
off£t
, 
bô
;

49 
	`•ö_lock
(&
gpio_lock
);

51 
off£t
 = 
CGIO
 + 
gpio_num
 / 8;

52 
bô
 = 
gpio_num
 % 8;

54 
cuº_dús
 = 
	`öb
(
gpio_ba
 + 
off£t
);

56 i‡(!(
cuº_dús
 & (1 << 
bô
)))

57 
	`outb
(
cuº_dús
 | (1 << 
bô
), 
gpio_ba
 + 
off£t
);

59 
	`•ö_u∆ock
(&
gpio_lock
);

61 
	}
}

63 
	$sch_gpio_c‹e_gë
(
gpio_chù
 *
gc
, 
gpio_num
)

65 
ªs
;

66 
off£t
, 
bô
;

68 
off£t
 = 
CGLV
 + 
gpio_num
 / 8;

69 
bô
 = 
gpio_num
 % 8;

71 
ªs
 = !!(
	`öb
(
gpio_ba
 + 
off£t
Ë& (1 << 
bô
));

72  
ªs
;

73 
	}
}

75 
	$sch_gpio_c‹e_£t
(
gpio_chù
 *
gc
, 
gpio_num
, 
vÆ
)

77 
u8
 
cuº_vÆs
;

78 
off£t
, 
bô
;

80 
	`•ö_lock
(&
gpio_lock
);

82 
off£t
 = 
CGLV
 + 
gpio_num
 / 8;

83 
bô
 = 
gpio_num
 % 8;

85 
cuº_vÆs
 = 
	`öb
(
gpio_ba
 + 
off£t
);

87 i‡(
vÆ
)

88 
	`outb
(
cuº_vÆs
 | (1 << 
bô
), 
gpio_ba
 + 
off£t
);

90 
	`outb
((
cuº_vÆs
 & ~(1 << 
bô
)), 
gpio_ba
 + 
off£t
);

91 
	`•ö_u∆ock
(&
gpio_lock
);

92 
	}
}

94 
	$sch_gpio_c‹e_dúe˘i⁄_out
(
gpio_chù
 *
gc
,

95 
gpio_num
, 
vÆ
)

97 
u8
 
cuº_dús
;

98 
off£t
, 
bô
;

100 
	`sch_gpio_c‹e_£t
(
gc
, 
gpio_num
, 
vÆ
);

102 
	`•ö_lock
(&
gpio_lock
);

104 
off£t
 = 
CGIO
 + 
gpio_num
 / 8;

105 
bô
 = 
gpio_num
 % 8;

107 
cuº_dús
 = 
	`öb
(
gpio_ba
 + 
off£t
);

108 i‡(
cuº_dús
 & (1 << 
bô
))

109 
	`outb
(
cuº_dús
 & ~(1 << 
bô
), 
gpio_ba
 + 
off£t
);

111 
	`•ö_u∆ock
(&
gpio_lock
);

113 
	}
}

115 
gpio_chù
 
	gsch_gpio_c‹e
 = {

116 .
œbñ
 = "sch_gpio_core",

117 .
	gow√r
 = 
THIS_MODULE
,

118 .
	gdúe˘i⁄_öput
 = 
sch_gpio_c‹e_dúe˘i⁄_ö
,

119 .
	ggë
 = 
sch_gpio_c‹e_gë
,

120 .
	gdúe˘i⁄_ouçut
 = 
sch_gpio_c‹e_dúe˘i⁄_out
,

121 .
	g£t
 = 
sch_gpio_c‹e_£t
,

124 
	$sch_gpio_ªsume_dúe˘i⁄_ö
(
gpio_chù
 *
gc
,

125 
gpio_num
)

127 
u8
 
cuº_dús
;

128 
off£t
, 
bô
;

130 
	`•ö_lock
(&
gpio_lock
);

132 
off£t
 = 
RGIO
 + 
gpio_num
 / 8;

133 
bô
 = 
gpio_num
 % 8;

135 
cuº_dús
 = 
	`öb
(
gpio_ba
 + 
off£t
);

137 i‡(!(
cuº_dús
 & (1 << 
bô
)))

138 
	`outb
(
cuº_dús
 | (1 << 
bô
), 
gpio_ba
 + 
off£t
);

140 
	`•ö_u∆ock
(&
gpio_lock
);

142 
	}
}

144 
	$sch_gpio_ªsume_gë
(
gpio_chù
 *
gc
, 
gpio_num
)

146 
off£t
, 
bô
;

148 
off£t
 = 
RGLV
 + 
gpio_num
 / 8;

149 
bô
 = 
gpio_num
 % 8;

151  !!(
	`öb
(
gpio_ba
 + 
off£t
Ë& (1 << 
bô
));

152 
	}
}

154 
	$sch_gpio_ªsume_£t
(
gpio_chù
 *
gc
,

155 
gpio_num
, 
vÆ
)

157 
u8
 
cuº_vÆs
;

158 
off£t
, 
bô
;

160 
	`•ö_lock
(&
gpio_lock
);

162 
off£t
 = 
RGLV
 + 
gpio_num
 / 8;

163 
bô
 = 
gpio_num
 % 8;

165 
cuº_vÆs
 = 
	`öb
(
gpio_ba
 + 
off£t
);

167 i‡(
vÆ
)

168 
	`outb
(
cuº_vÆs
 | (1 << 
bô
), 
gpio_ba
 + 
off£t
);

170 
	`outb
((
cuº_vÆs
 & ~(1 << 
bô
)), 
gpio_ba
 + 
off£t
);

172 
	`•ö_u∆ock
(&
gpio_lock
);

173 
	}
}

175 
	$sch_gpio_ªsume_dúe˘i⁄_out
(
gpio_chù
 *
gc
,

176 
gpio_num
, 
vÆ
)

178 
u8
 
cuº_dús
;

179 
off£t
, 
bô
;

181 
	`sch_gpio_ªsume_£t
(
gc
, 
gpio_num
, 
vÆ
);

183 
off£t
 = 
RGIO
 + 
gpio_num
 / 8;

184 
bô
 = 
gpio_num
 % 8;

186 
	`•ö_lock
(&
gpio_lock
);

188 
cuº_dús
 = 
	`öb
(
gpio_ba
 + 
off£t
);

189 i‡(
cuº_dús
 & (1 << 
bô
))

190 
	`outb
(
cuº_dús
 & ~(1 << 
bô
), 
gpio_ba
 + 
off£t
);

192 
	`•ö_u∆ock
(&
gpio_lock
);

194 
	}
}

196 
gpio_chù
 
	gsch_gpio_ªsume
 = {

197 .
œbñ
 = "sch_gpio_resume",

198 .
	gow√r
 = 
THIS_MODULE
,

199 .
	gdúe˘i⁄_öput
 = 
sch_gpio_ªsume_dúe˘i⁄_ö
,

200 .
	ggë
 = 
sch_gpio_ªsume_gë
,

201 .
	gdúe˘i⁄_ouçut
 = 
sch_gpio_ªsume_dúe˘i⁄_out
,

202 .
	g£t
 = 
sch_gpio_ªsume_£t
,

205 
	$sch_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

207 
ªsour˚
 *
ªs
;

208 
îr
, 
id
;

210 
id
 = 
pdev
->id;

211 i‡(!
id
)

212  -
ENODEV
;

214 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 0);

215 i‡(!
ªs
)

216  -
EBUSY
;

218 i‡(!
	`ªque°_ªgi⁄
(
ªs
->
°¨t
, 
	`ªsour˚_size
‘es), 
pdev
->
«me
))

219  -
EBUSY
;

221 
gpio_ba
 = 
ªs
->
°¨t
;

223 
id
) {

224 
PCI_DEVICE_ID_INTEL_SCH_LPC
:

225 
sch_gpio_c‹e
.
ba£
 = 0;

226 
sch_gpio_c‹e
.
ngpio
 = 10;

227 
sch_gpio_ªsume
.
ba£
 = 10;

228 
sch_gpio_ªsume
.
ngpio
 = 4;

234 
	`outb
(0x3, 
gpio_ba
 + 
CGEN
 + 1);

239 
	`outb
(0x8, 
gpio_ba
 + 
RGEN
);

242 
PCI_DEVICE_ID_INTEL_ITC_LPC
:

243 
sch_gpio_c‹e
.
ba£
 = 0;

244 
sch_gpio_c‹e
.
ngpio
 = 5;

245 
sch_gpio_ªsume
.
ba£
 = 5;

246 
sch_gpio_ªsume
.
ngpio
 = 9;

249 
PCI_DEVICE_ID_INTEL_CENTERTON_ILB
:

250 
sch_gpio_c‹e
.
ba£
 = 0;

251 
sch_gpio_c‹e
.
ngpio
 = 21;

252 
sch_gpio_ªsume
.
ba£
 = 21;

253 
sch_gpio_ªsume
.
ngpio
 = 9;

257 
îr
 = -
ENODEV
;

258 
îr_sch_gpio_c‹e
;

261 
sch_gpio_c‹e
.
dev
 = &
pdev
->dev;

262 
sch_gpio_ªsume
.
dev
 = &
pdev
->dev;

264 
îr
 = 
	`gpiochù_add
(&
sch_gpio_c‹e
);

265 i‡(
îr
 < 0)

266 
îr_sch_gpio_c‹e
;

268 
îr
 = 
	`gpiochù_add
(&
sch_gpio_ªsume
);

269 i‡(
îr
 < 0)

270 
îr_sch_gpio_ªsume
;

274 
îr_sch_gpio_ªsume
:

275 i‡(
	`gpiochù_ªmove
(&
sch_gpio_c‹e
))

276 
	`dev_îr
(&
pdev
->
dev
, "%†gpiochù_ªmovêÁûed\n", 
__func__
);

278 
îr_sch_gpio_c‹e
:

279 
	`ªÀa£_ªgi⁄
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

280 
gpio_ba
 = 0;

282  
îr
;

283 
	}
}

285 
	$sch_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

287 
ªsour˚
 *
ªs
;

288 i‡(
gpio_ba
) {

289 
îr
;

291 
îr
 = 
	`gpiochù_ªmove
(&
sch_gpio_c‹e
);

292 i‡(
îr
)

293 
	`dev_îr
(&
pdev
->
dev
, "%s failed, %d\n",

294 "gpiochù_ªmove()", 
îr
);

295 
îr
 = 
	`gpiochù_ªmove
(&
sch_gpio_ªsume
);

296 i‡(
îr
)

297 
	`dev_îr
(&
pdev
->
dev
, "%s failed, %d\n",

298 "gpiochù_ªmove()", 
îr
);

300 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 0);

302 
	`ªÀa£_ªgi⁄
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

303 
gpio_ba
 = 0;

305  
îr
;

309 
	}
}

311 
∂©f‹m_drivî
 
	gsch_gpio_drivî
 = {

312 .
drivî
 = {

313 .
«me
 = "sch_gpio",

314 .
	gow√r
 = 
THIS_MODULE
,

316 .
	g¥obe
 = 
sch_gpio_¥obe
,

317 .
	gªmove
 = 
sch_gpio_ªmove
,

320 
moduÀ_∂©f‹m_drivî
(
sch_gpio_drivî
);

322 
MODULE_AUTHOR
("Denis Turischev <denis@compulab.co.il>");

323 
MODULE_DESCRIPTION
("GPIO interface for Intel Poulsbo SCH");

324 
MODULE_LICENSE
("GPL");

325 
MODULE_ALIAS
("platform:sch_gpio");

	@gpio-sodaville.c

12 
	~<löux/î∫o.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/io.h
>

16 
	~<löux/úq.h
>

17 
	~<löux/öãºu±.h
>

18 
	~<löux/kî√l.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/pci.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/of_úq.h
>

23 
	~<löux/basic_mmio_gpio.h
>

25 
	#DRV_NAME
 "sdv_gpio"

	)

26 
	#SDV_NUM_PUB_GPIOS
 12

	)

27 
	#PCI_DEVICE_ID_SDV_GPIO
 0x2e67

	)

28 
	#GPIO_BAR
 0

	)

30 
	#GPOUTR
 0x00

	)

31 
	#GPOER
 0x04

	)

32 
	#GPINR
 0x08

	)

34 
	#GPSTR
 0x0c

	)

35 
	#GPIT1R0
 0x10

	)

36 
	#GPIO_INT
 0x14

	)

37 
	#GPIT1R1
 0x18

	)

39 
	#GPMUXCTL
 0x1c

	)

41 
	ssdv_gpio_chù_d©a
 {

42 
	múq_ba£
;

43 
__iomem
 *
	mgpio_pub_ba£
;

44 
úq_domaö
 *
	mid
;

45 
úq_chù_gíîic
 *
	mgc
;

46 
bgpio_chù
 
	mbgpio
;

49 
	$sdv_gpio_pub_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

51 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

52 
sdv_gpio_chù_d©a
 *
sd
 = 
gc
->
¥iv©e
;

53 
__iomem
 *
ty≥_ªg
;

54 
u32
 
ªg
;

56 i‡(
d
->
hwúq
 < 8)

57 
ty≥_ªg
 = 
sd
->
gpio_pub_ba£
 + 
GPIT1R0
;

59 
ty≥_ªg
 = 
sd
->
gpio_pub_ba£
 + 
GPIT1R1
;

61 
ªg
 = 
	`ªadl
(
ty≥_ªg
);

63 
ty≥
) {

64 
IRQ_TYPE_LEVEL_HIGH
:

65 
ªg
 &~
	`BIT
(4 * (
d
->
hwúq
 % 8));

68 
IRQ_TYPE_LEVEL_LOW
:

69 
ªg
 |
	`BIT
(4 * (
d
->
hwúq
 % 8));

73  -
EINVAL
;

76 
	`wrôñ
(
ªg
, 
ty≥_ªg
);

78 
	}
}

80 
úqªtu∫_t
 
	$sdv_gpio_pub_úq_h™dÀr
(
úq
, *
d©a
)

82 
sdv_gpio_chù_d©a
 *
sd
 = 
d©a
;

83 
u32
 
úq_°©
 = 
	`ªadl
(
sd
->
gpio_pub_ba£
 + 
GPSTR
);

85 
úq_°©
 &
	`ªadl
(
sd
->
gpio_pub_ba£
 + 
GPIO_INT
);

86 i‡(!
úq_°©
)

87  
IRQ_NONE
;

89 
úq_°©
) {

90 
u32
 
úq_bô
 = 
	`__Ês
(
úq_°©
);

92 
úq_°©
 &~
	`BIT
(
úq_bô
);

93 
	`gíîic_h™dÀ_úq
(
	`úq_föd_m≠pög
(
sd
->
id
, 
úq_bô
));

96  
IRQ_HANDLED
;

97 
	}
}

99 
	$sdv_xœã
(
úq_domaö
 *
h
, 
devi˚_node
 *
node
,

100 c⁄° 
u32
 *
öt•ec
, u32 
ötsize
, 
úq_hw_numbî_t
 *
out_hwúq
,

101 
u32
 *
out_ty≥
)

103 
u32
 
löe
, 
ty≥
;

105 i‡(
node
 !
h
->
of_node
)

106  -
EINVAL
;

108 i‡(
ötsize
 < 2)

109  -
EINVAL
;

111 
löe
 = *
öt•ec
;

112 *
out_hwúq
 = 
löe
;

114 
öt•ec
++;

115 
ty≥
 = *
öt•ec
;

117 
ty≥
) {

118 
IRQ_TYPE_LEVEL_LOW
:

119 
IRQ_TYPE_LEVEL_HIGH
:

120 *
out_ty≥
 = 
ty≥
;

123  -
EINVAL
;

126 
	}
}

128 
úq_domaö_›s
 
	gúq_domaö_sdv_›s
 = {

129 .
xœã
 = 
sdv_xœã
,

132 
	$sdv_ªgi°î_úqsuµ‹t
(
sdv_gpio_chù_d©a
 *
sd
,

133 
pci_dev
 *
pdev
)

135 
úq_chù_ty≥
 *
˘
;

136 
ªt
;

138 
sd
->
úq_ba£
 = 
	`úq_Æloc_descs
(-1, 0, 
SDV_NUM_PUB_GPIOS
, -1);

139 i‡(
sd
->
úq_ba£
 < 0)

140  
sd
->
úq_ba£
;

143 
	`wrôñ
(0, 
sd
->
gpio_pub_ba£
 + 
GPIO_INT
);

144 
	`wrôñ
((1 << 11Ë- 1, 
sd
->
gpio_pub_ba£
 + 
GPSTR
);

146 
ªt
 = 
	`ªque°_úq
(
pdev
->
úq
, 
sdv_gpio_pub_úq_h™dÀr
, 
IRQF_SHARED
,

147 "sdv_gpio", 
sd
);

148 i‡(
ªt
)

149 
out_‰ì_desc
;

156 
sd
->
gc
 = 
	`úq_Æloc_gíîic_chù
("sdv-gpio", 1, sd->
úq_ba£
,

157 
sd
->
gpio_pub_ba£
, 
h™dÀ_Á°eoi_úq
);

158 i‡(!
sd
->
gc
) {

159 
ªt
 = -
ENOMEM
;

160 
out_‰ì_úq
;

163 
sd
->
gc
->
¥iv©e
 = sd;

164 
˘
 = 
sd
->
gc
->
chù_ty≥s
;

165 
˘
->
ty≥
 = 
IRQ_TYPE_LEVEL_HIGH
 | 
IRQ_TYPE_LEVEL_LOW
;

166 
˘
->
ªgs
.
eoi
 = 
GPSTR
;

167 
˘
->
ªgs
.
mask
 = 
GPIO_INT
;

168 
˘
->
chù
.
úq_mask
 = 
úq_gc_mask_˛r_bô
;

169 
˘
->
chù
.
úq_unmask
 = 
úq_gc_mask_£t_bô
;

170 
˘
->
chù
.
úq_eoi
 = 
úq_gc_eoi
;

171 
˘
->
chù
.
úq_£t_ty≥
 = 
sdv_gpio_pub_£t_ty≥
;

173 
	`úq_£tup_gíîic_chù
(
sd
->
gc
, 
	`IRQ_MSK
(
SDV_NUM_PUB_GPIOS
),

174 
IRQ_GC_INIT_MASK_CACHE
, 
IRQ_NOREQUEST
,

175 
IRQ_LEVEL
 | 
IRQ_NOPROBE
);

177 
sd
->
id
 = 
	`úq_domaö_add_Àgacy
(
pdev
->
dev
.
of_node
, 
SDV_NUM_PUB_GPIOS
,

178 
sd
->
úq_ba£
, 0, &
úq_domaö_sdv_›s
, sd);

179 i‡(!
sd
->
id
)

180 
out_‰ì_úq
;

182 
out_‰ì_úq
:

183 
	`‰ì_úq
(
pdev
->
úq
, 
sd
);

184 
out_‰ì_desc
:

185 
	`úq_‰ì_descs
(
sd
->
úq_ba£
, 
SDV_NUM_PUB_GPIOS
);

186  
ªt
;

187 
	}
}

189 
	$sdv_gpio_¥obe
(
pci_dev
 *
pdev
,

190 c⁄° 
pci_devi˚_id
 *
pci_id
)

192 
sdv_gpio_chù_d©a
 *
sd
;

193 
addr
;

194 c⁄° *
¥›
;

195 
Àn
;

196 
ªt
;

197 
u32
 
mux_vÆ
;

199 
sd
 = 
	`kzÆloc
((
sdv_gpio_chù_d©a
), 
GFP_KERNEL
);

200 i‡(!
sd
)

201  -
ENOMEM
;

202 
ªt
 = 
	`pci_íabÀ_devi˚
(
pdev
);

203 i‡(
ªt
) {

204 
	`dev_îr
(&
pdev
->
dev
, "can'tÉnable device.\n");

205 
d⁄e
;

208 
ªt
 = 
	`pci_ªque°_ªgi⁄
(
pdev
, 
GPIO_BAR
, 
DRV_NAME
);

209 i‡(
ªt
) {

210 
	`dev_îr
(&
pdev
->
dev
, "ˇn'àÆlo¯PCI BAR #%d\n", 
GPIO_BAR
);

211 
dißbÀ_pci
;

214 
addr
 = 
	`pci_ªsour˚_°¨t
(
pdev
, 
GPIO_BAR
);

215 i‡(!
addr
)

216 
ªÀa£_ªg
;

217 
sd
->
gpio_pub_ba£
 = 
	`i‹em≠
(
addr
, 
	`pci_ªsour˚_Àn
(
pdev
, 
GPIO_BAR
));

219 
¥›
 = 
	`of_gë_¥›îty
(
pdev
->
dev
.
of_node
, "öãl,mux˘l", &
Àn
);

220 i‡(
¥›
 && 
Àn
 == 4) {

221 
mux_vÆ
 = 
	`of_ªad_numbî
(
¥›
, 1);

222 
	`wrôñ
(
mux_vÆ
, 
sd
->
gpio_pub_ba£
 + 
GPMUXCTL
);

225 
ªt
 = 
	`bgpio_öô
(&
sd
->
bgpio
, &
pdev
->
dev
, 4,

226 
sd
->
gpio_pub_ba£
 + 
GPINR
, sd->gpio_pub_ba£ + 
GPOUTR
,

227 
NULL
, 
sd
->
gpio_pub_ba£
 + 
GPOER
, NULL, 0);

228 i‡(
ªt
)

229 
unm≠
;

230 
sd
->
bgpio
.
gc
.
ngpio
 = 
SDV_NUM_PUB_GPIOS
;

232 
ªt
 = 
	`gpiochù_add
(&
sd
->
bgpio
.
gc
);

233 i‡(
ªt
 < 0) {

234 
	`dev_îr
(&
pdev
->
dev
, "gpiochip_add() failed.\n");

235 
unm≠
;

238 
ªt
 = 
	`sdv_ªgi°î_úqsuµ‹t
(
sd
, 
pdev
);

239 i‡(
ªt
)

240 
unm≠
;

242 
	`pci_£t_drvd©a
(
pdev
, 
sd
);

243 
	`dev_öfo
(&
pdev
->
dev
, "Sodaville GPIO driverÑegistered.\n");

246 
unm≠
:

247 
	`iounm≠
(
sd
->
gpio_pub_ba£
);

248 
ªÀa£_ªg
:

249 
	`pci_ªÀa£_ªgi⁄
(
pdev
, 
GPIO_BAR
);

250 
dißbÀ_pci
:

251 
	`pci_dißbÀ_devi˚
(
pdev
);

252 
d⁄e
:

253 
	`k‰ì
(
sd
);

254  
ªt
;

255 
	}
}

257 
	$sdv_gpio_ªmove
(
pci_dev
 *
pdev
)

259 
sdv_gpio_chù_d©a
 *
sd
 = 
	`pci_gë_drvd©a
(
pdev
);

261 
	`‰ì_úq
(
pdev
->
úq
, 
sd
);

262 
	`úq_‰ì_descs
(
sd
->
úq_ba£
, 
SDV_NUM_PUB_GPIOS
);

264 i‡(
	`gpiochù_ªmove
(&
sd
->
bgpio
.
gc
))

265 
	`dev_îr
(&
pdev
->
dev
, "gpiochip_remove() failed.\n");

267 
	`pci_ªÀa£_ªgi⁄
(
pdev
, 
GPIO_BAR
);

268 
	`iounm≠
(
sd
->
gpio_pub_ba£
);

269 
	`pci_dißbÀ_devi˚
(
pdev
);

270 
	`k‰ì
(
sd
);

271 
	}
}

273 
DEFINE_PCI_DEVICE_TABLE
(
sdv_gpio_pci_ids
) = {

274 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_SDV_GPIO
) },

278 
pci_drivî
 
	gsdv_gpio_drivî
 = {

279 .
«me
 = 
DRV_NAME
,

280 .
	gid_èbÀ
 = 
sdv_gpio_pci_ids
,

281 .
	g¥obe
 = 
sdv_gpio_¥obe
,

282 .
	gªmove
 = 
sdv_gpio_ªmove
,

285 
moduÀ_pci_drivî
(
sdv_gpio_drivî
);

287 
MODULE_AUTHOR
("Hans J. Koch <hjk@linutronix.de>");

288 
MODULE_DESCRIPTION
("GPIO interface for Intel Sodaville SoCs");

289 
MODULE_LICENSE
("GPL v2");

	@gpio-spear-spics.c

12 
	~<löux/îr.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/io.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/of.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/ty≥s.h
>

21 
	#NUM_OF_GPIO
 4

	)

45 
	s•ór_•ics
 {

46 
__iomem
 *
	mba£
;

47 
u32
 
	m≥rù_cfg
;

48 
u32
 
	msw_íabÀ_bô
;

49 
u32
 
	mcs_vÆue_bô
;

50 
u32
 
	mcs_íabÀ_mask
;

51 
u32
 
	mcs_íabÀ_shi·
;

52 
	mu£_cou¡
;

53 
	mœ°_off
;

54 
gpio_chù
 
	mchù
;

58 
	$•ics_gë_vÆue
(
gpio_chù
 *
chù
, 
off£t
)

60  -
ENXIO
;

61 
	}
}

63 
	$•ics_£t_vÆue
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

65 
•ór_•ics
 *
•ics
 = 
	`c⁄èöî_of
(
chù
, spear_spics,

66 
chù
);

67 
u32
 
tmp
;

70 
tmp
 = 
	`ªadl_ªœxed
(
•ics
->
ba£
 + spics->
≥rù_cfg
);

71 i‡(
•ics
->
œ°_off
 !
off£t
) {

72 
•ics
->
œ°_off
 = 
off£t
;

73 
tmp
 &~(
•ics
->
cs_íabÀ_mask
 << spics->
cs_íabÀ_shi·
);

74 
tmp
 |
off£t
 << 
•ics
->
cs_íabÀ_shi·
;

78 
tmp
 &~(0x1 << 
•ics
->
cs_vÆue_bô
);

79 
tmp
 |
vÆue
 << 
•ics
->
cs_vÆue_bô
;

80 
	`wrôñ_ªœxed
(
tmp
, 
•ics
->
ba£
 + spics->
≥rù_cfg
);

81 
	}
}

83 
	$•ics_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

85  -
ENXIO
;

86 
	}
}

88 
	$•ics_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
,

89 
vÆue
)

91 
	`•ics_£t_vÆue
(
chù
, 
off£t
, 
vÆue
);

93 
	}
}

95 
	$•ics_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

97 
•ór_•ics
 *
•ics
 = 
	`c⁄èöî_of
(
chù
, spear_spics,

98 
chù
);

99 
u32
 
tmp
;

101 i‡(!
•ics
->
u£_cou¡
++) {

102 
tmp
 = 
	`ªadl_ªœxed
(
•ics
->
ba£
 + spics->
≥rù_cfg
);

103 
tmp
 |0x1 << 
•ics
->
sw_íabÀ_bô
;

104 
tmp
 |0x1 << 
•ics
->
cs_vÆue_bô
;

105 
	`wrôñ_ªœxed
(
tmp
, 
•ics
->
ba£
 + spics->
≥rù_cfg
);

109 
	}
}

111 
	$•ics_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

113 
•ór_•ics
 *
•ics
 = 
	`c⁄èöî_of
(
chù
, spear_spics,

114 
chù
);

115 
u32
 
tmp
;

117 i‡(!--
•ics
->
u£_cou¡
) {

118 
tmp
 = 
	`ªadl_ªœxed
(
•ics
->
ba£
 + spics->
≥rù_cfg
);

119 
tmp
 &~(0x1 << 
•ics
->
sw_íabÀ_bô
);

120 
	`wrôñ_ªœxed
(
tmp
, 
•ics
->
ba£
 + spics->
≥rù_cfg
);

122 
	}
}

124 
	$•ics_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

126 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

127 
•ór_•ics
 *
•ics
;

128 
ªsour˚
 *
ªs
;

129 
ªt
;

131 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

132 i‡(!
ªs
) {

133 
	`dev_îr
(&
pdev
->
dev
, "invalid IORESOURCE_MEM\n");

134  -
EBUSY
;

137 
•ics
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*•ics), 
GFP_KERNEL
);

138 i‡(!
•ics
) {

139 
	`dev_îr
(&
pdev
->
dev
, "memoryállocation fail\n");

140  -
ENOMEM
;

143 
•ics
->
ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

144 i‡(
	`IS_ERR
(
•ics
->
ba£
))

145  
	`PTR_ERR
(
•ics
->
ba£
);

147 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "st-spics,peripcfg-reg",

148 &
•ics
->
≥rù_cfg
))

149 
îr_dt_d©a
;

150 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "st-spics,sw-enable-bit",

151 &
•ics
->
sw_íabÀ_bô
))

152 
îr_dt_d©a
;

153 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "st-spics,cs-value-bit",

154 &
•ics
->
cs_vÆue_bô
))

155 
îr_dt_d©a
;

156 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "st-spics,cs-enable-mask",

157 &
•ics
->
cs_íabÀ_mask
))

158 
îr_dt_d©a
;

159 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "st-spics,cs-enable-shift",

160 &
•ics
->
cs_íabÀ_shi·
))

161 
îr_dt_d©a
;

163 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
•ics
);

165 
•ics
->
chù
.
ngpio
 = 
NUM_OF_GPIO
;

166 
•ics
->
chù
.
ba£
 = -1;

167 
•ics
->
chù
.
ªque°
 = 
•ics_ªque°
;

168 
•ics
->
chù
.
‰ì
 = 
•ics_‰ì
;

169 
•ics
->
chù
.
dúe˘i⁄_öput
 = 
•ics_dúe˘i⁄_öput
;

170 
•ics
->
chù
.
dúe˘i⁄_ouçut
 = 
•ics_dúe˘i⁄_ouçut
;

171 
•ics
->
chù
.
gë
 = 
•ics_gë_vÆue
;

172 
•ics
->
chù
.
£t
 = 
•ics_£t_vÆue
;

173 
•ics
->
chù
.
œbñ
 = 
	`dev_«me
(&
pdev
->
dev
);

174 
•ics
->
chù
.
dev
 = &
pdev
->dev;

175 
•ics
->
chù
.
ow√r
 = 
THIS_MODULE
;

176 
•ics
->
œ°_off
 = -1;

178 
ªt
 = 
	`gpiochù_add
(&
•ics
->
chù
);

179 i‡(
ªt
) {

180 
	`dev_îr
(&
pdev
->
dev
, "unableÅoádd gpio chip\n");

181  
ªt
;

184 
	`dev_öfo
(&
pdev
->
dev
, "spear spicsÑegistered\n");

187 
îr_dt_d©a
:

188 
	`dev_îr
(&
pdev
->
dev
, "DTÖrobe failed\n");

189  -
EINVAL
;

190 
	}
}

192 c⁄° 
of_devi˚_id
 
	g•ics_gpio_of_m©ch
[] = {

193 { .
com∑tibÀ
 = "st,spear-spics-gpio" },

196 
MODULE_DEVICE_TABLE
(
of
, 
•ics_gpio_of_m©ch
);

198 
∂©f‹m_drivî
 
	g•ics_gpio_drivî
 = {

199 .
¥obe
 = 
•ics_gpio_¥obe
,

200 .
	gdrivî
 = {

201 .
ow√r
 = 
THIS_MODULE
,

202 .
	g«me
 = "spear-spics-gpio",

203 .
	gof_m©ch_èbÀ
 = 
•ics_gpio_of_m©ch
,

207 
__öô
 
	$•ics_gpio_öô
()

209  
	`∂©f‹m_drivî_ªgi°î
(&
•ics_gpio_drivî
);

210 
	}
}

211 
subsys_öôˇŒ
(
•ics_gpio_öô
);

213 
MODULE_AUTHOR
("Shiraz Hashim <shiraz.hashim@st.com>");

214 
MODULE_DESCRIPTION
("ST Microlectronics SPEAr SPI Chip Select Abstraction");

215 
MODULE_LICENSE
("GPL");

	@gpio-sta2x11.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/¶ab.h
>

26 
	~<löux/gpio.h
>

27 
	~<löux/öãºu±.h
>

28 
	~<löux/úq.h
>

29 
	~<löux/pci.h
>

30 
	~<löux/∂©f‹m_devi˚.h
>

31 
	~<löux/mfd/°a2x11-mfd.h
>

33 
	sg°a_ªgs
 {

34 
u32
 
	md©
;

35 
u32
 
	md©s
;

36 
u32
 
	md©c
;

37 
u32
 
	mpdis
;

38 
u32
 
	mdú
;

39 
u32
 
	mdús
;

40 
u32
 
	mdúc
;

41 
u32
 
	munu£d_1c
;

42 
u32
 
	maf£œ
;

43 
u32
 
	munu£d_24
[7];

44 
u32
 
	mrimsc
;

45 
u32
 
	mfimsc
;

46 
u32
 
	mis
;

47 
u32
 
	mic
;

50 
	sg°a_gpio
 {

51 
•ölock_t
 
	mlock
;

52 
devi˚
 *
	mdev
;

53 
__iomem
 *
	mªg_ba£
;

54 
g°a_ªgs
 
__iomem
 *
	mªgs
[
GSTA_NR_BLOCKS
];

55 
gpio_chù
 
	mgpio
;

56 
	múq_ba£
;

58 
	múq_ty≥
[
GSTA_NR_GPIO
];

61 
ölöe
 
g°a_ªgs
 
__iomem
 *
	$__ªgs
(
g°a_gpio
 *
chù
, 
ƒ
)

63  
chù
->
ªgs
[
ƒ
 / 
GSTA_GPIO_PER_BLOCK
];

64 
	}
}

66 
ölöe
 
u32
 
	$__bô
(
ƒ
)

68  1U << (
ƒ
 % 
GSTA_GPIO_PER_BLOCK
);

69 
	}
}

75 
	$g°a_gpio_£t
(
gpio_chù
 *
gpio
, 
ƒ
, 
vÆ
)

77 
g°a_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, gsta_gpio, gpio);

78 
g°a_ªgs
 
__iomem
 *
ªgs
 = 
	`__ªgs
(
chù
, 
ƒ
);

79 
u32
 
bô
 = 
	`__bô
(
ƒ
);

81 i‡(
vÆ
)

82 
	`wrôñ
(
bô
, &
ªgs
->
d©s
);

84 
	`wrôñ
(
bô
, &
ªgs
->
d©c
);

85 
	}
}

87 
	$g°a_gpio_gë
(
gpio_chù
 *
gpio
, 
ƒ
)

89 
g°a_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, gsta_gpio, gpio);

90 
g°a_ªgs
 
__iomem
 *
ªgs
 = 
	`__ªgs
(
chù
, 
ƒ
);

91 
u32
 
bô
 = 
	`__bô
(
ƒ
);

93  
	`ªadl
(&
ªgs
->
d©
Ë& 
bô
;

94 
	}
}

96 
	$g°a_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gpio
, 
ƒ
,

97 
vÆ
)

99 
g°a_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, gsta_gpio, gpio);

100 
g°a_ªgs
 
__iomem
 *
ªgs
 = 
	`__ªgs
(
chù
, 
ƒ
);

101 
u32
 
bô
 = 
	`__bô
(
ƒ
);

103 
	`wrôñ
(
bô
, &
ªgs
->
dús
);

105 i‡(
vÆ
)

106 
	`wrôñ
(
bô
, &
ªgs
->
d©s
);

108 
	`wrôñ
(
bô
, &
ªgs
->
d©c
);

110 
	}
}

112 
	$g°a_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gpio
, 
ƒ
)

114 
g°a_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, gsta_gpio, gpio);

115 
g°a_ªgs
 
__iomem
 *
ªgs
 = 
	`__ªgs
(
chù
, 
ƒ
);

116 
u32
 
bô
 = 
	`__bô
(
ƒ
);

118 
	`wrôñ
(
bô
, &
ªgs
->
dúc
);

120 
	}
}

122 
	$g°a_gpio_to_úq
(
gpio_chù
 *
gpio
, 
off£t
)

124 
g°a_gpio
 *
chù
 = 
	`c⁄èöî_of
(
gpio
, gsta_gpio, gpio);

125  
chù
->
úq_ba£
 + 
off£t
;

126 
	}
}

128 
	$g°a_gpio_£tup
(
g°a_gpio
 *
chù
)

130 
gpio_chù
 *
gpio
 = &
chù
->gpio;

138 
gpio_ba£
;

140 
gpio
->
œbñ
 = 
	`dev_«me
(
chù
->
dev
);

141 
gpio
->
ow√r
 = 
THIS_MODULE
;

142 
gpio
->
dúe˘i⁄_öput
 = 
g°a_gpio_dúe˘i⁄_öput
;

143 
gpio
->
gë
 = 
g°a_gpio_gë
;

144 
gpio
->
dúe˘i⁄_ouçut
 = 
g°a_gpio_dúe˘i⁄_ouçut
;

145 
gpio
->
£t
 = 
g°a_gpio_£t
;

146 
gpio
->
dbg_show
 = 
NULL
;

147 
gpio
->
ba£
 = 
gpio_ba£
;

148 
gpio
->
ngpio
 = 
GSTA_NR_GPIO
;

149 
gpio
->
ˇn_¶ìp
 = 0;

150 
gpio
->
to_úq
 = 
g°a_gpio_to_úq
;

156 i‡(!
gpio_ba£
)

157 
gpio_ba£
 = -1;

158 
	}
}

166 
	$g°a_£t_c⁄fig
(
g°a_gpio
 *
chù
, 
ƒ
, 
cfg
)

168 
g°a_ªgs
 
__iomem
 *
ªgs
 = 
	`__ªgs
(
chù
, 
ƒ
);

169 
Êags
;

170 
u32
 
bô
 = 
	`__bô
(
ƒ
);

171 
u32
 
vÆ
;

172 
îr
 = 0;

174 
	`¥_öfo
("%s: %∞%ò%i\n", 
__func__
, 
chù
, 
ƒ
, 
cfg
);

176 i‡(
cfg
 =
PINMUX_TYPE_NONE
)

180 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

181 
vÆ
 = 
	`ªadl
(&
ªgs
->
af£œ
);

182 i‡(
cfg
 =
PINMUX_TYPE_FUNCTION
)

183 
vÆ
 |
bô
;

185 
vÆ
 &~
bô
;

186 
	`wrôñ
(
vÆ
 | 
bô
, &
ªgs
->
af£œ
);

187 i‡(
cfg
 =
PINMUX_TYPE_FUNCTION
) {

188 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

193 
cfg
) {

194 
PINMUX_TYPE_OUTPUT_LOW
:

195 
	`wrôñ
(
bô
, &
ªgs
->
dús
);

196 
	`wrôñ
(
bô
, &
ªgs
->
d©c
);

198 
PINMUX_TYPE_OUTPUT_HIGH
:

199 
	`wrôñ
(
bô
, &
ªgs
->
dús
);

200 
	`wrôñ
(
bô
, &
ªgs
->
d©s
);

202 
PINMUX_TYPE_INPUT
:

203 
	`wrôñ
(
bô
, &
ªgs
->
dúc
);

204 
vÆ
 = 
	`ªadl
(&
ªgs
->
pdis
Ë| 
bô
;

205 
	`wrôñ
(
vÆ
, &
ªgs
->
pdis
);

207 
PINMUX_TYPE_INPUT_PULLUP
:

208 
	`wrôñ
(
bô
, &
ªgs
->
dúc
);

209 
vÆ
 = 
	`ªadl
(&
ªgs
->
pdis
Ë& ~
bô
;

210 
	`wrôñ
(
vÆ
, &
ªgs
->
pdis
);

211 
	`wrôñ
(
bô
, &
ªgs
->
d©s
);

213 
PINMUX_TYPE_INPUT_PULLDOWN
:

214 
	`wrôñ
(
bô
, &
ªgs
->
dúc
);

215 
vÆ
 = 
	`ªadl
(&
ªgs
->
pdis
Ë& ~
bô
;

216 
	`wrôñ
(
vÆ
, &
ªgs
->
pdis
);

217 
	`wrôñ
(
bô
, &
ªgs
->
d©c
);

220 
îr
 = 1;

222 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

223 i‡(
îr
)

224 
	`¥_îr
("%s: chip %p,Öin %i, cfg %i is invalid\n",

225 
__func__
, 
chù
, 
ƒ
, 
cfg
);

226 
	}
}

232 
	$g°a_úq_dißbÀ
(
úq_d©a
 *
d©a
)

234 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

235 
g°a_gpio
 *
chù
 = 
gc
->
¥iv©e
;

236 
ƒ
 = 
d©a
->
úq
 - 
chù
->
úq_ba£
;

237 
g°a_ªgs
 
__iomem
 *
ªgs
 = 
	`__ªgs
(
chù
, 
ƒ
);

238 
u32
 
bô
 = 
	`__bô
(
ƒ
);

239 
u32
 
vÆ
;

240 
Êags
;

242 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

243 i‡(
chù
->
úq_ty≥
[
ƒ
] & 
IRQ_TYPE_EDGE_RISING
) {

244 
vÆ
 = 
	`ªadl
(&
ªgs
->
rimsc
Ë& ~
bô
;

245 
	`wrôñ
(
vÆ
, &
ªgs
->
rimsc
);

247 i‡(
chù
->
úq_ty≥
[
ƒ
] & 
IRQ_TYPE_EDGE_FALLING
) {

248 
vÆ
 = 
	`ªadl
(&
ªgs
->
fimsc
Ë& ~
bô
;

249 
	`wrôñ
(
vÆ
, &
ªgs
->
fimsc
);

251 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

253 
	}
}

255 
	$g°a_úq_íabÀ
(
úq_d©a
 *
d©a
)

257 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d©a
);

258 
g°a_gpio
 *
chù
 = 
gc
->
¥iv©e
;

259 
ƒ
 = 
d©a
->
úq
 - 
chù
->
úq_ba£
;

260 
g°a_ªgs
 
__iomem
 *
ªgs
 = 
	`__ªgs
(
chù
, 
ƒ
);

261 
u32
 
bô
 = 
	`__bô
(
ƒ
);

262 
u32
 
vÆ
;

263 
ty≥
;

264 
Êags
;

266 
ty≥
 = 
chù
->
úq_ty≥
[
ƒ
];

268 
	`•ö_lock_úqßve
(&
chù
->
lock
, 
Êags
);

269 
vÆ
 = 
	`ªadl
(&
ªgs
->
rimsc
);

270 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_RISING
)

271 
	`wrôñ
(
vÆ
 | 
bô
, &
ªgs
->
rimsc
);

273 
	`wrôñ
(
vÆ
 & ~
bô
, &
ªgs
->
rimsc
);

274 
vÆ
 = 
	`ªadl
(&
ªgs
->
rimsc
);

275 i‡(
ty≥
 & 
IRQ_TYPE_EDGE_FALLING
)

276 
	`wrôñ
(
vÆ
 | 
bô
, &
ªgs
->
fimsc
);

278 
	`wrôñ
(
vÆ
 & ~
bô
, &
ªgs
->
fimsc
);

279 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
lock
, 
Êags
);

281 
	}
}

283 
	$g°a_úq_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

285 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

286 
g°a_gpio
 *
chù
 = 
gc
->
¥iv©e
;

287 
ƒ
 = 
d
->
úq
 - 
chù
->
úq_ba£
;

290 i‡(!(
ty≥
 & (
IRQ_TYPE_EDGE_RISING
 | 
IRQ_TYPE_EDGE_FALLING
))) {

291 
	`¥_debug
("%s: unsuµ‹ãdÅy≥ 0x%x\n", 
__func__
, 
ty≥
);

292  -
EINVAL
;

295 
chù
->
úq_ty≥
[
ƒ
] = 
ty≥
;

297 
	`g°a_úq_íabÀ
(
d
);

299 
	}
}

301 
úqªtu∫_t
 
	$g°a_gpio_h™dÀr
(
úq
, *
dev_id
)

303 
g°a_gpio
 *
chù
 = 
dev_id
;

304 
g°a_ªgs
 
__iomem
 *
ªgs
;

305 
u32
 
is
;

306 
i
, 
ƒ
, 
ba£
;

307 
úqªtu∫_t
 
ªt
 = 
IRQ_NONE
;

309 
i
 = 0; i < 
GSTA_NR_BLOCKS
; i++) {

310 
ªgs
 = 
chù
->ªgs[
i
];

311 
ba£
 = 
chù
->
úq_ba£
 + 
i
 * 
GSTA_GPIO_PER_BLOCK
;

312 (
is
 = 
	`ªadl
(&
ªgs
->is))) {

313 
ƒ
 = 
	`__ffs
(
is
);

314 
úq
 = 
ba£
 + 
ƒ
;

315 
	`gíîic_h™dÀ_úq
(
úq
);

316 
	`wrôñ
(1 << 
ƒ
, &
ªgs
->
ic
);

317 
ªt
 = 
IRQ_HANDLED
;

320  
ªt
;

321 
	}
}

323 
	$g°a_Æloc_úq_chù
(
g°a_gpio
 *
chù
)

325 
úq_chù_gíîic
 *
gc
;

326 
úq_chù_ty≥
 *
˘
;

328 
gc
 = 
	`úq_Æloc_gíîic_chù
(
KBUILD_MODNAME
, 1, 
chù
->
úq_ba£
,

329 
chù
->
ªg_ba£
, 
h™dÀ_sim∂e_úq
);

330 
gc
->
¥iv©e
 = 
chù
;

331 
˘
 = 
gc
->
chù_ty≥s
;

333 
˘
->
chù
.
úq_£t_ty≥
 = 
g°a_úq_ty≥
;

334 
˘
->
chù
.
úq_dißbÀ
 = 
g°a_úq_dißbÀ
;

335 
˘
->
chù
.
úq_íabÀ
 = 
g°a_úq_íabÀ
;

338 
	`úq_£tup_gíîic_chù
(
gc
, 0 , 0,

339 
IRQ_NOREQUEST
 | 
IRQ_NOPROBE
, 0);

343 
úq_chù_ty≥
 *
˘
 = 
gc
->
chù_ty≥s
;

344 
i
, 
j
;

345 
j
 = 0; j < 
GSTA_NR_GPIO
; j++) {

346 
i
 = 
chù
->
úq_ba£
 + 
j
;

347 
	`úq_£t_chù_™d_h™dÀr
(
i
, &
˘
->
chù
, ct->
h™dÀr
);

348 
	`úq_£t_chù_d©a
(
i
, 
gc
);

349 
	`úq_modify_°©us
(
i
, 
IRQ_NOREQUEST
 | 
IRQ_NOPROBE
, 0);

351 
gc
->
úq_˙t
 = 
i
 - gc->
úq_ba£
;

353 
	}
}

356 
	$g°a_¥obe
(
∂©f‹m_devi˚
 *
dev
)

358 
i
, 
îr
;

359 
pci_dev
 *
pdev
;

360 
°a2x11_gpio_pd©a
 *
gpio_pd©a
;

361 
g°a_gpio
 *
chù
;

362 
ªsour˚
 *
ªs
;

364 
pdev
 = *(
pci_dev
 **)(
dev
->dev.
∂©f‹m_d©a
);

365 
gpio_pd©a
 = 
	`dev_gë_∂©d©a
(&
pdev
->
dev
);

367 i‡(
gpio_pd©a
 =
NULL
)

368 
	`dev_îr
(&
dev
->dev, "no gpio config\n");

369 
	`¥_debug
("gpiÿc⁄fig: %p\n", 
gpio_pd©a
);

371 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
dev
, 
IORESOURCE_MEM
, 0);

373 
chù
 = 
	`devm_kzÆloc
(&
dev
->dev, (*chù), 
GFP_KERNEL
);

374 
chù
->
dev
 = &dev->dev;

375 
chù
->
ªg_ba£
 = 
	`devm_ªque°_™d_i‹em≠
(&
dev
->dev, 
ªs
);

377 
i
 = 0; i < 
GSTA_NR_BLOCKS
; i++) {

378 
chù
->
ªgs
[
i
] = chù->
ªg_ba£
 + i * 4096;

380 
	`wrôñ
(0, &
chù
->
ªgs
[
i
]->
rimsc
);

381 
	`wrôñ
(0, &
chù
->
ªgs
[
i
]->
fimsc
);

382 
	`wrôñ
(~0, &
chù
->
ªgs
[
i
]->
ic
);

384 
	`•ö_lock_öô
(&
chù
->
lock
);

385 
	`g°a_gpio_£tup
(
chù
);

386 i‡(
gpio_pd©a
)

387 
i
 = 0; i < 
GSTA_NR_GPIO
; i++)

388 
	`g°a_£t_c⁄fig
(
chù
, 
i
, 
gpio_pd©a
->
pöc⁄fig
[i]);

391 
îr
 = 
	`úq_Æloc_descs
(-1, 384, 
GSTA_NR_GPIO
, 
NUMA_NO_NODE
);

392 i‡(
îr
 < 0) {

393 
	`dev_w¨n
(&
dev
->dev, "sta2x11 gpio: Can't get irq base (%i)\n",

394 -
îr
);

395  
îr
;

397 
chù
->
úq_ba£
 = 
îr
;

398 
	`g°a_Æloc_úq_chù
(
chù
);

400 
îr
 = 
	`ªque°_úq
(
pdev
->
úq
, 
g°a_gpio_h™dÀr
,

401 
IRQF_SHARED
, 
KBUILD_MODNAME
, 
chù
);

402 i‡(
îr
 < 0) {

403 
	`dev_îr
(&
dev
->dev, "sta2x11 gpio: Can'tÑequest irq (%i)\n",

404 -
îr
);

405 
îr_‰ì_descs
;

408 
îr
 = 
	`gpiochù_add
(&
chù
->
gpio
);

409 i‡(
îr
 < 0) {

410 
	`dev_îr
(&
dev
->dev, "sta2x11 gpio: Can'tÑegister (%i)\n",

411 -
îr
);

412 
îr_‰ì_úq
;

415 
	`∂©f‹m_£t_drvd©a
(
dev
, 
chù
);

418 
îr_‰ì_úq
:

419 
	`‰ì_úq
(
pdev
->
úq
, 
chù
);

420 
îr_‰ì_descs
:

421 
	`úq_‰ì_descs
(
chù
->
úq_ba£
, 
GSTA_NR_GPIO
);

422  
îr
;

423 
	}
}

425 
∂©f‹m_drivî
 
	g°a2x11_gpio_∂©f‹m_drivî
 = {

426 .
drivî
 = {

427 .
«me
 = "sta2x11-gpio",

428 .
	gow√r
 = 
THIS_MODULE
,

430 .
	g¥obe
 = 
g°a_¥obe
,

433 
moduÀ_∂©f‹m_drivî
(
°a2x11_gpio_∂©f‹m_drivî
);

435 
MODULE_LICENSE
("GPL v2");

436 
MODULE_DESCRIPTION
("sta2x11_gpio GPIO driver");

	@gpio-stmpe.c

8 
	~<löux/moduÀ.h
>

9 
	~<löux/öô.h
>

10 
	~<löux/∂©f‹m_devi˚.h
>

11 
	~<löux/¶ab.h
>

12 
	~<löux/gpio.h
>

13 
	~<löux/úq.h
>

14 
	~<löux/úqdomaö.h
>

15 
	~<löux/öãºu±.h
>

16 
	~<löux/of.h
>

17 
	~<löux/mfd/°m≥.h
>

23 íum { 
	mREG_RE
, 
	mREG_FE
, 
	mREG_IE
 };

25 
	#CACHE_NR_REGS
 3

	)

26 
	#CACHE_NR_BANKS
 (
STMPE_NR_GPIOS
 / 8)

	)

28 
	s°m≥_gpio
 {

29 
gpio_chù
 
	mchù
;

30 
°m≥
 *
	m°m≥
;

31 
devi˚
 *
	mdev
;

32 
muãx
 
	múq_lock
;

33 
úq_domaö
 *
	mdomaö
;

35 
	múq_ba£
;

36 
	mn‹eque°_mask
;

39 
u8
 
	mªgs
[
CACHE_NR_REGS
][
CACHE_NR_BANKS
];

40 
u8
 
	mﬁdªgs
[
CACHE_NR_REGS
][
CACHE_NR_BANKS
];

43 
ölöe
 
°m≥_gpio
 *
	$to_°m≥_gpio
(
gpio_chù
 *
chù
)

45  
	`c⁄èöî_of
(
chù
, 
°m≥_gpio
, chip);

46 
	}
}

48 
	$°m≥_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

50 
°m≥_gpio
 *°m≥_gpiÿ
	`to_°m≥_gpio
(
chù
);

51 
°m≥
 *°m≥ = 
°m≥_gpio
->stmpe;

52 
u8
 
ªg
 = 
°m≥
->
ªgs
[
STMPE_IDX_GPMR_LSB
] - (
off£t
 / 8);

53 
u8
 
mask
 = 1 << (
off£t
 % 8);

54 
ªt
;

56 
ªt
 = 
	`°m≥_ªg_ªad
(
°m≥
, 
ªg
);

57 i‡(
ªt
 < 0)

58  
ªt
;

60  !!(
ªt
 & 
mask
);

61 
	}
}

63 
	$°m≥_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆ
)

65 
°m≥_gpio
 *°m≥_gpiÿ
	`to_°m≥_gpio
(
chù
);

66 
°m≥
 *°m≥ = 
°m≥_gpio
->stmpe;

67 
which
 = 
vÆ
 ? 
STMPE_IDX_GPSR_LSB
 : 
STMPE_IDX_GPCR_LSB
;

68 
u8
 
ªg
 = 
°m≥
->
ªgs
[
which
] - (
off£t
 / 8);

69 
u8
 
mask
 = 1 << (
off£t
 % 8);

75 i‡(
°m≥
->
ªgs
[
STMPE_IDX_GPSR_LSB
] =°m≥->ªgs[
STMPE_IDX_GPCR_LSB
])

76 
	`°m≥_£t_bôs
(
°m≥
, 
ªg
, 
mask
, 
vÆ
 ? mask : 0);

78 
	`°m≥_ªg_wrôe
(
°m≥
, 
ªg
, 
mask
);

79 
	}
}

81 
	$°m≥_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

82 
off£t
, 
vÆ
)

84 
°m≥_gpio
 *°m≥_gpiÿ
	`to_°m≥_gpio
(
chù
);

85 
°m≥
 *°m≥ = 
°m≥_gpio
->stmpe;

86 
u8
 
ªg
 = 
°m≥
->
ªgs
[
STMPE_IDX_GPDR_LSB
] - (
off£t
 / 8);

87 
u8
 
mask
 = 1 << (
off£t
 % 8);

89 
	`°m≥_gpio_£t
(
chù
, 
off£t
, 
vÆ
);

91  
	`°m≥_£t_bôs
(
°m≥
, 
ªg
, 
mask
, mask);

92 
	}
}

94 
	$°m≥_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
,

95 
off£t
)

97 
°m≥_gpio
 *°m≥_gpiÿ
	`to_°m≥_gpio
(
chù
);

98 
°m≥
 *°m≥ = 
°m≥_gpio
->stmpe;

99 
u8
 
ªg
 = 
°m≥
->
ªgs
[
STMPE_IDX_GPDR_LSB
] - (
off£t
 / 8);

100 
u8
 
mask
 = 1 << (
off£t
 % 8);

102  
	`°m≥_£t_bôs
(
°m≥
, 
ªg
, 
mask
, 0);

103 
	}
}

105 
	$°m≥_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

107 
°m≥_gpio
 *°m≥_gpiÿ
	`to_°m≥_gpio
(
chù
);

109  
	`úq_¸óã_m≠pög
(
°m≥_gpio
->
domaö
, 
off£t
);

110 
	}
}

112 
	$°m≥_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

114 
°m≥_gpio
 *°m≥_gpiÿ
	`to_°m≥_gpio
(
chù
);

115 
°m≥
 *°m≥ = 
°m≥_gpio
->stmpe;

117 i‡(
°m≥_gpio
->
n‹eque°_mask
 & (1 << 
off£t
))

118  -
EINVAL
;

120  
	`°m≥_£t_Ætfunc
(
°m≥
, 1 << 
off£t
, 
STMPE_BLOCK_GPIO
);

121 
	}
}

123 
gpio_chù
 
	gãm∂©e_chù
 = {

124 .
œbñ
 = "stmpe",

125 .
	gow√r
 = 
THIS_MODULE
,

126 .
	gdúe˘i⁄_öput
 = 
°m≥_gpio_dúe˘i⁄_öput
,

127 .
	ggë
 = 
°m≥_gpio_gë
,

128 .
	gdúe˘i⁄_ouçut
 = 
°m≥_gpio_dúe˘i⁄_ouçut
,

129 .
	g£t
 = 
°m≥_gpio_£t
,

130 .
	gto_úq
 = 
°m≥_gpio_to_úq
,

131 .
	gªque°
 = 
°m≥_gpio_ªque°
,

132 .
	gˇn_¶ìp
 = 1,

135 
	$°m≥_gpio_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

137 
°m≥_gpio
 *°m≥_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

138 
off£t
 = 
d
->
hwúq
;

139 
ªgoff£t
 = 
off£t
 / 8;

140 
mask
 = 1 << (
off£t
 % 8);

142 i‡(
ty≥
 =
IRQ_TYPE_LEVEL_LOW
 ||Åy≥ =
IRQ_TYPE_LEVEL_HIGH
)

143  -
EINVAL
;

146 i‡(
°m≥_gpio
->
°m≥
->
∑πnum
 =
STMPE801
)

149 i‡(
ty≥
 =
IRQ_TYPE_EDGE_RISING
)

150 
°m≥_gpio
->
ªgs
[
REG_RE
][
ªgoff£t
] |
mask
;

152 
°m≥_gpio
->
ªgs
[
REG_RE
][
ªgoff£t
] &~
mask
;

154 i‡(
ty≥
 =
IRQ_TYPE_EDGE_FALLING
)

155 
°m≥_gpio
->
ªgs
[
REG_FE
][
ªgoff£t
] |
mask
;

157 
°m≥_gpio
->
ªgs
[
REG_FE
][
ªgoff£t
] &~
mask
;

160 
	}
}

162 
	$°m≥_gpio_úq_lock
(
úq_d©a
 *
d
)

164 
°m≥_gpio
 *°m≥_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

166 
	`muãx_lock
(&
°m≥_gpio
->
úq_lock
);

167 
	}
}

169 
	$°m≥_gpio_úq_sync_u∆ock
(
úq_d©a
 *
d
)

171 
°m≥_gpio
 *°m≥_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

172 
°m≥
 *°m≥ = 
°m≥_gpio
->stmpe;

173 
num_b™ks
 = 
	`DIV_ROUND_UP
(
°m≥
->
num_gpios
, 8);

174 c⁄° 
u8
 
ªgm≠
[] = {

175 [
REG_RE
] = 
STMPE_IDX_GPRER_LSB
,

176 [
REG_FE
] = 
STMPE_IDX_GPFER_LSB
,

177 [
REG_IE
] = 
STMPE_IDX_IEGPIOR_LSB
,

179 
i
, 
j
;

181 
i
 = 0; i < 
CACHE_NR_REGS
; i++) {

183 i‡((
°m≥
->
∑πnum
 =
STMPE801
) &&

184 (
i
 !
REG_IE
))

187 
j
 = 0; j < 
num_b™ks
; j++) {

188 
u8
 
ﬁd
 = 
°m≥_gpio
->
ﬁdªgs
[
i
][
j
];

189 
u8
 
√w
 = 
°m≥_gpio
->
ªgs
[
i
][
j
];

191 i‡(
√w
 =
ﬁd
)

194 
°m≥_gpio
->
ﬁdªgs
[
i
][
j
] = 
√w
;

195 
	`°m≥_ªg_wrôe
(
°m≥
, stm≥->
ªgs
[
ªgm≠
[
i
]] - 
j
, 
√w
);

199 
	`muãx_u∆ock
(&
°m≥_gpio
->
úq_lock
);

200 
	}
}

202 
	$°m≥_gpio_úq_mask
(
úq_d©a
 *
d
)

204 
°m≥_gpio
 *°m≥_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

205 
off£t
 = 
d
->
hwúq
;

206 
ªgoff£t
 = 
off£t
 / 8;

207 
mask
 = 1 << (
off£t
 % 8);

209 
°m≥_gpio
->
ªgs
[
REG_IE
][
ªgoff£t
] &~
mask
;

210 
	}
}

212 
	$°m≥_gpio_úq_unmask
(
úq_d©a
 *
d
)

214 
°m≥_gpio
 *°m≥_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

215 
off£t
 = 
d
->
hwúq
;

216 
ªgoff£t
 = 
off£t
 / 8;

217 
mask
 = 1 << (
off£t
 % 8);

219 
°m≥_gpio
->
ªgs
[
REG_IE
][
ªgoff£t
] |
mask
;

220 
	}
}

222 
úq_chù
 
	g°m≥_gpio_úq_chù
 = {

223 .
«me
 = "stmpe-gpio",

224 .
	gúq_bus_lock
 = 
°m≥_gpio_úq_lock
,

225 .
	gúq_bus_sync_u∆ock
 = 
°m≥_gpio_úq_sync_u∆ock
,

226 .
	gúq_mask
 = 
°m≥_gpio_úq_mask
,

227 .
	gúq_unmask
 = 
°m≥_gpio_úq_unmask
,

228 .
	gúq_£t_ty≥
 = 
°m≥_gpio_úq_£t_ty≥
,

231 
úqªtu∫_t
 
	$°m≥_gpio_úq
(
úq
, *
dev
)

233 
°m≥_gpio
 *°m≥_gpiÿ
dev
;

234 
°m≥
 *°m≥ = 
°m≥_gpio
->stmpe;

235 
u8
 
°©msbªg
 = 
°m≥
->
ªgs
[
STMPE_IDX_ISGPIOR_MSB
];

236 
num_b™ks
 = 
	`DIV_ROUND_UP
(
°m≥
->
num_gpios
, 8);

237 
u8
 
°©us
[
num_b™ks
];

238 
ªt
;

239 
i
;

241 
ªt
 = 
	`°m≥_block_ªad
(
°m≥
, 
°©msbªg
, 
num_b™ks
, 
°©us
);

242 i‡(
ªt
 < 0)

243  
IRQ_NONE
;

245 
i
 = 0; i < 
num_b™ks
; i++) {

246 
b™k
 = 
num_b™ks
 - 
i
 - 1;

247 
íabÀd
 = 
°m≥_gpio
->
ªgs
[
REG_IE
][
b™k
];

248 
°©
 = 
°©us
[
i
];

250 
°©
 &
íabÀd
;

251 i‡(!
°©
)

254 
°©
) {

255 
bô
 = 
	`__ffs
(
°©
);

256 
löe
 = 
b™k
 * 8 + 
bô
;

257 
vúq
 = 
	`úq_föd_m≠pög
(
°m≥_gpio
->
domaö
, 
löe
);

259 
	`h™dÀ_√°ed_úq
(
vúq
);

260 
°©
 &~(1 << 
bô
);

263 
	`°m≥_ªg_wrôe
(
°m≥
, 
°©msbªg
 + 
i
, 
°©us
[i]);

266 i‡(
°m≥
->
∑πnum
 !
STMPE801
)

267 
	`°m≥_ªg_wrôe
(
°m≥
, stm≥->
ªgs
[
STMPE_IDX_GPEDR_MSB
]

268 + 
i
, 
°©us
[i]);

271  
IRQ_HANDLED
;

272 
	}
}

274 
	$°m≥_gpio_úq_m≠
(
úq_domaö
 *
d
, 
vúq
,

275 
úq_hw_numbî_t
 
hwúq
)

277 
°m≥_gpio
 *°m≥_gpiÿ
d
->
ho°_d©a
;

279 i‡(!
°m≥_gpio
)

280  -
EINVAL
;

282 
	`úq_£t_chù_d©a
(
hwúq
, 
°m≥_gpio
);

283 
	`úq_£t_chù_™d_h™dÀr
(
hwúq
, &
°m≥_gpio_úq_chù
,

284 
h™dÀ_sim∂e_úq
);

285 
	`úq_£t_√°ed_thªad
(
hwúq
, 1);

286 #ifde‡
CONFIG_ARM


287 
	`£t_úq_Êags
(
hwúq
, 
IRQF_VALID
);

289 
	`úq_£t_n›robe
(
hwúq
);

293 
	}
}

295 
	$°m≥_gpio_úq_unm≠
(
úq_domaö
 *
d
, 
vúq
)

297 #ifde‡
CONFIG_ARM


298 
	`£t_úq_Êags
(
vúq
, 0);

300 
	`úq_£t_chù_™d_h™dÀr
(
vúq
, 
NULL
, NULL);

301 
	`úq_£t_chù_d©a
(
vúq
, 
NULL
);

302 
	}
}

304 c⁄° 
úq_domaö_›s
 
	g°m≥_gpio_úq_sim∂e_›s
 = {

305 .
unm≠
 = 
°m≥_gpio_úq_unm≠
,

306 .
	gm≠
 = 
°m≥_gpio_úq_m≠
,

307 .
	gxœã
 = 
úq_domaö_xœã_two˚Œ
,

310 
	$°m≥_gpio_úq_öô
(
°m≥_gpio
 *stmpe_gpio,

311 
devi˚_node
 *
≈
)

313 
ba£
 = 0;

315 i‡(!
≈
)

316 
ba£
 = 
°m≥_gpio
->
úq_ba£
;

318 
°m≥_gpio
->
domaö
 = 
	`úq_domaö_add_sim∂e
(
≈
,

319 
°m≥_gpio
->
chù
.
ngpio
, 
ba£
,

320 &
°m≥_gpio_úq_sim∂e_›s
, 
°m≥_gpio
);

321 i‡(!
°m≥_gpio
->
domaö
) {

322 
	`dev_îr
(
°m≥_gpio
->
dev
, "failedÅo create irqdomain\n");

323  -
ENOSYS
;

327 
	}
}

329 
	$°m≥_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

331 
°m≥
 *°m≥ = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

332 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

333 
°m≥_gpio_∂©f‹m_d©a
 *
pd©a
;

334 
°m≥_gpio
 *stmpe_gpio;

335 
ªt
;

336 
úq
 = 0;

338 
pd©a
 = 
°m≥
->pd©a->
gpio
;

340 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

342 
°m≥_gpio
 = 
	`kzÆloc
((°m≥_gpio), 
GFP_KERNEL
);

343 i‡(!
°m≥_gpio
)

344  -
ENOMEM
;

346 
	`muãx_öô
(&
°m≥_gpio
->
úq_lock
);

348 
°m≥_gpio
->
dev
 = &
pdev
->dev;

349 
°m≥_gpio
->
°m≥
 = stmpe;

350 
°m≥_gpio
->
chù
 = 
ãm∂©e_chù
;

351 
°m≥_gpio
->
chù
.
ngpio
 = 
°m≥
->
num_gpios
;

352 
°m≥_gpio
->
chù
.
dev
 = &
pdev
->dev;

353 #ifde‡
CONFIG_OF


354 
°m≥_gpio
->
chù
.
of_node
 = 
≈
;

356 
°m≥_gpio
->
chù
.
ba£
 = 
pd©a
 ?Öd©a->
gpio_ba£
 : -1;

358 i‡(
pd©a
)

359 
°m≥_gpio
->
n‹eque°_mask
 = 
pd©a
->norequest_mask;

360 i‡(
≈
)

361 
	`of_¥›îty_ªad_u32
(
≈
, "st,norequest-mask",

362 &
°m≥_gpio
->
n‹eque°_mask
);

364 i‡(
úq
 >= 0)

365 
°m≥_gpio
->
úq_ba£
 = 
°m≥
->úq_ba£ + 
	`STMPE_INT_GPIO
(0);

367 
	`dev_öfo
(&
pdev
->
dev
,

371 
ªt
 = 
	`°m≥_íabÀ
(
°m≥
, 
STMPE_BLOCK_GPIO
);

372 i‡(
ªt
)

373 
out_‰ì
;

375 i‡(
úq
 >= 0) {

376 
ªt
 = 
	`°m≥_gpio_úq_öô
(
°m≥_gpio
, 
≈
);

377 i‡(
ªt
)

378 
out_dißbÀ
;

380 
ªt
 = 
	`ªque°_thªaded_úq
(
úq
, 
NULL
, 
°m≥_gpio_úq
,

381 
IRQF_ONESHOT
, "°m≥-gpio", 
°m≥_gpio
);

382 i‡(
ªt
) {

383 
	`dev_îr
(&
pdev
->
dev
, "u«bÀÅÿgë irq: %d\n", 
ªt
);

384 
out_dißbÀ
;

388 
ªt
 = 
	`gpiochù_add
(&
°m≥_gpio
->
chù
);

389 i‡(
ªt
) {

390 
	`dev_îr
(&
pdev
->
dev
, "u«bÀÅÿadd gpiochù: %d\n", 
ªt
);

391 
out_‰ìúq
;

394 i‡(
pd©a
 &&Öd©a->
£tup
)

395 
pd©a
->
	`£tup
(
°m≥
, 
°m≥_gpio
->
chù
.
ba£
);

397 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
°m≥_gpio
);

401 
out_‰ìúq
:

402 i‡(
úq
 >= 0)

403 
	`‰ì_úq
(
úq
, 
°m≥_gpio
);

404 
out_dißbÀ
:

405 
	`°m≥_dißbÀ
(
°m≥
, 
STMPE_BLOCK_GPIO
);

406 
out_‰ì
:

407 
	`k‰ì
(
°m≥_gpio
);

408  
ªt
;

409 
	}
}

411 
	$°m≥_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

413 
°m≥_gpio
 *°m≥_gpiÿ
	`∂©f‹m_gë_drvd©a
(
pdev
);

414 
°m≥
 *°m≥ = 
°m≥_gpio
->stmpe;

415 
°m≥_gpio_∂©f‹m_d©a
 *
pd©a
 = 
°m≥
->pd©a->
gpio
;

416 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

417 
ªt
;

419 i‡(
pd©a
 &&Öd©a->
ªmove
)

420 
pd©a
->
	`ªmove
(
°m≥
, 
°m≥_gpio
->
chù
.
ba£
);

422 
ªt
 = 
	`gpiochù_ªmove
(&
°m≥_gpio
->
chù
);

423 i‡(
ªt
 < 0) {

424 
	`dev_îr
(
°m≥_gpio
->
dev
,

425 "u«bÀÅÿªmovêgpiochù: %d\n", 
ªt
);

426  
ªt
;

429 
	`°m≥_dißbÀ
(
°m≥
, 
STMPE_BLOCK_GPIO
);

431 i‡(
úq
 >= 0)

432 
	`‰ì_úq
(
úq
, 
°m≥_gpio
);

434 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

435 
	`k‰ì
(
°m≥_gpio
);

438 
	}
}

440 
∂©f‹m_drivî
 
	g°m≥_gpio_drivî
 = {

441 .
drivî
.
«me
 = "stmpe-gpio",

442 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

443 .
	g¥obe
 = 
°m≥_gpio_¥obe
,

444 .
	gªmove
 = 
°m≥_gpio_ªmove
,

447 
__öô
 
	$°m≥_gpio_öô
()

449  
	`∂©f‹m_drivî_ªgi°î
(&
°m≥_gpio_drivî
);

450 
	}
}

451 
subsys_öôˇŒ
(
°m≥_gpio_öô
);

453 
__exô
 
	$°m≥_gpio_exô
()

455 
	`∂©f‹m_drivî_uƒegi°î
(&
°m≥_gpio_drivî
);

456 
	}
}

457 
moduÀ_exô
(
°m≥_gpio_exô
);

459 
MODULE_LICENSE
("GPL v2");

460 
MODULE_DESCRIPTION
("STMPExxxx GPIO driver");

461 
MODULE_AUTHOR
("Rabin Vincent <rabin.vincent@stericsson.com>");

	@gpio-stp-xway.c

10 
	~<löux/¶ab.h
>

11 
	~<löux/öô.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/of_∂©f‹m.h
>

15 
	~<löux/muãx.h
>

16 
	~<löux/gpio.h
>

17 
	~<löux/io.h
>

18 
	~<löux/of_gpio.h
>

19 
	~<löux/˛k.h
>

20 
	~<löux/îr.h
>

22 
	~<œ¡iq_soc.h
>

32 
	#XWAY_STP_CON0
 0x00

	)

34 
	#XWAY_STP_CON1
 0x04

	)

36 
	#XWAY_STP_CPU0
 0x08

	)

38 
	#XWAY_STP_CPU1
 0x0C

	)

40 
	#XWAY_STP_AR
 0x10

	)

43 
	#XWAY_STP_CON_SWU
 
	`BIT
(31)

	)

46 
	#XWAY_STP_2HZ
 0

	)

47 
	#XWAY_STP_4HZ
 
	`BIT
(23)

	)

48 
	#XWAY_STP_8HZ
 
	`BIT
(24)

	)

49 
	#XWAY_STP_10HZ
 (
	`BIT
(24Ë| BIT(23))

	)

50 
	#XWAY_STP_SPEED_MASK
 (0x‡<< 23)

	)

53 
	#XWAY_STP_UPD_FPI
 
	`BIT
(31)

	)

54 
	#XWAY_STP_UPD_MASK
 (
	`BIT
(31Ë| BIT(30))

	)

57 
	#XWAY_STP_ADSL_SHIFT
 24

	)

58 
	#XWAY_STP_ADSL_MASK
 0x3

	)

61 
	#XWAY_STP_PHY_MASK
 0x3

	)

62 
	#XWAY_STP_PHY1_SHIFT
 27

	)

63 
	#XWAY_STP_PHY2_SHIFT
 15

	)

66 
	#XWAY_STP_GROUP0
 
	`BIT
(0)

	)

67 
	#XWAY_STP_GROUP1
 
	`BIT
(1)

	)

68 
	#XWAY_STP_GROUP2
 
	`BIT
(2)

	)

69 
	#XWAY_STP_GROUP_MASK
 (0x7)

	)

72 
	#XWAY_STP_FALLING
 
	`BIT
(26)

	)

73 
	#XWAY_STP_EDGE_MASK
 
	`BIT
(26)

	)

75 
	#xway_°p_r32
(
m
, 
ªg
Ë
	`__øw_ªadl
(m +Ñeg)

	)

76 
	#xway_°p_w32
(
m
, 
vÆ
, 
ªg
Ë
	`__øw_wrôñ
(vÆ, m +Ñeg)

	)

77 
	#xway_°p_w32_mask
(
m
, 
˛ór
, 
£t
, 
ªg
) \

78 
	`…q_w32
((
	`…q_r32
(
m
 + 
ªg
Ë& ~(
˛ór
)Ë| (
£t
), \

79 
m
 + 
ªg
)

	)

81 
	sxway_°p
 {

82 
gpio_chù
 
	mgc
;

83 
__iomem
 *
	mvút
;

84 
u32
 
	medge
;

85 
u32
 
	mshadow
;

86 
u8
 
	mgroups
;

87 
u8
 
	md¶
;

88 
u8
 
	mphy1
;

89 
u8
 
	mphy2
;

90 
u8
 
	mª£rved
;

101 
	$xway_°p_£t
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

103 
xway_°p
 *
chù
 =

104 
	`c⁄èöî_of
(
gc
, 
xway_°p
, gc);

106 i‡(
vÆ
)

107 
chù
->
shadow
 |
	`BIT
(
gpio
);

109 
chù
->
shadow
 &~
	`BIT
(
gpio
);

110 
	`xway_°p_w32
(
chù
->
vút
, chù->
shadow
, 
XWAY_STP_CPU0
);

111 
	`xway_°p_w32_mask
(
chù
->
vút
, 0, 
XWAY_STP_CON_SWU
, 
XWAY_STP_CON0
);

112 
	}
}

122 
	$xway_°p_dú_out
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

124 
	`xway_°p_£t
(
gc
, 
gpio
, 
vÆ
);

127 
	}
}

136 
	$xway_°p_ªque°
(
gpio_chù
 *
gc
, 
gpio
)

138 
xway_°p
 *
chù
 =

139 
	`c⁄èöî_of
(
gc
, 
xway_°p
, gc);

141 i‡((
gpio
 < 8Ë&& (
chù
->
ª£rved
 & 
	`BIT
(gpio))) {

142 
	`dev_îr
(
gc
->
dev
, "GPIO %d i†driví by h¨dw¨e\n", 
gpio
);

143  -
ENODEV
;

147 
	}
}

153 
	$xway_°p_hw_öô
(
xway_°p
 *
chù
)

156 
	`xway_°p_w32
(
chù
->
vút
, 0, 
XWAY_STP_AR
);

157 
	`xway_°p_w32
(
chù
->
vút
, 0, 
XWAY_STP_CPU0
);

158 
	`xway_°p_w32
(
chù
->
vút
, 0, 
XWAY_STP_CPU1
);

159 
	`xway_°p_w32
(
chù
->
vút
, 
XWAY_STP_CON_SWU
, 
XWAY_STP_CON0
);

160 
	`xway_°p_w32
(
chù
->
vút
, 0, 
XWAY_STP_CON1
);

163 
	`xway_°p_w32_mask
(
chù
->
vút
, 
XWAY_STP_EDGE_MASK
,

164 
chù
->
edge
, 
XWAY_STP_CON0
);

167 
	`xway_°p_w32_mask
(
chù
->
vút
, 
XWAY_STP_GROUP_MASK
,

168 
chù
->
groups
, 
XWAY_STP_CON1
);

171 
	`xway_°p_w32_mask
(
chù
->
vút
,

172 
XWAY_STP_ADSL_MASK
 << 
XWAY_STP_ADSL_SHIFT
,

173 
chù
->
d¶
 << 
XWAY_STP_ADSL_SHIFT
,

174 
XWAY_STP_CON0
);

177 
	`xway_°p_w32_mask
(
chù
->
vút
,

178 
XWAY_STP_PHY_MASK
 << 
XWAY_STP_PHY1_SHIFT
,

179 
chù
->
phy1
 << 
XWAY_STP_PHY1_SHIFT
,

180 
XWAY_STP_CON0
);

181 
	`xway_°p_w32_mask
(
chù
->
vút
,

182 
XWAY_STP_PHY_MASK
 << 
XWAY_STP_PHY2_SHIFT
,

183 
chù
->
phy2
 << 
XWAY_STP_PHY2_SHIFT
,

184 
XWAY_STP_CON1
);

187 
chù
->
ª£rved
 = (chù->
phy2
 << 5Ë| (chù->
phy1
 << 2Ë| chù->
d¶
;

193 i‡(
chù
->
ª£rved
)

194 
	`xway_°p_w32_mask
(
chù
->
vút
, 
XWAY_STP_UPD_MASK
,

195 
XWAY_STP_UPD_FPI
, 
XWAY_STP_CON1
);

198 
	}
}

200 
	$xway_°p_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

202 
ªsour˚
 *
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

203 c⁄° 
__be32
 *
shadow
, *
groups
, *
d¶
, *
phy
;

204 
xway_°p
 *
chù
;

205 
˛k
 *clk;

206 
ªt
 = 0;

208 i‡(!
ªs
) {

209 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑequest STPÑesource\n");

210  -
ENOENT
;

213 
chù
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*chù), 
GFP_KERNEL
);

214 i‡(!
chù
)

215  -
ENOMEM
;

217 
chù
->
vút
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

218 i‡(
	`IS_ERR
(
chù
->
vút
))

219  
	`PTR_ERR
(
chù
->
vút
);

221 
chù
->
gc
.
dev
 = &
pdev
->dev;

222 
chù
->
gc
.
œbñ
 = "stp-xway";

223 
chù
->
gc
.
dúe˘i⁄_ouçut
 = 
xway_°p_dú_out
;

224 
chù
->
gc
.
£t
 = 
xway_°p_£t
;

225 
chù
->
gc
.
ªque°
 = 
xway_°p_ªque°
;

226 
chù
->
gc
.
ba£
 = -1;

227 
chù
->
gc
.
ow√r
 = 
THIS_MODULE
;

230 
shadow
 = 
	`of_gë_¥›îty
(
pdev
->
dev
.
of_node
, "œ¡iq,shadow", 
NULL
);

231 i‡(
shadow
)

232 
chù
->
shadow
 = 
	`be32_to_˝u
(*shadow);

235 
groups
 = 
	`of_gë_¥›îty
(
pdev
->
dev
.
of_node
, "œ¡iq,groups", 
NULL
);

236 i‡(
groups
)

237 
chù
->
groups
 = 
	`be32_to_˝u
(*groupsË& 
XWAY_STP_GROUP_MASK
;

239 
chù
->
groups
 = 
XWAY_STP_GROUP0
;

240 
chù
->
gc
.
ngpio
 = 
	`Ês
(chù->
groups
) * 8;

243 
d¶
 = 
	`of_gë_¥›îty
(
pdev
->
dev
.
of_node
, "œ¡iq,d¶", 
NULL
);

244 i‡(
d¶
)

245 
chù
->
d¶
 = 
	`be32_to_˝u
(*d¶Ë& 
XWAY_STP_ADSL_MASK
;

248 i‡(
	`of_machöe_is_com∑tibÀ
("lantiq,ar9") ||

249 
	`of_machöe_is_com∑tibÀ
("lantiq,gr9") ||

250 
	`of_machöe_is_com∑tibÀ
("lantiq,vr9")) {

251 
phy
 = 
	`of_gë_¥›îty
(
pdev
->
dev
.
of_node
, "œ¡iq,phy1", 
NULL
);

252 i‡(
phy
)

253 
chù
->
phy1
 = 
	`be32_to_˝u
(*
phy
Ë& 
XWAY_STP_PHY_MASK
;

254 
phy
 = 
	`of_gë_¥›îty
(
pdev
->
dev
.
of_node
, "œ¡iq,phy2", 
NULL
);

255 i‡(
phy
)

256 
chù
->
phy2
 = 
	`be32_to_˝u
(*
phy
Ë& 
XWAY_STP_PHY_MASK
;

260 i‡(!
	`of_föd_¥›îty
(
pdev
->
dev
.
of_node
, "œ¡iq,risög", 
NULL
))

261 
chù
->
edge
 = 
XWAY_STP_FALLING
;

263 
˛k
 = 
	`˛k_gë
(&
pdev
->
dev
, 
NULL
);

264 i‡(
	`IS_ERR
(
˛k
)) {

265 
	`dev_îr
(&
pdev
->
dev
, "FailedÅo get clock\n");

266  
	`PTR_ERR
(
˛k
);

268 
	`˛k_íabÀ
(
˛k
);

270 
ªt
 = 
	`xway_°p_hw_öô
(
chù
);

271 i‡(!
ªt
)

272 
ªt
 = 
	`gpiochù_add
(&
chù
->
gc
);

274 i‡(!
ªt
)

275 
	`dev_öfo
(&
pdev
->
dev
, "Init done\n");

277  
ªt
;

278 
	}
}

280 c⁄° 
of_devi˚_id
 
	gxway_°p_m©ch
[] = {

281 { .
com∑tibÀ
 = "lantiq,gpio-stp-xway" },

284 
MODULE_DEVICE_TABLE
(
of
, 
xway_°p_m©ch
);

286 
∂©f‹m_drivî
 
	gxway_°p_drivî
 = {

287 .
¥obe
 = 
xway_°p_¥obe
,

288 .
	gdrivî
 = {

289 .
«me
 = "gpio-stp-xway",

290 .
	gow√r
 = 
THIS_MODULE
,

291 .
	gof_m©ch_èbÀ
 = 
xway_°p_m©ch
,

295 
__öô
 
	$xway_°p_öô
()

297  
	`∂©f‹m_drivî_ªgi°î
(&
xway_°p_drivî
);

298 
	}
}

300 
subsys_öôˇŒ
(
xway_°p_öô
);

	@gpio-sx150x.c

17 
	~<löux/gpio.h
>

18 
	~<löux/i2c.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/öãºu±.h
>

21 
	~<löux/úq.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/muãx.h
>

24 
	~<löux/¶ab.h
>

25 
	~<löux/w‹kqueue.h
>

26 
	~<löux/i2c/sx150x.h
>

28 
	#NO_UPDATE_PENDING
 -1

	)

30 
	ssx150x_devi˚_d©a
 {

31 
u8
 
	mªg_puŒup
;

32 
u8
 
	mªg_puŒdn
;

33 
u8
 
	mªg_døö
;

34 
u8
 
	mªg_pﬁ¨ôy
;

35 
u8
 
	mªg_dú
;

36 
u8
 
	mªg_d©a
;

37 
u8
 
	mªg_úq_mask
;

38 
u8
 
	mªg_úq_§c
;

39 
u8
 
	mªg_£n£
;

40 
u8
 
	mªg_˛ock
;

41 
u8
 
	mªg_misc
;

42 
u8
 
	mªg_ª£t
;

43 
u8
 
	mngpios
;

46 
	ssx150x_chù
 {

47 
gpio_chù
 
	mgpio_chù
;

48 
i2c_˛õ¡
 *
	m˛õ¡
;

49 c⁄° 
sx150x_devi˚_d©a
 *
	mdev_cfg
;

50 
	múq_summ¨y
;

51 
	múq_ba£
;

52 
	múq_upd©e
;

53 
u32
 
	múq_£n£
;

54 
u32
 
	múq_masked
;

55 
u32
 
	mdev_£n£
;

56 
u32
 
	mdev_masked
;

57 
úq_chù
 
	múq_chù
;

58 
muãx
 
	mlock
;

61 c⁄° 
sx150x_devi˚_d©a
 
	gsx150x_devi˚s
[] = {

63 .
ªg_puŒup
 = 0x03,

64 .
	gªg_puŒdn
 = 0x04,

65 .
	gªg_døö
 = 0x05,

66 .
	gªg_pﬁ¨ôy
 = 0x06,

67 .
	gªg_dú
 = 0x07,

68 .
	gªg_d©a
 = 0x08,

69 .
	gªg_úq_mask
 = 0x09,

70 .
	gªg_úq_§c
 = 0x0c,

71 .
	gªg_£n£
 = 0x0b,

72 .
	gªg_˛ock
 = 0x0f,

73 .
	gªg_misc
 = 0x10,

74 .
	gªg_ª£t
 = 0x7d,

75 .
	gngpios
 = 8

78 .
ªg_puŒup
 = 0x07,

79 .
	gªg_puŒdn
 = 0x09,

80 .
	gªg_døö
 = 0x0b,

81 .
	gªg_pﬁ¨ôy
 = 0x0d,

82 .
	gªg_dú
 = 0x0f,

83 .
	gªg_d©a
 = 0x11,

84 .
	gªg_úq_mask
 = 0x13,

85 .
	gªg_úq_§c
 = 0x19,

86 .
	gªg_£n£
 = 0x17,

87 .
	gªg_˛ock
 = 0x1e,

88 .
	gªg_misc
 = 0x1f,

89 .
	gªg_ª£t
 = 0x7d,

90 .
	gngpios
 = 16

94 c⁄° 
i2c_devi˚_id
 
	gsx150x_id
[] = {

99 
MODULE_DEVICE_TABLE
(
i2c
, 
sx150x_id
);

101 
s32
 
	$sx150x_i2c_wrôe
(
i2c_˛õ¡
 *
˛õ¡
, 
u8
 
ªg
, u8 
vÆ
)

103 
s32
 
îr
 = 
	`i2c_smbus_wrôe_byã_d©a
(
˛õ¡
, 
ªg
, 
vÆ
);

105 i‡(
îr
 < 0)

106 
	`dev_w¨n
(&
˛õ¡
->
dev
,

108 
vÆ
, 
ªg
, 
îr
);

109  
îr
;

110 
	}
}

112 
s32
 
	$sx150x_i2c_ªad
(
i2c_˛õ¡
 *
˛õ¡
, 
u8
 
ªg
, u8 *
vÆ
)

114 
s32
 
îr
 = 
	`i2c_smbus_ªad_byã_d©a
(
˛õ¡
, 
ªg
);

116 i‡(
îr
 >= 0)

117 *
vÆ
 = 
îr
;

119 
	`dev_w¨n
(&
˛õ¡
->
dev
,

121 
ªg
, 
îr
);

122  
îr
;

123 
	}
}

125 
ölöe
 
boﬁ
 
	$off£t_is_oscio
(
sx150x_chù
 *
chù
, 
off£t
)

127  (
chù
->
dev_cfg
->
ngpios
 =
off£t
);

128 
	}
}

149 
ölöe
 
	$sx150x_föd_cfg
(
u8
 
off£t
, u8 
width
,

150 
u8
 *
ªg
, u8 *
mask
, u8 *
shi·
)

152 *
ªg
 -
off£t
 * 
width
 / 8;

153 *
mask
 = (1 << 
width
) - 1;

154 *
shi·
 = (
off£t
 * 
width
) % 8;

155 *
mask
 <<*
shi·
;

156 
	}
}

158 
s32
 
	$sx150x_wrôe_cfg
(
sx150x_chù
 *
chù
,

159 
u8
 
off£t
, u8 
width
, u8 
ªg
, u8 
vÆ
)

161 
u8
 
mask
;

162 
u8
 
d©a
;

163 
u8
 
shi·
;

164 
s32
 
îr
;

166 
	`sx150x_föd_cfg
(
off£t
, 
width
, &
ªg
, &
mask
, &
shi·
);

167 
îr
 = 
	`sx150x_i2c_ªad
(
chù
->
˛õ¡
, 
ªg
, &
d©a
);

168 i‡(
îr
 < 0)

169  
îr
;

171 
d©a
 &~
mask
;

172 
d©a
 |(
vÆ
 << 
shi·
Ë& 
mask
;

173  
	`sx150x_i2c_wrôe
(
chù
->
˛õ¡
, 
ªg
, 
d©a
);

174 
	}
}

176 
	$sx150x_gë_io
(
sx150x_chù
 *
chù
, 
off£t
)

178 
u8
 
ªg
 = 
chù
->
dev_cfg
->
ªg_d©a
;

179 
u8
 
mask
;

180 
u8
 
d©a
;

181 
u8
 
shi·
;

182 
s32
 
îr
;

184 
	`sx150x_föd_cfg
(
off£t
, 1, &
ªg
, &
mask
, &
shi·
);

185 
îr
 = 
	`sx150x_i2c_ªad
(
chù
->
˛õ¡
, 
ªg
, &
d©a
);

186 i‡(
îr
 >= 0)

187 
îr
 = (
d©a
 & 
mask
) != 0 ? 1 : 0;

189  
îr
;

190 
	}
}

192 
	$sx150x_£t_oscio
(
sx150x_chù
 *
chù
, 
vÆ
)

194 
	`sx150x_i2c_wrôe
(
chù
->
˛õ¡
,

195 
chù
->
dev_cfg
->
ªg_˛ock
,

196 (
vÆ
 ? 0x1f : 0x10));

197 
	}
}

199 
	$sx150x_£t_io
(
sx150x_chù
 *
chù
, 
off£t
, 
vÆ
)

201 
	`sx150x_wrôe_cfg
(
chù
,

202 
off£t
,

204 
chù
->
dev_cfg
->
ªg_d©a
,

205 (
vÆ
 ? 1 : 0));

206 
	}
}

208 
	$sx150x_io_öput
(
sx150x_chù
 *
chù
, 
off£t
)

210  
	`sx150x_wrôe_cfg
(
chù
,

211 
off£t
,

213 
chù
->
dev_cfg
->
ªg_dú
,

215 
	}
}

217 
	$sx150x_io_ouçut
(
sx150x_chù
 *
chù
, 
off£t
, 
vÆ
)

219 
îr
;

221 
îr
 = 
	`sx150x_wrôe_cfg
(
chù
,

222 
off£t
,

224 
chù
->
dev_cfg
->
ªg_d©a
,

225 (
vÆ
 ? 1 : 0));

226 i‡(
îr
 >= 0)

227 
îr
 = 
	`sx150x_wrôe_cfg
(
chù
,

228 
off£t
,

230 
chù
->
dev_cfg
->
ªg_dú
,

232  
îr
;

233 
	}
}

235 
	$sx150x_gpio_gë
(
gpio_chù
 *
gc
, 
off£t
)

237 
sx150x_chù
 *
chù
;

238 
°©us
 = -
EINVAL
;

240 
chù
 = 
	`c⁄èöî_of
(
gc
, 
sx150x_chù
, 
gpio_chù
);

242 i‡(!
	`off£t_is_oscio
(
chù
, 
off£t
)) {

243 
	`muãx_lock
(&
chù
->
lock
);

244 
°©us
 = 
	`sx150x_gë_io
(
chù
, 
off£t
);

245 
	`muãx_u∆ock
(&
chù
->
lock
);

248  
°©us
;

249 
	}
}

251 
	$sx150x_gpio_£t
(
gpio_chù
 *
gc
, 
off£t
, 
vÆ
)

253 
sx150x_chù
 *
chù
;

255 
chù
 = 
	`c⁄èöî_of
(
gc
, 
sx150x_chù
, 
gpio_chù
);

257 
	`muãx_lock
(&
chù
->
lock
);

258 i‡(
	`off£t_is_oscio
(
chù
, 
off£t
))

259 
	`sx150x_£t_oscio
(
chù
, 
vÆ
);

261 
	`sx150x_£t_io
(
chù
, 
off£t
, 
vÆ
);

262 
	`muãx_u∆ock
(&
chù
->
lock
);

263 
	}
}

265 
	$sx150x_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gc
, 
off£t
)

267 
sx150x_chù
 *
chù
;

268 
°©us
 = -
EINVAL
;

270 
chù
 = 
	`c⁄èöî_of
(
gc
, 
sx150x_chù
, 
gpio_chù
);

272 i‡(!
	`off£t_is_oscio
(
chù
, 
off£t
)) {

273 
	`muãx_lock
(&
chù
->
lock
);

274 
°©us
 = 
	`sx150x_io_öput
(
chù
, 
off£t
);

275 
	`muãx_u∆ock
(&
chù
->
lock
);

277  
°©us
;

278 
	}
}

280 
	$sx150x_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
,

281 
off£t
,

282 
vÆ
)

284 
sx150x_chù
 *
chù
;

285 
°©us
 = 0;

287 
chù
 = 
	`c⁄èöî_of
(
gc
, 
sx150x_chù
, 
gpio_chù
);

289 i‡(!
	`off£t_is_oscio
(
chù
, 
off£t
)) {

290 
	`muãx_lock
(&
chù
->
lock
);

291 
°©us
 = 
	`sx150x_io_ouçut
(
chù
, 
off£t
, 
vÆ
);

292 
	`muãx_u∆ock
(&
chù
->
lock
);

294  
°©us
;

295 
	}
}

297 
	$sx150x_gpio_to_úq
(
gpio_chù
 *
gc
, 
off£t
)

299 
sx150x_chù
 *
chù
;

301 
chù
 = 
	`c⁄èöî_of
(
gc
, 
sx150x_chù
, 
gpio_chù
);

303 i‡(
off£t
 >
chù
->
dev_cfg
->
ngpios
)

304  -
EINVAL
;

306 i‡(
chù
->
úq_ba£
 < 0)

307  -
EINVAL
;

309  
chù
->
úq_ba£
 + 
off£t
;

310 
	}
}

312 
	$sx150x_úq_mask
(
úq_d©a
 *
d
)

314 
sx150x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

315 
n
;

317 
n
 = 
d
->
úq
 - 
chù
->
úq_ba£
;

318 
chù
->
úq_masked
 |(1 << 
n
);

319 
chù
->
úq_upd©e
 = 
n
;

320 
	}
}

322 
	$sx150x_úq_unmask
(
úq_d©a
 *
d
)

324 
sx150x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

325 
n
;

327 
n
 = 
d
->
úq
 - 
chù
->
úq_ba£
;

328 
chù
->
úq_masked
 &~(1 << 
n
);

329 
chù
->
úq_upd©e
 = 
n
;

330 
	}
}

332 
	$sx150x_úq_£t_ty≥
(
úq_d©a
 *
d
, 
Êow_ty≥
)

334 
sx150x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

335 
n
, 
vÆ
 = 0;

337 i‡(
Êow_ty≥
 & (
IRQ_TYPE_LEVEL_HIGH
 | 
IRQ_TYPE_LEVEL_LOW
))

338  -
EINVAL
;

340 
n
 = 
d
->
úq
 - 
chù
->
úq_ba£
;

342 i‡(
Êow_ty≥
 & 
IRQ_TYPE_EDGE_RISING
)

343 
vÆ
 |= 0x1;

344 i‡(
Êow_ty≥
 & 
IRQ_TYPE_EDGE_FALLING
)

345 
vÆ
 |= 0x2;

347 
chù
->
úq_£n£
 &~(3UL << (
n
 * 2));

348 
chù
->
úq_£n£
 |
vÆ
 << (
n
 * 2);

349 
chù
->
úq_upd©e
 = 
n
;

351 
	}
}

353 
úqªtu∫_t
 
	$sx150x_úq_thªad_‚
(
úq
, *
dev_id
)

355 
sx150x_chù
 *
chù
 = (sx150x_chù *)
dev_id
;

356 
nh™dÀd
 = 0;

357 
sub_úq
;

358 
n
;

359 
s32
 
îr
;

360 
u8
 
vÆ
;

361 
i
;

363 
i
 = (
chù
->
dev_cfg
->
ngpios
 / 8) - 1; i >= 0; --i) {

364 
îr
 = 
	`sx150x_i2c_ªad
(
chù
->
˛õ¡
,

365 
chù
->
dev_cfg
->
ªg_úq_§c
 - 
i
,

366 &
vÆ
);

367 i‡(
îr
 < 0)

370 
	`sx150x_i2c_wrôe
(
chù
->
˛õ¡
,

371 
chù
->
dev_cfg
->
ªg_úq_§c
 - 
i
,

372 
vÆ
);

373 
n
 = 0;Ç < 8; ++n) {

374 i‡(
vÆ
 & (1 << 
n
)) {

375 
sub_úq
 = 
chù
->
úq_ba£
 + (
i
 * 8Ë+ 
n
;

376 
	`h™dÀ_√°ed_úq
(
sub_úq
);

377 ++
nh™dÀd
;

382  (
nh™dÀd
 > 0 ? 
IRQ_HANDLED
 : 
IRQ_NONE
);

383 
	}
}

385 
	$sx150x_úq_bus_lock
(
úq_d©a
 *
d
)

387 
sx150x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

389 
	`muãx_lock
(&
chù
->
lock
);

390 
	}
}

392 
	$sx150x_úq_bus_sync_u∆ock
(
úq_d©a
 *
d
)

394 
sx150x_chù
 *
chù
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

395 
n
;

397 i‡(
chù
->
úq_upd©e
 =
NO_UPDATE_PENDING
)

398 
out
;

400 
n
 = 
chù
->
úq_upd©e
;

401 
chù
->
úq_upd©e
 = 
NO_UPDATE_PENDING
;

404 i‡(
chù
->
dev_£n£
 =chù->
úq_£n£
 &&

405 
chù
->
dev_£n£
 =chù->
úq_masked
)

406 
out
;

408 
chù
->
dev_£n£
 = chù->
úq_£n£
;

409 
chù
->
dev_masked
 = chù->
úq_masked
;

411 i‡(
chù
->
úq_masked
 & (1 << 
n
)) {

412 
	`sx150x_wrôe_cfg
(
chù
, 
n
, 1, chù->
dev_cfg
->
ªg_úq_mask
, 1);

413 
	`sx150x_wrôe_cfg
(
chù
, 
n
, 2, chù->
dev_cfg
->
ªg_£n£
, 0);

415 
	`sx150x_wrôe_cfg
(
chù
, 
n
, 1, chù->
dev_cfg
->
ªg_úq_mask
, 0);

416 
	`sx150x_wrôe_cfg
(
chù
, 
n
, 2, chù->
dev_cfg
->
ªg_£n£
,

417 
chù
->
úq_£n£
 >> (
n
 * 2));

419 
out
:

420 
	`muãx_u∆ock
(&
chù
->
lock
);

421 
	}
}

423 
	$sx150x_öô_chù
(
sx150x_chù
 *
chù
,

424 
i2c_˛õ¡
 *
˛õ¡
,

425 
kî√l_ul⁄g_t
 
drivî_d©a
,

426 
sx150x_∂©f‹m_d©a
 *
pd©a
)

428 
	`muãx_öô
(&
chù
->
lock
);

430 
chù
->
˛õ¡
 = client;

431 
chù
->
dev_cfg
 = &
sx150x_devi˚s
[
drivî_d©a
];

432 
chù
->
gpio_chù
.
œbñ
 = 
˛õ¡
->
«me
;

433 
chù
->
gpio_chù
.
dúe˘i⁄_öput
 = 
sx150x_gpio_dúe˘i⁄_öput
;

434 
chù
->
gpio_chù
.
dúe˘i⁄_ouçut
 = 
sx150x_gpio_dúe˘i⁄_ouçut
;

435 
chù
->
gpio_chù
.
gë
 = 
sx150x_gpio_gë
;

436 
chù
->
gpio_chù
.
£t
 = 
sx150x_gpio_£t
;

437 
chù
->
gpio_chù
.
to_úq
 = 
sx150x_gpio_to_úq
;

438 
chù
->
gpio_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

439 
chù
->
gpio_chù
.
ˇn_¶ìp
 = 1;

440 
chù
->
gpio_chù
.
ngpio
 = chù->
dev_cfg
->
ngpios
;

441 i‡(
pd©a
->
oscio_is_gpo
)

442 ++
chù
->
gpio_chù
.
ngpio
;

444 
chù
->
úq_chù
.
«me
 = 
˛õ¡
->name;

445 
chù
->
úq_chù
.
úq_mask
 = 
sx150x_úq_mask
;

446 
chù
->
úq_chù
.
úq_unmask
 = 
sx150x_úq_unmask
;

447 
chù
->
úq_chù
.
úq_£t_ty≥
 = 
sx150x_úq_£t_ty≥
;

448 
chù
->
úq_chù
.
úq_bus_lock
 = 
sx150x_úq_bus_lock
;

449 
chù
->
úq_chù
.
úq_bus_sync_u∆ock
 = 
sx150x_úq_bus_sync_u∆ock
;

450 
chù
->
úq_summ¨y
 = -1;

451 
chù
->
úq_ba£
 = -1;

452 
chù
->
úq_masked
 = ~0;

453 
chù
->
úq_£n£
 = 0;

454 
chù
->
dev_masked
 = ~0;

455 
chù
->
dev_£n£
 = 0;

456 
chù
->
úq_upd©e
 = 
NO_UPDATE_PENDING
;

457 
	}
}

459 
	$sx150x_öô_io
(
sx150x_chù
 *
chù
, 
u8
 
ba£
, 
u16
 
cfg
)

461 
îr
 = 0;

462 
n
;

464 
n
 = 0; 
îr
 >0 &&Ç < (
chù
->
dev_cfg
->
ngpios
 / 8); ++n)

465 
îr
 = 
	`sx150x_i2c_wrôe
(
chù
->
˛õ¡
, 
ba£
 - 
n
, 
cfg
 >> (n * 8));

466  
îr
;

467 
	}
}

469 
	$sx150x_ª£t
(
sx150x_chù
 *
chù
)

471 
îr
;

473 
îr
 = 
	`i2c_smbus_wrôe_byã_d©a
(
chù
->
˛õ¡
,

474 
chù
->
dev_cfg
->
ªg_ª£t
,

476 i‡(
îr
 < 0)

477  
îr
;

479 
îr
 = 
	`i2c_smbus_wrôe_byã_d©a
(
chù
->
˛õ¡
,

480 
chù
->
dev_cfg
->
ªg_ª£t
,

482  
îr
;

483 
	}
}

485 
	$sx150x_öô_hw
(
sx150x_chù
 *
chù
,

486 
sx150x_∂©f‹m_d©a
 *
pd©a
)

488 
îr
 = 0;

490 i‡(
pd©a
->
ª£t_durög_¥obe
) {

491 
îr
 = 
	`sx150x_ª£t
(
chù
);

492 i‡(
îr
 < 0)

493  
îr
;

496 
îr
 = 
	`sx150x_i2c_wrôe
(
chù
->
˛õ¡
,

497 
chù
->
dev_cfg
->
ªg_misc
,

499 i‡(
îr
 < 0)

500  
îr
;

502 
îr
 = 
	`sx150x_öô_io
(
chù
, chù->
dev_cfg
->
ªg_puŒup
,

503 
pd©a
->
io_puŒup_ía
);

504 i‡(
îr
 < 0)

505  
îr
;

507 
îr
 = 
	`sx150x_öô_io
(
chù
, chù->
dev_cfg
->
ªg_puŒdn
,

508 
pd©a
->
io_puŒdn_ía
);

509 i‡(
îr
 < 0)

510  
îr
;

512 
îr
 = 
	`sx150x_öô_io
(
chù
, chù->
dev_cfg
->
ªg_døö
,

513 
pd©a
->
io_›í_døö_ía
);

514 i‡(
îr
 < 0)

515  
îr
;

517 
îr
 = 
	`sx150x_öô_io
(
chù
, chù->
dev_cfg
->
ªg_pﬁ¨ôy
,

518 
pd©a
->
io_pﬁ¨ôy
);

519 i‡(
îr
 < 0)

520  
îr
;

522 i‡(
pd©a
->
oscio_is_gpo
)

523 
	`sx150x_£t_oscio
(
chù
, 0);

525  
îr
;

526 
	}
}

528 
	$sx150x_ö°Æl_úq_chù
(
sx150x_chù
 *
chù
,

529 
úq_summ¨y
,

530 
úq_ba£
)

532 
îr
;

533 
n
;

534 
úq
;

536 
chù
->
úq_summ¨y
 = irq_summary;

537 
chù
->
úq_ba£
 = irq_base;

539 
n
 = 0;Ç < 
chù
->
dev_cfg
->
ngpios
; ++n) {

540 
úq
 = 
úq_ba£
 + 
n
;

541 
	`úq_£t_chù_d©a
(
úq
, 
chù
);

542 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
chù
->
úq_chù
, 
h™dÀ_edge_úq
);

543 
	`úq_£t_√°ed_thªad
(
úq
, 1);

544 #ifde‡
CONFIG_ARM


545 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

547 
	`úq_£t_n›robe
(
úq
);

551 
îr
 = 
	`ªque°_thªaded_úq
(
úq_summ¨y
,

552 
NULL
,

553 
sx150x_úq_thªad_‚
,

554 
IRQF_SHARED
 | 
IRQF_TRIGGER_FALLING
,

555 
chù
->
úq_chù
.
«me
,

556 
chù
);

557 i‡(
îr
 < 0) {

558 
chù
->
úq_summ¨y
 = -1;

559 
chù
->
úq_ba£
 = -1;

562  
îr
;

563 
	}
}

565 
	$sx150x_ªmove_úq_chù
(
sx150x_chù
 *
chù
)

567 
n
;

568 
úq
;

570 
	`‰ì_úq
(
chù
->
úq_summ¨y
, chip);

572 
n
 = 0;Ç < 
chù
->
dev_cfg
->
ngpios
; ++n) {

573 
úq
 = 
chù
->
úq_ba£
 + 
n
;

574 
	`úq_£t_chù_™d_h™dÀr
(
úq
, 
NULL
, NULL);

576 
	}
}

578 
	$sx150x_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

579 c⁄° 
i2c_devi˚_id
 *
id
)

581 c⁄° 
u32
 
i2c_funcs
 = 
I2C_FUNC_SMBUS_BYTE_DATA
 |

582 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
;

583 
sx150x_∂©f‹m_d©a
 *
pd©a
;

584 
sx150x_chù
 *
chù
;

585 
rc
;

587 
pd©a
 = 
˛õ¡
->
dev
.
∂©f‹m_d©a
;

588 i‡(!
pd©a
)

589  -
EINVAL
;

591 i‡(!
	`i2c_check_fun˘i⁄Æôy
(
˛õ¡
->
ad≠ãr
, 
i2c_funcs
))

592  -
ENOSYS
;

594 
chù
 = 
	`kzÆloc
((
sx150x_chù
), 
GFP_KERNEL
);

595 i‡(!
chù
)

596  -
ENOMEM
;

598 
	`sx150x_öô_chù
(
chù
, 
˛õ¡
, 
id
->
drivî_d©a
, 
pd©a
);

599 
rc
 = 
	`sx150x_öô_hw
(
chù
, 
pd©a
);

600 i‡(
rc
 < 0)

601 
¥obe_Áû_¥e_gpiochù_add
;

603 
rc
 = 
	`gpiochù_add
(&
chù
->
gpio_chù
);

604 i‡(
rc
 < 0)

605 
¥obe_Áû_¥e_gpiochù_add
;

607 i‡(
pd©a
->
úq_summ¨y
 >= 0) {

608 
rc
 = 
	`sx150x_ö°Æl_úq_chù
(
chù
,

609 
pd©a
->
úq_summ¨y
,

610 
pd©a
->
úq_ba£
);

611 i‡(
rc
 < 0)

612 
¥obe_Áû_po°_gpiochù_add
;

615 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
chù
);

618 
¥obe_Áû_po°_gpiochù_add
:

619 
	`WARN_ON
(
	`gpiochù_ªmove
(&
chù
->
gpio_chù
) < 0);

620 
¥obe_Áû_¥e_gpiochù_add
:

621 
	`k‰ì
(
chù
);

622  
rc
;

623 
	}
}

625 
	$sx150x_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

627 
sx150x_chù
 *
chù
;

628 
rc
;

630 
chù
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

631 
rc
 = 
	`gpiochù_ªmove
(&
chù
->
gpio_chù
);

632 i‡(
rc
 < 0)

633  
rc
;

635 i‡(
chù
->
úq_summ¨y
 >= 0)

636 
	`sx150x_ªmove_úq_chù
(
chù
);

638 
	`k‰ì
(
chù
);

641 
	}
}

643 
i2c_drivî
 
	gsx150x_drivî
 = {

644 .
drivî
 = {

645 .
«me
 = "sx150x",

646 .
	gow√r
 = 
THIS_MODULE


648 .
	g¥obe
 = 
sx150x_¥obe
,

649 .
	gªmove
 = 
sx150x_ªmove
,

650 .
	gid_èbÀ
 = 
sx150x_id
,

653 
__öô
 
	$sx150x_öô
()

655  
	`i2c_add_drivî
(&
sx150x_drivî
);

656 
	}
}

657 
subsys_öôˇŒ
(
sx150x_öô
);

659 
__exô
 
	$sx150x_exô
()

661  
	`i2c_dñ_drivî
(&
sx150x_drivî
);

662 
	}
}

663 
moduÀ_exô
(
sx150x_exô
);

665 
MODULE_AUTHOR
("Gregory Bean <gbean@codeaurora.org>");

666 
MODULE_DESCRIPTION
("Driver for Semtech SX150X I2C GPIO Expanders");

667 
MODULE_LICENSE
("GPL v2");

668 
MODULE_ALIAS
("i2c:sx150x");

	@gpio-tc3589x.c

9 
	~<löux/moduÀ.h
>

10 
	~<löux/öô.h
>

11 
	~<löux/∂©f‹m_devi˚.h
>

12 
	~<löux/¶ab.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/of.h
>

15 
	~<löux/úq.h
>

16 
	~<löux/úqdomaö.h
>

17 
	~<löux/öãºu±.h
>

18 
	~<löux/mfd/tc3589x.h
>

24 íum { 
	mREG_IBE
, 
	mREG_IEV
, 
	mREG_IS
, 
	mREG_IE
 };

26 
	#CACHE_NR_REGS
 4

	)

27 
	#CACHE_NR_BANKS
 3

	)

29 
	stc3589x_gpio
 {

30 
gpio_chù
 
	mchù
;

31 
tc3589x
 *
	mtc3589x
;

32 
devi˚
 *
	mdev
;

33 
muãx
 
	múq_lock
;

34 
úq_domaö
 *
	mdomaö
;

36 
	múq_ba£
;

39 
u8
 
	mªgs
[
CACHE_NR_REGS
][
CACHE_NR_BANKS
];

40 
u8
 
	mﬁdªgs
[
CACHE_NR_REGS
][
CACHE_NR_BANKS
];

43 
ölöe
 
tc3589x_gpio
 *
	$to_tc3589x_gpio
(
gpio_chù
 *
chù
)

45  
	`c⁄èöî_of
(
chù
, 
tc3589x_gpio
, chip);

46 
	}
}

48 
	$tc3589x_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

50 
tc3589x_gpio
 *tc3589x_gpiÿ
	`to_tc3589x_gpio
(
chù
);

51 
tc3589x
 *tc3589x = 
tc3589x_gpio
->tc3589x;

52 
u8
 
ªg
 = 
TC3589x_GPIODATA0
 + (
off£t
 / 8) * 2;

53 
u8
 
mask
 = 1 << (
off£t
 % 8);

54 
ªt
;

56 
ªt
 = 
	`tc3589x_ªg_ªad
(
tc3589x
, 
ªg
);

57 i‡(
ªt
 < 0)

58  
ªt
;

60  
ªt
 & 
mask
;

61 
	}
}

63 
	$tc3589x_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆ
)

65 
tc3589x_gpio
 *tc3589x_gpiÿ
	`to_tc3589x_gpio
(
chù
);

66 
tc3589x
 *tc3589x = 
tc3589x_gpio
->tc3589x;

67 
u8
 
ªg
 = 
TC3589x_GPIODATA0
 + (
off£t
 / 8) * 2;

68 
pos
 = 
off£t
 % 8;

69 
u8
 
d©a
[] = {!!
vÆ
 << 
pos
, 1 <<Öos};

71 
	`tc3589x_block_wrôe
(
tc3589x
, 
ªg
, 
	`ARRAY_SIZE
(
d©a
), data);

72 
	}
}

74 
	$tc3589x_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

75 
off£t
, 
vÆ
)

77 
tc3589x_gpio
 *tc3589x_gpiÿ
	`to_tc3589x_gpio
(
chù
);

78 
tc3589x
 *tc3589x = 
tc3589x_gpio
->tc3589x;

79 
u8
 
ªg
 = 
TC3589x_GPIODIR0
 + 
off£t
 / 8;

80 
pos
 = 
off£t
 % 8;

82 
	`tc3589x_gpio_£t
(
chù
, 
off£t
, 
vÆ
);

84  
	`tc3589x_£t_bôs
(
tc3589x
, 
ªg
, 1 << 
pos
, 1 <<Öos);

85 
	}
}

87 
	$tc3589x_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
,

88 
off£t
)

90 
tc3589x_gpio
 *tc3589x_gpiÿ
	`to_tc3589x_gpio
(
chù
);

91 
tc3589x
 *tc3589x = 
tc3589x_gpio
->tc3589x;

92 
u8
 
ªg
 = 
TC3589x_GPIODIR0
 + 
off£t
 / 8;

93 
pos
 = 
off£t
 % 8;

95  
	`tc3589x_£t_bôs
(
tc3589x
, 
ªg
, 1 << 
pos
, 0);

96 
	}
}

106 
	$tc3589x_gpio_úq_gë_vúq
(
tc3589x_gpio
 *tc3589x_gpio,

107 
úq
)

109 i‡(!
tc3589x_gpio
)

110  -
EINVAL
;

112  
	`úq_¸óã_m≠pög
(
tc3589x_gpio
->
domaö
, 
úq
);

113 
	}
}

115 
	$tc3589x_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

117 
tc3589x_gpio
 *tc3589x_gpiÿ
	`to_tc3589x_gpio
(
chù
);

119  
	`tc3589x_gpio_úq_gë_vúq
(
tc3589x_gpio
, 
off£t
);

120 
	}
}

122 
gpio_chù
 
	gãm∂©e_chù
 = {

123 .
œbñ
 = "tc3589x",

124 .
	gow√r
 = 
THIS_MODULE
,

125 .
	gdúe˘i⁄_öput
 = 
tc3589x_gpio_dúe˘i⁄_öput
,

126 .
	ggë
 = 
tc3589x_gpio_gë
,

127 .
	gdúe˘i⁄_ouçut
 = 
tc3589x_gpio_dúe˘i⁄_ouçut
,

128 .
	g£t
 = 
tc3589x_gpio_£t
,

129 .
	gto_úq
 = 
tc3589x_gpio_to_úq
,

130 .
	gˇn_¶ìp
 = 1,

133 
	$tc3589x_gpio_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

135 
tc3589x_gpio
 *tc3589x_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

136 
off£t
 = 
d
->
hwúq
;

137 
ªgoff£t
 = 
off£t
 / 8;

138 
mask
 = 1 << (
off£t
 % 8);

140 i‡(
ty≥
 =
IRQ_TYPE_EDGE_BOTH
) {

141 
tc3589x_gpio
->
ªgs
[
REG_IBE
][
ªgoff£t
] |
mask
;

145 
tc3589x_gpio
->
ªgs
[
REG_IBE
][
ªgoff£t
] &~
mask
;

147 i‡(
ty≥
 =
IRQ_TYPE_LEVEL_LOW
 ||Åy≥ =
IRQ_TYPE_LEVEL_HIGH
)

148 
tc3589x_gpio
->
ªgs
[
REG_IS
][
ªgoff£t
] |
mask
;

150 
tc3589x_gpio
->
ªgs
[
REG_IS
][
ªgoff£t
] &~
mask
;

152 i‡(
ty≥
 =
IRQ_TYPE_EDGE_RISING
 ||Åy≥ =
IRQ_TYPE_LEVEL_HIGH
)

153 
tc3589x_gpio
->
ªgs
[
REG_IEV
][
ªgoff£t
] |
mask
;

155 
tc3589x_gpio
->
ªgs
[
REG_IEV
][
ªgoff£t
] &~
mask
;

158 
	}
}

160 
	$tc3589x_gpio_úq_lock
(
úq_d©a
 *
d
)

162 
tc3589x_gpio
 *tc3589x_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

164 
	`muãx_lock
(&
tc3589x_gpio
->
úq_lock
);

165 
	}
}

167 
	$tc3589x_gpio_úq_sync_u∆ock
(
úq_d©a
 *
d
)

169 
tc3589x_gpio
 *tc3589x_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

170 
tc3589x
 *tc3589x = 
tc3589x_gpio
->tc3589x;

171 c⁄° 
u8
 
ªgm≠
[] = {

172 [
REG_IBE
] = 
TC3589x_GPIOIBE0
,

173 [
REG_IEV
] = 
TC3589x_GPIOIEV0
,

174 [
REG_IS
] = 
TC3589x_GPIOIS0
,

175 [
REG_IE
] = 
TC3589x_GPIOIE0
,

177 
i
, 
j
;

179 
i
 = 0; i < 
CACHE_NR_REGS
; i++) {

180 
j
 = 0; j < 
CACHE_NR_BANKS
; j++) {

181 
u8
 
ﬁd
 = 
tc3589x_gpio
->
ﬁdªgs
[
i
][
j
];

182 
u8
 
√w
 = 
tc3589x_gpio
->
ªgs
[
i
][
j
];

184 i‡(
√w
 =
ﬁd
)

187 
tc3589x_gpio
->
ﬁdªgs
[
i
][
j
] = 
√w
;

188 
	`tc3589x_ªg_wrôe
(
tc3589x
, 
ªgm≠
[
i
] + 
j
 * 8, 
√w
);

192 
	`muãx_u∆ock
(&
tc3589x_gpio
->
úq_lock
);

193 
	}
}

195 
	$tc3589x_gpio_úq_mask
(
úq_d©a
 *
d
)

197 
tc3589x_gpio
 *tc3589x_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

198 
off£t
 = 
d
->
hwúq
;

199 
ªgoff£t
 = 
off£t
 / 8;

200 
mask
 = 1 << (
off£t
 % 8);

202 
tc3589x_gpio
->
ªgs
[
REG_IE
][
ªgoff£t
] &~
mask
;

203 
	}
}

205 
	$tc3589x_gpio_úq_unmask
(
úq_d©a
 *
d
)

207 
tc3589x_gpio
 *tc3589x_gpiÿ
	`úq_d©a_gë_úq_chù_d©a
(
d
);

208 
off£t
 = 
d
->
hwúq
;

209 
ªgoff£t
 = 
off£t
 / 8;

210 
mask
 = 1 << (
off£t
 % 8);

212 
tc3589x_gpio
->
ªgs
[
REG_IE
][
ªgoff£t
] |
mask
;

213 
	}
}

215 
úq_chù
 
	gtc3589x_gpio_úq_chù
 = {

216 .
«me
 = "tc3589x-gpio",

217 .
	gúq_bus_lock
 = 
tc3589x_gpio_úq_lock
,

218 .
	gúq_bus_sync_u∆ock
 = 
tc3589x_gpio_úq_sync_u∆ock
,

219 .
	gúq_mask
 = 
tc3589x_gpio_úq_mask
,

220 .
	gúq_unmask
 = 
tc3589x_gpio_úq_unmask
,

221 .
	gúq_£t_ty≥
 = 
tc3589x_gpio_úq_£t_ty≥
,

224 
úqªtu∫_t
 
	$tc3589x_gpio_úq
(
úq
, *
dev
)

226 
tc3589x_gpio
 *tc3589x_gpiÿ
dev
;

227 
tc3589x
 *tc3589x = 
tc3589x_gpio
->tc3589x;

228 
u8
 
°©us
[
CACHE_NR_BANKS
];

229 
ªt
;

230 
i
;

232 
ªt
 = 
	`tc3589x_block_ªad
(
tc3589x
, 
TC3589x_GPIOMIS0
,

233 
	`ARRAY_SIZE
(
°©us
), status);

234 i‡(
ªt
 < 0)

235  
IRQ_NONE
;

237 
i
 = 0; i < 
	`ARRAY_SIZE
(
°©us
); i++) {

238 
°©
 = 
°©us
[
i
];

239 i‡(!
°©
)

242 
°©
) {

243 
bô
 = 
	`__ffs
(
°©
);

244 
löe
 = 
i
 * 8 + 
bô
;

245 
vúq
 = 
	`tc3589x_gpio_úq_gë_vúq
(
tc3589x_gpio
, 
löe
);

247 
	`h™dÀ_√°ed_úq
(
vúq
);

248 
°©
 &~(1 << 
bô
);

251 
	`tc3589x_ªg_wrôe
(
tc3589x
, 
TC3589x_GPIOIC0
 + 
i
, 
°©us
[i]);

254  
IRQ_HANDLED
;

255 
	}
}

257 
	$tc3589x_gpio_úq_m≠
(
úq_domaö
 *
d
, 
vúq
,

258 
úq_hw_numbî_t
 
hwúq
)

260 
tc3589x
 *
tc3589x_gpio
 = 
d
->
ho°_d©a
;

262 
	`úq_£t_chù_d©a
(
vúq
, 
tc3589x_gpio
);

263 
	`úq_£t_chù_™d_h™dÀr
(
vúq
, &
tc3589x_gpio_úq_chù
,

264 
h™dÀ_sim∂e_úq
);

265 
	`úq_£t_√°ed_thªad
(
vúq
, 1);

266 #ifde‡
CONFIG_ARM


267 
	`£t_úq_Êags
(
vúq
, 
IRQF_VALID
);

269 
	`úq_£t_n›robe
(
vúq
);

273 
	}
}

275 
	$tc3589x_gpio_úq_unm≠
(
úq_domaö
 *
d
, 
vúq
)

277 #ifde‡
CONFIG_ARM


278 
	`£t_úq_Êags
(
vúq
, 0);

280 
	`úq_£t_chù_™d_h™dÀr
(
vúq
, 
NULL
, NULL);

281 
	`úq_£t_chù_d©a
(
vúq
, 
NULL
);

282 
	}
}

284 
úq_domaö_›s
 
	gtc3589x_úq_›s
 = {

285 .
m≠
 = 
tc3589x_gpio_úq_m≠
,

286 .
	gunm≠
 = 
tc3589x_gpio_úq_unm≠
,

287 .
	gxœã
 = 
úq_domaö_xœã_two˚Œ
,

290 
	$tc3589x_gpio_úq_öô
(
tc3589x_gpio
 *tc3589x_gpio,

291 
devi˚_node
 *
≈
)

293 
ba£
 = 
tc3589x_gpio
->
úq_ba£
;

301 
tc3589x_gpio
->
domaö
 = 
	`úq_domaö_add_sim∂e
(
≈
,

302 
tc3589x_gpio
->
chù
.
ngpio
, 
ba£
, &
tc3589x_úq_›s
,

303 
tc3589x_gpio
);

304 i‡(!
tc3589x_gpio
->
domaö
) {

305 
	`dev_îr
(
tc3589x_gpio
->
dev
, "FailedÅo create irqdomain\n");

306  -
ENOSYS
;

310 
	}
}

312 
	$tc3589x_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

314 
tc3589x
 *tc3589x = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

315 
tc3589x_gpio_∂©f‹m_d©a
 *
pd©a
;

316 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

317 
tc3589x_gpio
 *tc3589x_gpio;

318 
ªt
;

319 
úq
;

321 
pd©a
 = 
tc3589x
->pd©a->
gpio
;

323 i‡(!(
pd©a
 || 
≈
)) {

324 
	`dev_îr
(&
pdev
->
dev
, "NoÖlatform data or Device Tree found\n");

325  -
EINVAL
;

328 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

329 i‡(
úq
 < 0)

330  
úq
;

332 
tc3589x_gpio
 = 
	`kzÆloc
((tc3589x_gpio), 
GFP_KERNEL
);

333 i‡(!
tc3589x_gpio
)

334  -
ENOMEM
;

336 
	`muãx_öô
(&
tc3589x_gpio
->
úq_lock
);

338 
tc3589x_gpio
->
dev
 = &
pdev
->dev;

339 
tc3589x_gpio
->
tc3589x
 =Åc3589x;

341 
tc3589x_gpio
->
chù
 = 
ãm∂©e_chù
;

342 
tc3589x_gpio
->
chù
.
ngpio
 = 
tc3589x
->
num_gpio
;

343 
tc3589x_gpio
->
chù
.
dev
 = &
pdev
->dev;

344 
tc3589x_gpio
->
chù
.
ba£
 = (
pd©a
Ë?Öd©a->
gpio_ba£
 : -1;

346 #ifde‡
CONFIG_OF_GPIO


347 
tc3589x_gpio
->
chù
.
of_node
 = 
≈
;

350 
tc3589x_gpio
->
úq_ba£
 = 
tc3589x
->irq_base ?

351 
tc3589x
->
úq_ba£
 + 
	`TC3589x_INT_GPIO
(0) : 0;

354 
ªt
 = 
	`tc3589x_£t_bôs
(
tc3589x
, 
TC3589x_RSTCTRL
,

355 
TC3589x_RSTCTRL_GPIRST
, 0);

356 i‡(
ªt
 < 0)

357 
out_‰ì
;

359 
ªt
 = 
	`tc3589x_gpio_úq_öô
(
tc3589x_gpio
, 
≈
);

360 i‡(
ªt
)

361 
out_‰ì
;

363 
ªt
 = 
	`ªque°_thªaded_úq
(
úq
, 
NULL
, 
tc3589x_gpio_úq
, 
IRQF_ONESHOT
,

364 "tc3589x-gpio", 
tc3589x_gpio
);

365 i‡(
ªt
) {

366 
	`dev_îr
(&
pdev
->
dev
, "u«bÀÅÿgë irq: %d\n", 
ªt
);

367 
out_‰ì
;

370 
ªt
 = 
	`gpiochù_add
(&
tc3589x_gpio
->
chù
);

371 i‡(
ªt
) {

372 
	`dev_îr
(&
pdev
->
dev
, "u«bÀÅÿadd gpiochù: %d\n", 
ªt
);

373 
out_‰ìúq
;

376 i‡(
pd©a
 &&Öd©a->
£tup
)

377 
pd©a
->
	`£tup
(
tc3589x
, 
tc3589x_gpio
->
chù
.
ba£
);

379 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
tc3589x_gpio
);

383 
out_‰ìúq
:

384 
	`‰ì_úq
(
úq
, 
tc3589x_gpio
);

385 
out_‰ì
:

386 
	`k‰ì
(
tc3589x_gpio
);

387  
ªt
;

388 
	}
}

390 
	$tc3589x_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

392 
tc3589x_gpio
 *tc3589x_gpiÿ
	`∂©f‹m_gë_drvd©a
(
pdev
);

393 
tc3589x
 *tc3589x = 
tc3589x_gpio
->tc3589x;

394 
tc3589x_gpio_∂©f‹m_d©a
 *
pd©a
 = 
tc3589x
->pd©a->
gpio
;

395 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

396 
ªt
;

398 i‡(
pd©a
 &&Öd©a->
ªmove
)

399 
pd©a
->
	`ªmove
(
tc3589x
, 
tc3589x_gpio
->
chù
.
ba£
);

401 
ªt
 = 
	`gpiochù_ªmove
(&
tc3589x_gpio
->
chù
);

402 i‡(
ªt
 < 0) {

403 
	`dev_îr
(
tc3589x_gpio
->
dev
,

404 "u«bÀÅÿªmovêgpiochù: %d\n", 
ªt
);

405  
ªt
;

408 
	`‰ì_úq
(
úq
, 
tc3589x_gpio
);

410 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

411 
	`k‰ì
(
tc3589x_gpio
);

414 
	}
}

416 
∂©f‹m_drivî
 
	gtc3589x_gpio_drivî
 = {

417 .
drivî
.
«me
 = "tc3589x-gpio",

418 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

419 .
	g¥obe
 = 
tc3589x_gpio_¥obe
,

420 .
	gªmove
 = 
tc3589x_gpio_ªmove
,

423 
__öô
 
	$tc3589x_gpio_öô
()

425  
	`∂©f‹m_drivî_ªgi°î
(&
tc3589x_gpio_drivî
);

426 
	}
}

427 
subsys_öôˇŒ
(
tc3589x_gpio_öô
);

429 
__exô
 
	$tc3589x_gpio_exô
()

431 
	`∂©f‹m_drivî_uƒegi°î
(&
tc3589x_gpio_drivî
);

432 
	}
}

433 
moduÀ_exô
(
tc3589x_gpio_exô
);

435 
MODULE_LICENSE
("GPL v2");

436 
MODULE_DESCRIPTION
("TC3589x GPIO driver");

437 
MODULE_AUTHOR
("Hanumath Prasad, Rabin Vincent");

	@gpio-tegra.c

20 
	~<löux/îr.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/úq.h
>

23 
	~<löux/öãºu±.h
>

24 
	~<löux/io.h
>

25 
	~<löux/gpio.h
>

26 
	~<löux/of_devi˚.h
>

27 
	~<löux/∂©f‹m_devi˚.h
>

28 
	~<löux/moduÀ.h
>

29 
	~<löux/úqdomaö.h
>

30 
	~<löux/úqchù/chaöed_úq.h
>

31 
	~<löux/pö˘æ/c⁄sumî.h
>

32 
	~<löux/pm.h
>

34 
	#GPIO_BANK
(
x
Ë((xË>> 5)

	)

35 
	#GPIO_PORT
(
x
Ë(((xË>> 3Ë& 0x3)

	)

36 
	#GPIO_BIT
(
x
Ë((xË& 0x7)

	)

38 
	#GPIO_REG
(
x
Ë(
	`GPIO_BANK
(xË* 
ãgø_gpio_b™k_°ride
 + \

39 
	`GPIO_PORT
(
x
Ë* 4)

	)

41 
	#GPIO_CNF
(
x
Ë(
	`GPIO_REG
(xË+ 0x00)

	)

42 
	#GPIO_OE
(
x
Ë(
	`GPIO_REG
(xË+ 0x10)

	)

43 
	#GPIO_OUT
(
x
Ë(
	`GPIO_REG
(xË+ 0X20)

	)

44 
	#GPIO_IN
(
x
Ë(
	`GPIO_REG
(xË+ 0x30)

	)

45 
	#GPIO_INT_STA
(
x
Ë(
	`GPIO_REG
(xË+ 0x40)

	)

46 
	#GPIO_INT_ENB
(
x
Ë(
	`GPIO_REG
(xË+ 0x50)

	)

47 
	#GPIO_INT_LVL
(
x
Ë(
	`GPIO_REG
(xË+ 0x60)

	)

48 
	#GPIO_INT_CLR
(
x
Ë(
	`GPIO_REG
(xË+ 0x70)

	)

50 
	#GPIO_MSK_CNF
(
x
Ë(
	`GPIO_REG
(xË+ 
ãgø_gpio_uµî_off£t
 + 0x00)

	)

51 
	#GPIO_MSK_OE
(
x
Ë(
	`GPIO_REG
(xË+ 
ãgø_gpio_uµî_off£t
 + 0x10)

	)

52 
	#GPIO_MSK_OUT
(
x
Ë(
	`GPIO_REG
(xË+ 
ãgø_gpio_uµî_off£t
 + 0X20)

	)

53 
	#GPIO_MSK_INT_STA
(
x
Ë(
	`GPIO_REG
(xË+ 
ãgø_gpio_uµî_off£t
 + 0x40)

	)

54 
	#GPIO_MSK_INT_ENB
(
x
Ë(
	`GPIO_REG
(xË+ 
ãgø_gpio_uµî_off£t
 + 0x50)

	)

55 
	#GPIO_MSK_INT_LVL
(
x
Ë(
	`GPIO_REG
(xË+ 
ãgø_gpio_uµî_off£t
 + 0x60)

	)

57 
	#GPIO_INT_LVL_MASK
 0x010101

	)

58 
	#GPIO_INT_LVL_EDGE_RISING
 0x000101

	)

59 
	#GPIO_INT_LVL_EDGE_FALLING
 0x000100

	)

60 
	#GPIO_INT_LVL_EDGE_BOTH
 0x010100

	)

61 
	#GPIO_INT_LVL_LEVEL_HIGH
 0x000001

	)

62 
	#GPIO_INT_LVL_LEVEL_LOW
 0x000000

	)

64 
	sãgø_gpio_b™k
 {

65 
	mb™k
;

66 
	múq
;

67 
•ölock_t
 
	mlvl_lock
[4];

68 #ifde‡
CONFIG_PM_SLEEP


69 
u32
 
	m˙f
[4];

70 
u32
 
	mout
[4];

71 
u32
 
	m€
[4];

72 
u32
 
	möt_íb
[4];

73 
u32
 
	möt_lvl
[4];

74 
u32
 
	mwake_íb
[4];

78 
úq_domaö
 *
	gúq_domaö
;

79 
__iomem
 *
	gªgs
;

80 
u32
 
	gãgø_gpio_b™k_cou¡
;

81 
u32
 
	gãgø_gpio_b™k_°ride
;

82 
u32
 
	gãgø_gpio_uµî_off£t
;

83 
ãgø_gpio_b™k
 *
	gãgø_gpio_b™ks
;

85 
ölöe
 
	$ãgø_gpio_wrôñ
(
u32
 
vÆ
, u32 
ªg
)

87 
	`__øw_wrôñ
(
vÆ
, 
ªgs
 + 
ªg
);

88 
	}
}

90 
ölöe
 
u32
 
	$ãgø_gpio_ªadl
(
u32
 
ªg
)

92  
	`__øw_ªadl
(
ªgs
 + 
ªg
);

93 
	}
}

95 
	$ãgø_gpio_compo£
(
b™k
, 
p‹t
, 
bô
)

97  (
b™k
 << 5Ë| ((
p‹t
 & 0x3Ë<< 3Ë| (
bô
 & 0x7);

98 
	}
}

100 
	$ãgø_gpio_mask_wrôe
(
u32
 
ªg
, 
gpio
, 
vÆue
)

102 
u32
 
vÆ
;

104 
vÆ
 = 0x100 << 
	`GPIO_BIT
(
gpio
);

105 i‡(
vÆue
)

106 
vÆ
 |1 << 
	`GPIO_BIT
(
gpio
);

107 
	`ãgø_gpio_wrôñ
(
vÆ
, 
ªg
);

108 
	}
}

110 
	$ãgø_gpio_íabÀ
(
gpio
)

112 
	`ãgø_gpio_mask_wrôe
(
	`GPIO_MSK_CNF
(
gpio
), gpio, 1);

113 
	}
}

115 
	$ãgø_gpio_dißbÀ
(
gpio
)

117 
	`ãgø_gpio_mask_wrôe
(
	`GPIO_MSK_CNF
(
gpio
), gpio, 0);

118 
	}
}

120 
	$ãgø_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

122  
	`pö˘æ_ªque°_gpio
(
off£t
);

123 
	}
}

125 
	$ãgø_gpio_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

127 
	`pö˘æ_‰ì_gpio
(
off£t
);

128 
	`ãgø_gpio_dißbÀ
(
off£t
);

129 
	}
}

131 
	$ãgø_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

133 
	`ãgø_gpio_mask_wrôe
(
	`GPIO_MSK_OUT
(
off£t
), off£t, 
vÆue
);

134 
	}
}

136 
	$ãgø_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

139 i‡((
	`ãgø_gpio_ªadl
(
	`GPIO_OE
(
off£t
)Ë>> 
	`GPIO_BIT
(offset)) & 1)

140  (
	`ãgø_gpio_ªadl
(
	`GPIO_OUT
(
off£t
)) >>

141 
	`GPIO_BIT
(
off£t
)) & 0x1;

143  (
	`ãgø_gpio_ªadl
(
	`GPIO_IN
(
off£t
)Ë>> 
	`GPIO_BIT
(offset)) & 0x1;

144 
	}
}

146 
	$ãgø_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

148 
	`ãgø_gpio_mask_wrôe
(
	`GPIO_MSK_OE
(
off£t
), offset, 0);

149 
	`ãgø_gpio_íabÀ
(
off£t
);

151 
	}
}

153 
	$ãgø_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
,

154 
vÆue
)

156 
	`ãgø_gpio_£t
(
chù
, 
off£t
, 
vÆue
);

157 
	`ãgø_gpio_mask_wrôe
(
	`GPIO_MSK_OE
(
off£t
), offset, 1);

158 
	`ãgø_gpio_íabÀ
(
off£t
);

160 
	}
}

162 
	$ãgø_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

164  
	`úq_föd_m≠pög
(
úq_domaö
, 
off£t
);

165 
	}
}

167 
gpio_chù
 
	gãgø_gpio_chù
 = {

168 .
œbñ
 = "tegra-gpio",

169 .
	gªque°
 = 
ãgø_gpio_ªque°
,

170 .
	g‰ì
 = 
ãgø_gpio_‰ì
,

171 .
	gdúe˘i⁄_öput
 = 
ãgø_gpio_dúe˘i⁄_öput
,

172 .
	ggë
 = 
ãgø_gpio_gë
,

173 .
	gdúe˘i⁄_ouçut
 = 
ãgø_gpio_dúe˘i⁄_ouçut
,

174 .
	g£t
 = 
ãgø_gpio_£t
,

175 .
	gto_úq
 = 
ãgø_gpio_to_úq
,

176 .
	gba£
 = 0,

179 
	$ãgø_gpio_úq_ack
(
úq_d©a
 *
d
)

181 
gpio
 = 
d
->
hwúq
;

183 
	`ãgø_gpio_wrôñ
(1 << 
	`GPIO_BIT
(
gpio
), 
	`GPIO_INT_CLR
(gpio));

184 
	}
}

186 
	$ãgø_gpio_úq_mask
(
úq_d©a
 *
d
)

188 
gpio
 = 
d
->
hwúq
;

190 
	`ãgø_gpio_mask_wrôe
(
	`GPIO_MSK_INT_ENB
(
gpio
), gpio, 0);

191 
	}
}

193 
	$ãgø_gpio_úq_unmask
(
úq_d©a
 *
d
)

195 
gpio
 = 
d
->
hwúq
;

197 
	`ãgø_gpio_mask_wrôe
(
	`GPIO_MSK_INT_ENB
(
gpio
), gpio, 1);

198 
	}
}

200 
	$ãgø_gpio_úq_£t_ty≥
(
úq_d©a
 *
d
, 
ty≥
)

202 
gpio
 = 
d
->
hwúq
;

203 
ãgø_gpio_b™k
 *
b™k
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

204 
p‹t
 = 
	`GPIO_PORT
(
gpio
);

205 
lvl_ty≥
;

206 
vÆ
;

207 
Êags
;

209 
ty≥
 & 
IRQ_TYPE_SENSE_MASK
) {

210 
IRQ_TYPE_EDGE_RISING
:

211 
lvl_ty≥
 = 
GPIO_INT_LVL_EDGE_RISING
;

214 
IRQ_TYPE_EDGE_FALLING
:

215 
lvl_ty≥
 = 
GPIO_INT_LVL_EDGE_FALLING
;

218 
IRQ_TYPE_EDGE_BOTH
:

219 
lvl_ty≥
 = 
GPIO_INT_LVL_EDGE_BOTH
;

222 
IRQ_TYPE_LEVEL_HIGH
:

223 
lvl_ty≥
 = 
GPIO_INT_LVL_LEVEL_HIGH
;

226 
IRQ_TYPE_LEVEL_LOW
:

227 
lvl_ty≥
 = 
GPIO_INT_LVL_LEVEL_LOW
;

231  -
EINVAL
;

234 
	`•ö_lock_úqßve
(&
b™k
->
lvl_lock
[
p‹t
], 
Êags
);

236 
vÆ
 = 
	`ãgø_gpio_ªadl
(
	`GPIO_INT_LVL
(
gpio
));

237 
vÆ
 &~(
GPIO_INT_LVL_MASK
 << 
	`GPIO_BIT
(
gpio
));

238 
vÆ
 |
lvl_ty≥
 << 
	`GPIO_BIT
(
gpio
);

239 
	`ãgø_gpio_wrôñ
(
vÆ
, 
	`GPIO_INT_LVL
(
gpio
));

241 
	`•ö_u∆ock_úqª°‹e
(&
b™k
->
lvl_lock
[
p‹t
], 
Êags
);

243 
	`ãgø_gpio_mask_wrôe
(
	`GPIO_MSK_OE
(
gpio
), gpio, 0);

244 
	`ãgø_gpio_íabÀ
(
gpio
);

246 i‡(
ty≥
 & (
IRQ_TYPE_LEVEL_LOW
 | 
IRQ_TYPE_LEVEL_HIGH
))

247 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_Àvñ_úq
);

248 i‡(
ty≥
 & (
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
))

249 
	`__úq_£t_h™dÀr_locked
(
d
->
úq
, 
h™dÀ_edge_úq
);

252 
	}
}

254 
	$ãgø_gpio_úq_h™dÀr
(
úq
, 
úq_desc
 *
desc
)

256 
ãgø_gpio_b™k
 *
b™k
;

257 
p‹t
;

258 
pö
;

259 
unmasked
 = 0;

260 
úq_chù
 *
chù
 = 
	`úq_desc_gë_chù
(
desc
);

262 
	`chaöed_úq_íãr
(
chù
, 
desc
);

264 
b™k
 = 
	`úq_gë_h™dÀr_d©a
(
úq
);

266 
p‹t
 = 0;Öort < 4;Öort++) {

267 
gpio
 = 
	`ãgø_gpio_compo£
(
b™k
->b™k, 
p‹t
, 0);

268 
°a
 = 
	`ãgø_gpio_ªadl
(
	`GPIO_INT_STA
(
gpio
)) &

269 
	`ãgø_gpio_ªadl
(
	`GPIO_INT_ENB
(
gpio
));

270 
u32
 
lvl
 = 
	`ãgø_gpio_ªadl
(
	`GPIO_INT_LVL
(
gpio
));

272 
	`f‹_óch_£t_bô
(
pö
, &
°a
, 8) {

273 
	`ãgø_gpio_wrôñ
(1 << 
pö
, 
	`GPIO_INT_CLR
(
gpio
));

279 i‡(
lvl
 & (0x100 << 
pö
)) {

280 
unmasked
 = 1;

281 
	`chaöed_úq_exô
(
chù
, 
desc
);

284 
	`gíîic_h™dÀ_úq
(
	`gpio_to_úq
(
gpio
 + 
pö
));

288 i‡(!
unmasked
)

289 
	`chaöed_úq_exô
(
chù
, 
desc
);

291 
	}
}

293 #ifde‡
CONFIG_PM_SLEEP


294 
	$ãgø_gpio_ªsume
(
devi˚
 *
dev
)

296 
Êags
;

297 
b
;

298 
p
;

300 
	`loˇl_úq_ßve
(
Êags
);

302 
b
 = 0; b < 
ãgø_gpio_b™k_cou¡
; b++) {

303 
ãgø_gpio_b™k
 *
b™k
 = &
ãgø_gpio_b™ks
[
b
];

305 
p
 = 0;Ö < 
	`ARRAY_SIZE
(
b™k
->
€
);Ö++) {

306 
gpio
 = (
b
<<5Ë| (
p
<<3);

307 
	`ãgø_gpio_wrôñ
(
b™k
->
˙f
[
p
], 
	`GPIO_CNF
(
gpio
));

308 
	`ãgø_gpio_wrôñ
(
b™k
->
out
[
p
], 
	`GPIO_OUT
(
gpio
));

309 
	`ãgø_gpio_wrôñ
(
b™k
->
€
[
p
], 
	`GPIO_OE
(
gpio
));

310 
	`ãgø_gpio_wrôñ
(
b™k
->
öt_lvl
[
p
], 
	`GPIO_INT_LVL
(
gpio
));

311 
	`ãgø_gpio_wrôñ
(
b™k
->
öt_íb
[
p
], 
	`GPIO_INT_ENB
(
gpio
));

315 
	`loˇl_úq_ª°‹e
(
Êags
);

317 
	}
}

319 
	$ãgø_gpio_su•íd
(
devi˚
 *
dev
)

321 
Êags
;

322 
b
;

323 
p
;

325 
	`loˇl_úq_ßve
(
Êags
);

326 
b
 = 0; b < 
ãgø_gpio_b™k_cou¡
; b++) {

327 
ãgø_gpio_b™k
 *
b™k
 = &
ãgø_gpio_b™ks
[
b
];

329 
p
 = 0;Ö < 
	`ARRAY_SIZE
(
b™k
->
€
);Ö++) {

330 
gpio
 = (
b
<<5Ë| (
p
<<3);

331 
b™k
->
˙f
[
p
] = 
	`ãgø_gpio_ªadl
(
	`GPIO_CNF
(
gpio
));

332 
b™k
->
out
[
p
] = 
	`ãgø_gpio_ªadl
(
	`GPIO_OUT
(
gpio
));

333 
b™k
->
€
[
p
] = 
	`ãgø_gpio_ªadl
(
	`GPIO_OE
(
gpio
));

334 
b™k
->
öt_íb
[
p
] = 
	`ãgø_gpio_ªadl
(
	`GPIO_INT_ENB
(
gpio
));

335 
b™k
->
öt_lvl
[
p
] = 
	`ãgø_gpio_ªadl
(
	`GPIO_INT_LVL
(
gpio
));

338 
	`ãgø_gpio_wrôñ
(
b™k
->
wake_íb
[
p
],

339 
	`GPIO_INT_ENB
(
gpio
));

342 
	`loˇl_úq_ª°‹e
(
Êags
);

344 
	}
}

346 
	$ãgø_gpio_úq_£t_wake
(
úq_d©a
 *
d
, 
íabÀ
)

348 
ãgø_gpio_b™k
 *
b™k
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

349 
gpio
 = 
d
->
hwúq
;

350 
u32
 
p‹t
, 
bô
, 
mask
;

352 
p‹t
 = 
	`GPIO_PORT
(
gpio
);

353 
bô
 = 
	`GPIO_BIT
(
gpio
);

354 
mask
 = 
	`BIT
(
bô
);

356 i‡(
íabÀ
)

357 
b™k
->
wake_íb
[
p‹t
] |
mask
;

359 
b™k
->
wake_íb
[
p‹t
] &~
mask
;

361  
	`úq_£t_úq_wake
(
b™k
->
úq
, 
íabÀ
);

362 
	}
}

365 
úq_chù
 
	gãgø_gpio_úq_chù
 = {

366 .
«me
 = "GPIO",

367 .
	gúq_ack
 = 
ãgø_gpio_úq_ack
,

368 .
	gúq_mask
 = 
ãgø_gpio_úq_mask
,

369 .
	gúq_unmask
 = 
ãgø_gpio_úq_unmask
,

370 .
	gúq_£t_ty≥
 = 
ãgø_gpio_úq_£t_ty≥
,

371 #ifde‡
CONFIG_PM_SLEEP


372 .
	gúq_£t_wake
 = 
ãgø_gpio_úq_£t_wake
,

376 c⁄° 
dev_pm_›s
 
	gãgø_gpio_pm_›s
 = {

377 
SET_SYSTEM_SLEEP_PM_OPS
(
ãgø_gpio_su•íd
, 
ãgø_gpio_ªsume
)

380 
	sãgø_gpio_soc_c⁄fig
 {

381 
u32
 
	mb™k_°ride
;

382 
u32
 
	muµî_off£t
;

385 
ãgø_gpio_soc_c⁄fig
 
	gãgø20_gpio_c⁄fig
 = {

386 .
b™k_°ride
 = 0x80,

387 .
	guµî_off£t
 = 0x800,

390 
ãgø_gpio_soc_c⁄fig
 
	gãgø30_gpio_c⁄fig
 = {

391 .
b™k_°ride
 = 0x100,

392 .
	guµî_off£t
 = 0x80,

395 
of_devi˚_id
 
	gãgø_gpio_of_m©ch
[] = {

396 { .
com∑tibÀ
 = "nvidü,ãgø30-gpio", .
	gd©a
 = &
ãgø30_gpio_c⁄fig
 },

397 { .
	gcom∑tibÀ
 = "nvidü,ãgø20-gpio", .
	gd©a
 = &
ãgø20_gpio_c⁄fig
 },

404 
lock_˛ass_key
 
	ggpio_lock_˛ass
;

406 
	$ãgø_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

408 c⁄° 
of_devi˚_id
 *
m©ch
;

409 
ãgø_gpio_soc_c⁄fig
 *
c⁄fig
;

410 
ªsour˚
 *
ªs
;

411 
ãgø_gpio_b™k
 *
b™k
;

412 
gpio
;

413 
i
;

414 
j
;

416 
m©ch
 = 
	`of_m©ch_devi˚
(
ãgø_gpio_of_m©ch
, &
pdev
->
dev
);

417 i‡(!
m©ch
) {

418 
	`dev_îr
(&
pdev
->
dev
, "Error: No device match found\n");

419  -
ENODEV
;

421 
c⁄fig
 = (
ãgø_gpio_soc_c⁄fig
 *)
m©ch
->
d©a
;

423 
ãgø_gpio_b™k_°ride
 = 
c⁄fig
->
b™k_°ride
;

424 
ãgø_gpio_uµî_off£t
 = 
c⁄fig
->
uµî_off£t
;

427 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 
ãgø_gpio_b™k_cou¡
);

428 i‡(!
ªs
)

430 
ãgø_gpio_b™k_cou¡
++;

432 i‡(!
ãgø_gpio_b™k_cou¡
) {

433 
	`dev_îr
(&
pdev
->
dev
, "Missing IRQÑesource\n");

434  -
ENODEV
;

437 
ãgø_gpio_chù
.
ngpio
 = 
ãgø_gpio_b™k_cou¡
 * 32;

439 
ãgø_gpio_b™ks
 = 
	`devm_kzÆloc
(&
pdev
->
dev
,

440 
ãgø_gpio_b™k_cou¡
 * (*
ãgø_gpio_b™ks
),

441 
GFP_KERNEL
);

442 i‡(!
ãgø_gpio_b™ks
) {

443 
	`dev_îr
(&
pdev
->
dev
, "Couldn'tállocate bank structure\n");

444  -
ENODEV
;

447 
úq_domaö
 = 
	`úq_domaö_add_löór
(
pdev
->
dev
.
of_node
,

448 
ãgø_gpio_chù
.
ngpio
,

449 &
úq_domaö_sim∂e_›s
, 
NULL
);

450 i‡(!
úq_domaö
)

451  -
ENODEV
;

453 
i
 = 0; i < 
ãgø_gpio_b™k_cou¡
; i++) {

454 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 
i
);

455 i‡(!
ªs
) {

456 
	`dev_îr
(&
pdev
->
dev
, "Missing IRQÑesource\n");

457  -
ENODEV
;

460 
b™k
 = &
ãgø_gpio_b™ks
[
i
];

461 
b™k
->b™k = 
i
;

462 
b™k
->
úq
 = 
ªs
->
°¨t
;

465 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

466 
ªgs
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

467 i‡(
	`IS_ERR
(
ªgs
))

468  
	`PTR_ERR
(
ªgs
);

470 
i
 = 0; i < 
ãgø_gpio_b™k_cou¡
; i++) {

471 
j
 = 0; j < 4; j++) {

472 
gpio
 = 
	`ãgø_gpio_compo£
(
i
, 
j
, 0);

473 
	`ãgø_gpio_wrôñ
(0x00, 
	`GPIO_INT_ENB
(
gpio
));

477 
ãgø_gpio_chù
.
of_node
 = 
pdev
->
dev
.of_node;

479 
	`gpiochù_add
(&
ãgø_gpio_chù
);

481 
gpio
 = 0; gpiÿ< 
ãgø_gpio_chù
.
ngpio
; gpio++) {

482 
úq
 = 
	`úq_¸óã_m≠pög
(
úq_domaö
, 
gpio
);

485 
b™k
 = &
ãgø_gpio_b™ks
[
	`GPIO_BANK
(
gpio
)];

487 
	`úq_£t_lockdï_˛ass
(
úq
, &
gpio_lock_˛ass
);

488 
	`úq_£t_chù_d©a
(
úq
, 
b™k
);

489 
	`úq_£t_chù_™d_h™dÀr
(
úq
, &
ãgø_gpio_úq_chù
,

490 
h™dÀ_sim∂e_úq
);

491 
	`£t_úq_Êags
(
úq
, 
IRQF_VALID
);

494 
i
 = 0; i < 
ãgø_gpio_b™k_cou¡
; i++) {

495 
b™k
 = &
ãgø_gpio_b™ks
[
i
];

497 
	`úq_£t_chaöed_h™dÀr
(
b™k
->
úq
, 
ãgø_gpio_úq_h™dÀr
);

498 
	`úq_£t_h™dÀr_d©a
(
b™k
->
úq
, bank);

500 
j
 = 0; j < 4; j++)

501 
	`•ö_lock_öô
(&
b™k
->
lvl_lock
[
j
]);

505 
	}
}

507 
∂©f‹m_drivî
 
	gãgø_gpio_drivî
 = {

508 .
drivî
 = {

509 .
«me
 = "tegra-gpio",

510 .
	gow√r
 = 
THIS_MODULE
,

511 .
	gpm
 = &
ãgø_gpio_pm_›s
,

512 .
	gof_m©ch_èbÀ
 = 
ãgø_gpio_of_m©ch
,

514 .
	g¥obe
 = 
ãgø_gpio_¥obe
,

517 
__öô
 
	$ãgø_gpio_öô
()

519  
	`∂©f‹m_drivî_ªgi°î
(&
ãgø_gpio_drivî
);

520 
	}
}

521 
po°c‹e_öôˇŒ
(
ãgø_gpio_öô
);

523 #ifdef 
CONFIG_DEBUG_FS


525 
	~<löux/debugfs.h
>

526 
	~<löux/£q_fûe.h
>

528 
	$dbg_gpio_show
(
£q_fûe
 *
s
, *
unu£d
)

530 
i
;

531 
j
;

533 
i
 = 0; i < 
ãgø_gpio_b™k_cou¡
; i++) {

534 
j
 = 0; j < 4; j++) {

535 
gpio
 = 
	`ãgø_gpio_compo£
(
i
, 
j
, 0);

536 
	`£q_¥ötf
(
s
,

538 
i
, 
j
,

539 
	`ãgø_gpio_ªadl
(
	`GPIO_CNF
(
gpio
)),

540 
	`ãgø_gpio_ªadl
(
	`GPIO_OE
(
gpio
)),

541 
	`ãgø_gpio_ªadl
(
	`GPIO_OUT
(
gpio
)),

542 
	`ãgø_gpio_ªadl
(
	`GPIO_IN
(
gpio
)),

543 
	`ãgø_gpio_ªadl
(
	`GPIO_INT_STA
(
gpio
)),

544 
	`ãgø_gpio_ªadl
(
	`GPIO_INT_ENB
(
gpio
)),

545 
	`ãgø_gpio_ªadl
(
	`GPIO_INT_LVL
(
gpio
)));

549 
	}
}

551 
	$dbg_gpio_›í
(
öode
 *öode, 
fûe
 *file)

553  
	`sögÀ_›í
(
fûe
, 
dbg_gpio_show
, &
öode
->
i_¥iv©e
);

554 
	}
}

556 c⁄° 
fûe_›î©i⁄s
 
	gdebug_f›s
 = {

557 .
›í
 = 
dbg_gpio_›í
,

558 .
	gªad
 = 
£q_ªad
,

559 .
	gŒ£ek
 = 
£q_l£ek
,

560 .
	gªÀa£
 = 
sögÀ_ªÀa£
,

563 
__öô
 
	$ãgø_gpio_debugöô
()

565 (Ë
	`debugfs_¸óã_fûe
("ãgø_gpio", 
S_IRUGO
,

566 
NULL
, NULL, &
debug_f›s
);

568 
	}
}

569 
œã_öôˇŒ
(
ãgø_gpio_debugöô
);

	@gpio-timberdale.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/gpio.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/úq.h
>

27 
	~<löux/io.h
>

28 
	~<löux/timb_gpio.h
>

29 
	~<löux/öãºu±.h
>

30 
	~<löux/¶ab.h
>

32 
	#DRIVER_NAME
 "timb-gpio"

	)

34 
	#TGPIOVAL
 0x00

	)

35 
	#TGPIODIR
 0x04

	)

36 
	#TGPIO_IER
 0x08

	)

37 
	#TGPIO_ISR
 0x0c

	)

38 
	#TGPIO_IPR
 0x10

	)

39 
	#TGPIO_ICR
 0x14

	)

40 
	#TGPIO_FLR
 0x18

	)

41 
	#TGPIO_LVR
 0x1c

	)

42 
	#TGPIO_VER
 0x20

	)

43 
	#TGPIO_BFLR
 0x24

	)

45 
	stimbgpio
 {

46 
__iomem
 *
	mmemba£
;

47 
•ölock_t
 
	mlock
;

48 
gpio_chù
 
	mgpio
;

49 
	múq_ba£
;

50 
	mœ°_õr
;

53 
	$timbgpio_upd©e_bô
(
gpio_chù
 *
gpio
, 
ödex
,

54 
off£t
, 
boﬁ
 
íabÀd
)

56 
timbgpio
 *
tgpio
 = 
	`c⁄èöî_of
(
gpio
, timbgpio, gpio);

57 
u32
 
ªg
;

59 
	`•ö_lock
(&
tgpio
->
lock
);

60 
ªg
 = 
	`i‹ód32
(
tgpio
->
memba£
 + 
off£t
);

62 i‡(
íabÀd
)

63 
ªg
 |(1 << 
ödex
);

65 
ªg
 &~(1 << 
ödex
);

67 
	`iowrôe32
(
ªg
, 
tgpio
->
memba£
 + 
off£t
);

68 
	`•ö_u∆ock
(&
tgpio
->
lock
);

71 
	}
}

73 
	$timbgpio_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gpio
, 
ƒ
)

75  
	`timbgpio_upd©e_bô
(
gpio
, 
ƒ
, 
TGPIODIR
, 
åue
);

76 
	}
}

78 
	$timbgpio_gpio_gë
(
gpio_chù
 *
gpio
, 
ƒ
)

80 
timbgpio
 *
tgpio
 = 
	`c⁄èöî_of
(
gpio
, timbgpio, gpio);

81 
u32
 
vÆue
;

83 
vÆue
 = 
	`i‹ód32
(
tgpio
->
memba£
 + 
TGPIOVAL
);

84  (
vÆue
 & (1 << 
ƒ
)) ? 1 : 0;

85 
	}
}

87 
	$timbgpio_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gpio
,

88 
ƒ
, 
vÆ
)

90  
	`timbgpio_upd©e_bô
(
gpio
, 
ƒ
, 
TGPIODIR
, 
Ál£
);

91 
	}
}

93 
	$timbgpio_gpio_£t
(
gpio_chù
 *
gpio
,

94 
ƒ
, 
vÆ
)

96 
	`timbgpio_upd©e_bô
(
gpio
, 
ƒ
, 
TGPIOVAL
, 
vÆ
 != 0);

97 
	}
}

99 
	$timbgpio_to_úq
(
gpio_chù
 *
gpio
, 
off£t
)

101 
timbgpio
 *
tgpio
 = 
	`c⁄èöî_of
(
gpio
, timbgpio, gpio);

103 i‡(
tgpio
->
úq_ba£
 <= 0)

104  -
EINVAL
;

106  
tgpio
->
úq_ba£
 + 
off£t
;

107 
	}
}

112 
	$timbgpio_úq_dißbÀ
(
úq_d©a
 *
d
)

114 
timbgpio
 *
tgpio
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

115 
off£t
 = 
d
->
úq
 - 
tgpio
->
úq_ba£
;

116 
Êags
;

118 
	`•ö_lock_úqßve
(&
tgpio
->
lock
, 
Êags
);

119 
tgpio
->
œ°_õr
 &~(1UL << 
off£t
);

120 
	`iowrôe32
(
tgpio
->
œ°_õr
,Ågpio->
memba£
 + 
TGPIO_IER
);

121 
	`•ö_u∆ock_úqª°‹e
(&
tgpio
->
lock
, 
Êags
);

122 
	}
}

124 
	$timbgpio_úq_íabÀ
(
úq_d©a
 *
d
)

126 
timbgpio
 *
tgpio
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

127 
off£t
 = 
d
->
úq
 - 
tgpio
->
úq_ba£
;

128 
Êags
;

130 
	`•ö_lock_úqßve
(&
tgpio
->
lock
, 
Êags
);

131 
tgpio
->
œ°_õr
 |1UL << 
off£t
;

132 
	`iowrôe32
(
tgpio
->
œ°_õr
,Ågpio->
memba£
 + 
TGPIO_IER
);

133 
	`•ö_u∆ock_úqª°‹e
(&
tgpio
->
lock
, 
Êags
);

134 
	}
}

136 
	$timbgpio_úq_ty≥
(
úq_d©a
 *
d
, 
åiggî
)

138 
timbgpio
 *
tgpio
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

139 
off£t
 = 
d
->
úq
 - 
tgpio
->
úq_ba£
;

140 
Êags
;

141 
u32
 
lvr
, 
Êr
, 
bÊr
 = 0;

142 
u32
 
vî
;

143 
ªt
 = 0;

145 i‡(
off£t
 < 0 || off£à> 
tgpio
->
gpio
.
ngpio
)

146  -
EINVAL
;

148 
vî
 = 
	`i‹ód32
(
tgpio
->
memba£
 + 
TGPIO_VER
);

150 
	`•ö_lock_úqßve
(&
tgpio
->
lock
, 
Êags
);

152 
lvr
 = 
	`i‹ód32
(
tgpio
->
memba£
 + 
TGPIO_LVR
);

153 
Êr
 = 
	`i‹ód32
(
tgpio
->
memba£
 + 
TGPIO_FLR
);

154 i‡(
vî
 > 2)

155 
bÊr
 = 
	`i‹ód32
(
tgpio
->
memba£
 + 
TGPIO_BFLR
);

157 i‡(
åiggî
 & (
IRQ_TYPE_LEVEL_HIGH
 | 
IRQ_TYPE_LEVEL_LOW
)) {

158 
bÊr
 &~(1 << 
off£t
);

159 
Êr
 &~(1 << 
off£t
);

160 i‡(
åiggî
 & 
IRQ_TYPE_LEVEL_HIGH
)

161 
lvr
 |1 << 
off£t
;

163 
lvr
 &~(1 << 
off£t
);

166 i‡((
åiggî
 & 
IRQ_TYPE_EDGE_BOTH
) == IRQ_TYPE_EDGE_BOTH) {

167 i‡(
vî
 < 3) {

168 
ªt
 = -
EINVAL
;

169 
out
;

171 
Êr
 |1 << 
off£t
;

172 
bÊr
 |1 << 
off£t
;

175 
bÊr
 &~(1 << 
off£t
);

176 
Êr
 |1 << 
off£t
;

177 i‡(
åiggî
 & 
IRQ_TYPE_EDGE_FALLING
)

178 
lvr
 &~(1 << 
off£t
);

180 
lvr
 |1 << 
off£t
;

183 
	`iowrôe32
(
lvr
, 
tgpio
->
memba£
 + 
TGPIO_LVR
);

184 
	`iowrôe32
(
Êr
, 
tgpio
->
memba£
 + 
TGPIO_FLR
);

185 i‡(
vî
 > 2)

186 
	`iowrôe32
(
bÊr
, 
tgpio
->
memba£
 + 
TGPIO_BFLR
);

188 
	`iowrôe32
(1 << 
off£t
, 
tgpio
->
memba£
 + 
TGPIO_ICR
);

190 
out
:

191 
	`•ö_u∆ock_úqª°‹e
(&
tgpio
->
lock
, 
Êags
);

192  
ªt
;

193 
	}
}

195 
	$timbgpio_úq
(
úq
, 
úq_desc
 *
desc
)

197 
timbgpio
 *
tgpio
 = 
	`úq_gë_h™dÀr_d©a
(
úq
);

198 
ùr
;

199 
off£t
;

201 
desc
->
úq_d©a
.
chù
->
	`úq_ack
(
	`úq_gë_úq_d©a
(
úq
));

202 
ùr
 = 
	`i‹ód32
(
tgpio
->
memba£
 + 
TGPIO_IPR
);

203 
	`iowrôe32
(
ùr
, 
tgpio
->
memba£
 + 
TGPIO_ICR
);

209 
	`iowrôe32
(0, 
tgpio
->
memba£
 + 
TGPIO_IER
);

211 
	`f‹_óch_£t_bô
(
off£t
, &
ùr
, 
tgpio
->
gpio
.
ngpio
)

212 
	`gíîic_h™dÀ_úq
(
	`timbgpio_to_úq
(&
tgpio
->
gpio
, 
off£t
));

214 
	`iowrôe32
(
tgpio
->
œ°_õr
,Ågpio->
memba£
 + 
TGPIO_IER
);

215 
	}
}

217 
úq_chù
 
	gtimbgpio_úqchù
 = {

218 .
«me
 = "GPIO",

219 .
	gúq_íabÀ
 = 
timbgpio_úq_íabÀ
,

220 .
	gúq_dißbÀ
 = 
timbgpio_úq_dißbÀ
,

221 .
	gúq_£t_ty≥
 = 
timbgpio_úq_ty≥
,

224 
	$timbgpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

226 
îr
, 
i
;

227 
gpio_chù
 *
gc
;

228 
timbgpio
 *
tgpio
;

229 
ªsour˚
 *
iomem
;

230 
timbgpio_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

231 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

233 i‡(!
pd©a
 ||Öd©a->
ƒ_pös
 > 32) {

234 
îr
 = -
EINVAL
;

235 
îr_mem
;

238 
iomem
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

239 i‡(!
iomem
) {

240 
îr
 = -
EINVAL
;

241 
îr_mem
;

244 
tgpio
 = 
	`kzÆloc
((*tgpio), 
GFP_KERNEL
);

245 i‡(!
tgpio
) {

246 
îr
 = -
EINVAL
;

247 
îr_mem
;

249 
tgpio
->
úq_ba£
 = 
pd©a
->irq_base;

251 
	`•ö_lock_öô
(&
tgpio
->
lock
);

253 i‡(!
	`ªque°_mem_ªgi⁄
(
iomem
->
°¨t
, 
	`ªsour˚_size
(iomem),

254 
DRIVER_NAME
)) {

255 
îr
 = -
EBUSY
;

256 
îr_ªque°
;

259 
tgpio
->
memba£
 = 
	`i‹em≠
(
iomem
->
°¨t
, 
	`ªsour˚_size
(iomem));

260 i‡(!
tgpio
->
memba£
) {

261 
îr
 = -
ENOMEM
;

262 
îr_i‹em≠
;

265 
gc
 = &
tgpio
->
gpio
;

267 
gc
->
œbñ
 = 
	`dev_«me
(&
pdev
->
dev
);

268 
gc
->
ow√r
 = 
THIS_MODULE
;

269 
gc
->
dev
 = &
pdev
->dev;

270 
gc
->
dúe˘i⁄_öput
 = 
timbgpio_gpio_dúe˘i⁄_öput
;

271 
gc
->
gë
 = 
timbgpio_gpio_gë
;

272 
gc
->
dúe˘i⁄_ouçut
 = 
timbgpio_gpio_dúe˘i⁄_ouçut
;

273 
gc
->
£t
 = 
timbgpio_gpio_£t
;

274 
gc
->
to_úq
 = (
úq
 >0 && 
tgpio
->
úq_ba£
 > 0Ë? 
timbgpio_to_úq
 : 
NULL
;

275 
gc
->
dbg_show
 = 
NULL
;

276 
gc
->
ba£
 = 
pd©a
->
gpio_ba£
;

277 
gc
->
ngpio
 = 
pd©a
->
ƒ_pös
;

278 
gc
->
ˇn_¶ìp
 = 0;

280 
îr
 = 
	`gpiochù_add
(
gc
);

281 i‡(
îr
)

282 
îr_chùadd
;

284 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
tgpio
);

287 
	`iowrôe32
(0x0, 
tgpio
->
memba£
 + 
TGPIO_IER
);

289 i‡(
úq
 < 0 || 
tgpio
->
úq_ba£
 <= 0)

292 
i
 = 0; i < 
pd©a
->
ƒ_pös
; i++) {

293 
	`úq_£t_chù_™d_h™dÀr_«me
(
tgpio
->
úq_ba£
 + 
i
,

294 &
timbgpio_úqchù
, 
h™dÀ_sim∂e_úq
, "mux");

295 
	`úq_£t_chù_d©a
(
tgpio
->
úq_ba£
 + 
i
,Ågpio);

296 #ifde‡
CONFIG_ARM


297 
	`£t_úq_Êags
(
tgpio
->
úq_ba£
 + 
i
, 
IRQF_VALID
 | 
IRQF_PROBE
);

301 
	`úq_£t_h™dÀr_d©a
(
úq
, 
tgpio
);

302 
	`úq_£t_chaöed_h™dÀr
(
úq
, 
timbgpio_úq
);

306 
îr_chùadd
:

307 
	`iounm≠
(
tgpio
->
memba£
);

308 
îr_i‹em≠
:

309 
	`ªÀa£_mem_ªgi⁄
(
iomem
->
°¨t
, 
	`ªsour˚_size
(iomem));

310 
îr_ªque°
:

311 
	`k‰ì
(
tgpio
);

312 
îr_mem
:

313 
	`¥ötk
(
KERN_ERR
 
DRIVER_NAME
": FaûedÅÿªgi°î GPIOs: %d\n", 
îr
);

315  
îr
;

316 
	}
}

318 
	$timbgpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

320 
îr
;

321 
timbgpio_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

322 
timbgpio
 *
tgpio
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

323 
ªsour˚
 *
iomem
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

324 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

326 i‡(
úq
 >0 && 
tgpio
->
úq_ba£
 > 0) {

327 
i
;

328 
i
 = 0; i < 
pd©a
->
ƒ_pös
; i++) {

329 
	`úq_£t_chù
(
tgpio
->
úq_ba£
 + 
i
, 
NULL
);

330 
	`úq_£t_chù_d©a
(
tgpio
->
úq_ba£
 + 
i
, 
NULL
);

333 
	`úq_£t_h™dÀr
(
úq
, 
NULL
);

334 
	`úq_£t_h™dÀr_d©a
(
úq
, 
NULL
);

337 
îr
 = 
	`gpiochù_ªmove
(&
tgpio
->
gpio
);

338 i‡(
îr
)

339 
	`¥ötk
(
KERN_ERR
 
DRIVER_NAME
": failedÅoÑemove gpio_chip\n");

341 
	`iounm≠
(
tgpio
->
memba£
);

342 
	`ªÀa£_mem_ªgi⁄
(
iomem
->
°¨t
, 
	`ªsour˚_size
(iomem));

343 
	`k‰ì
(
tgpio
);

345 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

348 
	}
}

350 
∂©f‹m_drivî
 
	gtimbgpio_∂©f‹m_drivî
 = {

351 .
drivî
 = {

352 .
«me
 = 
DRIVER_NAME
,

353 .
	gow√r
 = 
THIS_MODULE
,

355 .
	g¥obe
 = 
timbgpio_¥obe
,

356 .
	gªmove
 = 
timbgpio_ªmove
,

361 
moduÀ_∂©f‹m_drivî
(
timbgpio_∂©f‹m_drivî
);

363 
MODULE_DESCRIPTION
("Timberdale GPIO driver");

364 
MODULE_LICENSE
("GPL v2");

365 
MODULE_AUTHOR
("Mocean Laboratories");

366 
MODULE_ALIAS
("∂©f‹m:"
DRIVER_NAME
);

	@gpio-tnetv107x.c

15 
	~<löux/kî√l.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/gpio.h
>

19 
	~<mach/comm⁄.h
>

20 
	~<mach/äëv107x.h
>

22 
	säëv107x_gpio_ªgs
 {

23 
u32
 
	midvî
;

24 
u32
 
	md©a_ö
[3];

25 
u32
 
	md©a_out
[3];

26 
u32
 
	mdúe˘i⁄
[3];

27 
u32
 
	míabÀ
[3];

30 
	#gpio_ªg_ödex
(
gpio
Ë((gpioË>> 5)

	)

31 
	#gpio_ªg_bô
(
gpio
Ë
	`BIT
((gpioË& 0x1f)

	)

33 
	#gpio_ªg_rmw
(
ªg
, 
mask
, 
vÆ
) \

34 
	`__øw_wrôñ
((
	`__øw_ªadl
(
ªg
Ë& ~(
mask
)Ë| (
vÆ
), (ªg))

	)

36 
	#gpio_ªg_£t_bô
(
ªg
, 
gpio
) \

37 
	`gpio_ªg_rmw
((
ªg
Ë+ 
	`gpio_ªg_ödex
(
gpio
), 0, 
	`gpio_ªg_bô
(gpio))

	)

39 
	#gpio_ªg_˛ór_bô
(
ªg
, 
gpio
) \

40 
	`gpio_ªg_rmw
((
ªg
Ë+ 
	`gpio_ªg_ödex
(
gpio
), 
	`gpio_ªg_bô
(gpio), 0)

	)

42 
	#gpio_ªg_gë_bô
(
ªg
, 
gpio
) \

43 (
	`__øw_ªadl
((
ªg
Ë+ 
	`gpio_ªg_ödex
(
gpio
)Ë& 
	`gpio_ªg_bô
(gpio))

	)

45 
	#chù2c⁄åﬁÀr
(
chù
) \

46 
	`c⁄èöî_of
(
chù
, 
davöci_gpio_c⁄åﬁÀr
, chù)

	)

48 
	#TNETV107X_GPIO_CTLRS
 
	`DIV_ROUND_UP
(
TNETV107X_N_GPIO
, 32)

	)

50 
davöci_gpio_c⁄åﬁÀr
 
	gchùs
[
TNETV107X_GPIO_CTLRS
];

52 
	$äëv107x_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

54 
davöci_gpio_c⁄åﬁÀr
 *
˘Ã
 = 
	`chù2c⁄åﬁÀr
(
chù
);

55 
äëv107x_gpio_ªgs
 
__iomem
 *
ªgs
 = 
˘Ã
->regs;

56 
gpio
 = 
chù
->
ba£
 + 
off£t
;

57 
Êags
;

59 
	`•ö_lock_úqßve
(&
˘Ã
->
lock
, 
Êags
);

61 
	`gpio_ªg_£t_bô
(
ªgs
->
íabÀ
, 
gpio
);

63 
	`•ö_u∆ock_úqª°‹e
(&
˘Ã
->
lock
, 
Êags
);

66 
	}
}

68 
	$äëv107x_gpio_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

70 
davöci_gpio_c⁄åﬁÀr
 *
˘Ã
 = 
	`chù2c⁄åﬁÀr
(
chù
);

71 
äëv107x_gpio_ªgs
 
__iomem
 *
ªgs
 = 
˘Ã
->regs;

72 
gpio
 = 
chù
->
ba£
 + 
off£t
;

73 
Êags
;

75 
	`•ö_lock_úqßve
(&
˘Ã
->
lock
, 
Êags
);

77 
	`gpio_ªg_˛ór_bô
(
ªgs
->
íabÀ
, 
gpio
);

79 
	`•ö_u∆ock_úqª°‹e
(&
˘Ã
->
lock
, 
Êags
);

80 
	}
}

82 
	$äëv107x_gpio_dú_ö
(
gpio_chù
 *
chù
, 
off£t
)

84 
davöci_gpio_c⁄åﬁÀr
 *
˘Ã
 = 
	`chù2c⁄åﬁÀr
(
chù
);

85 
äëv107x_gpio_ªgs
 
__iomem
 *
ªgs
 = 
˘Ã
->regs;

86 
gpio
 = 
chù
->
ba£
 + 
off£t
;

87 
Êags
;

89 
	`•ö_lock_úqßve
(&
˘Ã
->
lock
, 
Êags
);

91 
	`gpio_ªg_£t_bô
(
ªgs
->
dúe˘i⁄
, 
gpio
);

93 
	`•ö_u∆ock_úqª°‹e
(&
˘Ã
->
lock
, 
Êags
);

96 
	}
}

98 
	$äëv107x_gpio_dú_out
(
gpio_chù
 *
chù
,

99 
off£t
, 
vÆue
)

101 
davöci_gpio_c⁄åﬁÀr
 *
˘Ã
 = 
	`chù2c⁄åﬁÀr
(
chù
);

102 
äëv107x_gpio_ªgs
 
__iomem
 *
ªgs
 = 
˘Ã
->regs;

103 
gpio
 = 
chù
->
ba£
 + 
off£t
;

104 
Êags
;

106 
	`•ö_lock_úqßve
(&
˘Ã
->
lock
, 
Êags
);

108 i‡(
vÆue
)

109 
	`gpio_ªg_£t_bô
(
ªgs
->
d©a_out
, 
gpio
);

111 
	`gpio_ªg_˛ór_bô
(
ªgs
->
d©a_out
, 
gpio
);

113 
	`gpio_ªg_˛ór_bô
(
ªgs
->
dúe˘i⁄
, 
gpio
);

115 
	`•ö_u∆ock_úqª°‹e
(&
˘Ã
->
lock
, 
Êags
);

118 
	}
}

120 
	$äëv107x_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

122 
davöci_gpio_c⁄åﬁÀr
 *
˘Ã
 = 
	`chù2c⁄åﬁÀr
(
chù
);

123 
äëv107x_gpio_ªgs
 
__iomem
 *
ªgs
 = 
˘Ã
->regs;

124 
gpio
 = 
chù
->
ba£
 + 
off£t
;

125 
ªt
;

127 
ªt
 = 
	`gpio_ªg_gë_bô
(
ªgs
->
d©a_ö
, 
gpio
);

129  
ªt
 ? 1 : 0;

130 
	}
}

132 
	$äëv107x_gpio_£t
(
gpio_chù
 *
chù
,

133 
off£t
, 
vÆue
)

135 
davöci_gpio_c⁄åﬁÀr
 *
˘Ã
 = 
	`chù2c⁄åﬁÀr
(
chù
);

136 
äëv107x_gpio_ªgs
 
__iomem
 *
ªgs
 = 
˘Ã
->regs;

137 
gpio
 = 
chù
->
ba£
 + 
off£t
;

138 
Êags
;

140 
	`•ö_lock_úqßve
(&
˘Ã
->
lock
, 
Êags
);

142 i‡(
vÆue
)

143 
	`gpio_ªg_£t_bô
(
ªgs
->
d©a_out
, 
gpio
);

145 
	`gpio_ªg_˛ór_bô
(
ªgs
->
d©a_out
, 
gpio
);

147 
	`•ö_u∆ock_úqª°‹e
(&
˘Ã
->
lock
, 
Êags
);

148 
	}
}

150 
__öô
 
	$äëv107x_gpio_£tup
()

152 
i
, 
ba£
;

153 
ngpio
;

154 
davöci_soc_öfo
 *
soc_öfo
 = &davinci_soc_info;

155 
äëv107x_gpio_ªgs
 *
ªgs
;

156 
davöci_gpio_c⁄åﬁÀr
 *
˘Ã
;

158 i‡(
soc_öfo
->
gpio_ty≥
 !
GPIO_TYPE_TNETV107X
)

161 
ngpio
 = 
soc_öfo
->
gpio_num
;

162 i‡(
ngpio
 == 0) {

163 
	`¥_îr
("GPIO setup: how many GPIOs?\n");

164  -
EINVAL
;

167 i‡(
	`WARN_ON
(
TNETV107X_N_GPIO
 < 
ngpio
))

168 
ngpio
 = 
TNETV107X_N_GPIO
;

170 
ªgs
 = 
	`i‹em≠
(
soc_öfo
->
gpio_ba£
, 
SZ_4K
);

171 i‡(
	`WARN_ON
(!
ªgs
))

172  -
EINVAL
;

174 
i
 = 0, 
ba£
 = 0; ba£ < 
ngpio
; i++, base += 32) {

175 
˘Ã
 = &
chùs
[
i
];

177 
˘Ã
->
chù
.
œbñ
 = "tnetv107x";

178 
˘Ã
->
chù
.
ˇn_¶ìp
 = 0;

179 
˘Ã
->
chù
.
ba£
 = base;

180 
˘Ã
->
chù
.
ngpio
 =Çgpiÿ- 
ba£
;

181 i‡(
˘Ã
->
chù
.
ngpio
 > 32)

182 
˘Ã
->
chù
.
ngpio
 = 32;

184 
˘Ã
->
chù
.
ªque°
 = 
äëv107x_gpio_ªque°
;

185 
˘Ã
->
chù
.
‰ì
 = 
äëv107x_gpio_‰ì
;

186 
˘Ã
->
chù
.
dúe˘i⁄_öput
 = 
äëv107x_gpio_dú_ö
;

187 
˘Ã
->
chù
.
gë
 = 
äëv107x_gpio_gë
;

188 
˘Ã
->
chù
.
dúe˘i⁄_ouçut
 = 
äëv107x_gpio_dú_out
;

189 
˘Ã
->
chù
.
£t
 = 
äëv107x_gpio_£t
;

191 
	`•ö_lock_öô
(&
˘Ã
->
lock
);

193 
˘Ã
->
ªgs
 =Ñegs;

194 
˘Ã
->
£t_d©a
 = &
ªgs
->
d©a_out
[
i
];

195 
˘Ã
->
˛r_d©a
 = &
ªgs
->
d©a_out
[
i
];

196 
˘Ã
->
ö_d©a
 = &
ªgs
->
d©a_ö
[
i
];

198 
	`gpiochù_add
(&
˘Ã
->
chù
);

201 
soc_öfo
->
gpio_˘Ãs
 = 
chùs
;

202 
soc_öfo
->
gpio_˘Ãs_num
 = 
	`DIV_ROUND_UP
(
ngpio
, 32);

204 
	}
}

205 
puª_öôˇŒ
(
äëv107x_gpio_£tup
);

	@gpio-tps6586x.c

24 
	~<löux/î∫o.h
>

25 
	~<löux/gpio.h
>

26 
	~<löux/kî√l.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/mfd/çs6586x.h
>

29 
	~<löux/of_devi˚.h
>

30 
	~<löux/∂©f‹m_devi˚.h
>

33 
	#TPS6586X_GPIOSET1
 0x5d

	)

34 
	#TPS6586X_GPIOSET2
 0x5e

	)

36 
	sçs6586x_gpio
 {

37 
gpio_chù
 
	mgpio_chù
;

38 
devi˚
 *
	m∑ª¡
;

41 
ölöe
 
çs6586x_gpio
 *
	$to_çs6586x_gpio
(
gpio_chù
 *
chù
)

43  
	`c⁄èöî_of
(
chù
, 
çs6586x_gpio
, 
gpio_chù
);

44 
	}
}

46 
	$çs6586x_gpio_gë
(
gpio_chù
 *
gc
, 
off£t
)

48 
çs6586x_gpio
 *çs6586x_gpiÿ
	`to_çs6586x_gpio
(
gc
);

49 
uöt8_t
 
vÆ
;

50 
ªt
;

52 
ªt
 = 
	`çs6586x_ªad
(
çs6586x_gpio
->
∑ª¡
, 
TPS6586X_GPIOSET2
, &
vÆ
);

53 i‡(
ªt
)

54  
ªt
;

56  !!(
vÆ
 & (1 << 
off£t
));

57 
	}
}

59 
	$çs6586x_gpio_£t
(
gpio_chù
 *
gc
, 
off£t
,

60 
vÆue
)

62 
çs6586x_gpio
 *çs6586x_gpiÿ
	`to_çs6586x_gpio
(
gc
);

64 
	`çs6586x_upd©e
(
çs6586x_gpio
->
∑ª¡
, 
TPS6586X_GPIOSET2
,

65 
vÆue
 << 
off£t
, 1 << offset);

66 
	}
}

68 
	$çs6586x_gpio_ouçut
(
gpio_chù
 *
gc
, 
off£t
,

69 
vÆue
)

71 
çs6586x_gpio
 *çs6586x_gpiÿ
	`to_çs6586x_gpio
(
gc
);

72 
uöt8_t
 
vÆ
, 
mask
;

74 
	`çs6586x_gpio_£t
(
gc
, 
off£t
, 
vÆue
);

76 
vÆ
 = 0x1 << (
off£t
 * 2);

77 
mask
 = 0x3 << (
off£t
 * 2);

79  
	`çs6586x_upd©e
(
çs6586x_gpio
->
∑ª¡
, 
TPS6586X_GPIOSET1
,

80 
vÆ
, 
mask
);

81 
	}
}

83 
	$çs6586x_gpio_to_úq
(
gpio_chù
 *
gc
, 
off£t
)

85 
çs6586x_gpio
 *çs6586x_gpiÿ
	`to_çs6586x_gpio
(
gc
);

87  
	`çs6586x_úq_gë_vúq
(
çs6586x_gpio
->
∑ª¡
,

88 
TPS6586X_INT_PLDO_0
 + 
off£t
);

89 
	}
}

91 
	$çs6586x_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

93 
çs6586x_∂©f‹m_d©a
 *
pd©a
;

94 
çs6586x_gpio
 *tps6586x_gpio;

95 
ªt
;

97 
pd©a
 = 
	`dev_gë_∂©d©a
(
pdev
->
dev
.
∑ª¡
);

98 
çs6586x_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
,

99 (*
çs6586x_gpio
), 
GFP_KERNEL
);

100 i‡(!
çs6586x_gpio
) {

101 
	`dev_îr
(&
pdev
->
dev
, "CouldÇotállocateÅps6586x_gpio\n");

102  -
ENOMEM
;

105 
çs6586x_gpio
->
∑ª¡
 = 
pdev
->
dev
.parent;

107 
çs6586x_gpio
->
gpio_chù
.
ow√r
 = 
THIS_MODULE
;

108 
çs6586x_gpio
->
gpio_chù
.
œbñ
 = 
pdev
->
«me
;

109 
çs6586x_gpio
->
gpio_chù
.
dev
 = &
pdev
->dev;

110 
çs6586x_gpio
->
gpio_chù
.
ngpio
 = 4;

111 
çs6586x_gpio
->
gpio_chù
.
ˇn_¶ìp
 = 1;

114 
çs6586x_gpio
->
gpio_chù
.
dúe˘i⁄_ouçut
 = 
çs6586x_gpio_ouçut
;

115 
çs6586x_gpio
->
gpio_chù
.
£t
 = 
çs6586x_gpio_£t
;

116 
çs6586x_gpio
->
gpio_chù
.
gë
 = 
çs6586x_gpio_gë
;

117 
çs6586x_gpio
->
gpio_chù
.
to_úq
 = 
çs6586x_gpio_to_úq
;

119 #ifde‡
CONFIG_OF_GPIO


120 
çs6586x_gpio
->
gpio_chù
.
of_node
 = 
pdev
->
dev
.
∑ª¡
->of_node;

122 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

123 
çs6586x_gpio
->
gpio_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

125 
çs6586x_gpio
->
gpio_chù
.
ba£
 = -1;

127 
ªt
 = 
	`gpiochù_add
(&
çs6586x_gpio
->
gpio_chù
);

128 i‡(
ªt
 < 0) {

129 
	`dev_îr
(&
pdev
->
dev
, "CouldÇŸÑegi°î gpiochù, %d\n", 
ªt
);

130  
ªt
;

133 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
çs6586x_gpio
);

135  
ªt
;

136 
	}
}

138 
	$çs6586x_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

140 
çs6586x_gpio
 *çs6586x_gpiÿ
	`∂©f‹m_gë_drvd©a
(
pdev
);

142  
	`gpiochù_ªmove
(&
çs6586x_gpio
->
gpio_chù
);

143 
	}
}

145 
∂©f‹m_drivî
 
	gçs6586x_gpio_drivî
 = {

146 .
drivî
.
«me
 = "tps6586x-gpio",

147 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

148 .
	g¥obe
 = 
çs6586x_gpio_¥obe
,

149 .
	gªmove
 = 
çs6586x_gpio_ªmove
,

152 
__öô
 
	$çs6586x_gpio_öô
()

154  
	`∂©f‹m_drivî_ªgi°î
(&
çs6586x_gpio_drivî
);

155 
	}
}

156 
subsys_öôˇŒ
(
çs6586x_gpio_öô
);

158 
__exô
 
	$çs6586x_gpio_exô
()

160 
	`∂©f‹m_drivî_uƒegi°î
(&
çs6586x_gpio_drivî
);

161 
	}
}

162 
moduÀ_exô
(
çs6586x_gpio_exô
);

164 
MODULE_ALIAS
("platform:tps6586x-gpio");

165 
MODULE_DESCRIPTION
("GPIO interface for TPS6586X PMIC");

166 
MODULE_AUTHOR
("Laxman Dewangan <ldewangan@nvidia.com>");

167 
MODULE_LICENSE
("GPL");

	@gpio-tps65910.c

16 
	~<löux/kî√l.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/î∫o.h
>

19 
	~<löux/gpio.h
>

20 
	~<löux/i2c.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/mfd/çs65910.h
>

23 
	~<löux/of_devi˚.h
>

25 
	sçs65910_gpio
 {

26 
gpio_chù
 
	mgpio_chù
;

27 
çs65910
 *
	mçs65910
;

30 
ölöe
 
çs65910_gpio
 *
	$to_çs65910_gpio
(
gpio_chù
 *
chù
)

32  
	`c⁄èöî_of
(
chù
, 
çs65910_gpio
, 
gpio_chù
);

33 
	}
}

35 
	$çs65910_gpio_gë
(
gpio_chù
 *
gc
, 
off£t
)

37 
çs65910_gpio
 *çs65910_gpiÿ
	`to_çs65910_gpio
(
gc
);

38 
çs65910
 *çs65910 = 
çs65910_gpio
->tps65910;

39 
vÆ
;

41 
	`çs65910_ªg_ªad
(
çs65910
, 
TPS65910_GPIO0
 + 
off£t
, &
vÆ
);

43 i‡(
vÆ
 & 
GPIO_STS_MASK
)

47 
	}
}

49 
	$çs65910_gpio_£t
(
gpio_chù
 *
gc
, 
off£t
,

50 
vÆue
)

52 
çs65910_gpio
 *çs65910_gpiÿ
	`to_çs65910_gpio
(
gc
);

53 
çs65910
 *çs65910 = 
çs65910_gpio
->tps65910;

55 i‡(
vÆue
)

56 
	`çs65910_ªg_£t_bôs
(
çs65910
, 
TPS65910_GPIO0
 + 
off£t
,

57 
GPIO_SET_MASK
);

59 
	`çs65910_ªg_˛ór_bôs
(
çs65910
, 
TPS65910_GPIO0
 + 
off£t
,

60 
GPIO_SET_MASK
);

61 
	}
}

63 
	$çs65910_gpio_ouçut
(
gpio_chù
 *
gc
, 
off£t
,

64 
vÆue
)

66 
çs65910_gpio
 *çs65910_gpiÿ
	`to_çs65910_gpio
(
gc
);

67 
çs65910
 *çs65910 = 
çs65910_gpio
->tps65910;

70 
	`çs65910_gpio_£t
(
gc
, 
off£t
, 
vÆue
);

72  
	`çs65910_ªg_£t_bôs
(
çs65910
, 
TPS65910_GPIO0
 + 
off£t
,

73 
GPIO_CFG_MASK
);

74 
	}
}

76 
	$çs65910_gpio_öput
(
gpio_chù
 *
gc
, 
off£t
)

78 
çs65910_gpio
 *çs65910_gpiÿ
	`to_çs65910_gpio
(
gc
);

79 
çs65910
 *çs65910 = 
çs65910_gpio
->tps65910;

81  
	`çs65910_ªg_˛ór_bôs
(
çs65910
, 
TPS65910_GPIO0
 + 
off£t
,

82 
GPIO_CFG_MASK
);

83 
	}
}

85 #ifde‡
CONFIG_OF


86 
çs65910_bﬂrd
 *
	$çs65910_∑r£_dt_f‹_gpio
(
devi˚
 *
dev
,

87 
çs65910
 *çs65910, 
chù_ngpio
)

89 
çs65910_bﬂrd
 *çs65910_bﬂrd = 
çs65910
->
of_∂©_d©a
;

90 
¥›_¨øy
[
TPS6591X_MAX_NUM_GPIO
];

91 
ngpio
 = 
	`mö
(
chù_ngpio
, 
TPS6591X_MAX_NUM_GPIO
);

92 
ªt
;

93 
idx
;

95 
çs65910_bﬂrd
->
gpio_ba£
 = -1;

96 
ªt
 = 
	`of_¥›îty_ªad_u32_¨øy
(
çs65910
->
dev
->
of_node
,

97 "ti,í-gpio-¶ìp", 
¥›_¨øy
, 
ngpio
);

98 i‡(
ªt
 < 0) {

99 
	`dev_dbg
(
dev
, "ti,en-gpio-sleepÇot specified\n");

100  
çs65910_bﬂrd
;

103 
idx
 = 0; idx < 
ngpio
; idx++)

104 
çs65910_bﬂrd
->
í_gpio_¶ìp
[
idx
] = (
¥›_¨øy
[idx] != 0);

106  
çs65910_bﬂrd
;

107 
	}
}

109 
çs65910_bﬂrd
 *
	$çs65910_∑r£_dt_f‹_gpio
(
devi˚
 *
dev
,

110 
çs65910
 *çs65910, 
chù_ngpio
)

112  
NULL
;

113 
	}
}

116 
	$çs65910_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

118 
çs65910
 *çs65910 = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

119 
çs65910_bﬂrd
 *
pd©a
 = 
	`dev_gë_∂©d©a
(
çs65910
->
dev
);

120 
çs65910_gpio
 *tps65910_gpio;

121 
ªt
;

122 
i
;

124 
çs65910_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
,

125 (*
çs65910_gpio
), 
GFP_KERNEL
);

126 i‡(!
çs65910_gpio
) {

127 
	`dev_îr
(&
pdev
->
dev
, "CouldÇotállocateÅps65910_gpio\n");

128  -
ENOMEM
;

131 
çs65910_gpio
->
çs65910
 =Åps65910;

133 
çs65910_gpio
->
gpio_chù
.
ow√r
 = 
THIS_MODULE
;

134 
çs65910_gpio
->
gpio_chù
.
œbñ
 = 
çs65910
->
i2c_˛õ¡
->
«me
;

136 
	`çs65910_chù_id
(
çs65910
)) {

137 
TPS65910
:

138 
çs65910_gpio
->
gpio_chù
.
ngpio
 = 
TPS65910_NUM_GPIO
;

140 
TPS65911
:

141 
çs65910_gpio
->
gpio_chù
.
ngpio
 = 
TPS65911_NUM_GPIO
;

144  -
EINVAL
;

146 
çs65910_gpio
->
gpio_chù
.
ˇn_¶ìp
 = 1;

147 
çs65910_gpio
->
gpio_chù
.
dúe˘i⁄_öput
 = 
çs65910_gpio_öput
;

148 
çs65910_gpio
->
gpio_chù
.
dúe˘i⁄_ouçut
 = 
çs65910_gpio_ouçut
;

149 
çs65910_gpio
->
gpio_chù
.
£t
 = 
çs65910_gpio_£t
;

150 
çs65910_gpio
->
gpio_chù
.
gë
 = 
çs65910_gpio_gë
;

151 
çs65910_gpio
->
gpio_chù
.
dev
 = &
pdev
->dev;

152 #ifde‡
CONFIG_OF_GPIO


153 
çs65910_gpio
->
gpio_chù
.
of_node
 = 
çs65910
->
dev
->of_node;

155 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

156 
çs65910_gpio
->
gpio_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

158 
çs65910_gpio
->
gpio_chù
.
ba£
 = -1;

160 i‡(!
pd©a
 && 
çs65910
->
dev
->
of_node
)

161 
pd©a
 = 
	`çs65910_∑r£_dt_f‹_gpio
(&
pdev
->
dev
, 
çs65910
,

162 
çs65910_gpio
->
gpio_chù
.
ngpio
);

164 i‡(!
pd©a
)

165 
skù_öô
;

168 
i
 = 0; i < 
çs65910_gpio
->
gpio_chù
.
ngpio
; ++i) {

169 i‡(!
pd©a
->
í_gpio_¶ìp
[
i
])

172 
ªt
 = 
	`çs65910_ªg_£t_bôs
(
çs65910
,

173 
TPS65910_GPIO0
 + 
i
, 
GPIO_SLEEP_MASK
);

174 i‡(
ªt
 < 0)

175 
	`dev_w¨n
(
çs65910
->
dev
,

176 "GPIO SÀï sëtög faûed wôhÉº %d\n", 
ªt
);

179 
skù_öô
:

180 
ªt
 = 
	`gpiochù_add
(&
çs65910_gpio
->
gpio_chù
);

181 i‡(
ªt
 < 0) {

182 
	`dev_îr
(&
pdev
->
dev
, "CouldÇŸÑegi°î gpiochù, %d\n", 
ªt
);

183  
ªt
;

186 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
çs65910_gpio
);

188  
ªt
;

189 
	}
}

191 
	$çs65910_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

193 
çs65910_gpio
 *çs65910_gpiÿ
	`∂©f‹m_gë_drvd©a
(
pdev
);

195  
	`gpiochù_ªmove
(&
çs65910_gpio
->
gpio_chù
);

196 
	}
}

198 
∂©f‹m_drivî
 
	gçs65910_gpio_drivî
 = {

199 .
drivî
.
«me
 = "tps65910-gpio",

200 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

201 .
	g¥obe
 = 
çs65910_gpio_¥obe
,

202 .
	gªmove
 = 
çs65910_gpio_ªmove
,

205 
__öô
 
	$çs65910_gpio_öô
()

207  
	`∂©f‹m_drivî_ªgi°î
(&
çs65910_gpio_drivî
);

208 
	}
}

209 
subsys_öôˇŒ
(
çs65910_gpio_öô
);

211 
__exô
 
	$çs65910_gpio_exô
()

213 
	`∂©f‹m_drivî_uƒegi°î
(&
çs65910_gpio_drivî
);

214 
	}
}

215 
moduÀ_exô
(
çs65910_gpio_exô
);

217 
MODULE_AUTHOR
("Graeme Gregory <gg@slimlogic.co.uk>");

218 
MODULE_AUTHOR
("Jorge Eduardo Candelaria jedu@slimlogic.co.uk>");

219 
MODULE_DESCRIPTION
("GPIO interface for TPS65910/TPS6511 PMICs");

220 
MODULE_LICENSE
("GPL v2");

221 
MODULE_ALIAS
("platform:tps65910-gpio");

	@gpio-tps65912.c

14 
	~<löux/kî√l.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/gpio.h
>

18 
	~<löux/mfd/c‹e.h
>

19 
	~<löux/∂©f‹m_devi˚.h
>

20 
	~<löux/£q_fûe.h
>

21 
	~<löux/¶ab.h
>

22 
	~<löux/mfd/çs65912.h
>

24 
	sçs65912_gpio_d©a
 {

25 
çs65912
 *
	mçs65912
;

26 
gpio_chù
 
	mgpio_chù
;

29 
	$çs65912_gpio_gë
(
gpio_chù
 *
gc
, 
off£t
)

31 
çs65912
 *çs65912 = 
	`c⁄èöî_of
(
gc
, çs65912, 
gpio
);

32 
vÆ
;

34 
vÆ
 = 
	`çs65912_ªg_ªad
(
çs65912
, 
TPS65912_GPIO1
 + 
off£t
);

36 i‡(
vÆ
 & 
GPIO_STS_MASK
)

40 
	}
}

42 
	$çs65912_gpio_£t
(
gpio_chù
 *
gc
, 
off£t
,

43 
vÆue
)

45 
çs65912
 *çs65912 = 
	`c⁄èöî_of
(
gc
, çs65912, 
gpio
);

47 i‡(
vÆue
)

48 
	`çs65912_£t_bôs
(
çs65912
, 
TPS65912_GPIO1
 + 
off£t
,

49 
GPIO_SET_MASK
);

51 
	`çs65912_˛ór_bôs
(
çs65912
, 
TPS65912_GPIO1
 + 
off£t
,

52 
GPIO_SET_MASK
);

53 
	}
}

55 
	$çs65912_gpio_ouçut
(
gpio_chù
 *
gc
, 
off£t
,

56 
vÆue
)

58 
çs65912
 *çs65912 = 
	`c⁄èöî_of
(
gc
, çs65912, 
gpio
);

61 
	`çs65912_gpio_£t
(
gc
, 
off£t
, 
vÆue
);

63  
	`çs65912_£t_bôs
(
çs65912
, 
TPS65912_GPIO1
 + 
off£t
,

64 
GPIO_CFG_MASK
);

65 
	}
}

67 
	$çs65912_gpio_öput
(
gpio_chù
 *
gc
, 
off£t
)

69 
çs65912
 *çs65912 = 
	`c⁄èöî_of
(
gc
, çs65912, 
gpio
);

71  
	`çs65912_˛ór_bôs
(
çs65912
, 
TPS65912_GPIO1
 + 
off£t
,

72 
GPIO_CFG_MASK
);

73 
	}
}

75 
gpio_chù
 
	gãm∂©e_chù
 = {

76 .
œbñ
 = "tps65912",

77 .
	gow√r
 = 
THIS_MODULE
,

78 .
	gdúe˘i⁄_öput
 = 
çs65912_gpio_öput
,

79 .
	gdúe˘i⁄_ouçut
 = 
çs65912_gpio_ouçut
,

80 .
	ggë
 = 
çs65912_gpio_gë
,

81 .
	g£t
 = 
çs65912_gpio_£t
,

82 .
	gˇn_¶ìp
 = 1,

83 .
	gngpio
 = 5,

84 .
	gba£
 = -1,

87 
	$çs65912_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

89 
çs65912
 *çs65912 = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

90 
çs65912_bﬂrd
 *
pd©a
 = 
çs65912
->
dev
->
∂©f‹m_d©a
;

91 
çs65912_gpio_d©a
 *
çs65912_gpio
;

92 
ªt
;

94 
çs65912_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*tps65912_gpio),

95 
GFP_KERNEL
);

96 i‡(
çs65912_gpio
 =
NULL
)

97  -
ENOMEM
;

99 
çs65912_gpio
->
çs65912
 =Åps65912;

100 
çs65912_gpio
->
gpio_chù
 = 
ãm∂©e_chù
;

101 
çs65912_gpio
->
gpio_chù
.
dev
 = &
pdev
->dev;

102 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

103 
çs65912_gpio
->
gpio_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

105 
ªt
 = 
	`gpiochù_add
(&
çs65912_gpio
->
gpio_chù
);

106 i‡(
ªt
 < 0) {

107 
	`dev_îr
(&
pdev
->
dev
, "FaûedÅÿªgi°î gpiochù, %d\n", 
ªt
);

108  
ªt
;

111 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
çs65912_gpio
);

113  
ªt
;

114 
	}
}

116 
	$çs65912_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

118 
çs65912_gpio_d©a
 *
çs65912_gpio
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

120  
	`gpiochù_ªmove
(&
çs65912_gpio
->
gpio_chù
);

121 
	}
}

123 
∂©f‹m_drivî
 
	gçs65912_gpio_drivî
 = {

124 .
drivî
 = {

125 .
«me
 = "tps65912-gpio",

126 .
	gow√r
 = 
THIS_MODULE
,

128 .
	g¥obe
 = 
çs65912_gpio_¥obe
,

129 .
	gªmove
 = 
çs65912_gpio_ªmove
,

132 
__öô
 
	$çs65912_gpio_öô
()

134  
	`∂©f‹m_drivî_ªgi°î
(&
çs65912_gpio_drivî
);

135 
	}
}

136 
subsys_öôˇŒ
(
çs65912_gpio_öô
);

138 
__exô
 
	$çs65912_gpio_exô
()

140 
	`∂©f‹m_drivî_uƒegi°î
(&
çs65912_gpio_drivî
);

141 
	}
}

142 
moduÀ_exô
(
çs65912_gpio_exô
);

144 
MODULE_AUTHOR
("Margarita Olaya Cabrera <magi@slimlogic.co.uk>");

145 
MODULE_DESCRIPTION
("GPIO interface for TPS65912 PMICs");

146 
MODULE_LICENSE
("GPL v2");

147 
MODULE_ALIAS
("platform:tps65912-gpio");

	@gpio-ts5500.c

25 
	~<löux/bô›s.h
>

26 
	~<löux/gpio.h
>

27 
	~<löux/io.h
>

28 
	~<löux/moduÀ.h
>

29 
	~<löux/∂©f‹m_d©a/gpio-ts5500.h
>

30 
	~<löux/∂©f‹m_devi˚.h
>

31 
	~<löux/¶ab.h
>

34 
	ets5500_blocks
 { 
	mTS5500_DIO1
, 
	mTS5500_DIO2
, 
	mTS5500_LCD
, 
	mTS5600_LCD
 };

36 
	sts5500_¥iv
 {

37 c⁄° 
ts5500_dio
 *
	mpöout
;

38 
gpio_chù
 
	mgpio_chù
;

39 
•ölock_t
 
	mlock
;

40 
boﬁ
 
	m°øp
;

41 
u8
 
	mhwúq
;

48 
boﬁ
 
	ghex7d_ª£rved
;

54 
	sts5500_dio
 {

55 c⁄° 
u8
 
	mvÆue_addr
;

56 c⁄° 
u8
 
	mvÆue_mask
;

57 c⁄° 
u8
 
	mc⁄åﬁ_addr
;

58 c⁄° 
u8
 
	mc⁄åﬁ_mask
;

59 c⁄° 
boﬁ
 
	mno_öput
;

60 c⁄° 
boﬁ
 
	mno_ouçut
;

61 c⁄° 
u8
 
	múq
;

64 
	#TS5500_DIO_IN_OUT
(
vaddr
, 
vbô
, 
ˇddr
, 
cbô
) \

66 .
vÆue_addr
 = 
vaddr
, \

67 .
vÆue_mask
 = 
	`BIT
(
vbô
), \

68 .
c⁄åﬁ_addr
 = 
ˇddr
, \

69 .
c⁄åﬁ_mask
 = 
	`BIT
(
cbô
), \

70 }

	)

72 
	#TS5500_DIO_IN
(
addr
, 
bô
) \

74 .
vÆue_addr
 = 
addr
, \

75 .
vÆue_mask
 = 
	`BIT
(
bô
), \

76 .
no_ouçut
 = 
åue
, \

77 }

	)

79 
	#TS5500_DIO_IN_IRQ
(
addr
, 
bô
, 
_úq
) \

81 .
vÆue_addr
 = 
addr
, \

82 .
vÆue_mask
 = 
	`BIT
(
bô
), \

83 .
no_ouçut
 = 
åue
, \

84 .
úq
 = 
_úq
, \

85 }

	)

87 
	#TS5500_DIO_OUT
(
addr
, 
bô
) \

89 .
vÆue_addr
 = 
addr
, \

90 .
vÆue_mask
 = 
	`BIT
(
bô
), \

91 .
no_öput
 = 
åue
, \

92 }

	)

99 
	#TS5500_DIO_GROUP
(
vaddr
, 
vbô‰om
, 
ˇddr
, 
cbô
) \

100 
	`TS5500_DIO_IN_OUT
(
vaddr
, 
vbô‰om
 + 0, 
ˇddr
, 
cbô
), \

101 
	`TS5500_DIO_IN_OUT
(
vaddr
, 
vbô‰om
 + 1, 
ˇddr
, 
cbô
), \

102 
	`TS5500_DIO_IN_OUT
(
vaddr
, 
vbô‰om
 + 2, 
ˇddr
, 
cbô
), \

103 
	`TS5500_DIO_IN_OUT
(
vaddr
, 
vbô‰om
 + 3, 
ˇddr
, 
cbô
)

	)

126 c⁄° 
ts5500_dio
 
	gts5500_dio1
[] = {

127 
TS5500_DIO_GROUP
(0x7b, 0, 0x7a, 0),

128 
TS5500_DIO_GROUP
(0x7b, 4, 0x7a, 1),

129 
TS5500_DIO_GROUP
(0x7c, 0, 0x7a, 5),

130 
TS5500_DIO_IN
(0x7c, 4),

131 
TS5500_DIO_IN_IRQ
(0x7c, 5, 7),

154 c⁄° 
ts5500_dio
 
	gts5500_dio2
[] = {

155 
TS5500_DIO_GROUP
(0x7e, 0, 0x7d, 0),

156 
TS5500_DIO_GROUP
(0x7e, 4, 0x7d, 1),

157 
TS5500_DIO_GROUP
(0x7f, 0, 0x7d, 5),

158 
TS5500_DIO_IN_IRQ
(0x7f, 4, 6),

180 c⁄° 
ts5500_dio
 
	gts5500_lcd
[] = {

181 
TS5500_DIO_GROUP
(0x72, 0, 0x7d, 2),

182 
TS5500_DIO_GROUP
(0x72, 4, 0x7d, 3),

183 
TS5500_DIO_OUT
(0x73, 0),

184 
TS5500_DIO_IN
(0x73, 6),

185 
TS5500_DIO_IN_IRQ
(0x73, 7, 1),

188 
ölöe
 
ts5500_¥iv
 *
	$ts5500_gc_to_¥iv
(
gpio_chù
 *
chù
)

190  
	`c⁄èöî_of
(
chù
, 
ts5500_¥iv
, 
gpio_chù
);

191 
	}
}

193 
ölöe
 
	$ts5500_£t_mask
(
u8
 
mask
, u8 
addr
)

195 
u8
 
vÆ
 = 
	`öb
(
addr
);

196 
vÆ
 |
mask
;

197 
	`outb
(
vÆ
, 
addr
);

198 
	}
}

200 
ölöe
 
	$ts5500_˛ór_mask
(
u8
 
mask
, u8 
addr
)

202 
u8
 
vÆ
 = 
	`öb
(
addr
);

203 
vÆ
 &~
mask
;

204 
	`outb
(
vÆ
, 
addr
);

205 
	}
}

207 
	$ts5500_gpio_öput
(
gpio_chù
 *
chù
, 
off£t
)

209 
ts5500_¥iv
 *
¥iv
 = 
	`ts5500_gc_to_¥iv
(
chù
);

210 c⁄° 
ts5500_dio
 
löe
 = 
¥iv
->
pöout
[
off£t
];

211 
Êags
;

213 i‡(
löe
.
no_öput
)

214  -
ENXIO
;

216 i‡(
löe
.
no_ouçut
)

219 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

220 
	`ts5500_˛ór_mask
(
löe
.
c⁄åﬁ_mask
,Üöe.
c⁄åﬁ_addr
);

221 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

224 
	}
}

226 
	$ts5500_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

228 
ts5500_¥iv
 *
¥iv
 = 
	`ts5500_gc_to_¥iv
(
chù
);

229 c⁄° 
ts5500_dio
 
löe
 = 
¥iv
->
pöout
[
off£t
];

231  !!(
	`öb
(
löe
.
vÆue_addr
Ë&Üöe.
vÆue_mask
);

232 
	}
}

234 
	$ts5500_gpio_ouçut
(
gpio_chù
 *
chù
, 
off£t
, 
vÆ
)

236 
ts5500_¥iv
 *
¥iv
 = 
	`ts5500_gc_to_¥iv
(
chù
);

237 c⁄° 
ts5500_dio
 
löe
 = 
¥iv
->
pöout
[
off£t
];

238 
Êags
;

240 i‡(
löe
.
no_ouçut
)

241  -
ENXIO
;

243 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

244 i‡(!
löe
.
no_öput
)

245 
	`ts5500_£t_mask
(
löe
.
c⁄åﬁ_mask
,Üöe.
c⁄åﬁ_addr
);

247 i‡(
vÆ
)

248 
	`ts5500_£t_mask
(
löe
.
vÆue_mask
,Üöe.
vÆue_addr
);

250 
	`ts5500_˛ór_mask
(
löe
.
vÆue_mask
,Üöe.
vÆue_addr
);

251 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

254 
	}
}

256 
	$ts5500_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆ
)

258 
ts5500_¥iv
 *
¥iv
 = 
	`ts5500_gc_to_¥iv
(
chù
);

259 c⁄° 
ts5500_dio
 
löe
 = 
¥iv
->
pöout
[
off£t
];

260 
Êags
;

262 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

263 i‡(
vÆ
)

264 
	`ts5500_£t_mask
(
löe
.
vÆue_mask
,Üöe.
vÆue_addr
);

266 
	`ts5500_˛ór_mask
(
löe
.
vÆue_mask
,Üöe.
vÆue_addr
);

267 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

268 
	}
}

270 
	$ts5500_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

272 
ts5500_¥iv
 *
¥iv
 = 
	`ts5500_gc_to_¥iv
(
chù
);

273 c⁄° 
ts5500_dio
 *
block
 = 
¥iv
->
pöout
;

274 c⁄° 
ts5500_dio
 
löe
 = 
block
[
off£t
];

277 i‡(
löe
.
úq
)

278  
löe
.
úq
;

281 i‡(
¥iv
->
°øp
)

282  
¥iv
->
hwúq
;

284  -
ENXIO
;

285 
	}
}

287 
	$ts5500_íabÀ_úq
(
ts5500_¥iv
 *
¥iv
)

289 
ªt
 = 0;

290 
Êags
;

292 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

293 i‡(
¥iv
->
hwúq
 == 7)

294 
	`ts5500_£t_mask
(
	`BIT
(7), 0x7a);

295 i‡(
¥iv
->
hwúq
 == 6)

296 
	`ts5500_£t_mask
(
	`BIT
(7), 0x7d);

297 i‡(
¥iv
->
hwúq
 == 1)

298 
	`ts5500_£t_mask
(
	`BIT
(6), 0x7d);

300 
ªt
 = -
EINVAL
;

301 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

303  
ªt
;

304 
	}
}

306 
	$ts5500_dißbÀ_úq
(
ts5500_¥iv
 *
¥iv
)

308 
Êags
;

310 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

311 i‡(
¥iv
->
hwúq
 == 7)

312 
	`ts5500_˛ór_mask
(
	`BIT
(7), 0x7a);

313 i‡(
¥iv
->
hwúq
 == 6)

314 
	`ts5500_˛ór_mask
(
	`BIT
(7), 0x7d);

315 i‡(
¥iv
->
hwúq
 == 1)

316 
	`ts5500_˛ór_mask
(
	`BIT
(6), 0x7d);

318 
	`dev_îr
(
¥iv
->
gpio_chù
.
dev
, "övÆid hwúq %d\n",Öriv->
hwúq
);

319 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

320 
	}
}

322 
	$ts5500_dio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

324 
ts5500_blocks
 
block
 = 
	`∂©f‹m_gë_devi˚_id
(
pdev
)->
drivî_d©a
;

325 
ts5500_dio_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

326 
devi˚
 *
dev
 = &
pdev
->dev;

327 c⁄° *
«me
 = 
	`dev_«me
(
dev
);

328 
ts5500_¥iv
 *
¥iv
;

329 
ªsour˚
 *
ªs
;

330 
Êags
;

331 
ªt
;

333 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

334 i‡(!
ªs
) {

335 
	`dev_îr
(
dev
, "missing IRQÑesource\n");

336  -
EINVAL
;

339 
¥iv
 = 
	`devm_kzÆloc
(
dev
, (
ts5500_¥iv
), 
GFP_KERNEL
);

340 i‡(!
¥iv
)

341  -
ENOMEM
;

343 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
¥iv
);

344 
¥iv
->
hwúq
 = 
ªs
->
°¨t
;

345 
	`•ö_lock_öô
(&
¥iv
->
lock
);

347 
¥iv
->
gpio_chù
.
ow√r
 = 
THIS_MODULE
;

348 
¥iv
->
gpio_chù
.
œbñ
 = 
«me
;

349 
¥iv
->
gpio_chù
.
dev
 = dev;

350 
¥iv
->
gpio_chù
.
dúe˘i⁄_öput
 = 
ts5500_gpio_öput
;

351 
¥iv
->
gpio_chù
.
dúe˘i⁄_ouçut
 = 
ts5500_gpio_ouçut
;

352 
¥iv
->
gpio_chù
.
gë
 = 
ts5500_gpio_gë
;

353 
¥iv
->
gpio_chù
.
£t
 = 
ts5500_gpio_£t
;

354 
¥iv
->
gpio_chù
.
to_úq
 = 
ts5500_gpio_to_úq
;

355 
¥iv
->
gpio_chù
.
ba£
 = -1;

356 i‡(
pd©a
) {

357 
¥iv
->
gpio_chù
.
ba£
 = 
pd©a
->base;

358 
¥iv
->
°øp
 = 
pd©a
->strap;

361 
block
) {

362 
TS5500_DIO1
:

363 
¥iv
->
pöout
 = 
ts5500_dio1
;

364 
¥iv
->
gpio_chù
.
ngpio
 = 
	`ARRAY_SIZE
(
ts5500_dio1
);

366 i‡(!
	`devm_ªque°_ªgi⁄
(
dev
, 0x7a, 3, 
«me
)) {

367 
	`dev_îr
(
dev
, "ÁûedÅÿªque° %†p‹ts\n", 
«me
);

368  -
EBUSY
;

371 
TS5500_DIO2
:

372 
¥iv
->
pöout
 = 
ts5500_dio2
;

373 
¥iv
->
gpio_chù
.
ngpio
 = 
	`ARRAY_SIZE
(
ts5500_dio2
);

375 i‡(!
	`devm_ªque°_ªgi⁄
(
dev
, 0x7e, 2, 
«me
)) {

376 
	`dev_îr
(
dev
, "ÁûedÅÿªque° %†p‹ts\n", 
«me
);

377  -
EBUSY
;

380 i‡(
hex7d_ª£rved
)

383 i‡(!
	`devm_ªque°_ªgi⁄
(
dev
, 0x7d, 1, 
«me
)) {

384 
	`dev_îr
(
dev
, "ÁûedÅÿªque° %†7D\n", 
«me
);

385  -
EBUSY
;

388 
hex7d_ª£rved
 = 
åue
;

390 
TS5500_LCD
:

391 
TS5600_LCD
:

392 
¥iv
->
pöout
 = 
ts5500_lcd
;

393 
¥iv
->
gpio_chù
.
ngpio
 = 
	`ARRAY_SIZE
(
ts5500_lcd
);

395 i‡(!
	`devm_ªque°_ªgi⁄
(
dev
, 0x72, 2, 
«me
)) {

396 
	`dev_îr
(
dev
, "ÁûedÅÿªque° %†p‹ts\n", 
«me
);

397  -
EBUSY
;

400 i‡(!
hex7d_ª£rved
) {

401 i‡(!
	`devm_ªque°_ªgi⁄
(
dev
, 0x7d, 1, 
«me
)) {

402 
	`dev_îr
(
dev
, "ÁûedÅÿªque° %†7D\n", 
«me
);

403  -
EBUSY
;

406 
hex7d_ª£rved
 = 
åue
;

410 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

411 
	`ts5500_˛ór_mask
(
	`BIT
(4), 0x7d);

412 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

416 
ªt
 = 
	`gpiochù_add
(&
¥iv
->
gpio_chù
);

417 i‡(
ªt
) {

418 
	`dev_îr
(
dev
, "failedÅoÑegisterÅhe gpio chip\n");

419  
ªt
;

422 
ªt
 = 
	`ts5500_íabÀ_úq
(
¥iv
);

423 i‡(
ªt
) {

424 
	`dev_îr
(
dev
, "övÆid i¡îru± %d\n", 
¥iv
->
hwúq
);

425 
˛ónup
;

429 
˛ónup
:

430 i‡(
	`gpiochù_ªmove
(&
¥iv
->
gpio_chù
))

431 
	`dev_îr
(
dev
, "failedÅoÑemove gpio chip\n");

432  
ªt
;

433 
	}
}

435 
	$ts5500_dio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

437 
ts5500_¥iv
 *
¥iv
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

439 
	`ts5500_dißbÀ_úq
(
¥iv
);

440  
	`gpiochù_ªmove
(&
¥iv
->
gpio_chù
);

441 
	}
}

443 
∂©f‹m_devi˚_id
 
	gts5500_dio_ids
[] = {

444 { "ts5500-dio1", 
TS5500_DIO1
 },

445 { "ts5500-dio2", 
TS5500_DIO2
 },

446 { "ts5500-dio-lcd", 
TS5500_LCD
 },

447 { "ts5600-dio-lcd", 
TS5600_LCD
 },

450 
MODULE_DEVICE_TABLE
(
∂©f‹m
, 
ts5500_dio_ids
);

452 
∂©f‹m_drivî
 
	gts5500_dio_drivî
 = {

453 .
drivî
 = {

454 .
«me
 = "ts5500-dio",

455 .
	gow√r
 = 
THIS_MODULE
,

457 .
	g¥obe
 = 
ts5500_dio_¥obe
,

458 .
	gªmove
 = 
ts5500_dio_ªmove
,

459 .
	gid_èbÀ
 = 
ts5500_dio_ids
,

462 
moduÀ_∂©f‹m_drivî
(
ts5500_dio_drivî
);

464 
MODULE_LICENSE
("GPL");

465 
MODULE_AUTHOR
("Savoir-faire Linux Inc. <kernel@savoirfairelinux.com>");

466 
MODULE_DESCRIPTION
("Technologic Systems TS-5500 Digital I/O driver");

	@gpio-twl4030.c

28 
	~<löux/moduÀ.h
>

29 
	~<löux/öô.h
>

30 
	~<löux/öãºu±.h
>

31 
	~<löux/kthªad.h
>

32 
	~<löux/úq.h
>

33 
	~<löux/gpio.h
>

34 
	~<löux/∂©f‹m_devi˚.h
>

35 
	~<löux/of.h
>

36 
	~<löux/úqdomaö.h
>

38 
	~<löux/i2c/twl.h
>

52 #ifde‡
MODULE


53 
	#is_moduÀ
(Ë
åue


	)

55 
	#is_moduÀ
(Ë
Ál£


	)

59 
	#MASK_GPIO_CTRL_GPIO0CD1
 
	`BIT
(0)

	)

60 
	#MASK_GPIO_CTRL_GPIO1CD2
 
	`BIT
(1)

	)

61 
	#MASK_GPIO_CTRL_GPIO_ON
 
	`BIT
(2)

	)

64 
	#GPIO_32_MASK
 0x0003ffff

	)

66 
	sgpio_twl4030_¥iv
 {

67 
gpio_chù
 
	mgpio_chù
;

68 
muãx
 
	mmuãx
;

69 
	múq_ba£
;

72 
	mußge_cou¡
;

73 
	mdúe˘i⁄
;

74 
	mout_°©e
;

79 
ölöe
 
gpio_twl4030_¥iv
 *
	$to_gpio_twl4030
(
gpio_chù
 *
chù
)

81  
	`c⁄èöî_of
(
chù
, 
gpio_twl4030_¥iv
, 
gpio_chù
);

82 
	}
}

87 
ölöe
 
	$gpio_twl4030_wrôe
(
u8
 
addªss
, u8 
d©a
)

89  
	`twl_i2c_wrôe_u8
(
TWL4030_MODULE_GPIO
, 
d©a
, 
addªss
);

90 
	}
}

99 
	#TWL4030_LED_LEDEN_REG
 0x00

	)

100 
	#TWL4030_PWMAON_REG
 0x01

	)

101 
	#TWL4030_PWMAOFF_REG
 0x02

	)

102 
	#TWL4030_PWMBON_REG
 0x03

	)

103 
	#TWL4030_PWMBOFF_REG
 0x04

	)

106 
	#LEDEN_LEDAON
 
	`BIT
(0)

	)

107 
	#LEDEN_LEDBON
 
	`BIT
(1)

	)

108 
	#LEDEN_LEDAEXT
 
	`BIT
(2)

	)

109 
	#LEDEN_LEDBEXT
 
	`BIT
(3)

	)

110 
	#LEDEN_LEDAPWM
 
	`BIT
(4)

	)

111 
	#LEDEN_LEDBPWM
 
	`BIT
(5)

	)

112 
	#LEDEN_PWM_LENGTHA
 
	`BIT
(6)

	)

113 
	#LEDEN_PWM_LENGTHB
 
	`BIT
(7)

	)

115 
	#PWMxON_LENGTH
 
	`BIT
(7)

	)

122 
ölöe
 
	$gpio_twl4030_ªad
(
u8
 
addªss
)

124 
u8
 
d©a
;

125 
ªt
 = 0;

127 
ªt
 = 
	`twl_i2c_ªad_u8
(
TWL4030_MODULE_GPIO
, &
d©a
, 
addªss
);

128  (
ªt
 < 0Ë?Ñë : 
d©a
;

129 
	}
}

133 
u8
 
	gˇched_Àdí
;

139 
	$twl4030_Àd_£t_vÆue
(
Àd
, 
vÆue
)

141 
u8
 
mask
 = 
LEDEN_LEDAON
 | 
LEDEN_LEDAPWM
;

142 
°©us
;

144 i‡(
Àd
)

145 
mask
 <<= 1;

147 i‡(
vÆue
)

148 
ˇched_Àdí
 &~
mask
;

150 
ˇched_Àdí
 |
mask
;

151 
°©us
 = 
	`twl_i2c_wrôe_u8
(
TWL4030_MODULE_LED
, 
ˇched_Àdí
,

152 
TWL4030_LED_LEDEN_REG
);

153 
	}
}

155 
	$twl4030_£t_gpio_dúe˘i⁄
(
gpio
, 
is_öput
)

157 
u8
 
d_bnk
 = 
gpio
 >> 3;

158 
u8
 
d_msk
 = 
	`BIT
(
gpio
 & 0x7);

159 
u8
 
ªg
 = 0;

160 
u8
 
ba£
 = 
REG_GPIODATADIR1
 + 
d_bnk
;

161 
ªt
 = 0;

163 
ªt
 = 
	`gpio_twl4030_ªad
(
ba£
);

164 i‡(
ªt
 >= 0) {

165 i‡(
is_öput
)

166 
ªg
 = 
ªt
 & ~
d_msk
;

168 
ªg
 = 
ªt
 | 
d_msk
;

170 
ªt
 = 
	`gpio_twl4030_wrôe
(
ba£
, 
ªg
);

172  
ªt
;

173 
	}
}

175 
	$twl4030_£t_gpio_d©aout
(
gpio
, 
íabÀ
)

177 
u8
 
d_bnk
 = 
gpio
 >> 3;

178 
u8
 
d_msk
 = 
	`BIT
(
gpio
 & 0x7);

179 
u8
 
ba£
 = 0;

181 i‡(
íabÀ
)

182 
ba£
 = 
REG_SETGPIODATAOUT1
 + 
d_bnk
;

184 
ba£
 = 
REG_CLEARGPIODATAOUT1
 + 
d_bnk
;

186  
	`gpio_twl4030_wrôe
(
ba£
, 
d_msk
);

187 
	}
}

189 
	$twl4030_gë_gpio_d©aö
(
gpio
)

191 
u8
 
d_bnk
 = 
gpio
 >> 3;

192 
u8
 
d_off
 = 
gpio
 & 0x7;

193 
u8
 
ba£
 = 0;

194 
ªt
 = 0;

196 
ba£
 = 
REG_GPIODATAIN1
 + 
d_bnk
;

197 
ªt
 = 
	`gpio_twl4030_ªad
(
ba£
);

198 i‡(
ªt
 > 0)

199 
ªt
 = (ªà>> 
d_off
) & 0x1;

201  
ªt
;

202 
	}
}

206 
	$twl_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

208 
gpio_twl4030_¥iv
 *
¥iv
 = 
	`to_gpio_twl4030
(
chù
);

209 
°©us
 = 0;

211 
	`muãx_lock
(&
¥iv
->
muãx
);

214 i‡(
off£t
 >
TWL4030_GPIO_MAX
) {

215 
u8
 
Àd˛r_mask
 = 
LEDEN_LEDAON
 | 
LEDEN_LEDAEXT


216 | 
LEDEN_LEDAPWM
 | 
LEDEN_PWM_LENGTHA
;

217 
u8
 
ªg
 = 
TWL4030_PWMAON_REG
;

219 
off£t
 -
TWL4030_GPIO_MAX
;

220 i‡(
off£t
) {

221 
Àd˛r_mask
 <<= 1;

222 
ªg
 = 
TWL4030_PWMBON_REG
;

227 
°©us
 = 
	`twl_i2c_wrôe_u8
(
TWL4030_MODULE_LED
, 0x7f, 
ªg
 + 1);

228 i‡(
°©us
 < 0)

229 
d⁄e
;

232 
°©us
 = 
	`twl_i2c_wrôe_u8
(
TWL4030_MODULE_LED
, 0x7f, 
ªg
);

233 i‡(
°©us
 < 0)

234 
d⁄e
;

237 
°©us
 = 
	`twl_i2c_ªad_u8
(
TWL4030_MODULE_LED
, &
ˇched_Àdí
,

238 
TWL4030_LED_LEDEN_REG
);

239 i‡(
°©us
 < 0)

240 
d⁄e
;

241 
ˇched_Àdí
 &~
Àd˛r_mask
;

242 
°©us
 = 
	`twl_i2c_wrôe_u8
(
TWL4030_MODULE_LED
, 
ˇched_Àdí
,

243 
TWL4030_LED_LEDEN_REG
);

244 i‡(
°©us
 < 0)

245 
d⁄e
;

247 
°©us
 = 0;

248 
d⁄e
;

252 i‡(!
¥iv
->
ußge_cou¡
) {

253 
twl4030_gpio_∂©f‹m_d©a
 *
pd©a
;

254 
u8
 
vÆue
 = 
MASK_GPIO_CTRL_GPIO_ON
;

259 
pd©a
 = 
chù
->
dev
->
∂©f‹m_d©a
;

260 i‡(
pd©a
)

261 
vÆue
 |
pd©a
->
mmc_cd
 & 0x03;

263 
°©us
 = 
	`gpio_twl4030_wrôe
(
REG_GPIO_CTRL
, 
vÆue
);

266 
d⁄e
:

267 i‡(!
°©us
)

268 
¥iv
->
ußge_cou¡
 |
	`BIT
(
off£t
);

270 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

271  
°©us
;

272 
	}
}

274 
	$twl_‰ì
(
gpio_chù
 *
chù
, 
off£t
)

276 
gpio_twl4030_¥iv
 *
¥iv
 = 
	`to_gpio_twl4030
(
chù
);

278 
	`muãx_lock
(&
¥iv
->
muãx
);

279 i‡(
off£t
 >
TWL4030_GPIO_MAX
) {

280 
	`twl4030_Àd_£t_vÆue
(
off£t
 - 
TWL4030_GPIO_MAX
, 1);

281 
out
;

284 
¥iv
->
ußge_cou¡
 &~
	`BIT
(
off£t
);

287 i‡(!
¥iv
->
ußge_cou¡
)

288 
	`gpio_twl4030_wrôe
(
REG_GPIO_CTRL
, 0x0);

290 
out
:

291 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

292 
	}
}

294 
	$twl_dúe˘i⁄_ö
(
gpio_chù
 *
chù
, 
off£t
)

296 
gpio_twl4030_¥iv
 *
¥iv
 = 
	`to_gpio_twl4030
(
chù
);

297 
ªt
;

299 
	`muãx_lock
(&
¥iv
->
muãx
);

300 i‡(
off£t
 < 
TWL4030_GPIO_MAX
)

301 
ªt
 = 
	`twl4030_£t_gpio_dúe˘i⁄
(
off£t
, 1);

303 
ªt
 = -
EINVAL
;

305 i‡(!
ªt
)

306 
¥iv
->
dúe˘i⁄
 &~
	`BIT
(
off£t
);

308 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

310  
ªt
;

311 
	}
}

313 
	$twl_gë
(
gpio_chù
 *
chù
, 
off£t
)

315 
gpio_twl4030_¥iv
 *
¥iv
 = 
	`to_gpio_twl4030
(
chù
);

316 
ªt
;

317 
°©us
 = 0;

319 
	`muãx_lock
(&
¥iv
->
muãx
);

320 i‡(!(
¥iv
->
ußge_cou¡
 & 
	`BIT
(
off£t
))) {

321 
ªt
 = -
EPERM
;

322 
out
;

325 i‡(
¥iv
->
dúe˘i⁄
 & 
	`BIT
(
off£t
))

326 
°©us
 = 
¥iv
->
out_°©e
 & 
	`BIT
(
off£t
);

328 
°©us
 = 
	`twl4030_gë_gpio_d©aö
(
off£t
);

330 
ªt
 = (
°©us
 <= 0) ? 0 : 1;

331 
out
:

332 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

333  
ªt
;

334 
	}
}

336 
	$twl_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

338 
gpio_twl4030_¥iv
 *
¥iv
 = 
	`to_gpio_twl4030
(
chù
);

340 
	`muãx_lock
(&
¥iv
->
muãx
);

341 i‡(
off£t
 < 
TWL4030_GPIO_MAX
)

342 
	`twl4030_£t_gpio_d©aout
(
off£t
, 
vÆue
);

344 
	`twl4030_Àd_£t_vÆue
(
off£t
 - 
TWL4030_GPIO_MAX
, 
vÆue
);

346 i‡(
vÆue
)

347 
¥iv
->
out_°©e
 |
	`BIT
(
off£t
);

349 
¥iv
->
out_°©e
 &~
	`BIT
(
off£t
);

351 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

352 
	}
}

354 
	$twl_dúe˘i⁄_out
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

356 
gpio_twl4030_¥iv
 *
¥iv
 = 
	`to_gpio_twl4030
(
chù
);

357 
ªt
 = 0;

359 
	`muãx_lock
(&
¥iv
->
muãx
);

360 i‡(
off£t
 < 
TWL4030_GPIO_MAX
) {

361 
ªt
 = 
	`twl4030_£t_gpio_dúe˘i⁄
(
off£t
, 0);

362 i‡(
ªt
) {

363 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

364  
ªt
;

372 
¥iv
->
dúe˘i⁄
 |
	`BIT
(
off£t
);

373 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

375 
	`twl_£t
(
chù
, 
off£t
, 
vÆue
);

377  
ªt
;

378 
	}
}

380 
	$twl_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

382 
gpio_twl4030_¥iv
 *
¥iv
 = 
	`to_gpio_twl4030
(
chù
);

384  (
¥iv
->
úq_ba£
 && (
off£t
 < 
TWL4030_GPIO_MAX
))

385 ? (
¥iv
->
úq_ba£
 + 
off£t
)

386 : -
EINVAL
;

387 
	}
}

389 
gpio_chù
 
	gãm∂©e_chù
 = {

390 .
œbñ
 = "twl4030",

391 .
	gow√r
 = 
THIS_MODULE
,

392 .
	gªque°
 = 
twl_ªque°
,

393 .
	g‰ì
 = 
twl_‰ì
,

394 .
	gdúe˘i⁄_öput
 = 
twl_dúe˘i⁄_ö
,

395 .
	ggë
 = 
twl_gë
,

396 .
	gdúe˘i⁄_ouçut
 = 
twl_dúe˘i⁄_out
,

397 .
	g£t
 = 
twl_£t
,

398 .
	gto_úq
 = 
twl_to_úq
,

399 .
	gˇn_¶ìp
 = 1,

404 
	$gpio_twl4030_puŒs
(
u32
 
ups
, u32 
downs
)

406 
u8
 
mesßge
[5];

407 
i
, 
gpio_bô
;

412 
gpio_bô
 = 1, 
i
 = 0; i < 5; i++) {

413 
u8
 
bô_mask
;

414 
j
;

416 
bô_mask
 = 0, 
j
 = 0; j < 8; j +2, 
gpio_bô
 <<= 1) {

417 i‡(
ups
 & 
gpio_bô
)

418 
bô_mask
 |1 << (
j
 + 1);

419 i‡(
downs
 & 
gpio_bô
)

420 
bô_mask
 |1 << (
j
 + 0);

422 
mesßge
[
i
] = 
bô_mask
;

425  
	`twl_i2c_wrôe
(
TWL4030_MODULE_GPIO
, 
mesßge
,

426 
REG_GPIOPUPDCTR1
, 5);

427 
	}
}

429 
	$gpio_twl4030_deboun˚
(
u32
 
deboun˚
, 
u8
 
mmc_cd
)

431 
u8
 
mesßge
[3];

436 
mesßge
[0] = (
deboun˚
 & 0xffË| (
mmc_cd
 & 0x03);

437 
deboun˚
 >>= 8;

438 
mesßge
[1] = (
deboun˚
 & 0xff);

439 
deboun˚
 >>= 8;

440 
mesßge
[2] = (
deboun˚
 & 0x03);

442  
	`twl_i2c_wrôe
(
TWL4030_MODULE_GPIO
, 
mesßge
,

443 
REG_GPIO_DEBEN1
, 3);

444 
	}
}

446 
gpio_twl4030_ªmove
(
∂©f‹m_devi˚
 *
pdev
);

448 
twl4030_gpio_∂©f‹m_d©a
 *
	$of_gpio_twl4030
(
devi˚
 *
dev
)

450 
twl4030_gpio_∂©f‹m_d©a
 *
om≠_twl_öfo
;

452 
om≠_twl_öfo
 = 
	`devm_kzÆloc
(
dev
, (*om≠_twl_öfo), 
GFP_KERNEL
);

453 i‡(!
om≠_twl_öfo
)

454  
NULL
;

456 
om≠_twl_öfo
->
u£_Àds
 = 
	`of_¥›îty_ªad_boﬁ
(
dev
->
of_node
,

459 
	`of_¥›îty_ªad_u32
(
dev
->
of_node
, "ti,debounce",

460 &
om≠_twl_öfo
->
deboun˚
);

461 
	`of_¥›îty_ªad_u32
(
dev
->
of_node
, "ti,mmc-cd",

462 (
u32
 *)&
om≠_twl_öfo
->
mmc_cd
);

463 
	`of_¥›îty_ªad_u32
(
dev
->
of_node
, "ti,pullups",

464 &
om≠_twl_öfo
->
puŒups
);

465 
	`of_¥›îty_ªad_u32
(
dev
->
of_node
, "ti,pulldowns",

466 &
om≠_twl_öfo
->
puŒdowns
);

468  
om≠_twl_öfo
;

469 
	}
}

471 
	$gpio_twl4030_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

473 
twl4030_gpio_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

474 
devi˚_node
 *
node
 = 
pdev
->
dev
.
of_node
;

475 
gpio_twl4030_¥iv
 *
¥iv
;

476 
ªt
, 
úq_ba£
;

478 
¥iv
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (
gpio_twl4030_¥iv
),

479 
GFP_KERNEL
);

480 i‡(!
¥iv
)

481  -
ENOMEM
;

484 i‡(
	`is_moduÀ
()) {

485 
	`dev_îr
(&
pdev
->
dev
, "can't dispatch IRQs from modules\n");

486 
no_úqs
;

489 
úq_ba£
 = 
	`úq_Æloc_descs
(-1, 0, 
TWL4030_GPIO_MAX
, 0);

490 i‡(
úq_ba£
 < 0) {

491 
	`dev_îr
(&
pdev
->
dev
, "FailedÅoálloc irq_descs\n");

492  
úq_ba£
;

495 
	`úq_domaö_add_Àgacy
(
node
, 
TWL4030_GPIO_MAX
, 
úq_ba£
, 0,

496 &
úq_domaö_sim∂e_›s
, 
NULL
);

498 
ªt
 = 
	`twl4030_sih_£tup
(&
pdev
->
dev
, 
TWL4030_MODULE_GPIO
, 
úq_ba£
);

499 i‡(
ªt
 < 0)

500  
ªt
;

502 
¥iv
->
úq_ba£
 = irq_base;

504 
no_úqs
:

505 
¥iv
->
gpio_chù
 = 
ãm∂©e_chù
;

506 
¥iv
->
gpio_chù
.
ba£
 = -1;

507 
¥iv
->
gpio_chù
.
ngpio
 = 
TWL4030_GPIO_MAX
;

508 
¥iv
->
gpio_chù
.
dev
 = &
pdev
->dev;

510 
	`muãx_öô
(&
¥iv
->
muãx
);

512 i‡(
node
)

513 
pd©a
 = 
	`of_gpio_twl4030
(&
pdev
->
dev
);

515 i‡(
pd©a
 =
NULL
) {

516 
	`dev_îr
(&
pdev
->
dev
, "Platform data is missing\n");

517  -
ENXIO
;

526 
ªt
 = 
	`gpio_twl4030_puŒs
(
pd©a
->
puŒups
,Öd©a->
puŒdowns
);

527 i‡(
ªt
)

528 
	`dev_dbg
(&
pdev
->
dev
, "pullups %.05x %.05x --> %d\n",

529 
pd©a
->
puŒups
,Öd©a->
puŒdowns
, 
ªt
);

531 
ªt
 = 
	`gpio_twl4030_deboun˚
(
pd©a
->
deboun˚
,Öd©a->
mmc_cd
);

532 i‡(
ªt
)

533 
	`dev_dbg
(&
pdev
->
dev
, "debounce %.03x %.01x --> %d\n",

534 
pd©a
->
deboun˚
,Öd©a->
mmc_cd
, 
ªt
);

540 i‡(
pd©a
->
u£_Àds
)

541 
¥iv
->
gpio_chù
.
ngpio
 += 2;

543 
ªt
 = 
	`gpiochù_add
(&
¥iv
->
gpio_chù
);

544 i‡(
ªt
 < 0) {

545 
	`dev_îr
(&
pdev
->
dev
, "couldÇŸÑegi°î gpiochù, %d\n", 
ªt
);

546 
¥iv
->
gpio_chù
.
ngpio
 = 0;

547 
	`gpio_twl4030_ªmove
(
pdev
);

548 
out
;

551 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
¥iv
);

553 i‡(
pd©a
 &&Öd©a->
£tup
) {

554 
°©us
;

556 
°©us
 = 
pd©a
->
	`£tup
(&
pdev
->
dev
, 
¥iv
->
gpio_chù
.
ba£
,

557 
TWL4030_GPIO_MAX
);

558 i‡(
°©us
)

559 
	`dev_dbg
(&
pdev
->
dev
, "£tu∞--> %d\n", 
°©us
);

562 
out
:

563  
ªt
;

564 
	}
}

567 
	$gpio_twl4030_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

569 
twl4030_gpio_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

570 
gpio_twl4030_¥iv
 *
¥iv
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

571 
°©us
;

573 i‡(
pd©a
 &&Öd©a->
ã¨down
) {

574 
°©us
 = 
pd©a
->
	`ã¨down
(&
pdev
->
dev
, 
¥iv
->
gpio_chù
.
ba£
,

575 
TWL4030_GPIO_MAX
);

576 i‡(
°©us
) {

577 
	`dev_dbg
(&
pdev
->
dev
, "ã¨dow¿--> %d\n", 
°©us
);

578  
°©us
;

582 
°©us
 = 
	`gpiochù_ªmove
(&
¥iv
->
gpio_chù
);

583 i‡(
°©us
 < 0)

584  
°©us
;

586 i‡(
	`is_moduÀ
())

590 
	`WARN_ON
(1);

591  -
EIO
;

592 
	}
}

594 c⁄° 
of_devi˚_id
 
	gtwl_gpio_m©ch
[] = {

595 { .
com∑tibÀ
 = "ti,twl4030-gpio", },

598 
MODULE_DEVICE_TABLE
(
of
, 
twl_gpio_m©ch
);

601 
MODULE_ALIAS
("platform:twl4030_gpio");

603 
∂©f‹m_drivî
 
	ggpio_twl4030_drivî
 = {

604 .
drivî
 = {

605 .
«me
 = "twl4030_gpio",

606 .
	gow√r
 = 
THIS_MODULE
,

607 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
twl_gpio_m©ch
),

609 .
	g¥obe
 = 
gpio_twl4030_¥obe
,

610 .
	gªmove
 = 
gpio_twl4030_ªmove
,

613 
__öô
 
	$gpio_twl4030_öô
()

615  
	`∂©f‹m_drivî_ªgi°î
(&
gpio_twl4030_drivî
);

616 
	}
}

617 
subsys_öôˇŒ
(
gpio_twl4030_öô
);

619 
__exô
 
	$gpio_twl4030_exô
()

621 
	`∂©f‹m_drivî_uƒegi°î
(&
gpio_twl4030_drivî
);

622 
	}
}

623 
moduÀ_exô
(
gpio_twl4030_exô
);

625 
MODULE_AUTHOR
("Texas Instruments, Inc.");

626 
MODULE_DESCRIPTION
("GPIO interface for TWL4030");

627 
MODULE_LICENSE
("GPL");

	@gpio-twl6040.c

25 
	~<löux/moduÀ.h
>

26 
	~<löux/öô.h
>

27 
	~<löux/kthªad.h
>

28 
	~<löux/úq.h
>

29 
	~<löux/gpio.h
>

30 
	~<löux/∂©f‹m_devi˚.h
>

31 
	~<löux/of.h
>

33 
	~<löux/mfd/twl6040.h
>

35 
gpio_chù
 
	gtwl6040gpo_chù
;

37 
	$twl6040gpo_gë
(
gpio_chù
 *
chù
, 
off£t
)

39 
twl6040
 *twl6040 = 
	`dev_gë_drvd©a
(
chù
->
dev
->
∑ª¡
);

40 
ªt
 = 0;

42 
ªt
 = 
	`twl6040_ªg_ªad
(
twl6040
, 
TWL6040_REG_GPOCTL
);

43 i‡(
ªt
 < 0)

44  
ªt
;

46  (
ªt
 >> 
off£t
) & 1;

47 
	}
}

49 
	$twl6040gpo_dúe˘i⁄_out
(
gpio_chù
 *
chù
, 
off£t
,

50 
vÆue
)

54 
	}
}

56 
	$twl6040gpo_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

58 
twl6040
 *twl6040 = 
	`dev_gë_drvd©a
(
chù
->
dev
->
∑ª¡
);

59 
ªt
;

60 
u8
 
gpo˘l
;

62 
ªt
 = 
	`twl6040_ªg_ªad
(
twl6040
, 
TWL6040_REG_GPOCTL
);

63 i‡(
ªt
 < 0)

66 i‡(
vÆue
)

67 
gpo˘l
 = 
ªt
 | (1 << 
off£t
);

69 
gpo˘l
 = 
ªt
 & ~(1 << 
off£t
);

71 
	`twl6040_ªg_wrôe
(
twl6040
, 
TWL6040_REG_GPOCTL
, 
gpo˘l
);

72 
	}
}

74 
gpio_chù
 
	gtwl6040gpo_chù
 = {

75 .
œbñ
 = "twl6040",

76 .
	gow√r
 = 
THIS_MODULE
,

77 .
	ggë
 = 
twl6040gpo_gë
,

78 .
	gdúe˘i⁄_ouçut
 = 
twl6040gpo_dúe˘i⁄_out
,

79 .
	g£t
 = 
twl6040gpo_£t
,

80 .
	gˇn_¶ìp
 = 1,

85 
	$gpo_twl6040_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

87 
twl6040_gpo_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

88 
devi˚
 *
twl6040_c‹e_dev
 = 
pdev
->
dev
.
∑ª¡
;

89 
twl6040
 *twl6040 = 
	`dev_gë_drvd©a
(
twl6040_c‹e_dev
);

90 
ªt
;

92 i‡(
pd©a
)

93 
twl6040gpo_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

95 
twl6040gpo_chù
.
ba£
 = -1;

97 i‡(
	`twl6040_gë_ªvid
(
twl6040
Ë< 
TWL6041_REV_ES2_0
)

98 
twl6040gpo_chù
.
ngpio
 = 3;

100 
twl6040gpo_chù
.
ngpio
 = 1;

102 
twl6040gpo_chù
.
dev
 = &
pdev
->dev;

103 #ifde‡
CONFIG_OF_GPIO


104 
twl6040gpo_chù
.
of_node
 = 
twl6040_c‹e_dev
->of_node;

107 
ªt
 = 
	`gpiochù_add
(&
twl6040gpo_chù
);

108 i‡(
ªt
 < 0) {

109 
	`dev_îr
(&
pdev
->
dev
, "couldÇŸÑegi°î gpiochù, %d\n", 
ªt
);

110 
twl6040gpo_chù
.
ngpio
 = 0;

113  
ªt
;

114 
	}
}

116 
	$gpo_twl6040_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

118  
	`gpiochù_ªmove
(&
twl6040gpo_chù
);

119 
	}
}

122 
MODULE_ALIAS
("platform:twl6040-gpo");

124 
∂©f‹m_drivî
 
	ggpo_twl6040_drivî
 = {

125 .
drivî
 = {

126 .
«me
 = "twl6040-gpo",

127 .
	gow√r
 = 
THIS_MODULE
,

129 .
	g¥obe
 = 
gpo_twl6040_¥obe
,

130 .
	gªmove
 = 
gpo_twl6040_ªmove
,

133 
moduÀ_∂©f‹m_drivî
(
gpo_twl6040_drivî
);

135 
MODULE_AUTHOR
("Texas Instruments, Inc.");

136 
MODULE_DESCRIPTION
("GPO interface for TWL6040");

137 
MODULE_LICENSE
("GPL");

	@gpio-ucb1400.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/ucb1400.h
>

15 
	$ucb1400_gpio_dú_ö
(
gpio_chù
 *
gc
, 
off
)

17 
ucb1400_gpio
 *
gpio
;

18 
gpio
 = 
	`c⁄èöî_of
(
gc
, 
ucb1400_gpio
, gc);

19 
	`ucb1400_gpio_£t_dúe˘i⁄
(
gpio
->
ac97
, 
off
, 0);

21 
	}
}

23 
	$ucb1400_gpio_dú_out
(
gpio_chù
 *
gc
, 
off
, 
vÆ
)

25 
ucb1400_gpio
 *
gpio
;

26 
gpio
 = 
	`c⁄èöî_of
(
gc
, 
ucb1400_gpio
, gc);

27 
	`ucb1400_gpio_£t_dúe˘i⁄
(
gpio
->
ac97
, 
off
, 1);

28 
	`ucb1400_gpio_£t_vÆue
(
gpio
->
ac97
, 
off
, 
vÆ
);

30 
	}
}

32 
	$ucb1400_gpio_gë
(
gpio_chù
 *
gc
, 
off
)

34 
ucb1400_gpio
 *
gpio
;

35 
gpio
 = 
	`c⁄èöî_of
(
gc
, 
ucb1400_gpio
, gc);

36  
	`ucb1400_gpio_gë_vÆue
(
gpio
->
ac97
, 
off
);

37 
	}
}

39 
	$ucb1400_gpio_£t
(
gpio_chù
 *
gc
, 
off
, 
vÆ
)

41 
ucb1400_gpio
 *
gpio
;

42 
gpio
 = 
	`c⁄èöî_of
(
gc
, 
ucb1400_gpio
, gc);

43 
	`ucb1400_gpio_£t_vÆue
(
gpio
->
ac97
, 
off
, 
vÆ
);

44 
	}
}

46 
	$ucb1400_gpio_¥obe
(
∂©f‹m_devi˚
 *
dev
)

48 
ucb1400_gpio
 *
ucb
 = 
dev
->dev.
∂©f‹m_d©a
;

49 
îr
 = 0;

51 i‡(!(
ucb
 && ucb->
gpio_off£t
)) {

52 
îr
 = -
EINVAL
;

53 
îr
;

56 
	`∂©f‹m_£t_drvd©a
(
dev
, 
ucb
);

58 
ucb
->
gc
.
œbñ
 = "ucb1400_gpio";

59 
ucb
->
gc
.
ba£
 = ucb->
gpio_off£t
;

60 
ucb
->
gc
.
ngpio
 = 10;

61 
ucb
->
gc
.
ow√r
 = 
THIS_MODULE
;

63 
ucb
->
gc
.
dúe˘i⁄_öput
 = 
ucb1400_gpio_dú_ö
;

64 
ucb
->
gc
.
dúe˘i⁄_ouçut
 = 
ucb1400_gpio_dú_out
;

65 
ucb
->
gc
.
gë
 = 
ucb1400_gpio_gë
;

66 
ucb
->
gc
.
£t
 = 
ucb1400_gpio_£t
;

67 
ucb
->
gc
.
ˇn_¶ìp
 = 1;

69 
îr
 = 
	`gpiochù_add
(&
ucb
->
gc
);

70 i‡(
îr
)

71 
îr
;

73 i‡(
ucb
 && ucb->
gpio_£tup
)

74 
îr
 = 
ucb
->
	`gpio_£tup
(&
dev
->dev, ucb->
gc
.
ngpio
);

76 
îr
:

77  
îr
;

79 
	}
}

81 
	$ucb1400_gpio_ªmove
(
∂©f‹m_devi˚
 *
dev
)

83 
îr
 = 0;

84 
ucb1400_gpio
 *
ucb
 = 
	`∂©f‹m_gë_drvd©a
(
dev
);

86 i‡(
ucb
 && ucb->
gpio_ã¨down
) {

87 
îr
 = 
ucb
->
	`gpio_ã¨down
(&
dev
->dev, ucb->
gc
.
ngpio
);

88 i‡(
îr
)

89  
îr
;

92 
îr
 = 
	`gpiochù_ªmove
(&
ucb
->
gc
);

93  
îr
;

94 
	}
}

96 
∂©f‹m_drivî
 
	gucb1400_gpio_drivî
 = {

97 .
¥obe
 = 
ucb1400_gpio_¥obe
,

98 .
	gªmove
 = 
ucb1400_gpio_ªmove
,

99 .
	gdrivî
 = {

100 .
«me
 = "ucb1400_gpio"

104 
moduÀ_∂©f‹m_drivî
(
ucb1400_gpio_drivî
);

106 
MODULE_DESCRIPTION
("Philips UCB1400 GPIO driver");

107 
MODULE_LICENSE
("GPL");

	@gpio-viperboard.c

15 
	~<löux/kî√l.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/¶ab.h
>

19 
	~<löux/ty≥s.h
>

20 
	~<löux/muãx.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/usb.h
>

24 
	~<löux/gpio.h
>

26 
	~<löux/mfd/vùîbﬂrd.h
>

28 
	#VPRBRD_GPIOA_CLK_1MHZ
 0

	)

29 
	#VPRBRD_GPIOA_CLK_100KHZ
 1

	)

30 
	#VPRBRD_GPIOA_CLK_10KHZ
 2

	)

31 
	#VPRBRD_GPIOA_CLK_1KHZ
 3

	)

32 
	#VPRBRD_GPIOA_CLK_100HZ
 4

	)

33 
	#VPRBRD_GPIOA_CLK_10HZ
 5

	)

35 
	#VPRBRD_GPIOA_FREQ_DEFAULT
 1000

	)

37 
	#VPRBRD_GPIOA_CMD_CONT
 0x00

	)

38 
	#VPRBRD_GPIOA_CMD_PULSE
 0x01

	)

39 
	#VPRBRD_GPIOA_CMD_PWM
 0x02

	)

40 
	#VPRBRD_GPIOA_CMD_SETOUT
 0x03

	)

41 
	#VPRBRD_GPIOA_CMD_SETIN
 0x04

	)

42 
	#VPRBRD_GPIOA_CMD_SETINT
 0x05

	)

43 
	#VPRBRD_GPIOA_CMD_GETIN
 0x06

	)

45 
	#VPRBRD_GPIOB_CMD_SETDIR
 0x00

	)

46 
	#VPRBRD_GPIOB_CMD_SETVAL
 0x01

	)

48 
	sv¥brd_gpiﬂ_msg
 {

49 
u8
 
	mcmd
;

50 
u8
 
	m˛k
;

51 
u8
 
	moff£t
;

52 
u8
 
	mt1
;

53 
u8
 
	mt2
;

54 
u8
 
	mövît
;

55 
u8
 
	mpwmÀvñ
;

56 
u8
 
	moutvÆ
;

57 
u8
 
	mri£ÁŒ
;

58 
u8
 
	m™swî
;

59 
u8
 
	m__fûl
;

60 } 
	g__∑cked
;

62 
	sv¥brd_gpiob_msg
 {

63 
u8
 
	mcmd
;

64 
u16
 
	mvÆ
;

65 
u16
 
	mmask
;

66 } 
	g__∑cked
;

68 
	sv¥brd_gpio
 {

69 
gpio_chù
 
	mgpiﬂ
;

70 
u32
 
	mgpiﬂ_out
;

71 
u32
 
	mgpiﬂ_vÆ
;

72 
gpio_chù
 
	mgpiob
;

73 
u32
 
	mgpiob_out
;

74 
u32
 
	mgpiob_vÆ
;

75 
v¥brd
 *
	mvb
;

79 
	ggpiﬂ_˛k
;

80 
	ggpiﬂ_‰eq
 = 
VPRBRD_GPIOA_FREQ_DEFAULT
;

81 
moduÀ_∑øm
(
gpiﬂ_‰eq
, 
uöt
, 0);

82 
MODULE_PARM_DESC
(
gpiﬂ_‰eq
,

87 
	$v¥brd_gpiﬂ_gë
(
gpio_chù
 *
chù
,

88 
off£t
)

90 
ªt
, 
™swî
, 
îr‹
 = 0;

91 
v¥brd_gpio
 *
gpio
 =

92 
	`c⁄èöî_of
(
chù
, 
v¥brd_gpio
, 
gpiﬂ
);

93 
v¥brd
 *
vb
 = 
gpio
->vb;

94 
v¥brd_gpiﬂ_msg
 *
gamsg
 = (v¥brd_gpiﬂ_msg *)
vb
->
buf
;

97 i‡(
gpio
->
gpiﬂ_out
 & (1 << 
off£t
))

98  
gpio
->
gpiﬂ_vÆ
 & (1 << 
off£t
);

100 
	`muãx_lock
(&
vb
->
lock
);

102 
gamsg
->
cmd
 = 
VPRBRD_GPIOA_CMD_GETIN
;

103 
gamsg
->
˛k
 = 0x00;

104 
gamsg
->
off£t
 = offset;

105 
gamsg
->
t1
 = 0x00;

106 
gamsg
->
t2
 = 0x00;

107 
gamsg
->
övît
 = 0x00;

108 
gamsg
->
pwmÀvñ
 = 0x00;

109 
gamsg
->
outvÆ
 = 0x00;

110 
gamsg
->
ri£ÁŒ
 = 0x00;

111 
gamsg
->
™swî
 = 0x00;

112 
gamsg
->
__fûl
 = 0x00;

114 
ªt
 = 
	`usb_c⁄åﬁ_msg
(
vb
->
usb_dev
, 
	`usb_¢d˘æpùe
(vb->usb_dev, 0),

115 
VPRBRD_USB_REQUEST_GPIOA
, 
VPRBRD_USB_TYPE_OUT
, 0x0000,

116 0x0000, 
gamsg
, (
v¥brd_gpiﬂ_msg
),

117 
VPRBRD_USB_TIMEOUT_MS
);

118 i‡(
ªt
 !(
v¥brd_gpiﬂ_msg
))

119 
îr‹
 = -
EREMOTEIO
;

121 
ªt
 = 
	`usb_c⁄åﬁ_msg
(
vb
->
usb_dev
, 
	`usb_rcv˘æpùe
(vb->usb_dev, 0),

122 
VPRBRD_USB_REQUEST_GPIOA
, 
VPRBRD_USB_TYPE_IN
, 0x0000,

123 0x0000, 
gamsg
, (
v¥brd_gpiﬂ_msg
),

124 
VPRBRD_USB_TIMEOUT_MS
);

125 
™swî
 = 
gamsg
->answer & 0x01;

127 
	`muãx_u∆ock
(&
vb
->
lock
);

129 i‡(
ªt
 !(
v¥brd_gpiﬂ_msg
))

130 
îr‹
 = -
EREMOTEIO
;

132 i‡(
îr‹
)

133  
îr‹
;

135  
™swî
;

136 
	}
}

138 
	$v¥brd_gpiﬂ_£t
(
gpio_chù
 *
chù
,

139 
off£t
, 
vÆue
)

141 
ªt
;

142 
v¥brd_gpio
 *
gpio
 =

143 
	`c⁄èöî_of
(
chù
, 
v¥brd_gpio
, 
gpiﬂ
);

144 
v¥brd
 *
vb
 = 
gpio
->vb;

145 
v¥brd_gpiﬂ_msg
 *
gamsg
 = (v¥brd_gpiﬂ_msg *)
vb
->
buf
;

147 i‡(
gpio
->
gpiﬂ_out
 & (1 << 
off£t
)) {

148 i‡(
vÆue
)

149 
gpio
->
gpiﬂ_vÆ
 |(1 << 
off£t
);

151 
gpio
->
gpiﬂ_vÆ
 &~(1 << 
off£t
);

153 
	`muãx_lock
(&
vb
->
lock
);

155 
gamsg
->
cmd
 = 
VPRBRD_GPIOA_CMD_SETOUT
;

156 
gamsg
->
˛k
 = 0x00;

157 
gamsg
->
off£t
 = offset;

158 
gamsg
->
t1
 = 0x00;

159 
gamsg
->
t2
 = 0x00;

160 
gamsg
->
övît
 = 0x00;

161 
gamsg
->
pwmÀvñ
 = 0x00;

162 
gamsg
->
outvÆ
 = 
vÆue
;

163 
gamsg
->
ri£ÁŒ
 = 0x00;

164 
gamsg
->
™swî
 = 0x00;

165 
gamsg
->
__fûl
 = 0x00;

167 
ªt
 = 
	`usb_c⁄åﬁ_msg
(
vb
->
usb_dev
,

168 
	`usb_¢d˘æpùe
(
vb
->
usb_dev
, 0),

169 
VPRBRD_USB_REQUEST_GPIOA
, 
VPRBRD_USB_TYPE_OUT
,

170 0x0000, 0x0000, 
gamsg
,

171 (
v¥brd_gpiﬂ_msg
), 
VPRBRD_USB_TIMEOUT_MS
);

173 
	`muãx_u∆ock
(&
vb
->
lock
);

175 i‡(
ªt
 !(
v¥brd_gpiﬂ_msg
))

176 
	`dev_îr
(
chù
->
dev
, "usbÉrror settingÖin value\n");

178 
	}
}

180 
	$v¥brd_gpiﬂ_dúe˘i⁄_öput
(
gpio_chù
 *
chù
,

181 
off£t
)

183 
ªt
;

184 
v¥brd_gpio
 *
gpio
 =

185 
	`c⁄èöî_of
(
chù
, 
v¥brd_gpio
, 
gpiﬂ
);

186 
v¥brd
 *
vb
 = 
gpio
->vb;

187 
v¥brd_gpiﬂ_msg
 *
gamsg
 = (v¥brd_gpiﬂ_msg *)
vb
->
buf
;

189 
gpio
->
gpiﬂ_out
 &~(1 << 
off£t
);

191 
	`muãx_lock
(&
vb
->
lock
);

193 
gamsg
->
cmd
 = 
VPRBRD_GPIOA_CMD_SETIN
;

194 
gamsg
->
˛k
 = 
gpiﬂ_˛k
;

195 
gamsg
->
off£t
 = offset;

196 
gamsg
->
t1
 = 0x00;

197 
gamsg
->
t2
 = 0x00;

198 
gamsg
->
övît
 = 0x00;

199 
gamsg
->
pwmÀvñ
 = 0x00;

200 
gamsg
->
outvÆ
 = 0x00;

201 
gamsg
->
ri£ÁŒ
 = 0x00;

202 
gamsg
->
™swî
 = 0x00;

203 
gamsg
->
__fûl
 = 0x00;

205 
ªt
 = 
	`usb_c⁄åﬁ_msg
(
vb
->
usb_dev
, 
	`usb_¢d˘æpùe
(vb->usb_dev, 0),

206 
VPRBRD_USB_REQUEST_GPIOA
, 
VPRBRD_USB_TYPE_OUT
, 0x0000,

207 0x0000, 
gamsg
, (
v¥brd_gpiﬂ_msg
),

208 
VPRBRD_USB_TIMEOUT_MS
);

210 
	`muãx_u∆ock
(&
vb
->
lock
);

212 i‡(
ªt
 !(
v¥brd_gpiﬂ_msg
))

213  -
EREMOTEIO
;

216 
	}
}

218 
	$v¥brd_gpiﬂ_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

219 
off£t
, 
vÆue
)

221 
ªt
;

222 
v¥brd_gpio
 *
gpio
 =

223 
	`c⁄èöî_of
(
chù
, 
v¥brd_gpio
, 
gpiﬂ
);

224 
v¥brd
 *
vb
 = 
gpio
->vb;

225 
v¥brd_gpiﬂ_msg
 *
gamsg
 = (v¥brd_gpiﬂ_msg *)
vb
->
buf
;

227 
gpio
->
gpiﬂ_out
 |(1 << 
off£t
);

228 i‡(
vÆue
)

229 
gpio
->
gpiﬂ_vÆ
 |(1 << 
off£t
);

231 
gpio
->
gpiﬂ_vÆ
 &~(1 << 
off£t
);

233 
	`muãx_lock
(&
vb
->
lock
);

235 
gamsg
->
cmd
 = 
VPRBRD_GPIOA_CMD_SETOUT
;

236 
gamsg
->
˛k
 = 0x00;

237 
gamsg
->
off£t
 = offset;

238 
gamsg
->
t1
 = 0x00;

239 
gamsg
->
t2
 = 0x00;

240 
gamsg
->
övît
 = 0x00;

241 
gamsg
->
pwmÀvñ
 = 0x00;

242 
gamsg
->
outvÆ
 = 
vÆue
;

243 
gamsg
->
ri£ÁŒ
 = 0x00;

244 
gamsg
->
™swî
 = 0x00;

245 
gamsg
->
__fûl
 = 0x00;

247 
ªt
 = 
	`usb_c⁄åﬁ_msg
(
vb
->
usb_dev
, 
	`usb_¢d˘æpùe
(vb->usb_dev, 0),

248 
VPRBRD_USB_REQUEST_GPIOA
, 
VPRBRD_USB_TYPE_OUT
, 0x0000,

249 0x0000, 
gamsg
, (
v¥brd_gpiﬂ_msg
),

250 
VPRBRD_USB_TIMEOUT_MS
);

252 
	`muãx_u∆ock
(&
vb
->
lock
);

254 i‡(
ªt
 !(
v¥brd_gpiﬂ_msg
))

255  -
EREMOTEIO
;

258 
	}
}

264 
	$v¥brd_gpiob_£tdú
(
v¥brd
 *
vb
, 
off£t
,

265 
dú
)

267 
v¥brd_gpiob_msg
 *
gbmsg
 = (v¥brd_gpiob_msg *)
vb
->
buf
;

268 
ªt
;

270 
gbmsg
->
cmd
 = 
VPRBRD_GPIOB_CMD_SETDIR
;

271 
gbmsg
->
vÆ
 = 
	`˝u_to_be16
(
dú
 << 
off£t
);

272 
gbmsg
->
mask
 = 
	`˝u_to_be16
(0x0001 << 
off£t
);

274 
ªt
 = 
	`usb_c⁄åﬁ_msg
(
vb
->
usb_dev
, 
	`usb_¢d˘æpùe
(vb->usb_dev, 0),

275 
VPRBRD_USB_REQUEST_GPIOB
, 
VPRBRD_USB_TYPE_OUT
, 0x0000,

276 0x0000, 
gbmsg
, (
v¥brd_gpiob_msg
),

277 
VPRBRD_USB_TIMEOUT_MS
);

279 i‡(
ªt
 !(
v¥brd_gpiob_msg
))

280  -
EREMOTEIO
;

283 
	}
}

285 
	$v¥brd_gpiob_gë
(
gpio_chù
 *
chù
,

286 
off£t
)

288 
ªt
;

289 
u16
 
vÆ
;

290 
v¥brd_gpio
 *
gpio
 =

291 
	`c⁄èöî_of
(
chù
, 
v¥brd_gpio
, 
gpiob
);

292 
v¥brd
 *
vb
 = 
gpio
->vb;

293 
v¥brd_gpiob_msg
 *
gbmsg
 = (v¥brd_gpiob_msg *)
vb
->
buf
;

296 i‡(
gpio
->
gpiob_out
 & (1 << 
off£t
))

297  
gpio
->
gpiob_vÆ
 & (1 << 
off£t
);

299 
	`muãx_lock
(&
vb
->
lock
);

301 
ªt
 = 
	`usb_c⁄åﬁ_msg
(
vb
->
usb_dev
, 
	`usb_rcv˘æpùe
(vb->usb_dev, 0),

302 
VPRBRD_USB_REQUEST_GPIOB
, 
VPRBRD_USB_TYPE_IN
, 0x0000,

303 0x0000, 
gbmsg
, (
v¥brd_gpiob_msg
),

304 
VPRBRD_USB_TIMEOUT_MS
);

305 
vÆ
 = 
gbmsg
->val;

307 
	`muãx_u∆ock
(&
vb
->
lock
);

309 i‡(
ªt
 !(
v¥brd_gpiob_msg
))

310  
ªt
;

313 
gpio
->
gpiob_vÆ
 = 
	`be16_to_˝u
(
vÆ
);

315  (
gpio
->
gpiob_vÆ
 >> 
off£t
) & 0x1;

316 
	}
}

318 
	$v¥brd_gpiob_£t
(
gpio_chù
 *
chù
,

319 
off£t
, 
vÆue
)

321 
ªt
;

322 
v¥brd_gpio
 *
gpio
 =

323 
	`c⁄èöî_of
(
chù
, 
v¥brd_gpio
, 
gpiob
);

324 
v¥brd
 *
vb
 = 
gpio
->vb;

325 
v¥brd_gpiob_msg
 *
gbmsg
 = (v¥brd_gpiob_msg *)
vb
->
buf
;

327 i‡(
gpio
->
gpiob_out
 & (1 << 
off£t
)) {

328 i‡(
vÆue
)

329 
gpio
->
gpiob_vÆ
 |(1 << 
off£t
);

331 
gpio
->
gpiob_vÆ
 &~(1 << 
off£t
);

333 
	`muãx_lock
(&
vb
->
lock
);

335 
gbmsg
->
cmd
 = 
VPRBRD_GPIOB_CMD_SETVAL
;

336 
gbmsg
->
vÆ
 = 
	`˝u_to_be16
(
vÆue
 << 
off£t
);

337 
gbmsg
->
mask
 = 
	`˝u_to_be16
(0x0001 << 
off£t
);

339 
ªt
 = 
	`usb_c⁄åﬁ_msg
(
vb
->
usb_dev
,

340 
	`usb_¢d˘æpùe
(
vb
->
usb_dev
, 0),

341 
VPRBRD_USB_REQUEST_GPIOB
, 
VPRBRD_USB_TYPE_OUT
,

342 0x0000, 0x0000, 
gbmsg
,

343 (
v¥brd_gpiob_msg
), 
VPRBRD_USB_TIMEOUT_MS
);

345 
	`muãx_u∆ock
(&
vb
->
lock
);

347 i‡(
ªt
 !(
v¥brd_gpiob_msg
))

348 
	`dev_îr
(
chù
->
dev
, "usbÉrror settingÖin value\n");

350 
	}
}

352 
	$v¥brd_gpiob_dúe˘i⁄_öput
(
gpio_chù
 *
chù
,

353 
off£t
)

355 
ªt
;

356 
v¥brd_gpio
 *
gpio
 =

357 
	`c⁄èöî_of
(
chù
, 
v¥brd_gpio
, 
gpiob
);

358 
v¥brd
 *
vb
 = 
gpio
->vb;

360 
gpio
->
gpiob_out
 &~(1 << 
off£t
);

362 
	`muãx_lock
(&
vb
->
lock
);

364 
ªt
 = 
	`v¥brd_gpiob_£tdú
(
vb
, 
off£t
, 0);

366 
	`muãx_u∆ock
(&
vb
->
lock
);

368 i‡(
ªt
)

369 
	`dev_îr
(
chù
->
dev
, "usbÉrror settingÖinÅo input\n");

371  
ªt
;

372 
	}
}

374 
	$v¥brd_gpiob_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

375 
off£t
, 
vÆue
)

377 
ªt
;

378 
v¥brd_gpio
 *
gpio
 =

379 
	`c⁄èöî_of
(
chù
, 
v¥brd_gpio
, 
gpiob
);

380 
v¥brd
 *
vb
 = 
gpio
->vb;

382 
gpio
->
gpiob_out
 |(1 << 
off£t
);

384 
	`muãx_lock
(&
vb
->
lock
);

386 
ªt
 = 
	`v¥brd_gpiob_£tdú
(
vb
, 
off£t
, 1);

387 i‡(
ªt
)

388 
	`dev_îr
(
chù
->
dev
, "usbÉrror settingÖinÅo output\n");

390 
	`muãx_u∆ock
(&
vb
->
lock
);

392 
	`v¥brd_gpiob_£t
(
chù
, 
off£t
, 
vÆue
);

394  
ªt
;

395 
	}
}

399 
	$v¥brd_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

401 
v¥brd
 *
vb
 = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

402 
v¥brd_gpio
 *
vb_gpio
;

403 
ªt
;

405 
vb_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*vb_gpio), 
GFP_KERNEL
);

406 i‡(
vb_gpio
 =
NULL
)

407  -
ENOMEM
;

409 
vb_gpio
->
vb
 = vb;

411 
vb_gpio
->
gpiﬂ
.
œbñ
 = "viperboard gpioá";

412 
vb_gpio
->
gpiﬂ
.
dev
 = &
pdev
->dev;

413 
vb_gpio
->
gpiﬂ
.
ow√r
 = 
THIS_MODULE
;

414 
vb_gpio
->
gpiﬂ
.
ba£
 = -1;

415 
vb_gpio
->
gpiﬂ
.
ngpio
 = 16;

416 
vb_gpio
->
gpiﬂ
.
ˇn_¶ìp
 = 1;

417 
vb_gpio
->
gpiﬂ
.
£t
 = 
v¥brd_gpiﬂ_£t
;

418 
vb_gpio
->
gpiﬂ
.
gë
 = 
v¥brd_gpiﬂ_gë
;

419 
vb_gpio
->
gpiﬂ
.
dúe˘i⁄_öput
 = 
v¥brd_gpiﬂ_dúe˘i⁄_öput
;

420 
vb_gpio
->
gpiﬂ
.
dúe˘i⁄_ouçut
 = 
v¥brd_gpiﬂ_dúe˘i⁄_ouçut
;

421 
ªt
 = 
	`gpiochù_add
(&
vb_gpio
->
gpiﬂ
);

422 i‡(
ªt
 < 0) {

423 
	`dev_îr
(
vb_gpio
->
gpiﬂ
.
dev
, "couldÇotádd gpioá");

424 
îr_gpiﬂ
;

428 
vb_gpio
->
gpiob
.
œbñ
 = "viperboard gpio b";

429 
vb_gpio
->
gpiob
.
dev
 = &
pdev
->dev;

430 
vb_gpio
->
gpiob
.
ow√r
 = 
THIS_MODULE
;

431 
vb_gpio
->
gpiob
.
ba£
 = -1;

432 
vb_gpio
->
gpiob
.
ngpio
 = 16;

433 
vb_gpio
->
gpiob
.
ˇn_¶ìp
 = 1;

434 
vb_gpio
->
gpiob
.
£t
 = 
v¥brd_gpiob_£t
;

435 
vb_gpio
->
gpiob
.
gë
 = 
v¥brd_gpiob_gë
;

436 
vb_gpio
->
gpiob
.
dúe˘i⁄_öput
 = 
v¥brd_gpiob_dúe˘i⁄_öput
;

437 
vb_gpio
->
gpiob
.
dúe˘i⁄_ouçut
 = 
v¥brd_gpiob_dúe˘i⁄_ouçut
;

438 
ªt
 = 
	`gpiochù_add
(&
vb_gpio
->
gpiob
);

439 i‡(
ªt
 < 0) {

440 
	`dev_îr
(
vb_gpio
->
gpiob
.
dev
, "couldÇotádd gpio b");

441 
îr_gpiob
;

444 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
vb_gpio
);

446  
ªt
;

448 
îr_gpiob
:

449 i‡(
	`gpiochù_ªmove
(&
vb_gpio
->
gpiﬂ
))

450 
	`dev_îr
(&
pdev
->
dev
, "%†gpiochù_ªmovêÁûed\n", 
__func__
);

452 
îr_gpiﬂ
:

453  
ªt
;

454 
	}
}

456 
	$v¥brd_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

458 
v¥brd_gpio
 *
vb_gpio
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

459 
ªt
;

461 
ªt
 = 
	`gpiochù_ªmove
(&
vb_gpio
->
gpiob
);

462 i‡(
ªt
 == 0)

463 
ªt
 = 
	`gpiochù_ªmove
(&
vb_gpio
->
gpiﬂ
);

465  
ªt
;

466 
	}
}

468 
∂©f‹m_drivî
 
	gv¥brd_gpio_drivî
 = {

469 .
drivî
.
«me
 = "viperboard-gpio",

470 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

471 .
	g¥obe
 = 
v¥brd_gpio_¥obe
,

472 .
	gªmove
 = 
v¥brd_gpio_ªmove
,

475 
__öô
 
	$v¥brd_gpio_öô
()

477 
gpiﬂ_‰eq
) {

479 
gpiﬂ_˛k
 = 
VPRBRD_GPIOA_CLK_1MHZ
;

482 
gpiﬂ_˛k
 = 
VPRBRD_GPIOA_CLK_100KHZ
;

485 
gpiﬂ_˛k
 = 
VPRBRD_GPIOA_CLK_10KHZ
;

488 
gpiﬂ_˛k
 = 
VPRBRD_GPIOA_CLK_1KHZ
;

491 
gpiﬂ_˛k
 = 
VPRBRD_GPIOA_CLK_100HZ
;

494 
gpiﬂ_˛k
 = 
VPRBRD_GPIOA_CLK_10HZ
;

497 
	`¥_w¨n
("övÆid gpiﬂ_‰eq (%d)\n", 
gpiﬂ_‰eq
);

498 
gpiﬂ_˛k
 = 
VPRBRD_GPIOA_CLK_1KHZ
;

501  
	`∂©f‹m_drivî_ªgi°î
(&
v¥brd_gpio_drivî
);

502 
	}
}

503 
subsys_öôˇŒ
(
v¥brd_gpio_öô
);

505 
__exô
 
	$v¥brd_gpio_exô
()

507 
	`∂©f‹m_drivî_uƒegi°î
(&
v¥brd_gpio_drivî
);

508 
	}
}

509 
moduÀ_exô
(
v¥brd_gpio_exô
);

511 
MODULE_AUTHOR
("Lars Poeschel <poeschel@lemonage.de>");

512 
MODULE_DESCRIPTION
("GPIO driver for Nano River Techs Viperboard");

513 
MODULE_LICENSE
("GPL");

514 
MODULE_ALIAS
("platform:viperboard-gpio");

	@gpio-vr41xx.c

22 
	~<löux/î∫o.h
>

23 
	~<löux/fs.h
>

24 
	~<löux/gpio.h
>

25 
	~<löux/öô.h
>

26 
	~<löux/öãºu±.h
>

27 
	~<löux/io.h
>

28 
	~<löux/úq.h
>

29 
	~<löux/kî√l.h
>

30 
	~<löux/moduÀ.h
>

31 
	~<löux/∂©f‹m_devi˚.h
>

32 
	~<löux/•ölock.h
>

33 
	~<löux/ty≥s.h
>

35 
	~<asm/vr41xx/giu.h
>

36 
	~<asm/vr41xx/úq.h
>

37 
	~<asm/vr41xx/vr41xx.h
>

39 
MODULE_AUTHOR
("Yoichi Yuasa <yuasa@linux-mips.org>");

40 
MODULE_DESCRIPTION
("NEC VR4100 series General-purpose I/O Unit driver");

41 
MODULE_LICENSE
("GPL");

43 
	#GIUIOSELL
 0x00

	)

44 
	#GIUIOSELH
 0x02

	)

45 
	#GIUPIODL
 0x04

	)

46 
	#GIUPIODH
 0x06

	)

47 
	#GIUINTSTATL
 0x08

	)

48 
	#GIUINTSTATH
 0x0a

	)

49 
	#GIUINTENL
 0x0c

	)

50 
	#GIUINTENH
 0x0e

	)

51 
	#GIUINTTYPL
 0x10

	)

52 
	#GIUINTTYPH
 0x12

	)

53 
	#GIUINTALSELL
 0x14

	)

54 
	#GIUINTALSELH
 0x16

	)

55 
	#GIUINTHTSELL
 0x18

	)

56 
	#GIUINTHTSELH
 0x1a

	)

57 
	#GIUPODATL
 0x1c

	)

58 
	#GIUPODATEN
 0x1c

	)

59 
	#GIUPODATH
 0x1e

	)

60 
	#PIOEN0
 0x0100

	)

61 
	#PIOEN1
 0x0200

	)

62 
	#GIUPODAT
 0x1e

	)

63 
	#GIUFEDGEINHL
 0x20

	)

64 
	#GIUFEDGEINHH
 0x22

	)

65 
	#GIUREDGEINHL
 0x24

	)

66 
	#GIUREDGEINHH
 0x26

	)

68 
	#GIUUSEUPDN
 0x1e0

	)

69 
	#GIUTERMUPDN
 0x1e2

	)

71 
	#GPIO_HAS_PULLUPDOWN_IO
 0x0001

	)

72 
	#GPIO_HAS_OUTPUT_ENABLE
 0x0002

	)

73 
	#GPIO_HAS_INTERRUPT_EDGE_SELECT
 0x0100

	)

76 
	mGPIO_INPUT
,

77 
	mGPIO_OUTPUT
,

80 
DEFINE_SPINLOCK
(
giu_lock
);

81 
	ggiu_Êags
;

83 
__iomem
 *
	ggiu_ba£
;

85 
	#giu_ªad
(
off£t
Ë
	`ªadw
(
giu_ba£
 + (off£t))

	)

86 
	#giu_wrôe
(
off£t
, 
vÆue
Ë
	`wrôew
((vÆue), 
giu_ba£
 + (off£t))

	)

88 
	#GPIO_PIN_OF_IRQ
(
úq
Ë((úqË- 
GIU_IRQ_BASE
)

	)

89 
	#GIUINT_HIGH_OFFSET
 16

	)

90 
	#GIUINT_HIGH_MAX
 32

	)

92 
ölöe
 
u16
 
	$giu_£t
(
u16
 
off£t
, u16 
£t
)

94 
u16
 
d©a
;

96 
d©a
 = 
	`giu_ªad
(
off£t
);

97 
d©a
 |
£t
;

98 
	`giu_wrôe
(
off£t
, 
d©a
);

100  
d©a
;

101 
	}
}

103 
ölöe
 
u16
 
	$giu_˛ór
(
u16
 
off£t
, u16 
˛ór
)

105 
u16
 
d©a
;

107 
d©a
 = 
	`giu_ªad
(
off£t
);

108 
d©a
 &~
˛ór
;

109 
	`giu_wrôe
(
off£t
, 
d©a
);

111  
d©a
;

112 
	}
}

114 
	$ack_giuöt_low
(
úq_d©a
 *
d
)

116 
	`giu_wrôe
(
GIUINTSTATL
, 1 << 
	`GPIO_PIN_OF_IRQ
(
d
->
úq
));

117 
	}
}

119 
	$mask_giuöt_low
(
úq_d©a
 *
d
)

121 
	`giu_˛ór
(
GIUINTENL
, 1 << 
	`GPIO_PIN_OF_IRQ
(
d
->
úq
));

122 
	}
}

124 
	$mask_ack_giuöt_low
(
úq_d©a
 *
d
)

126 
pö
;

128 
pö
 = 
	`GPIO_PIN_OF_IRQ
(
d
->
úq
);

129 
	`giu_˛ór
(
GIUINTENL
, 1 << 
pö
);

130 
	`giu_wrôe
(
GIUINTSTATL
, 1 << 
pö
);

131 
	}
}

133 
	$unmask_giuöt_low
(
úq_d©a
 *
d
)

135 
	`giu_£t
(
GIUINTENL
, 1 << 
	`GPIO_PIN_OF_IRQ
(
d
->
úq
));

136 
	}
}

138 
úq_chù
 
	ggiuöt_low_úq_chù
 = {

139 .
«me
 = "GIUINTL",

140 .
	gúq_ack
 = 
ack_giuöt_low
,

141 .
	gúq_mask
 = 
mask_giuöt_low
,

142 .
	gúq_mask_ack
 = 
mask_ack_giuöt_low
,

143 .
	gúq_unmask
 = 
unmask_giuöt_low
,

146 
	$ack_giuöt_high
(
úq_d©a
 *
d
)

148 
	`giu_wrôe
(
GIUINTSTATH
,

149 1 << (
	`GPIO_PIN_OF_IRQ
(
d
->
úq
Ë- 
GIUINT_HIGH_OFFSET
));

150 
	}
}

152 
	$mask_giuöt_high
(
úq_d©a
 *
d
)

154 
	`giu_˛ór
(
GIUINTENH
, 1 << (
	`GPIO_PIN_OF_IRQ
(
d
->
úq
Ë- 
GIUINT_HIGH_OFFSET
));

155 
	}
}

157 
	$mask_ack_giuöt_high
(
úq_d©a
 *
d
)

159 
pö
;

161 
pö
 = 
	`GPIO_PIN_OF_IRQ
(
d
->
úq
Ë- 
GIUINT_HIGH_OFFSET
;

162 
	`giu_˛ór
(
GIUINTENH
, 1 << 
pö
);

163 
	`giu_wrôe
(
GIUINTSTATH
, 1 << 
pö
);

164 
	}
}

166 
	$unmask_giuöt_high
(
úq_d©a
 *
d
)

168 
	`giu_£t
(
GIUINTENH
, 1 << (
	`GPIO_PIN_OF_IRQ
(
d
->
úq
Ë- 
GIUINT_HIGH_OFFSET
));

169 
	}
}

171 
úq_chù
 
	ggiuöt_high_úq_chù
 = {

172 .
«me
 = "GIUINTH",

173 .
	gúq_ack
 = 
ack_giuöt_high
,

174 .
	gúq_mask
 = 
mask_giuöt_high
,

175 .
	gúq_mask_ack
 = 
mask_ack_giuöt_high
,

176 .
	gúq_unmask
 = 
unmask_giuöt_high
,

179 
	$giu_gë_úq
(
úq
)

181 
u16
 
≥ndl
, 
≥ndh
, 
maskl
, 
maskh
;

182 
i
;

184 
≥ndl
 = 
	`giu_ªad
(
GIUINTSTATL
);

185 
≥ndh
 = 
	`giu_ªad
(
GIUINTSTATH
);

186 
maskl
 = 
	`giu_ªad
(
GIUINTENL
);

187 
maskh
 = 
	`giu_ªad
(
GIUINTENH
);

189 
maskl
 &
≥ndl
;

190 
maskh
 &
≥ndh
;

192 i‡(
maskl
) {

193 
i
 = 0; i < 16; i++) {

194 i‡(
maskl
 & (1 << 
i
))

195  
	`GIU_IRQ
(
i
);

197 } i‡(
maskh
) {

198 
i
 = 0; i < 16; i++) {

199 i‡(
maskh
 & (1 << 
i
))

200  
	`GIU_IRQ
(
i
 + 
GIUINT_HIGH_OFFSET
);

204 
	`¥ötk
(
KERN_ERR
 "spurious GIU interrupt: %04x(%04x),%04x(%04x)\n",

205 
maskl
, 
≥ndl
, 
maskh
, 
≥ndh
);

207 
	`©omic_öc
(&
úq_îr_cou¡
);

209  -
EINVAL
;

210 
	}
}

212 
	$vr41xx_£t_úq_åiggî
(
pö
, 
úq_åiggî_t
 
åiggî
,

213 
úq_sig«l_t
 
sig«l
)

215 
u16
 
mask
;

217 i‡(
pö
 < 
GIUINT_HIGH_OFFSET
) {

218 
mask
 = 1 << 
pö
;

219 i‡(
åiggî
 !
IRQ_TRIGGER_LEVEL
) {

220 
	`giu_£t
(
GIUINTTYPL
, 
mask
);

221 i‡(
sig«l
 =
IRQ_SIGNAL_HOLD
)

222 
	`giu_£t
(
GIUINTHTSELL
, 
mask
);

224 
	`giu_˛ór
(
GIUINTHTSELL
, 
mask
);

225 i‡(
giu_Êags
 & 
GPIO_HAS_INTERRUPT_EDGE_SELECT
) {

226 
åiggî
) {

227 
IRQ_TRIGGER_EDGE_FALLING
:

228 
	`giu_£t
(
GIUFEDGEINHL
, 
mask
);

229 
	`giu_˛ór
(
GIUREDGEINHL
, 
mask
);

231 
IRQ_TRIGGER_EDGE_RISING
:

232 
	`giu_˛ór
(
GIUFEDGEINHL
, 
mask
);

233 
	`giu_£t
(
GIUREDGEINHL
, 
mask
);

236 
	`giu_£t
(
GIUFEDGEINHL
, 
mask
);

237 
	`giu_£t
(
GIUREDGEINHL
, 
mask
);

241 
	`úq_£t_chù_™d_h™dÀr
(
	`GIU_IRQ
(
pö
),

242 &
giuöt_low_úq_chù
,

243 
h™dÀ_edge_úq
);

245 
	`giu_˛ór
(
GIUINTTYPL
, 
mask
);

246 
	`giu_˛ór
(
GIUINTHTSELL
, 
mask
);

247 
	`úq_£t_chù_™d_h™dÀr
(
	`GIU_IRQ
(
pö
),

248 &
giuöt_low_úq_chù
,

249 
h™dÀ_Àvñ_úq
);

251 
	`giu_wrôe
(
GIUINTSTATL
, 
mask
);

252 } i‡(
pö
 < 
GIUINT_HIGH_MAX
) {

253 
mask
 = 1 << (
pö
 - 
GIUINT_HIGH_OFFSET
);

254 i‡(
åiggî
 !
IRQ_TRIGGER_LEVEL
) {

255 
	`giu_£t
(
GIUINTTYPH
, 
mask
);

256 i‡(
sig«l
 =
IRQ_SIGNAL_HOLD
)

257 
	`giu_£t
(
GIUINTHTSELH
, 
mask
);

259 
	`giu_˛ór
(
GIUINTHTSELH
, 
mask
);

260 i‡(
giu_Êags
 & 
GPIO_HAS_INTERRUPT_EDGE_SELECT
) {

261 
åiggî
) {

262 
IRQ_TRIGGER_EDGE_FALLING
:

263 
	`giu_£t
(
GIUFEDGEINHH
, 
mask
);

264 
	`giu_˛ór
(
GIUREDGEINHH
, 
mask
);

266 
IRQ_TRIGGER_EDGE_RISING
:

267 
	`giu_˛ór
(
GIUFEDGEINHH
, 
mask
);

268 
	`giu_£t
(
GIUREDGEINHH
, 
mask
);

271 
	`giu_£t
(
GIUFEDGEINHH
, 
mask
);

272 
	`giu_£t
(
GIUREDGEINHH
, 
mask
);

276 
	`úq_£t_chù_™d_h™dÀr
(
	`GIU_IRQ
(
pö
),

277 &
giuöt_high_úq_chù
,

278 
h™dÀ_edge_úq
);

280 
	`giu_˛ór
(
GIUINTTYPH
, 
mask
);

281 
	`giu_˛ór
(
GIUINTHTSELH
, 
mask
);

282 
	`úq_£t_chù_™d_h™dÀr
(
	`GIU_IRQ
(
pö
),

283 &
giuöt_high_úq_chù
,

284 
h™dÀ_Àvñ_úq
);

286 
	`giu_wrôe
(
GIUINTSTATH
, 
mask
);

288 
	}
}

289 
EXPORT_SYMBOL_GPL
(
vr41xx_£t_úq_åiggî
);

291 
	$vr41xx_£t_úq_Àvñ
(
pö
, 
úq_Àvñ_t
 
Àvñ
)

293 
u16
 
mask
;

295 i‡(
pö
 < 
GIUINT_HIGH_OFFSET
) {

296 
mask
 = 1 << 
pö
;

297 i‡(
Àvñ
 =
IRQ_LEVEL_HIGH
)

298 
	`giu_£t
(
GIUINTALSELL
, 
mask
);

300 
	`giu_˛ór
(
GIUINTALSELL
, 
mask
);

301 
	`giu_wrôe
(
GIUINTSTATL
, 
mask
);

302 } i‡(
pö
 < 
GIUINT_HIGH_MAX
) {

303 
mask
 = 1 << (
pö
 - 
GIUINT_HIGH_OFFSET
);

304 i‡(
Àvñ
 =
IRQ_LEVEL_HIGH
)

305 
	`giu_£t
(
GIUINTALSELH
, 
mask
);

307 
	`giu_˛ór
(
GIUINTALSELH
, 
mask
);

308 
	`giu_wrôe
(
GIUINTSTATH
, 
mask
);

310 
	}
}

311 
EXPORT_SYMBOL_GPL
(
vr41xx_£t_úq_Àvñ
);

313 
	$giu_£t_dúe˘i⁄
(
gpio_chù
 *
chù
, 
pö
, 
dú
)

315 
u16
 
off£t
, 
mask
, 
ªg
;

316 
Êags
;

318 i‡(
pö
 >
chù
->
ngpio
)

319  -
EINVAL
;

321 i‡(
pö
 < 16) {

322 
off£t
 = 
GIUIOSELL
;

323 
mask
 = 1 << 
pö
;

324 } i‡(
pö
 < 32) {

325 
off£t
 = 
GIUIOSELH
;

326 
mask
 = 1 << (
pö
 - 16);

328 i‡(
giu_Êags
 & 
GPIO_HAS_OUTPUT_ENABLE
) {

329 
off£t
 = 
GIUPODATEN
;

330 
mask
 = 1 << (
pö
 - 32);

332 
pö
) {

334 
off£t
 = 
GIUPODATH
;

335 
mask
 = 
PIOEN0
;

338 
off£t
 = 
GIUPODATH
;

339 
mask
 = 
PIOEN1
;

342  -
EINVAL
;

347 
	`•ö_lock_úqßve
(&
giu_lock
, 
Êags
);

349 
ªg
 = 
	`giu_ªad
(
off£t
);

350 i‡(
dú
 =
GPIO_OUTPUT
)

351 
ªg
 |
mask
;

353 
ªg
 &~
mask
;

354 
	`giu_wrôe
(
off£t
, 
ªg
);

356 
	`•ö_u∆ock_úqª°‹e
(&
giu_lock
, 
Êags
);

359 
	}
}

361 
	$vr41xx_gpio_puŒupdown
(
pö
, 
gpio_puŒ_t
 
puŒ
)

363 
u16
 
ªg
, 
mask
;

364 
Êags
;

366 i‡((
giu_Êags
 & 
GPIO_HAS_PULLUPDOWN_IO
) != GPIO_HAS_PULLUPDOWN_IO)

367  -
EPERM
;

369 i‡(
pö
 >= 15)

370  -
EINVAL
;

372 
mask
 = 1 << 
pö
;

374 
	`•ö_lock_úqßve
(&
giu_lock
, 
Êags
);

376 i‡(
puŒ
 =
GPIO_PULL_UP
 ||ÖuŒ =
GPIO_PULL_DOWN
) {

377 
ªg
 = 
	`giu_ªad
(
GIUTERMUPDN
);

378 i‡(
puŒ
 =
GPIO_PULL_UP
)

379 
ªg
 |
mask
;

381 
ªg
 &~
mask
;

382 
	`giu_wrôe
(
GIUTERMUPDN
, 
ªg
);

384 
ªg
 = 
	`giu_ªad
(
GIUUSEUPDN
);

385 
ªg
 |
mask
;

386 
	`giu_wrôe
(
GIUUSEUPDN
, 
ªg
);

388 
ªg
 = 
	`giu_ªad
(
GIUUSEUPDN
);

389 
ªg
 &~
mask
;

390 
	`giu_wrôe
(
GIUUSEUPDN
, 
ªg
);

393 
	`•ö_u∆ock_úqª°‹e
(&
giu_lock
, 
Êags
);

396 
	}
}

397 
EXPORT_SYMBOL_GPL
(
vr41xx_gpio_puŒupdown
);

399 
	$vr41xx_gpio_gë
(
gpio_chù
 *
chù
, 
pö
)

401 
u16
 
ªg
, 
mask
;

403 i‡(
pö
 >
chù
->
ngpio
)

404  -
EINVAL
;

406 i‡(
pö
 < 16) {

407 
ªg
 = 
	`giu_ªad
(
GIUPIODL
);

408 
mask
 = 1 << 
pö
;

409 } i‡(
pö
 < 32) {

410 
ªg
 = 
	`giu_ªad
(
GIUPIODH
);

411 
mask
 = 1 << (
pö
 - 16);

412 } i‡(
pö
 < 48) {

413 
ªg
 = 
	`giu_ªad
(
GIUPODATL
);

414 
mask
 = 1 << (
pö
 - 32);

416 
ªg
 = 
	`giu_ªad
(
GIUPODATH
);

417 
mask
 = 1 << (
pö
 - 48);

420 i‡(
ªg
 & 
mask
)

424 
	}
}

426 
	$vr41xx_gpio_£t
(
gpio_chù
 *
chù
, 
pö
,

427 
vÆue
)

429 
u16
 
off£t
, 
mask
, 
ªg
;

430 
Êags
;

432 i‡(
pö
 >
chù
->
ngpio
)

435 i‡(
pö
 < 16) {

436 
off£t
 = 
GIUPIODL
;

437 
mask
 = 1 << 
pö
;

438 } i‡(
pö
 < 32) {

439 
off£t
 = 
GIUPIODH
;

440 
mask
 = 1 << (
pö
 - 16);

441 } i‡(
pö
 < 48) {

442 
off£t
 = 
GIUPODATL
;

443 
mask
 = 1 << (
pö
 - 32);

445 
off£t
 = 
GIUPODATH
;

446 
mask
 = 1 << (
pö
 - 48);

449 
	`•ö_lock_úqßve
(&
giu_lock
, 
Êags
);

451 
ªg
 = 
	`giu_ªad
(
off£t
);

452 i‡(
vÆue
)

453 
ªg
 |
mask
;

455 
ªg
 &~
mask
;

456 
	`giu_wrôe
(
off£t
, 
ªg
);

458 
	`•ö_u∆ock_úqª°‹e
(&
giu_lock
, 
Êags
);

459 
	}
}

462 
	$vr41xx_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
off£t
)

464  
	`giu_£t_dúe˘i⁄
(
chù
, 
off£t
, 
GPIO_INPUT
);

465 
	}
}

467 
	$vr41xx_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
off£t
,

468 
vÆue
)

470 
	`vr41xx_gpio_£t
(
chù
, 
off£t
, 
vÆue
);

472  
	`giu_£t_dúe˘i⁄
(
chù
, 
off£t
, 
GPIO_OUTPUT
);

473 
	}
}

475 
	$vr41xx_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

477 i‡(
off£t
 >
chù
->
ngpio
)

478  -
EINVAL
;

480  
GIU_IRQ_BASE
 + 
off£t
;

481 
	}
}

483 
gpio_chù
 
	gvr41xx_gpio_chù
 = {

484 .
œbñ
 = "vr41xx",

485 .
	gow√r
 = 
THIS_MODULE
,

486 .
	gdúe˘i⁄_öput
 = 
vr41xx_gpio_dúe˘i⁄_öput
,

487 .
	ggë
 = 
vr41xx_gpio_gë
,

488 .
	gdúe˘i⁄_ouçut
 = 
vr41xx_gpio_dúe˘i⁄_ouçut
,

489 .
	g£t
 = 
vr41xx_gpio_£t
,

490 .
	gto_úq
 = 
vr41xx_gpio_to_úq
,

493 
	$giu_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

495 
ªsour˚
 *
ªs
;

496 
åiggî
, 
i
, 
pö
;

497 
úq_chù
 *
chù
;

498 
úq
, 
ªtvÆ
;

500 
pdev
->
id
) {

501 
GPIO_50PINS_PULLUPDOWN
:

502 
giu_Êags
 = 
GPIO_HAS_PULLUPDOWN_IO
;

503 
vr41xx_gpio_chù
.
ngpio
 = 50;

505 
GPIO_36PINS
:

506 
vr41xx_gpio_chù
.
ngpio
 = 36;

508 
GPIO_48PINS_EDGE_SELECT
:

509 
giu_Êags
 = 
GPIO_HAS_INTERRUPT_EDGE_SELECT
;

510 
vr41xx_gpio_chù
.
ngpio
 = 48;

513 
	`dev_îr
(&
pdev
->
dev
, "GIU: unknow¿ID %d\n",Ödev->
id
);

514  -
ENODEV
;

517 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

518 i‡(!
ªs
)

519  -
EBUSY
;

521 
giu_ba£
 = 
	`i‹em≠
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

522 i‡(!
giu_ba£
)

523  -
ENOMEM
;

525 
vr41xx_gpio_chù
.
dev
 = &
pdev
->dev;

527 
ªtvÆ
 = 
	`gpiochù_add
(&
vr41xx_gpio_chù
);

529 
	`giu_wrôe
(
GIUINTENL
, 0);

530 
	`giu_wrôe
(
GIUINTENH
, 0);

532 
åiggî
 = 
	`giu_ªad
(
GIUINTTYPH
) << 16;

533 
åiggî
 |
	`giu_ªad
(
GIUINTTYPL
);

534 
i
 = 
GIU_IRQ_BASE
; i <
GIU_IRQ_LAST
; i++) {

535 
pö
 = 
	`GPIO_PIN_OF_IRQ
(
i
);

536 i‡(
pö
 < 
GIUINT_HIGH_OFFSET
)

537 
chù
 = &
giuöt_low_úq_chù
;

539 
chù
 = &
giuöt_high_úq_chù
;

541 i‡(
åiggî
 & (1 << 
pö
))

542 
	`úq_£t_chù_™d_h™dÀr
(
i
, 
chù
, 
h™dÀ_edge_úq
);

544 
	`úq_£t_chù_™d_h™dÀr
(
i
, 
chù
, 
h™dÀ_Àvñ_úq
);

548 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

549 i‡(
úq
 < 0 || irq >
ƒ_úqs
)

550  -
EBUSY
;

552  
	`ˇsˇde_úq
(
úq
, 
giu_gë_úq
);

553 
	}
}

555 
	$giu_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

557 i‡(
giu_ba£
) {

558 
	`iounm≠
(
giu_ba£
);

559 
giu_ba£
 = 
NULL
;

563 
	}
}

565 
∂©f‹m_drivî
 
	ggiu_devi˚_drivî
 = {

566 .
¥obe
 = 
giu_¥obe
,

567 .
	gªmove
 = 
giu_ªmove
,

568 .
	gdrivî
 = {

569 .
«me
 = "GIU",

570 .
	gow√r
 = 
THIS_MODULE
,

574 
moduÀ_∂©f‹m_drivî
(
giu_devi˚_drivî
);

	@gpio-vx855.c

26 
	~<löux/kî√l.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/gpio.h
>

29 
	~<löux/¶ab.h
>

30 
	~<löux/devi˚.h
>

31 
	~<löux/∂©f‹m_devi˚.h
>

32 
	~<löux/pci.h
>

33 
	~<löux/io.h
>

35 
	#MODULE_NAME
 "vx855_gpio"

	)

43 
	#NR_VX855_GPI
 14

	)

44 
	#NR_VX855_GPO
 13

	)

45 
	#NR_VX855_GPIO
 15

	)

47 
	#NR_VX855_GPInO
 (
NR_VX855_GPI
 + 
NR_VX855_GPO
)

	)

48 
	#NR_VX855_GP
 (
NR_VX855_GPI
 + 
NR_VX855_GPO
 + 
NR_VX855_GPIO
)

	)

50 
	svx855_gpio
 {

51 
gpio_chù
 
	mgpio
;

52 
•ölock_t
 
	mlock
;

53 
u32
 
	mio_gpi
;

54 
u32
 
	mio_gpo
;

55 
boﬁ
 
	mgpi_ª£rved
;

56 
boﬁ
 
	mgpo_ª£rved
;

60 
ölöe
 
u_öt32_t
 
	$gpi_i_bô
(
i
)

62 i‡(
i
 < 10)

63  1 << 
i
;

65  1 << (
i
 + 14);

66 
	}
}

68 
ölöe
 
u_öt32_t
 
	$gpo_o_bô
(
i
)

70 i‡(
i
 < 11)

71  1 << 
i
;

73  1 << (
i
 + 14);

74 
	}
}

76 
ölöe
 
u_öt32_t
 
	$gpio_i_bô
(
i
)

78 i‡(
i
 < 14)

79  1 << (
i
 + 10);

81  1 << (
i
 + 14);

82 
	}
}

84 
ölöe
 
u_öt32_t
 
	$gpio_o_bô
(
i
)

86 i‡(
i
 < 14)

87  1 << (
i
 + 11);

89  1 << (
i
 + 13);

90 
	}
}

98 
	$vx855gpio_dúe˘i⁄_öput
(
gpio_chù
 *
gpio
,

99 
ƒ
)

101 
vx855_gpio
 *
vg
 = 
	`c⁄èöî_of
(
gpio
, vx855_gpio, gpio);

102 
Êags
;

103 
u_öt32_t
 
ªg_out
;

106 i‡(
ƒ
 < 
NR_VX855_GPI
)

110 i‡(
ƒ
 < 
NR_VX855_GPInO
)

111  -
EINVAL
;

114 
	`•ö_lock_úqßve
(&
vg
->
lock
, 
Êags
);

115 
ªg_out
 = 
	`öl
(
vg
->
io_gpo
);

116 
ªg_out
 |
	`gpio_o_bô
(
ƒ
 - 
NR_VX855_GPInO
);

117 
	`oué
(
ªg_out
, 
vg
->
io_gpo
);

118 
	`•ö_u∆ock_úqª°‹e
(&
vg
->
lock
, 
Êags
);

121 
	}
}

123 
	$vx855gpio_gë
(
gpio_chù
 *
gpio
, 
ƒ
)

125 
vx855_gpio
 *
vg
 = 
	`c⁄èöî_of
(
gpio
, vx855_gpio, gpio);

126 
u_öt32_t
 
ªg_ö
;

127 
ªt
 = 0;

129 i‡(
ƒ
 < 
NR_VX855_GPI
) {

130 
ªg_ö
 = 
	`öl
(
vg
->
io_gpi
);

131 i‡(
ªg_ö
 & 
	`gpi_i_bô
(
ƒ
))

132 
ªt
 = 1;

133 } i‡(
ƒ
 < 
NR_VX855_GPInO
) {

136 
ªg_ö
 = 
	`öl
(
vg
->
io_gpo
);

137 i‡(
ªg_ö
 & 
	`gpo_o_bô
(
ƒ
 - 
NR_VX855_GPI
))

138 
ªt
 = 1;

140 
ªg_ö
 = 
	`öl
(
vg
->
io_gpi
);

141 i‡(
ªg_ö
 & 
	`gpio_i_bô
(
ƒ
 - 
NR_VX855_GPInO
))

142 
ªt
 = 1;

145  
ªt
;

146 
	}
}

148 
	$vx855gpio_£t
(
gpio_chù
 *
gpio
, 
ƒ
,

149 
vÆ
)

151 
vx855_gpio
 *
vg
 = 
	`c⁄èöî_of
(
gpio
, vx855_gpio, gpio);

152 
Êags
;

153 
u_öt32_t
 
ªg_out
;

156 i‡(
ƒ
 < 
NR_VX855_GPI
)

159 
	`•ö_lock_úqßve
(&
vg
->
lock
, 
Êags
);

160 
ªg_out
 = 
	`öl
(
vg
->
io_gpo
);

161 i‡(
ƒ
 < 
NR_VX855_GPInO
) {

162 i‡(
vÆ
)

163 
ªg_out
 |
	`gpo_o_bô
(
ƒ
 - 
NR_VX855_GPI
);

165 
ªg_out
 &~
	`gpo_o_bô
(
ƒ
 - 
NR_VX855_GPI
);

167 i‡(
vÆ
)

168 
ªg_out
 |
	`gpio_o_bô
(
ƒ
 - 
NR_VX855_GPInO
);

170 
ªg_out
 &~
	`gpio_o_bô
(
ƒ
 - 
NR_VX855_GPInO
);

172 
	`oué
(
ªg_out
, 
vg
->
io_gpo
);

173 
	`•ö_u∆ock_úqª°‹e
(&
vg
->
lock
, 
Êags
);

174 
	}
}

176 
	$vx855gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
gpio
,

177 
ƒ
, 
vÆ
)

180 i‡(
ƒ
 < 
NR_VX855_GPI
)

181  -
EINVAL
;

186 
	`vx855gpio_£t
(
gpio
, 
ƒ
, 
vÆ
);

189 
	}
}

191 c⁄° *
	gvx855gpio_«mes
[
NR_VX855_GP
] = {

204 
	$vx855gpio_gpio_£tup
(
vx855_gpio
 *
vg
)

206 
gpio_chù
 *
c
 = &
vg
->
gpio
;

208 
c
->
œbñ
 = "VX855 South Bridge";

209 
c
->
ow√r
 = 
THIS_MODULE
;

210 
c
->
dúe˘i⁄_öput
 = 
vx855gpio_dúe˘i⁄_öput
;

211 
c
->
dúe˘i⁄_ouçut
 = 
vx855gpio_dúe˘i⁄_ouçut
;

212 
c
->
gë
 = 
vx855gpio_gë
;

213 
c
->
£t
 = 
vx855gpio_£t
;

214 
c
->
dbg_show
 = 
NULL
;

215 
c
->
ba£
 = 0;

216 
c
->
ngpio
 = 
NR_VX855_GP
;

217 
c
->
ˇn_¶ìp
 = 0;

218 
c
->
«mes
 = 
vx855gpio_«mes
;

219 
	}
}

222 
	$vx855gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

224 
ªsour˚
 *
ªs_gpi
;

225 
ªsour˚
 *
ªs_gpo
;

226 
vx855_gpio
 *
vg
;

227 
ªt
;

229 
ªs_gpi
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 0);

230 
ªs_gpo
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 1);

231 i‡(!
ªs_gpi
 || !
ªs_gpo
)

232  -
EBUSY
;

234 
vg
 = 
	`kzÆloc
((*vg), 
GFP_KERNEL
);

235 i‡(!
vg
)

236  -
ENOMEM
;

238 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
vg
);

240 
	`dev_öfo
(&
pdev
->
dev
, "found VX855 GPIO controller\n");

241 
vg
->
io_gpi
 = 
ªs_gpi
->
°¨t
;

242 
vg
->
io_gpo
 = 
ªs_gpo
->
°¨t
;

243 
	`•ö_lock_öô
(&
vg
->
lock
);

253 i‡(!
	`ªque°_ªgi⁄
(
ªs_gpi
->
°¨t
, 
	`ªsour˚_size
(res_gpi),

254 
MODULE_NAME
 "_gpi"))

255 
	`dev_w¨n
(&
pdev
->
dev
,

258 
vg
->
gpi_ª£rved
 = 
åue
;

260 i‡(!
	`ªque°_ªgi⁄
(
ªs_gpo
->
°¨t
, 
	`ªsour˚_size
(res_gpo),

261 
MODULE_NAME
 "_gpo"))

262 
	`dev_w¨n
(&
pdev
->
dev
,

265 
vg
->
gpo_ª£rved
 = 
åue
;

267 
	`vx855gpio_gpio_£tup
(
vg
);

269 
ªt
 = 
	`gpiochù_add
(&
vg
->
gpio
);

270 i‡(
ªt
) {

271 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑegister GPIOs\n");

272 
out_ªÀa£
;

277 
out_ªÀa£
:

278 i‡(
vg
->
gpi_ª£rved
)

279 
	`ªÀa£_ªgi⁄
(
ªs_gpi
->
°¨t
, 
	`ªsour˚_size
(res_gpi));

280 i‡(
vg
->
gpo_ª£rved
)

281 
	`ªÀa£_ªgi⁄
(
ªs_gpi
->
°¨t
, 
	`ªsour˚_size
(
ªs_gpo
));

282 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

283 
	`k‰ì
(
vg
);

284  
ªt
;

285 
	}
}

287 
	$vx855gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

289 
vx855_gpio
 *
vg
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

290 
ªsour˚
 *
ªs
;

292 i‡(
	`gpiochù_ªmove
(&
vg
->
gpio
))

293 
	`dev_îr
(&
pdev
->
dev
, "unableÅoÑemove gpio_chip?\n");

295 i‡(
vg
->
gpi_ª£rved
) {

296 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 0);

297 
	`ªÀa£_ªgi⁄
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

299 i‡(
vg
->
gpo_ª£rved
) {

300 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IO
, 1);

301 
	`ªÀa£_ªgi⁄
(
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

304 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

305 
	`k‰ì
(
vg
);

307 
	}
}

309 
∂©f‹m_drivî
 
	gvx855gpio_drivî
 = {

310 .
drivî
 = {

311 .
«me
 = 
MODULE_NAME
,

312 .
	gow√r
 = 
THIS_MODULE
,

314 .
	g¥obe
 = 
vx855gpio_¥obe
,

315 .
	gªmove
 = 
vx855gpio_ªmove
,

318 
moduÀ_∂©f‹m_drivî
(
vx855gpio_drivî
);

320 
MODULE_LICENSE
("GPL");

321 
MODULE_AUTHOR
("Harald Welte <HaraldWelte@viatech.com>");

322 
MODULE_DESCRIPTION
("GPIO driver forÅhe VIA VX855 chipset");

323 
MODULE_ALIAS
("platform:vx855_gpio");

	@gpio-wm831x.c

15 
	~<löux/kî√l.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/gpio.h
>

19 
	~<löux/mfd/c‹e.h
>

20 
	~<löux/∂©f‹m_devi˚.h
>

21 
	~<löux/£q_fûe.h
>

23 
	~<löux/mfd/wm831x/c‹e.h
>

24 
	~<löux/mfd/wm831x/pd©a.h
>

25 
	~<löux/mfd/wm831x/gpio.h
>

26 
	~<löux/mfd/wm831x/úq.h
>

28 
	swm831x_gpio
 {

29 
wm831x
 *
	mwm831x
;

30 
gpio_chù
 
	mgpio_chù
;

33 
ölöe
 
wm831x_gpio
 *
	$to_wm831x_gpio
(
gpio_chù
 *
chù
)

35  
	`c⁄èöî_of
(
chù
, 
wm831x_gpio
, 
gpio_chù
);

36 
	}
}

38 
	$wm831x_gpio_dúe˘i⁄_ö
(
gpio_chù
 *
chù
, 
off£t
)

40 
wm831x_gpio
 *wm831x_gpiÿ
	`to_wm831x_gpio
(
chù
);

41 
wm831x
 *wm831x = 
wm831x_gpio
->wm831x;

42 
vÆ
 = 
WM831X_GPN_DIR
;

44 i‡(
wm831x
->
has_gpio_ía
)

45 
vÆ
 |
WM831X_GPN_TRI
;

47  
	`wm831x_£t_bôs
(
wm831x
, 
WM831X_GPIO1_CONTROL
 + 
off£t
,

48 
WM831X_GPN_DIR
 | 
WM831X_GPN_TRI
 |

49 
WM831X_GPN_FN_MASK
, 
vÆ
);

50 
	}
}

52 
	$wm831x_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

54 
wm831x_gpio
 *wm831x_gpiÿ
	`to_wm831x_gpio
(
chù
);

55 
wm831x
 *wm831x = 
wm831x_gpio
->wm831x;

56 
ªt
;

58 
ªt
 = 
	`wm831x_ªg_ªad
(
wm831x
, 
WM831X_GPIO_LEVEL
);

59 i‡(
ªt
 < 0)

60  
ªt
;

62 i‡(
ªt
 & 1 << 
off£t
)

66 
	}
}

68 
	$wm831x_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

70 
wm831x_gpio
 *wm831x_gpiÿ
	`to_wm831x_gpio
(
chù
);

71 
wm831x
 *wm831x = 
wm831x_gpio
->wm831x;

73 
	`wm831x_£t_bôs
(
wm831x
, 
WM831X_GPIO_LEVEL
, 1 << 
off£t
,

74 
vÆue
 << 
off£t
);

75 
	}
}

77 
	$wm831x_gpio_dúe˘i⁄_out
(
gpio_chù
 *
chù
,

78 
off£t
, 
vÆue
)

80 
wm831x_gpio
 *wm831x_gpiÿ
	`to_wm831x_gpio
(
chù
);

81 
wm831x
 *wm831x = 
wm831x_gpio
->wm831x;

82 
vÆ
 = 0;

83 
ªt
;

85 i‡(
wm831x
->
has_gpio_ía
)

86 
vÆ
 |
WM831X_GPN_TRI
;

88 
ªt
 = 
	`wm831x_£t_bôs
(
wm831x
, 
WM831X_GPIO1_CONTROL
 + 
off£t
,

89 
WM831X_GPN_DIR
 | 
WM831X_GPN_TRI
 |

90 
WM831X_GPN_FN_MASK
, 
vÆ
);

91 i‡(
ªt
 < 0)

92  
ªt
;

95 
	`wm831x_gpio_£t
(
chù
, 
off£t
, 
vÆue
);

98 
	}
}

100 
	$wm831x_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

102 
wm831x_gpio
 *wm831x_gpiÿ
	`to_wm831x_gpio
(
chù
);

103 
wm831x
 *wm831x = 
wm831x_gpio
->wm831x;

105  
	`úq_¸óã_m≠pög
(
wm831x
->
úq_domaö
,

106 
WM831X_IRQ_GPIO_1
 + 
off£t
);

107 
	}
}

109 
	$wm831x_gpio_£t_deboun˚
(
gpio_chù
 *
chù
, 
off£t
,

110 
deboun˚
)

112 
wm831x_gpio
 *wm831x_gpiÿ
	`to_wm831x_gpio
(
chù
);

113 
wm831x
 *wm831x = 
wm831x_gpio
->wm831x;

114 
ªg
 = 
WM831X_GPIO1_CONTROL
 + 
off£t
;

115 
ªt
, 
‚
;

117 
ªt
 = 
	`wm831x_ªg_ªad
(
wm831x
, 
ªg
);

118 i‡(
ªt
 < 0)

119  
ªt
;

121 
ªt
 & 
WM831X_GPN_FN_MASK
) {

127  -
EBUSY
;

130 i‡(
deboun˚
 >= 32 && debounce <= 64)

131 
‚
 = 0;

132 i‡(
deboun˚
 >= 4000 && debounce <= 8000)

133 
‚
 = 1;

135  -
EINVAL
;

137  
	`wm831x_£t_bôs
(
wm831x
, 
ªg
, 
WM831X_GPN_FN_MASK
, 
‚
);

138 
	}
}

140 #ifde‡
CONFIG_DEBUG_FS


141 
	$wm831x_gpio_dbg_show
(
£q_fûe
 *
s
, 
gpio_chù
 *
chù
)

143 
wm831x_gpio
 *wm831x_gpiÿ
	`to_wm831x_gpio
(
chù
);

144 
wm831x
 *wm831x = 
wm831x_gpio
->wm831x;

145 
i
, 
åi°©ed
;

147 
i
 = 0; i < 
chù
->
ngpio
; i++) {

148 
gpio
 = 
i
 + 
chù
->
ba£
;

149 
ªg
;

150 c⁄° *
œbñ
, *
puŒ
, *
powîdomaö
;

157 
œbñ
 = 
	`gpiochù_is_ªque°ed
(
chù
, 
i
);

158 i‡(!
œbñ
)

159 
œbñ
 = "Unrequested";

161 
	`£q_¥ötf
(
s
, " gpio-%-3d (%-20.20sË", 
gpio
, 
œbñ
);

163 
ªg
 = 
	`wm831x_ªg_ªad
(
wm831x
, 
WM831X_GPIO1_CONTROL
 + 
i
);

164 i‡(
ªg
 < 0) {

165 
	`dev_îr
(
wm831x
->
dev
,

167 
gpio
, 
ªg
);

168 
	`£q_¥ötf
(
s
, "\n");

172 
ªg
 & 
WM831X_GPN_PULL_MASK
) {

173 
WM831X_GPIO_PULL_NONE
:

174 
puŒ
 = "nopull";

176 
WM831X_GPIO_PULL_DOWN
:

177 
puŒ
 = "pulldown";

179 
WM831X_GPIO_PULL_UP
:

180 
puŒ
 = "pullup";

183 
puŒ
 = "INVALID PULL";

187 
i
 + 1) {

190 i‡(
ªg
 & 
WM831X_GPN_PWR_DOM
)

191 
powîdomaö
 = "VPMIC";

193 
powîdomaö
 = "DBVDD";

198 i‡(
ªg
 & 
WM831X_GPN_PWR_DOM
)

199 
powîdomaö
 = "SYSVDD";

201 
powîdomaö
 = "DBVDD";

205 
powîdomaö
 = "TPVDD";

209 
	`BUG
();

213 
åi°©ed
 = 
ªg
 & 
WM831X_GPN_TRI
;

214 i‡(
wm831x
->
has_gpio_ía
)

215 
åi°©ed
 = !tristated;

217 
	`£q_¥ötf
(
s
, " %s %s %s %s%s\n"

219 
ªg
 & 
WM831X_GPN_DIR
 ? "in" : "out",

220 
	`wm831x_gpio_gë
(
chù
, 
i
) ? "high" : "low",

221 
puŒ
,

222 
powîdomaö
,

223 
ªg
 & 
WM831X_GPN_POL
 ? "" : " inverted",

224 
ªg
 & 
WM831X_GPN_OD
 ? "open-drain" : "CMOS",

225 
åi°©ed
 ? "Åristated" : "",

226 
ªg
);

228 
	}
}

230 
	#wm831x_gpio_dbg_show
 
NULL


	)

233 
gpio_chù
 
	gãm∂©e_chù
 = {

234 .
œbñ
 = "wm831x",

235 .
	gow√r
 = 
THIS_MODULE
,

236 .
	gdúe˘i⁄_öput
 = 
wm831x_gpio_dúe˘i⁄_ö
,

237 .
	ggë
 = 
wm831x_gpio_gë
,

238 .
	gdúe˘i⁄_ouçut
 = 
wm831x_gpio_dúe˘i⁄_out
,

239 .
	g£t
 = 
wm831x_gpio_£t
,

240 .
	gto_úq
 = 
wm831x_gpio_to_úq
,

241 .
	g£t_deboun˚
 = 
wm831x_gpio_£t_deboun˚
,

242 .
	gdbg_show
 = 
wm831x_gpio_dbg_show
,

243 .
	gˇn_¶ìp
 = 1,

246 
	$wm831x_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

248 
wm831x
 *wm831x = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

249 
wm831x_pd©a
 *
pd©a
 = 
wm831x
->
dev
->
∂©f‹m_d©a
;

250 
wm831x_gpio
 *wm831x_gpio;

251 
ªt
;

253 
wm831x_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*wm831x_gpio),

254 
GFP_KERNEL
);

255 i‡(
wm831x_gpio
 =
NULL
)

256  -
ENOMEM
;

258 
wm831x_gpio
->
wm831x
 = wm831x;

259 
wm831x_gpio
->
gpio_chù
 = 
ãm∂©e_chù
;

260 
wm831x_gpio
->
gpio_chù
.
ngpio
 = 
wm831x
->
num_gpio
;

261 
wm831x_gpio
->
gpio_chù
.
dev
 = &
pdev
->dev;

262 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

263 
wm831x_gpio
->
gpio_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

265 
wm831x_gpio
->
gpio_chù
.
ba£
 = -1;

267 
ªt
 = 
	`gpiochù_add
(&
wm831x_gpio
->
gpio_chù
);

268 i‡(
ªt
 < 0) {

269 
	`dev_îr
(&
pdev
->
dev
, "CouldÇŸÑegi°î gpiochù, %d\n", 
ªt
);

270  
ªt
;

273 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
wm831x_gpio
);

275  
ªt
;

276 
	}
}

278 
	$wm831x_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

280 
wm831x_gpio
 *wm831x_gpiÿ
	`∂©f‹m_gë_drvd©a
(
pdev
);

282  
	`gpiochù_ªmove
(&
wm831x_gpio
->
gpio_chù
);

283 
	}
}

285 
∂©f‹m_drivî
 
	gwm831x_gpio_drivî
 = {

286 .
drivî
.
«me
 = "wm831x-gpio",

287 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

288 .
	g¥obe
 = 
wm831x_gpio_¥obe
,

289 .
	gªmove
 = 
wm831x_gpio_ªmove
,

292 
__öô
 
	$wm831x_gpio_öô
()

294  
	`∂©f‹m_drivî_ªgi°î
(&
wm831x_gpio_drivî
);

295 
	}
}

296 
subsys_öôˇŒ
(
wm831x_gpio_öô
);

298 
__exô
 
	$wm831x_gpio_exô
()

300 
	`∂©f‹m_drivî_uƒegi°î
(&
wm831x_gpio_drivî
);

301 
	}
}

302 
moduÀ_exô
(
wm831x_gpio_exô
);

304 
MODULE_AUTHOR
("Mark Brown <broonie@opensource.wolfsonmicro.com>");

305 
MODULE_DESCRIPTION
("GPIO interface for WM831x PMICs");

306 
MODULE_LICENSE
("GPL");

307 
MODULE_ALIAS
("platform:wm831x-gpio");

	@gpio-wm8350.c

15 
	~<löux/kî√l.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/gpio.h
>

19 
	~<löux/mfd/c‹e.h
>

20 
	~<löux/∂©f‹m_devi˚.h
>

21 
	~<löux/£q_fûe.h
>

23 
	~<löux/mfd/wm8350/c‹e.h
>

24 
	~<löux/mfd/wm8350/gpio.h
>

26 
	swm8350_gpio_d©a
 {

27 
wm8350
 *
	mwm8350
;

28 
gpio_chù
 
	mgpio_chù
;

31 
ölöe
 
wm8350_gpio_d©a
 *
	$to_wm8350_gpio
(
gpio_chù
 *
chù
)

33  
	`c⁄èöî_of
(
chù
, 
wm8350_gpio_d©a
, 
gpio_chù
);

34 
	}
}

36 
	$wm8350_gpio_dúe˘i⁄_ö
(
gpio_chù
 *
chù
, 
off£t
)

38 
wm8350_gpio_d©a
 *
wm8350_gpio
 = 
	`to_wm8350_gpio
(
chù
);

39 
wm8350
 *wm8350 = 
wm8350_gpio
->wm8350;

41  
	`wm8350_£t_bôs
(
wm8350
, 
WM8350_GPIO_CONFIGURATION_I_O
,

42 1 << 
off£t
);

43 
	}
}

45 
	$wm8350_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

47 
wm8350_gpio_d©a
 *
wm8350_gpio
 = 
	`to_wm8350_gpio
(
chù
);

48 
wm8350
 *wm8350 = 
wm8350_gpio
->wm8350;

49 
ªt
;

51 
ªt
 = 
	`wm8350_ªg_ªad
(
wm8350
, 
WM8350_GPIO_LEVEL
);

52 i‡(
ªt
 < 0)

53  
ªt
;

55 i‡(
ªt
 & (1 << 
off£t
))

59 
	}
}

61 
	$wm8350_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

63 
wm8350_gpio_d©a
 *
wm8350_gpio
 = 
	`to_wm8350_gpio
(
chù
);

64 
wm8350
 *wm8350 = 
wm8350_gpio
->wm8350;

66 i‡(
vÆue
)

67 
	`wm8350_£t_bôs
(
wm8350
, 
WM8350_GPIO_LEVEL
, 1 << 
off£t
);

69 
	`wm8350_˛ór_bôs
(
wm8350
, 
WM8350_GPIO_LEVEL
, 1 << 
off£t
);

70 
	}
}

72 
	$wm8350_gpio_dúe˘i⁄_out
(
gpio_chù
 *
chù
,

73 
off£t
, 
vÆue
)

75 
wm8350_gpio_d©a
 *
wm8350_gpio
 = 
	`to_wm8350_gpio
(
chù
);

76 
wm8350
 *wm8350 = 
wm8350_gpio
->wm8350;

77 
ªt
;

79 
ªt
 = 
	`wm8350_˛ór_bôs
(
wm8350
, 
WM8350_GPIO_CONFIGURATION_I_O
,

80 1 << 
off£t
);

81 i‡(
ªt
 < 0)

82  
ªt
;

85 
	`wm8350_gpio_£t
(
chù
, 
off£t
, 
vÆue
);

88 
	}
}

90 
	$wm8350_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

92 
wm8350_gpio_d©a
 *
wm8350_gpio
 = 
	`to_wm8350_gpio
(
chù
);

93 
wm8350
 *wm8350 = 
wm8350_gpio
->wm8350;

95 i‡(!
wm8350
->
úq_ba£
)

96  -
EINVAL
;

98  
wm8350
->
úq_ba£
 + 
	`WM8350_IRQ_GPIO
(
off£t
);

99 
	}
}

101 
gpio_chù
 
	gãm∂©e_chù
 = {

102 .
œbñ
 = "wm8350",

103 .
	gow√r
 = 
THIS_MODULE
,

104 .
	gdúe˘i⁄_öput
 = 
wm8350_gpio_dúe˘i⁄_ö
,

105 .
	ggë
 = 
wm8350_gpio_gë
,

106 .
	gdúe˘i⁄_ouçut
 = 
wm8350_gpio_dúe˘i⁄_out
,

107 .
	g£t
 = 
wm8350_gpio_£t
,

108 .
	gto_úq
 = 
wm8350_gpio_to_úq
,

109 .
	gˇn_¶ìp
 = 1,

112 
	$wm8350_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

114 
wm8350
 *wm8350 = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

115 
wm8350_∂©f‹m_d©a
 *
pd©a
 = 
wm8350
->
dev
->
∂©f‹m_d©a
;

116 
wm8350_gpio_d©a
 *
wm8350_gpio
;

117 
ªt
;

119 
wm8350_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*wm8350_gpio),

120 
GFP_KERNEL
);

121 i‡(
wm8350_gpio
 =
NULL
)

122  -
ENOMEM
;

124 
wm8350_gpio
->
wm8350
 = wm8350;

125 
wm8350_gpio
->
gpio_chù
 = 
ãm∂©e_chù
;

126 
wm8350_gpio
->
gpio_chù
.
ngpio
 = 13;

127 
wm8350_gpio
->
gpio_chù
.
dev
 = &
pdev
->dev;

128 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

129 
wm8350_gpio
->
gpio_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

131 
wm8350_gpio
->
gpio_chù
.
ba£
 = -1;

133 
ªt
 = 
	`gpiochù_add
(&
wm8350_gpio
->
gpio_chù
);

134 i‡(
ªt
 < 0) {

135 
	`dev_îr
(&
pdev
->
dev
, "CouldÇŸÑegi°î gpiochù, %d\n", 
ªt
);

136  
ªt
;

139 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
wm8350_gpio
);

141  
ªt
;

142 
	}
}

144 
	$wm8350_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

146 
wm8350_gpio_d©a
 *
wm8350_gpio
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

148  
	`gpiochù_ªmove
(&
wm8350_gpio
->
gpio_chù
);

149 
	}
}

151 
∂©f‹m_drivî
 
	gwm8350_gpio_drivî
 = {

152 .
drivî
.
«me
 = "wm8350-gpio",

153 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

154 .
	g¥obe
 = 
wm8350_gpio_¥obe
,

155 .
	gªmove
 = 
wm8350_gpio_ªmove
,

158 
__öô
 
	$wm8350_gpio_öô
()

160  
	`∂©f‹m_drivî_ªgi°î
(&
wm8350_gpio_drivî
);

161 
	}
}

162 
subsys_öôˇŒ
(
wm8350_gpio_öô
);

164 
__exô
 
	$wm8350_gpio_exô
()

166 
	`∂©f‹m_drivî_uƒegi°î
(&
wm8350_gpio_drivî
);

167 
	}
}

168 
moduÀ_exô
(
wm8350_gpio_exô
);

170 
MODULE_AUTHOR
("Mark Brown <broonie@opensource.wolfsonmicro.com>");

171 
MODULE_DESCRIPTION
("GPIO interface for WM8350 PMICs");

172 
MODULE_LICENSE
("GPL");

173 
MODULE_ALIAS
("platform:wm8350-gpio");

	@gpio-wm8994.c

15 
	~<löux/kî√l.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/gpio.h
>

19 
	~<löux/mfd/c‹e.h
>

20 
	~<löux/∂©f‹m_devi˚.h
>

21 
	~<löux/£q_fûe.h
>

22 
	~<löux/ªgm≠.h
>

24 
	~<löux/mfd/wm8994/c‹e.h
>

25 
	~<löux/mfd/wm8994/pd©a.h
>

26 
	~<löux/mfd/wm8994/gpio.h
>

27 
	~<löux/mfd/wm8994/ªgi°îs.h
>

29 
	swm8994_gpio
 {

30 
wm8994
 *
	mwm8994
;

31 
gpio_chù
 
	mgpio_chù
;

34 
ölöe
 
wm8994_gpio
 *
	$to_wm8994_gpio
(
gpio_chù
 *
chù
)

36  
	`c⁄èöî_of
(
chù
, 
wm8994_gpio
, 
gpio_chù
);

37 
	}
}

39 
	$wm8994_gpio_ªque°
(
gpio_chù
 *
chù
, 
off£t
)

41 
wm8994_gpio
 *wm8994_gpiÿ
	`to_wm8994_gpio
(
chù
);

42 
wm8994
 *wm8994 = 
wm8994_gpio
->wm8994;

44 
wm8994
->
ty≥
) {

45 
WM8958
:

46 
off£t
) {

52  -
EINVAL
;

60 
	}
}

62 
	$wm8994_gpio_dúe˘i⁄_ö
(
gpio_chù
 *
chù
, 
off£t
)

64 
wm8994_gpio
 *wm8994_gpiÿ
	`to_wm8994_gpio
(
chù
);

65 
wm8994
 *wm8994 = 
wm8994_gpio
->wm8994;

67  
	`wm8994_£t_bôs
(
wm8994
, 
WM8994_GPIO_1
 + 
off£t
,

68 
WM8994_GPN_DIR
, WM8994_GPN_DIR);

69 
	}
}

71 
	$wm8994_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

73 
wm8994_gpio
 *wm8994_gpiÿ
	`to_wm8994_gpio
(
chù
);

74 
wm8994
 *wm8994 = 
wm8994_gpio
->wm8994;

75 
ªt
;

77 
ªt
 = 
	`wm8994_ªg_ªad
(
wm8994
, 
WM8994_GPIO_1
 + 
off£t
);

78 i‡(
ªt
 < 0)

79  
ªt
;

81 i‡(
ªt
 & 
WM8994_GPN_LVL
)

85 
	}
}

87 
	$wm8994_gpio_dúe˘i⁄_out
(
gpio_chù
 *
chù
,

88 
off£t
, 
vÆue
)

90 
wm8994_gpio
 *wm8994_gpiÿ
	`to_wm8994_gpio
(
chù
);

91 
wm8994
 *wm8994 = 
wm8994_gpio
->wm8994;

93 i‡(
vÆue
)

94 
vÆue
 = 
WM8994_GPN_LVL
;

96  
	`wm8994_£t_bôs
(
wm8994
, 
WM8994_GPIO_1
 + 
off£t
,

97 
WM8994_GPN_DIR
 | 
WM8994_GPN_LVL
, 
vÆue
);

98 
	}
}

100 
	$wm8994_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
, 
vÆue
)

102 
wm8994_gpio
 *wm8994_gpiÿ
	`to_wm8994_gpio
(
chù
);

103 
wm8994
 *wm8994 = 
wm8994_gpio
->wm8994;

105 i‡(
vÆue
)

106 
vÆue
 = 
WM8994_GPN_LVL
;

108 
	`wm8994_£t_bôs
(
wm8994
, 
WM8994_GPIO_1
 + 
off£t
, 
WM8994_GPN_LVL
, 
vÆue
);

109 
	}
}

111 
	$wm8994_gpio_to_úq
(
gpio_chù
 *
chù
, 
off£t
)

113 
wm8994_gpio
 *wm8994_gpiÿ
	`to_wm8994_gpio
(
chù
);

114 
wm8994
 *wm8994 = 
wm8994_gpio
->wm8994;

116  
	`ªgm≠_úq_gë_vúq
(
wm8994
->
úq_d©a
, 
off£t
);

117 
	}
}

120 #ifde‡
CONFIG_DEBUG_FS


121 c⁄° *
	$wm8994_gpio_‚
(
u16
 
‚
)

123 
‚
) {

124 
WM8994_GP_FN_PIN_SPECIFIC
:

126 
WM8994_GP_FN_GPIO
:

128 
WM8994_GP_FN_SDOUT
:

130 
WM8994_GP_FN_IRQ
:

132 
WM8994_GP_FN_TEMPERATURE
:

134 
WM8994_GP_FN_MICBIAS1_DET
:

136 
WM8994_GP_FN_MICBIAS1_SHORT
:

138 
WM8994_GP_FN_MICBIAS2_DET
:

140 
WM8994_GP_FN_MICBIAS2_SHORT
:

142 
WM8994_GP_FN_FLL1_LOCK
:

144 
WM8994_GP_FN_FLL2_LOCK
:

146 
WM8994_GP_FN_SRC1_LOCK
:

148 
WM8994_GP_FN_SRC2_LOCK
:

150 
WM8994_GP_FN_DRC1_ACT
:

152 
WM8994_GP_FN_DRC2_ACT
:

154 
WM8994_GP_FN_DRC3_ACT
:

156 
WM8994_GP_FN_WSEQ_STATUS
:

158 
WM8994_GP_FN_FIFO_ERROR
:

160 
WM8994_GP_FN_OPCLK
:

162 
WM8994_GP_FN_THW
:

164 
WM8994_GP_FN_DCS_DONE
:

166 
WM8994_GP_FN_FLL1_OUT
:

168 
WM8994_GP_FN_FLL2_OUT
:

173 
	}
}

175 
	$wm8994_gpio_dbg_show
(
£q_fûe
 *
s
, 
gpio_chù
 *
chù
)

177 
wm8994_gpio
 *wm8994_gpiÿ
	`to_wm8994_gpio
(
chù
);

178 
wm8994
 *wm8994 = 
wm8994_gpio
->wm8994;

179 
i
;

181 
i
 = 0; i < 
chù
->
ngpio
; i++) {

182 
gpio
 = 
i
 + 
chù
->
ba£
;

183 
ªg
;

184 c⁄° *
œbñ
;

191 
œbñ
 = 
	`gpiochù_is_ªque°ed
(
chù
, 
i
);

192 i‡(!
œbñ
)

193 
œbñ
 = "Unrequested";

195 
	`£q_¥ötf
(
s
, " gpio-%-3d (%-20.20sË", 
gpio
, 
œbñ
);

197 
ªg
 = 
	`wm8994_ªg_ªad
(
wm8994
, 
WM8994_GPIO_1
 + 
i
);

198 i‡(
ªg
 < 0) {

199 
	`dev_îr
(
wm8994
->
dev
,

201 
gpio
, 
ªg
);

202 
	`£q_¥ötf
(
s
, "\n");

206 i‡(
ªg
 & 
WM8994_GPN_DIR
)

207 
	`£q_¥ötf
(
s
, "in ");

209 
	`£q_¥ötf
(
s
, "out ");

211 i‡(
ªg
 & 
WM8994_GPN_PU
)

212 
	`£q_¥ötf
(
s
, "pull up ");

214 i‡(
ªg
 & 
WM8994_GPN_PD
)

215 
	`£q_¥ötf
(
s
, "pull down ");

217 i‡(
ªg
 & 
WM8994_GPN_POL
)

218 
	`£q_¥ötf
(
s
, "inverted ");

220 
	`£q_¥ötf
(
s
, "noninverted ");

222 i‡(
ªg
 & 
WM8994_GPN_OP_CFG
)

223 
	`£q_¥ötf
(
s
, "open drain ");

225 
	`£q_¥ötf
(
s
, "CMOS ");

227 
	`£q_¥ötf
(
s
, "%s (%x)\n",

228 
	`wm8994_gpio_‚
(
ªg
 & 
WM8994_GPN_FN_MASK
),Ñeg);

230 
	}
}

232 
	#wm8994_gpio_dbg_show
 
NULL


	)

235 
gpio_chù
 
	gãm∂©e_chù
 = {

236 .
œbñ
 = "wm8994",

237 .
	gow√r
 = 
THIS_MODULE
,

238 .
	gªque°
 = 
wm8994_gpio_ªque°
,

239 .
	gdúe˘i⁄_öput
 = 
wm8994_gpio_dúe˘i⁄_ö
,

240 .
	ggë
 = 
wm8994_gpio_gë
,

241 .
	gdúe˘i⁄_ouçut
 = 
wm8994_gpio_dúe˘i⁄_out
,

242 .
	g£t
 = 
wm8994_gpio_£t
,

243 .
	gto_úq
 = 
wm8994_gpio_to_úq
,

244 .
	gdbg_show
 = 
wm8994_gpio_dbg_show
,

245 .
	gˇn_¶ìp
 = 1,

248 
	$wm8994_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

250 
wm8994
 *wm8994 = 
	`dev_gë_drvd©a
(
pdev
->
dev
.
∑ª¡
);

251 
wm8994_pd©a
 *
pd©a
 = 
wm8994
->
dev
->
∂©f‹m_d©a
;

252 
wm8994_gpio
 *wm8994_gpio;

253 
ªt
;

255 
wm8994_gpio
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*wm8994_gpio),

256 
GFP_KERNEL
);

257 i‡(
wm8994_gpio
 =
NULL
)

258  -
ENOMEM
;

260 
wm8994_gpio
->
wm8994
 = wm8994;

261 
wm8994_gpio
->
gpio_chù
 = 
ãm∂©e_chù
;

262 
wm8994_gpio
->
gpio_chù
.
ngpio
 = 
WM8994_GPIO_MAX
;

263 
wm8994_gpio
->
gpio_chù
.
dev
 = &
pdev
->dev;

264 i‡(
pd©a
 &&Öd©a->
gpio_ba£
)

265 
wm8994_gpio
->
gpio_chù
.
ba£
 = 
pd©a
->
gpio_ba£
;

267 
wm8994_gpio
->
gpio_chù
.
ba£
 = -1;

269 
ªt
 = 
	`gpiochù_add
(&
wm8994_gpio
->
gpio_chù
);

270 i‡(
ªt
 < 0) {

271 
	`dev_îr
(&
pdev
->
dev
, "CouldÇotÑegister gpiochip, %d\n",

272 
ªt
);

273 
îr
;

276 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
wm8994_gpio
);

278  
ªt
;

280 
îr
:

281  
ªt
;

282 
	}
}

284 
	$wm8994_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

286 
wm8994_gpio
 *wm8994_gpiÿ
	`∂©f‹m_gë_drvd©a
(
pdev
);

288  
	`gpiochù_ªmove
(&
wm8994_gpio
->
gpio_chù
);

289 
	}
}

291 
∂©f‹m_drivî
 
	gwm8994_gpio_drivî
 = {

292 .
drivî
.
«me
 = "wm8994-gpio",

293 .
	gdrivî
.
	gow√r
 = 
THIS_MODULE
,

294 .
	g¥obe
 = 
wm8994_gpio_¥obe
,

295 .
	gªmove
 = 
wm8994_gpio_ªmove
,

298 
__öô
 
	$wm8994_gpio_öô
()

300  
	`∂©f‹m_drivî_ªgi°î
(&
wm8994_gpio_drivî
);

301 
	}
}

302 
subsys_öôˇŒ
(
wm8994_gpio_öô
);

304 
__exô
 
	$wm8994_gpio_exô
()

306 
	`∂©f‹m_drivî_uƒegi°î
(&
wm8994_gpio_drivî
);

307 
	}
}

308 
moduÀ_exô
(
wm8994_gpio_exô
);

310 
MODULE_AUTHOR
("Mark Brown <broonie@opensource.wolfsonmicro.com>");

311 
MODULE_DESCRIPTION
("GPIO interface for WM8994");

312 
MODULE_LICENSE
("GPL");

313 
MODULE_ALIAS
("platform:wm8994-gpio");

	@gpio-xilinx.c

15 
	~<löux/öô.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/of_devi˚.h
>

19 
	~<löux/of_∂©f‹m.h
>

20 
	~<löux/of_gpio.h
>

21 
	~<löux/io.h
>

22 
	~<löux/gpio.h
>

23 
	~<löux/¶ab.h
>

26 
	#XGPIO_DATA_OFFSET
 (0x0Ë

	)

27 
	#XGPIO_TRI_OFFSET
 (0x4Ë

	)

29 
	sxgpio_ö°™˚
 {

30 
of_mm_gpio_chù
 
	mmmchù
;

31 
u32
 
	mgpio_°©e
;

32 
u32
 
	mgpio_dú
;

33 
•ölock_t
 
	mgpio_lock
;

44 
	$xgpio_gë
(
gpio_chù
 *
gc
, 
gpio
)

46 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

48  (
	`ö_be32
(
mm_gc
->
ªgs
 + 
XGPIO_DATA_OFFSET
Ë>> 
gpio
) & 1;

49 
	}
}

60 
	$xgpio_£t
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

62 
Êags
;

63 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

64 
xgpio_ö°™˚
 *
chù
 =

65 
	`c⁄èöî_of
(
mm_gc
, 
xgpio_ö°™˚
, 
mmchù
);

67 
	`•ö_lock_úqßve
(&
chù
->
gpio_lock
, 
Êags
);

70 i‡(
vÆ
)

71 
chù
->
gpio_°©e
 |1 << 
gpio
;

73 
chù
->
gpio_°©e
 &~(1 << 
gpio
);

74 
	`out_be32
(
mm_gc
->
ªgs
 + 
XGPIO_DATA_OFFSET
, 
chù
->
gpio_°©e
);

76 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
gpio_lock
, 
Êags
);

77 
	}
}

88 
	$xgpio_dú_ö
(
gpio_chù
 *
gc
, 
gpio
)

90 
Êags
;

91 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

92 
xgpio_ö°™˚
 *
chù
 =

93 
	`c⁄èöî_of
(
mm_gc
, 
xgpio_ö°™˚
, 
mmchù
);

95 
	`•ö_lock_úqßve
(&
chù
->
gpio_lock
, 
Êags
);

98 
chù
->
gpio_dú
 |(1 << 
gpio
);

99 
	`out_be32
(
mm_gc
->
ªgs
 + 
XGPIO_TRI_OFFSET
, 
chù
->
gpio_dú
);

101 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
gpio_lock
, 
Êags
);

104 
	}
}

116 
	$xgpio_dú_out
(
gpio_chù
 *
gc
, 
gpio
, 
vÆ
)

118 
Êags
;

119 
of_mm_gpio_chù
 *
mm_gc
 = 
	`to_of_mm_gpio_chù
(
gc
);

120 
xgpio_ö°™˚
 *
chù
 =

121 
	`c⁄èöî_of
(
mm_gc
, 
xgpio_ö°™˚
, 
mmchù
);

123 
	`•ö_lock_úqßve
(&
chù
->
gpio_lock
, 
Êags
);

126 i‡(
vÆ
)

127 
chù
->
gpio_°©e
 |1 << 
gpio
;

129 
chù
->
gpio_°©e
 &~(1 << 
gpio
);

130 
	`out_be32
(
mm_gc
->
ªgs
 + 
XGPIO_DATA_OFFSET
, 
chù
->
gpio_°©e
);

133 
chù
->
gpio_dú
 &(~(1 << 
gpio
));

134 
	`out_be32
(
mm_gc
->
ªgs
 + 
XGPIO_TRI_OFFSET
, 
chù
->
gpio_dú
);

136 
	`•ö_u∆ock_úqª°‹e
(&
chù
->
gpio_lock
, 
Êags
);

139 
	}
}

145 
	$xgpio_ßve_ªgs
(
of_mm_gpio_chù
 *
mm_gc
)

147 
xgpio_ö°™˚
 *
chù
 =

148 
	`c⁄èöî_of
(
mm_gc
, 
xgpio_ö°™˚
, 
mmchù
);

150 
	`out_be32
(
mm_gc
->
ªgs
 + 
XGPIO_DATA_OFFSET
, 
chù
->
gpio_°©e
);

151 
	`out_be32
(
mm_gc
->
ªgs
 + 
XGPIO_TRI_OFFSET
, 
chù
->
gpio_dú
);

152 
	}
}

162 
	$xgpio_of_¥obe
(
devi˚_node
 *
≈
)

164 
xgpio_ö°™˚
 *
chù
;

165 
°©us
 = 0;

166 c⁄° 
u32
 *
åì_öfo
;

168 
chù
 = 
	`kzÆloc
((*chù), 
GFP_KERNEL
);

169 i‡(!
chù
)

170  -
ENOMEM
;

173 
åì_öfo
 = 
	`of_gë_¥›îty
(
≈
, "x x,dout-deÁu…", 
NULL
);

174 i‡(
åì_öfo
)

175 
chù
->
gpio_°©e
 = 
	`be32_to_˝up
(
åì_öfo
);

178 
chù
->
gpio_dú
 = 0xFFFFFFFF;

179 
åì_öfo
 = 
	`of_gë_¥›îty
(
≈
, "x x,åi-deÁu…", 
NULL
);

180 i‡(
åì_öfo
)

181 
chù
->
gpio_dú
 = 
	`be32_to_˝up
(
åì_öfo
);

184 
chù
->
mmchù
.
gc
.
ngpio
 = 32;

185 
åì_öfo
 = 
	`of_gë_¥›îty
(
≈
, "x x,gpio-width", 
NULL
);

186 i‡(!
åì_öfo
)

187 
åì_öfo
 = 
	`of_gë_¥›îty
(
≈
->
∑ª¡
,

188 "x x,gpio-width", 
NULL
);

189 i‡(
åì_öfo
)

190 
chù
->
mmchù
.
gc
.
ngpio
 = 
	`be32_to_˝up
(
åì_öfo
);

192 
	`•ö_lock_öô
(&
chù
->
gpio_lock
);

194 
chù
->
mmchù
.
gc
.
dúe˘i⁄_öput
 = 
xgpio_dú_ö
;

195 
chù
->
mmchù
.
gc
.
dúe˘i⁄_ouçut
 = 
xgpio_dú_out
;

196 
chù
->
mmchù
.
gc
.
gë
 = 
xgpio_gë
;

197 
chù
->
mmchù
.
gc
.
£t
 = 
xgpio_£t
;

199 
chù
->
mmchù
.
ßve_ªgs
 = 
xgpio_ßve_ªgs
;

202 
°©us
 = 
	`of_mm_gpiochù_add
(
≈
, &
chù
->
mmchù
);

203 i‡(
°©us
) {

204 
	`k‰ì
(
chù
);

205 
	`¥_îr
("%s:Érror inÖrobe function with status %d\n",

206 
≈
->
fuŒ_«me
, 
°©us
);

207  
°©us
;

210 
	}
}

212 
of_devi˚_id
 
	gxgpio_of_m©ch
[] = {

213 { .
com∑tibÀ
 = "xlnx,xps-gpio-1.00.a", },

217 
__öô
 
	$xgpio_öô
()

219 
devi˚_node
 *
≈
;

221 
	`f‹_óch_m©chög_node
(
≈
, 
xgpio_of_m©ch
)

222 
	`xgpio_of_¥obe
(
≈
);

225 
	}
}

228 
subsys_öôˇŒ
(
xgpio_öô
);

231 
MODULE_AUTHOR
("Xilinx, Inc.");

232 
MODULE_DESCRIPTION
("Xilinx GPIO driver");

233 
MODULE_LICENSE
("GPL");

	@gpiolib-acpi.c

13 
	~<löux/î∫o.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/exp‹t.h
>

16 
	~<löux/a˝i_gpio.h
>

17 
	~<löux/a˝i.h
>

18 
	~<löux/öãºu±.h
>

20 
	sa˝i_gpio_evt_pö
 {

21 
li°_hód
 
	mnode
;

22 
a˝i_h™dÀ
 *
	mevt_h™dÀ
;

23 
	mpö
;

24 
	múq
;

27 
	$a˝i_gpiochù_föd
(
gpio_chù
 *
gc
, *
d©a
)

29 i‡(!
gc
->
dev
)

30  
Ál£
;

32  
	`ACPI_HANDLE
(
gc
->
dev
Ë=
d©a
;

33 
	}
}

43 
	$a˝i_gë_gpio
(*
∑th
, 
pö
)

45 
gpio_chù
 *
chù
;

46 
a˝i_h™dÀ
 
h™dÀ
;

47 
a˝i_°©us
 
°©us
;

49 
°©us
 = 
	`a˝i_gë_h™dÀ
(
NULL
, 
∑th
, &
h™dÀ
);

50 i‡(
	`ACPI_FAILURE
(
°©us
))

51  -
ENODEV
;

53 
chù
 = 
	`gpiochù_föd
(
h™dÀ
, 
a˝i_gpiochù_föd
);

54 i‡(!
chù
)

55  -
ENODEV
;

57 i‡(!
	`gpio_is_vÆid
(
chù
->
ba£
 + 
pö
))

58  -
EINVAL
;

60  
chù
->
ba£
 + 
pö
;

61 
	}
}

62 
EXPORT_SYMBOL_GPL
(
a˝i_gë_gpio
);

64 
úqªtu∫_t
 
	$a˝i_gpio_úq_h™dÀr
(
úq
, *
d©a
)

66 
a˝i_h™dÀ
 
h™dÀ
 = 
d©a
;

68 
	`a˝i_evÆu©e_obje˘
(
h™dÀ
, 
NULL
, NULL, NULL);

70  
IRQ_HANDLED
;

71 
	}
}

73 
úqªtu∫_t
 
	$a˝i_gpio_úq_h™dÀr_evt
(
úq
, *
d©a
)

75 
a˝i_gpio_evt_pö
 *
evt_pö
 = 
d©a
;

76 
a˝i_obje˘_li°
 
¨gs
;

77 
a˝i_obje˘
 
¨g
;

79 
¨g
.
ty≥
 = 
ACPI_TYPE_INTEGER
;

80 
¨g
.
öãgî
.
vÆue
 = 
evt_pö
->
pö
;

81 
¨gs
.
cou¡
 = 1;

82 
¨gs
.
poöãr
 = &
¨g
;

84 
	`a˝i_evÆu©e_obje˘
(
evt_pö
->
evt_h™dÀ
, 
NULL
, &
¨gs
, NULL);

86  
IRQ_HANDLED
;

87 
	}
}

89 
	$a˝i_gpio_evt_dh
(
a˝i_h™dÀ
 
h™dÀ
, *
d©a
)

92 
	}
}

104 
	$a˝i_gpiochù_ªque°_öãºu±s
(
gpio_chù
 *
chù
)

106 
a˝i_buf„r
 
buf
 = {
ACPI_ALLOCATE_BUFFER
, 
NULL
};

107 
a˝i_ªsour˚
 *
ªs
;

108 
a˝i_h™dÀ
 
h™dÀ
, 
evt_h™dÀ
;

109 
li°_hód
 *
evt_pös
 = 
NULL
;

110 
a˝i_°©us
 
°©us
;

111 
pö
;

112 
úq
, 
ªt
;

113 
ev_«me
[5];

115 i‡(!
chù
->
dev
 || !chù->
to_úq
)

118 
h™dÀ
 = 
	`ACPI_HANDLE
(
chù
->
dev
);

119 i‡(!
h™dÀ
)

122 
°©us
 = 
	`a˝i_gë_evít_ªsour˚s
(
h™dÀ
, &
buf
);

123 i‡(
	`ACPI_FAILURE
(
°©us
))

126 
°©us
 = 
	`a˝i_gë_h™dÀ
(
h™dÀ
, "_EVT", &
evt_h™dÀ
);

127 i‡(
	`ACPI_SUCCESS
(
°©us
)) {

128 
evt_pös
 = 
	`kzÆloc
((*evt_pös), 
GFP_KERNEL
);

129 i‡(
evt_pös
) {

130 
	`INIT_LIST_HEAD
(
evt_pös
);

131 
°©us
 = 
	`a˝i_©èch_d©a
(
h™dÀ
, 
a˝i_gpio_evt_dh
,

132 
evt_pös
);

133 i‡(
	`ACPI_FAILURE
(
°©us
)) {

134 
	`k‰ì
(
evt_pös
);

135 
evt_pös
 = 
NULL
;

145 
ªs
 = 
buf
.
poöãr
;

146 
ªs
 && (ªs->
ty≥
 !
ACPI_RESOURCE_TYPE_END_TAG
);

147 
ªs
 = 
	`ACPI_NEXT_RESOURCE
(res)) {

148 
úq_h™dÀr_t
 
h™dÀr
 = 
NULL
;

149 *
d©a
;

151 i‡(
ªs
->
ty≥
 !
ACPI_RESOURCE_TYPE_GPIO
 ||

152 
ªs
->
d©a
.
gpio
.
c⁄√˘i⁄_ty≥
 !=

153 
ACPI_RESOURCE_GPIO_TYPE_INT
)

156 
pö
 = 
ªs
->
d©a
.
gpio
.
pö_èbÀ
[0];

157 i‡(
pö
 > 
chù
->
ngpio
)

160 
úq
 = 
chù
->
	`to_úq
(chù, 
pö
);

161 i‡(
úq
 < 0)

164 i‡(
pö
 <= 255) {

165 
a˝i_h™dÀ
 
ev_h™dÀ
;

167 
	`•rötf
(
ev_«me
, "_%c%02X",

168 
ªs
->
d©a
.
gpio
.
åiggîög
 ? 'E' : 'L', 
pö
);

169 
°©us
 = 
	`a˝i_gë_h™dÀ
(
h™dÀ
, 
ev_«me
, &
ev_h™dÀ
);

170 i‡(
	`ACPI_SUCCESS
(
°©us
)) {

171 
h™dÀr
 = 
a˝i_gpio_úq_h™dÀr
;

172 
d©a
 = 
ev_h™dÀ
;

175 i‡(!
h™dÀr
 && 
evt_pös
) {

176 
a˝i_gpio_evt_pö
 *
evt_pö
;

178 
evt_pö
 = 
	`kzÆloc
((*evt_pö), 
GFP_KERNEL
);

179 i‡(!
evt_pö
)

182 
	`li°_add_èû
(&
evt_pö
->
node
, 
evt_pös
);

183 
evt_pö
->
evt_h™dÀ
 =Évt_handle;

184 
evt_pö
->
pö
 =Öin;

185 
evt_pö
->
úq
 = irq;

186 
h™dÀr
 = 
a˝i_gpio_úq_h™dÀr_evt
;

187 
d©a
 = 
evt_pö
;

189 i‡(!
h™dÀr
)

193 
ªt
 = 
	`devm_ªque°_thªaded_úq
(
chù
->
dev
, 
úq
, 
NULL
, 
h™dÀr
,

195 
d©a
);

196 i‡(
ªt
)

197 
	`dev_îr
(
chù
->
dev
,

199 
úq
);

201 
	}
}

202 
EXPORT_SYMBOL
(
a˝i_gpiochù_ªque°_öãºu±s
);

204 
	sa˝i_gpio_lookup
 {

205 
a˝i_gpio_öfo
 
	möfo
;

206 
	mödex
;

207 
	mgpio
;

208 
	mn
;

211 
	$a˝i_föd_gpio
(
a˝i_ªsour˚
 *
¨es
, *
d©a
)

213 
a˝i_gpio_lookup
 *
lookup
 = 
d©a
;

215 i‡(
¨es
->
ty≥
 !
ACPI_RESOURCE_TYPE_GPIO
)

218 i‡(
lookup
->
n
++ =lookup->
ödex
 &&Üookup->
gpio
 < 0) {

219 c⁄° 
a˝i_ªsour˚_gpio
 *
agpio
 = &
¨es
->
d©a
.
gpio
;

221 
lookup
->
gpio
 = 
	`a˝i_gë_gpio
(
agpio
->
ªsour˚_sour˚
.
°rög_±r
,

222 
agpio
->
pö_èbÀ
[0]);

223 
lookup
->
öfo
.
gpioöt
 =

224 
agpio
->
c⁄√˘i⁄_ty≥
 =
ACPI_RESOURCE_GPIO_TYPE_INT
;

228 
	}
}

247 
	$a˝i_gë_gpio_by_ödex
(
devi˚
 *
dev
, 
ödex
,

248 
a˝i_gpio_öfo
 *
öfo
)

250 
a˝i_gpio_lookup
 
lookup
;

251 
li°_hód
 
ªsour˚_li°
;

252 
a˝i_devi˚
 *
adev
;

253 
a˝i_h™dÀ
 
h™dÀ
;

254 
ªt
;

256 i‡(!
dev
)

257  -
EINVAL
;

259 
h™dÀ
 = 
	`ACPI_HANDLE
(
dev
);

260 i‡(!
h™dÀ
 || 
	`a˝i_bus_gë_devi˚
(h™dÀ, &
adev
))

261  -
ENODEV
;

263 
	`mem£t
(&
lookup
, 0, (lookup));

264 
lookup
.
ödex
 = index;

265 
lookup
.
gpio
 = -
ENODEV
;

267 
	`INIT_LIST_HEAD
(&
ªsour˚_li°
);

268 
ªt
 = 
	`a˝i_dev_gë_ªsour˚s
(
adev
, &
ªsour˚_li°
, 
a˝i_föd_gpio
,

269 &
lookup
);

270 i‡(
ªt
 < 0)

271  
ªt
;

273 
	`a˝i_dev_‰ì_ªsour˚_li°
(&
ªsour˚_li°
);

275 i‡(
lookup
.
gpio
 >0 && 
öfo
)

276 *
öfo
 = 
lookup
.info;

278  
lookup
.
gpio
;

279 
	}
}

280 
EXPORT_SYMBOL_GPL
(
a˝i_gë_gpio_by_ödex
);

291 
	$a˝i_gpiochù_‰ì_öãºu±s
(
gpio_chù
 *
chù
)

293 
a˝i_h™dÀ
 
h™dÀ
;

294 
a˝i_°©us
 
°©us
;

295 
li°_hód
 *
evt_pös
;

296 
a˝i_gpio_evt_pö
 *
evt_pö
, *
ï
;

298 i‡(!
chù
->
dev
 || !chù->
to_úq
)

301 
h™dÀ
 = 
	`ACPI_HANDLE
(
chù
->
dev
);

302 i‡(!
h™dÀ
)

305 
°©us
 = 
	`a˝i_gë_d©a
(
h™dÀ
, 
a˝i_gpio_evt_dh
, (**)&
evt_pös
);

306 i‡(
	`ACPI_FAILURE
(
°©us
))

309 
	`li°_f‹_óch_íåy_ß„_ªvî£
(
evt_pö
, 
ï
, 
evt_pös
, 
node
) {

310 
	`devm_‰ì_úq
(
chù
->
dev
, 
evt_pö
->
úq
,Évt_pin);

311 
	`li°_dñ
(&
evt_pö
->
node
);

312 
	`k‰ì
(
evt_pö
);

315 
	`a˝i_dëach_d©a
(
h™dÀ
, 
a˝i_gpio_evt_dh
);

316 
	`k‰ì
(
evt_pös
);

317 
	}
}

318 
EXPORT_SYMBOL
(
a˝i_gpiochù_‰ì_öãºu±s
);

	@gpiolib-of.c

14 
	~<löux/devi˚.h
>

15 
	~<löux/î∫o.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/io.h
>

18 
	~<löux/gpio.h
>

19 
	~<löux/of.h
>

20 
	~<löux/of_addªss.h
>

21 
	~<löux/of_gpio.h
>

22 
	~<löux/pö˘æ/pö˘æ.h
>

23 
	~<löux/¶ab.h
>

26 
	sgg_d©a
 {

27 
of_gpio_Êags
 *
	mÊags
;

28 
of_ph™dÀ_¨gs
 
	mgpio•ec
;

30 
	mout_gpio
;

34 
	$of_gpiochù_föd_™d_xœã
(
gpio_chù
 *
gc
, *
d©a
)

36 
gg_d©a
 *gg_d©®
d©a
;

37 
ªt
;

39 i‡((
gc
->
of_node
 !
gg_d©a
->
gpio•ec
.
≈
) ||

40 (
gc
->
of_gpio_n_˚Œs
 !
gg_d©a
->
gpio•ec
.
¨gs_cou¡
) ||

41 (!
gc
->
of_xœã
))

42  
Ál£
;

44 
ªt
 = 
gc
->
	`of_xœã
(gc, &
gg_d©a
->
gpio•ec
, gg_d©a->
Êags
);

45 i‡(
ªt
 < 0)

46  
Ál£
;

48 
gg_d©a
->
out_gpio
 = 
ªt
 + 
gc
->
ba£
;

49  
åue
;

50 
	}
}

63 
	$of_gë_«med_gpio_Êags
(
devi˚_node
 *
≈
, c⁄° *
¥›«me
,

64 
ödex
, 
of_gpio_Êags
 *
Êags
)

69 
gg_d©a
 gg_d©®{ .
Êags
 = fœgs, .
out_gpio
 = -
EPROBE_DEFER
 };

70 
ªt
;

73 i‡(
Êags
)

74 *
Êags
 = 0;

76 
ªt
 = 
	`of_∑r£_ph™dÀ_wôh_¨gs
(
≈
, 
¥›«me
, "#gpio-˚Œs", 
ödex
,

77 &
gg_d©a
.
gpio•ec
);

78 i‡(
ªt
) {

79 
	`¥_debug
("%s: c™'à∑r£ gpio†¥›îty\n", 
__func__
);

80  
ªt
;

83 
	`gpiochù_föd
(&
gg_d©a
, 
of_gpiochù_föd_™d_xœã
);

85 
	`of_node_put
(
gg_d©a
.
gpio•ec
.
≈
);

86 
	`¥_debug
("%†exôed wôh sètu†%d\n", 
__func__
, 
gg_d©a
.
out_gpio
);

87  
gg_d©a
.
out_gpio
;

88 
	}
}

89 
EXPORT_SYMBOL
(
of_gë_«med_gpio_Êags
);

102 
	$of_gpio_sim∂e_xœã
(
gpio_chù
 *
gc
,

103 c⁄° 
of_ph™dÀ_¨gs
 *
gpio•ec
, 
u32
 *
Êags
)

111 i‡(
gc
->
of_gpio_n_˚Œs
 < 2) {

112 
	`WARN_ON
(1);

113  -
EINVAL
;

116 i‡(
	`WARN_ON
(
gpio•ec
->
¨gs_cou¡
 < 
gc
->
of_gpio_n_˚Œs
))

117  -
EINVAL
;

119 i‡(
gpio•ec
->
¨gs
[0] >
gc
->
ngpio
)

120  -
EINVAL
;

122 i‡(
Êags
)

123 *
Êags
 = 
gpio•ec
->
¨gs
[1];

125  
gpio•ec
->
¨gs
[0];

126 
	}
}

127 
EXPORT_SYMBOL
(
of_gpio_sim∂e_xœã
);

148 
	$of_mm_gpiochù_add
(
devi˚_node
 *
≈
,

149 
of_mm_gpio_chù
 *
mm_gc
)

151 
ªt
 = -
ENOMEM
;

152 
gpio_chù
 *
gc
 = &
mm_gc
->gc;

154 
gc
->
œbñ
 = 
	`k°rdup
(
≈
->
fuŒ_«me
, 
GFP_KERNEL
);

155 i‡(!
gc
->
œbñ
)

156 
îr0
;

158 
mm_gc
->
ªgs
 = 
	`of_iom≠
(
≈
, 0);

159 i‡(!
mm_gc
->
ªgs
)

160 
îr1
;

162 
gc
->
ba£
 = -1;

164 i‡(
mm_gc
->
ßve_ªgs
)

165 
mm_gc
->
	`ßve_ªgs
(mm_gc);

167 
mm_gc
->
gc
.
of_node
 = 
≈
;

169 
ªt
 = 
	`gpiochù_add
(
gc
);

170 i‡(
ªt
)

171 
îr2
;

174 
îr2
:

175 
	`iounm≠
(
mm_gc
->
ªgs
);

176 
îr1
:

177 
	`k‰ì
(
gc
->
œbñ
);

178 
îr0
:

179 
	`¥_îr
("%s: GPIO chipÑegistration failed with status %d\n",

180 
≈
->
fuŒ_«me
, 
ªt
);

181  
ªt
;

182 
	}
}

183 
EXPORT_SYMBOL
(
of_mm_gpiochù_add
);

185 #ifde‡
CONFIG_PINCTRL


186 
	$of_gpiochù_add_pö_ønge
(
gpio_chù
 *
chù
)

188 
devi˚_node
 *
≈
 = 
chù
->
of_node
;

189 
of_ph™dÀ_¨gs
 
pö•ec
;

190 
pö˘æ_dev
 *
p˘ldev
;

191 
ödex
 = 0, 
ªt
;

193 i‡(!
≈
)

196 ;; 
ödex
++) {

197 
ªt
 = 
	`of_∑r£_ph™dÀ_wôh_¨gs
(
≈
, "gpio-ranges",

198 "#gpio-ønge-˚Œs", 
ödex
, &
pö•ec
);

199 i‡(
ªt
)

202 
p˘ldev
 = 
	`of_pö˘æ_gë
(
pö•ec
.
≈
);

203 i‡(!
p˘ldev
)

206 
ªt
 = 
	`gpiochù_add_pö_ønge
(
chù
,

207 
	`pö˘æ_dev_gë_dev«me
(
p˘ldev
),

208 
pö•ec
.
¨gs
[0],

209 
pö•ec
.
¨gs
[1],

210 
pö•ec
.
¨gs
[2]);

212 i‡(
ªt
)

215 
	}
}

218 
	$of_gpiochù_add_pö_ønge
(
gpio_chù
 *
chù
Ë{
	}
}

221 
	$of_gpiochù_add
(
gpio_chù
 *
chù
)

223 i‡((!
chù
->
of_node
Ë&& (chù->
dev
))

224 
chù
->
of_node
 = chù->
dev
->of_node;

226 i‡(!
chù
->
of_node
)

229 i‡(!
chù
->
of_xœã
) {

230 
chù
->
of_gpio_n_˚Œs
 = 2;

231 
chù
->
of_xœã
 = 
of_gpio_sim∂e_xœã
;

234 
	`of_gpiochù_add_pö_ønge
(
chù
);

235 
	`of_node_gë
(
chù
->
of_node
);

236 
	}
}

238 
	$of_gpiochù_ªmove
(
gpio_chù
 *
chù
)

240 
	`gpiochù_ªmove_pö_ønges
(
chù
);

242 i‡(
chù
->
of_node
)

243 
	`of_node_put
(
chù
->
of_node
);

244 
	}
}

	@gpiolib.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/öãºu±.h
>

4 
	~<löux/úq.h
>

5 
	~<löux/•ölock.h
>

6 
	~<löux/li°.h
>

7 
	~<löux/devi˚.h
>

8 
	~<löux/îr.h
>

9 
	~<löux/debugfs.h
>

10 
	~<löux/£q_fûe.h
>

11 
	~<löux/gpio.h
>

12 
	~<löux/of_gpio.h
>

13 
	~<löux/idr.h
>

14 
	~<löux/¶ab.h
>

16 
	#CREATE_TRACE_POINTS


	)

17 
	~<åa˚/evíts/gpio.h
>

38 #ifdef 
DEBUG


39 
	#exåa_checks
 1

	)

41 
	#exåa_checks
 0

	)

48 
DEFINE_SPINLOCK
(
gpio_lock
);

50 
	sgpio_desc
 {

51 
gpio_chù
 *
	mchù
;

52 
	mÊags
;

54 
	#FLAG_REQUESTED
 0

	)

55 
	#FLAG_IS_OUT
 1

	)

56 
	#FLAG_EXPORT
 2

	)

57 
	#FLAG_SYSFS
 3

	)

58 
	#FLAG_TRIG_FALL
 4

	)

59 
	#FLAG_TRIG_RISE
 5

	)

60 
	#FLAG_ACTIVE_LOW
 6

	)

61 
	#FLAG_OPEN_DRAIN
 7

	)

62 
	#FLAG_OPEN_SOURCE
 8

	)

64 
	#ID_SHIFT
 16

	)

66 
	#GPIO_FLAGS_MASK
 ((1 << 
ID_SHIFT
Ë- 1)

	)

67 
	#GPIO_TRIGGER_MASK
 (
	`BIT
(
FLAG_TRIG_FALL
Ë| BIT(
FLAG_TRIG_RISE
))

	)

69 #ifde‡
CONFIG_DEBUG_FS


70 c⁄° *
	mœbñ
;

73 
gpio_desc
 
	ggpio_desc
[
ARCH_NR_GPIOS
];

75 
	#GPIO_OFFSET_VALID
(
chù
, 
off£t
Ë(off£à>0 && off£à< chù->
ngpio
)

	)

77 
LIST_HEAD
(
gpio_chùs
);

79 #ifde‡
CONFIG_GPIO_SYSFS


80 
DEFINE_IDR
(
dúít_idr
);

87 
gpiod_ªque°
(
gpio_desc
 *
desc
, c⁄° *
œbñ
);

88 
gpiod_‰ì
(
gpio_desc
 *
desc
);

89 
gpiod_dúe˘i⁄_öput
(
gpio_desc
 *
desc
);

90 
gpiod_dúe˘i⁄_ouçut
(
gpio_desc
 *
desc
, 
vÆue
);

91 
gpiod_gë_dúe˘i⁄
(c⁄° 
gpio_desc
 *
desc
);

92 
gpiod_£t_deboun˚
(
gpio_desc
 *
desc
, 
deboun˚
);

93 
gpiod_gë_vÆue_ˇn¶ìp
(c⁄° 
gpio_desc
 *
desc
);

94 
gpiod_£t_vÆue_ˇn¶ìp
(
gpio_desc
 *
desc
, 
vÆue
);

95 
gpiod_gë_vÆue
(c⁄° 
gpio_desc
 *
desc
);

96 
gpiod_£t_vÆue
(
gpio_desc
 *
desc
, 
vÆue
);

97 
gpiod_ˇn¶ìp
(c⁄° 
gpio_desc
 *
desc
);

98 
gpiod_to_úq
(c⁄° 
gpio_desc
 *
desc
);

99 
gpiod_exp‹t
(
gpio_desc
 *
desc
, 
boﬁ
 
dúe˘i⁄_may_ch™ge
);

100 
gpiod_exp‹t_lök
(
devi˚
 *
dev
, c⁄° *
«me
,

101 
gpio_desc
 *
desc
);

102 
gpiod_sysfs_£t_a˘ive_low
(
gpio_desc
 *
desc
, 
vÆue
);

103 
gpiod_u√xp‹t
(
gpio_desc
 *
desc
);

106 
ölöe
 
	$desc_£t_œbñ
(
gpio_desc
 *
d
, c⁄° *
œbñ
)

108 #ifde‡
CONFIG_DEBUG_FS


109 
d
->
œbñ
 =Üabel;

111 
	}
}

116 
	$gpio_chù_hwgpio
(c⁄° 
gpio_desc
 *
desc
)

118  
desc
 - &desc->
chù
->desc[0];

119 
	}
}

124 
gpio_desc
 *
	$gpio_to_desc
(
gpio
)

126 i‡(
	`WARN
(!
	`gpio_is_vÆid
(
gpio
), "invalid GPIO %d\n", gpio))

127  
NULL
;

129  &
gpio_desc
[
gpio
];

130 
	}
}

137 
	$desc_to_gpio
(c⁄° 
gpio_desc
 *
desc
)

139  
desc
 - &
gpio_desc
[0];

140 
	}
}

154 
	$gpio_ísuª_ªque°ed
(
gpio_desc
 *
desc
)

156 c⁄° 
gpio_chù
 *
chù
 = 
desc
->chip;

157 c⁄° 
gpio
 = 
	`desc_to_gpio
(
desc
);

159 i‡(
	`WARN
(
	`ã°_™d_£t_bô
(
FLAG_REQUESTED
, &
desc
->
Êags
) == 0,

160 "aut‹eque° GPIO-%d\n", 
gpio
)) {

161 i‡(!
	`åy_moduÀ_gë
(
chù
->
ow√r
)) {

162 
	`¥_îr
("GPIO-%d: moduÀ c™'àbêgŸã¿\n", 
gpio
);

163 
	`˛ór_bô
(
FLAG_REQUESTED
, &
desc
->
Êags
);

165  -
EIO
;

167 
	`desc_£t_œbñ
(
desc
, "[auto]");

169 i‡(
chù
->
ªque°
)

173 
	}
}

175 
gpio_chù
 *
	$gpiod_to_chù
(c⁄° 
gpio_desc
 *
desc
)

177  
desc
 ? desc->
chù
 : 
NULL
;

178 
	}
}

181 
gpio_chù
 *
	$gpio_to_chù
(
gpio
)

183  
	`gpiod_to_chù
(
	`gpio_to_desc
(
gpio
));

184 
	}
}

187 
	$gpiochù_föd_ba£
(
ngpio
)

189 
gpio_chù
 *
chù
;

190 
ba£
 = 
ARCH_NR_GPIOS
 - 
ngpio
;

192 
	`li°_f‹_óch_íåy_ªvî£
(
chù
, &
gpio_chùs
, 
li°
) {

194 i‡(
chù
->
ba£
 + chù->
ngpio
 <= base)

198 
ba£
 = 
chù
->ba£ - 
ngpio
;

201 i‡(
	`gpio_is_vÆid
(
ba£
)) {

202 
	`¥_debug
("%s: foundÇew ba£áà%d\n", 
__func__
, 
ba£
);

203  
ba£
;

205 
	`¥_îr
("%s: c™nŸ föd fªêønge\n", 
__func__
);

206  -
ENOSPC
;

208 
	}
}

211 
	$gpiod_gë_dúe˘i⁄
(c⁄° 
gpio_desc
 *
desc
)

213 
gpio_chù
 *
chù
;

214 
off£t
;

215 
°©us
 = -
EINVAL
;

217 
chù
 = 
	`gpiod_to_chù
(
desc
);

218 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

220 i‡(!
chù
->
gë_dúe˘i⁄
)

221  
°©us
;

223 
°©us
 = 
chù
->
	`gë_dúe˘i⁄
(chù, 
off£t
);

224 i‡(
°©us
 > 0) {

226 
°©us
 = 1;

229 
	`˛ór_bô
(
FLAG_IS_OUT
, &((
gpio_desc
 *)
desc
)->
Êags
);

231 i‡(
°©us
 == 0) {

233 
	`£t_bô
(
FLAG_IS_OUT
, &((
gpio_desc
 *)
desc
)->
Êags
);

235  
°©us
;

236 
	}
}

238 #ifde‡
CONFIG_GPIO_SYSFS


243 
DEFINE_MUTEX
(
sysfs_lock
);

266 
ssize_t
 
	$gpio_dúe˘i⁄_show
(
devi˚
 *
dev
,

267 
devi˚_©åibuã
 *
©å
, *
buf
)

269 c⁄° 
gpio_desc
 *
desc
 = 
	`dev_gë_drvd©a
(
dev
);

270 
ssize_t
 
°©us
;

272 
	`muãx_lock
(&
sysfs_lock
);

274 i‡(!
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
)) {

275 
°©us
 = -
EIO
;

277 
	`gpiod_gë_dúe˘i⁄
(
desc
);

278 
°©us
 = 
	`•rötf
(
buf
, "%s\n",

279 
	`ã°_bô
(
FLAG_IS_OUT
, &
desc
->
Êags
)

283 
	`muãx_u∆ock
(&
sysfs_lock
);

284  
°©us
;

285 
	}
}

287 
ssize_t
 
	$gpio_dúe˘i⁄_°‹e
(
devi˚
 *
dev
,

288 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
size
)

290 
gpio_desc
 *
desc
 = 
	`dev_gë_drvd©a
(
dev
);

291 
ssize_t
 
°©us
;

293 
	`muãx_lock
(&
sysfs_lock
);

295 i‡(!
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
))

296 
°©us
 = -
EIO
;

297 i‡(
	`sysfs_°ªq
(
buf
, "high"))

298 
°©us
 = 
	`gpiod_dúe˘i⁄_ouçut
(
desc
, 1);

299 i‡(
	`sysfs_°ªq
(
buf
, "out") || sysfs_streq(buf, "low"))

300 
°©us
 = 
	`gpiod_dúe˘i⁄_ouçut
(
desc
, 0);

301 i‡(
	`sysfs_°ªq
(
buf
, "in"))

302 
°©us
 = 
	`gpiod_dúe˘i⁄_öput
(
desc
);

304 
°©us
 = -
EINVAL
;

306 
	`muãx_u∆ock
(&
sysfs_lock
);

307  
°©us
 ? : 
size
;

308 
	}
}

310 
DEVICE_ATTR
(
dúe˘i⁄
, 0644,

311 
gpio_dúe˘i⁄_show
, 
gpio_dúe˘i⁄_°‹e
);

313 
ssize_t
 
	$gpio_vÆue_show
(
devi˚
 *
dev
,

314 
devi˚_©åibuã
 *
©å
, *
buf
)

316 
gpio_desc
 *
desc
 = 
	`dev_gë_drvd©a
(
dev
);

317 
ssize_t
 
°©us
;

319 
	`muãx_lock
(&
sysfs_lock
);

321 i‡(!
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
)) {

322 
°©us
 = -
EIO
;

324 
vÆue
;

326 
vÆue
 = !!
	`gpiod_gë_vÆue_ˇn¶ìp
(
desc
);

327 i‡(
	`ã°_bô
(
FLAG_ACTIVE_LOW
, &
desc
->
Êags
))

328 
vÆue
 = !value;

330 
°©us
 = 
	`•rötf
(
buf
, "%d\n", 
vÆue
);

333 
	`muãx_u∆ock
(&
sysfs_lock
);

334  
°©us
;

335 
	}
}

337 
ssize_t
 
	$gpio_vÆue_°‹e
(
devi˚
 *
dev
,

338 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
size
)

340 
gpio_desc
 *
desc
 = 
	`dev_gë_drvd©a
(
dev
);

341 
ssize_t
 
°©us
;

343 
	`muãx_lock
(&
sysfs_lock
);

345 i‡(!
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
))

346 
°©us
 = -
EIO
;

347 i‡(!
	`ã°_bô
(
FLAG_IS_OUT
, &
desc
->
Êags
))

348 
°©us
 = -
EPERM
;

350 
vÆue
;

352 
°©us
 = 
	`°ri˘_°πﬁ
(
buf
, 0, &
vÆue
);

353 i‡(
°©us
 == 0) {

354 i‡(
	`ã°_bô
(
FLAG_ACTIVE_LOW
, &
desc
->
Êags
))

355 
vÆue
 = !value;

356 
	`gpiod_£t_vÆue_ˇn¶ìp
(
desc
, 
vÆue
 != 0);

357 
°©us
 = 
size
;

361 
	`muãx_u∆ock
(&
sysfs_lock
);

362  
°©us
;

363 
	}
}

365 c⁄° 
DEVICE_ATTR
(
vÆue
, 0644,

366 
gpio_vÆue_show
, 
gpio_vÆue_°‹e
);

368 
úqªtu∫_t
 
	$gpio_sysfs_úq
(
úq
, *
¥iv
)

370 
sysfs_dúít
 *
vÆue_sd
 = 
¥iv
;

372 
	`sysfs_nŸify_dúít
(
vÆue_sd
);

373  
IRQ_HANDLED
;

374 
	}
}

376 
	$gpio_£tup_úq
(
gpio_desc
 *
desc
, 
devi˚
 *
dev
,

377 
gpio_Êags
)

379 
sysfs_dúít
 *
vÆue_sd
;

380 
úq_Êags
;

381 
ªt
, 
úq
, 
id
;

383 i‡((
desc
->
Êags
 & 
GPIO_TRIGGER_MASK
Ë=
gpio_Êags
)

386 
úq
 = 
	`gpiod_to_úq
(
desc
);

387 i‡(
úq
 < 0)

388  -
EIO
;

390 
id
 = 
desc
->
Êags
 >> 
ID_SHIFT
;

391 
vÆue_sd
 = 
	`idr_föd
(&
dúít_idr
, 
id
);

392 i‡(
vÆue_sd
)

393 
	`‰ì_úq
(
úq
, 
vÆue_sd
);

395 
desc
->
Êags
 &~
GPIO_TRIGGER_MASK
;

397 i‡(!
gpio_Êags
) {

398 
ªt
 = 0;

399 
‰ì_id
;

402 
úq_Êags
 = 
IRQF_SHARED
;

403 i‡(
	`ã°_bô
(
FLAG_TRIG_FALL
, &
gpio_Êags
))

404 
úq_Êags
 |
	`ã°_bô
(
FLAG_ACTIVE_LOW
, &
desc
->
Êags
) ?

405 
IRQF_TRIGGER_RISING
 : 
IRQF_TRIGGER_FALLING
;

406 i‡(
	`ã°_bô
(
FLAG_TRIG_RISE
, &
gpio_Êags
))

407 
úq_Êags
 |
	`ã°_bô
(
FLAG_ACTIVE_LOW
, &
desc
->
Êags
) ?

408 
IRQF_TRIGGER_FALLING
 : 
IRQF_TRIGGER_RISING
;

410 i‡(!
vÆue_sd
) {

411 
vÆue_sd
 = 
	`sysfs_gë_dúít
(
dev
->
kobj
.
sd
, 
NULL
, "value");

412 i‡(!
vÆue_sd
) {

413 
ªt
 = -
ENODEV
;

414 
îr_out
;

417 
ªt
 = 
	`idr_Æloc
(&
dúít_idr
, 
vÆue_sd
, 1, 0, 
GFP_KERNEL
);

418 i‡(
ªt
 < 0)

419 
‰ì_sd
;

420 
id
 = 
ªt
;

422 
desc
->
Êags
 &
GPIO_FLAGS_MASK
;

423 
desc
->
Êags
 |()
id
 << 
ID_SHIFT
;

425 i‡(
desc
->
Êags
 >> 
ID_SHIFT
 !
id
) {

426 
ªt
 = -
ERANGE
;

427 
‰ì_id
;

431 
ªt
 = 
	`ªque°_™y_c⁄ãxt_úq
(
úq
, 
gpio_sysfs_úq
, 
úq_Êags
,

432 "gpiﬁib", 
vÆue_sd
);

433 i‡(
ªt
 < 0)

434 
‰ì_id
;

436 
desc
->
Êags
 |
gpio_Êags
;

439 
‰ì_id
:

440 
	`idr_ªmove
(&
dúít_idr
, 
id
);

441 
desc
->
Êags
 &
GPIO_FLAGS_MASK
;

442 
‰ì_sd
:

443 i‡(
vÆue_sd
)

444 
	`sysfs_put
(
vÆue_sd
);

445 
îr_out
:

446  
ªt
;

447 
	}
}

450 c⁄° *
	m«me
;

451 
	mÊags
;

452 } 
	gåiggî_ty≥s
[] = {

454 { "ÁŒög", 
BIT
(
FLAG_TRIG_FALL
) },

455 { "risög", 
BIT
(
FLAG_TRIG_RISE
) },

456 { "bŸh", 
BIT
(
FLAG_TRIG_FALL
Ë| BIT(
FLAG_TRIG_RISE
) },

459 
ssize_t
 
	$gpio_edge_show
(
devi˚
 *
dev
,

460 
devi˚_©åibuã
 *
©å
, *
buf
)

462 c⁄° 
gpio_desc
 *
desc
 = 
	`dev_gë_drvd©a
(
dev
);

463 
ssize_t
 
°©us
;

465 
	`muãx_lock
(&
sysfs_lock
);

467 i‡(!
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
))

468 
°©us
 = -
EIO
;

470 
i
;

472 
°©us
 = 0;

473 
i
 = 0; i < 
	`ARRAY_SIZE
(
åiggî_ty≥s
); i++)

474 i‡((
desc
->
Êags
 & 
GPIO_TRIGGER_MASK
)

475 =
åiggî_ty≥s
[
i
].
Êags
) {

476 
°©us
 = 
	`•rötf
(
buf
, "%s\n",

477 
åiggî_ty≥s
[
i
].
«me
);

482 
	`muãx_u∆ock
(&
sysfs_lock
);

483  
°©us
;

484 
	}
}

486 
ssize_t
 
	$gpio_edge_°‹e
(
devi˚
 *
dev
,

487 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
size
)

489 
gpio_desc
 *
desc
 = 
	`dev_gë_drvd©a
(
dev
);

490 
ssize_t
 
°©us
;

491 
i
;

493 
i
 = 0; i < 
	`ARRAY_SIZE
(
åiggî_ty≥s
); i++)

494 i‡(
	`sysfs_°ªq
(
åiggî_ty≥s
[
i
].
«me
, 
buf
))

495 
found
;

496  -
EINVAL
;

498 
found
:

499 
	`muãx_lock
(&
sysfs_lock
);

501 i‡(!
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
))

502 
°©us
 = -
EIO
;

504 
°©us
 = 
	`gpio_£tup_úq
(
desc
, 
dev
, 
åiggî_ty≥s
[
i
].
Êags
);

505 i‡(!
°©us
)

506 
°©us
 = 
size
;

509 
	`muãx_u∆ock
(&
sysfs_lock
);

511  
°©us
;

512 
	}
}

514 
DEVICE_ATTR
(
edge
, 0644, 
gpio_edge_show
, 
gpio_edge_°‹e
);

516 
	$sysfs_£t_a˘ive_low
(
gpio_desc
 *
desc
, 
devi˚
 *
dev
,

517 
vÆue
)

519 
°©us
 = 0;

521 i‡(!!
	`ã°_bô
(
FLAG_ACTIVE_LOW
, &
desc
->
Êags
Ë=!!
vÆue
)

524 i‡(
vÆue
)

525 
	`£t_bô
(
FLAG_ACTIVE_LOW
, &
desc
->
Êags
);

527 
	`˛ór_bô
(
FLAG_ACTIVE_LOW
, &
desc
->
Êags
);

530 i‡(
dev
 !
NULL
 && (!!
	`ã°_bô
(
FLAG_TRIG_RISE
, &
desc
->
Êags
) ^

531 !!
	`ã°_bô
(
FLAG_TRIG_FALL
, &
desc
->
Êags
))) {

532 
åiggî_Êags
 = 
desc
->
Êags
 & 
GPIO_TRIGGER_MASK
;

534 
	`gpio_£tup_úq
(
desc
, 
dev
, 0);

535 
°©us
 = 
	`gpio_£tup_úq
(
desc
, 
dev
, 
åiggî_Êags
);

538  
°©us
;

539 
	}
}

541 
ssize_t
 
	$gpio_a˘ive_low_show
(
devi˚
 *
dev
,

542 
devi˚_©åibuã
 *
©å
, *
buf
)

544 c⁄° 
gpio_desc
 *
desc
 = 
	`dev_gë_drvd©a
(
dev
);

545 
ssize_t
 
°©us
;

547 
	`muãx_lock
(&
sysfs_lock
);

549 i‡(!
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
))

550 
°©us
 = -
EIO
;

552 
°©us
 = 
	`•rötf
(
buf
, "%d\n",

553 !!
	`ã°_bô
(
FLAG_ACTIVE_LOW
, &
desc
->
Êags
));

555 
	`muãx_u∆ock
(&
sysfs_lock
);

557  
°©us
;

558 
	}
}

560 
ssize_t
 
	$gpio_a˘ive_low_°‹e
(
devi˚
 *
dev
,

561 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
size
)

563 
gpio_desc
 *
desc
 = 
	`dev_gë_drvd©a
(
dev
);

564 
ssize_t
 
°©us
;

566 
	`muãx_lock
(&
sysfs_lock
);

568 i‡(!
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
)) {

569 
°©us
 = -
EIO
;

571 
vÆue
;

573 
°©us
 = 
	`°ri˘_°πﬁ
(
buf
, 0, &
vÆue
);

574 i‡(
°©us
 == 0)

575 
°©us
 = 
	`sysfs_£t_a˘ive_low
(
desc
, 
dev
, 
vÆue
 != 0);

578 
	`muãx_u∆ock
(&
sysfs_lock
);

580  
°©us
 ? : 
size
;

581 
	}
}

583 c⁄° 
DEVICE_ATTR
(
a˘ive_low
, 0644,

584 
gpio_a˘ive_low_show
, 
gpio_a˘ive_low_°‹e
);

586 c⁄° 
©åibuã
 *
	ggpio_©ås
[] = {

587 &
dev_©å_vÆue
.
©å
,

588 &
dev_©å_a˘ive_low
.
©å
,

589 
NULL
,

592 c⁄° 
©åibuã_group
 
	ggpio_©å_group
 = {

593 .
©ås
 = (
©åibuã
 **Ë
gpio_©ås
,

603 
ssize_t
 
	$chù_ba£_show
(
devi˚
 *
dev
,

604 
devi˚_©åibuã
 *
©å
, *
buf
)

606 c⁄° 
gpio_chù
 *
chù
 = 
	`dev_gë_drvd©a
(
dev
);

608  
	`•rötf
(
buf
, "%d\n", 
chù
->
ba£
);

609 
	}
}

610 
DEVICE_ATTR
(
ba£
, 0444, 
chù_ba£_show
, 
NULL
);

612 
ssize_t
 
	$chù_œbñ_show
(
devi˚
 *
dev
,

613 
devi˚_©åibuã
 *
©å
, *
buf
)

615 c⁄° 
gpio_chù
 *
chù
 = 
	`dev_gë_drvd©a
(
dev
);

617  
	`•rötf
(
buf
, "%s\n", 
chù
->
œbñ
 ? : "");

618 
	}
}

619 
DEVICE_ATTR
(
œbñ
, 0444, 
chù_œbñ_show
, 
NULL
);

621 
ssize_t
 
	$chù_ngpio_show
(
devi˚
 *
dev
,

622 
devi˚_©åibuã
 *
©å
, *
buf
)

624 c⁄° 
gpio_chù
 *
chù
 = 
	`dev_gë_drvd©a
(
dev
);

626  
	`•rötf
(
buf
, "%u\n", 
chù
->
ngpio
);

627 
	}
}

628 
DEVICE_ATTR
(
ngpio
, 0444, 
chù_ngpio_show
, 
NULL
);

630 c⁄° 
©åibuã
 *
	ggpiochù_©ås
[] = {

631 &
dev_©å_ba£
.
©å
,

632 &
dev_©å_œbñ
.
©å
,

633 &
dev_©å_ngpio
.
©å
,

634 
NULL
,

637 c⁄° 
©åibuã_group
 
	ggpiochù_©å_group
 = {

638 .
©ås
 = (
©åibuã
 **Ë
gpiochù_©ås
,

647 
ssize_t
 
	$exp‹t_°‹e
(
˛ass
 *class,

648 
˛ass_©åibuã
 *
©å
,

649 c⁄° *
buf
, 
size_t
 
Àn
)

651 
gpio
;

652 
gpio_desc
 *
desc
;

653 
°©us
;

655 
°©us
 = 
	`°ri˘_°πﬁ
(
buf
, 0, &
gpio
);

656 i‡(
°©us
 < 0)

657 
d⁄e
;

659 
desc
 = 
	`gpio_to_desc
(
gpio
);

661 i‡(!
desc
) {

662 
	`¥_w¨n
("%s: invÆid GPIO %ld\n", 
__func__
, 
gpio
);

663  -
EINVAL
;

671 
°©us
 = 
	`gpiod_ªque°
(
desc
, "sysfs");

672 i‡(
°©us
 < 0) {

673 i‡(
°©us
 =-
EPROBE_DEFER
)

674 
°©us
 = -
ENODEV
;

675 
d⁄e
;

677 
°©us
 = 
	`gpiod_exp‹t
(
desc
, 
åue
);

678 i‡(
°©us
 < 0)

679 
	`gpiod_‰ì
(
desc
);

681 
	`£t_bô
(
FLAG_SYSFS
, &
desc
->
Êags
);

683 
d⁄e
:

684 i‡(
°©us
)

685 
	`¥_debug
("%s: sètu†%d\n", 
__func__
, 
°©us
);

686  
°©us
 ? : 
Àn
;

687 
	}
}

689 
ssize_t
 
	$u√xp‹t_°‹e
(
˛ass
 *class,

690 
˛ass_©åibuã
 *
©å
,

691 c⁄° *
buf
, 
size_t
 
Àn
)

693 
gpio
;

694 
gpio_desc
 *
desc
;

695 
°©us
;

697 
°©us
 = 
	`°ri˘_°πﬁ
(
buf
, 0, &
gpio
);

698 i‡(
°©us
 < 0)

699 
d⁄e
;

701 
desc
 = 
	`gpio_to_desc
(
gpio
);

703 i‡(!
desc
) {

704 
	`¥_w¨n
("%s: invÆid GPIO %ld\n", 
__func__
, 
gpio
);

705  -
EINVAL
;

708 
°©us
 = -
EINVAL
;

714 i‡(
	`ã°_™d_˛ór_bô
(
FLAG_SYSFS
, &
desc
->
Êags
)) {

715 
°©us
 = 0;

716 
	`gpiod_‰ì
(
desc
);

718 
d⁄e
:

719 i‡(
°©us
)

720 
	`¥_debug
("%s: sètu†%d\n", 
__func__
, 
°©us
);

721  
°©us
 ? : 
Àn
;

722 
	}
}

724 
˛ass_©åibuã
 
	ggpio_˛ass_©ås
[] = {

725 
__ATTR
(
exp‹t
, 0200, 
NULL
, 
exp‹t_°‹e
),

726 
__ATTR
(
u√xp‹t
, 0200, 
NULL
, 
u√xp‹t_°‹e
),

727 
__ATTR_NULL
,

730 
˛ass
 
	ggpio_˛ass
 = {

731 .
«me
 = "gpio",

732 .
	gow√r
 = 
THIS_MODULE
,

734 .
	g˛ass_©ås
 = 
gpio_˛ass_©ås
,

753 
	$gpiod_exp‹t
(
gpio_desc
 *
desc
, 
boﬁ
 
dúe˘i⁄_may_ch™ge
)

755 
Êags
;

756 
°©us
;

757 c⁄° *
i⁄ame
 = 
NULL
;

758 
devi˚
 *
dev
;

759 
off£t
;

762 i‡(!
gpio_˛ass
.
p
) {

763 
	`¥_debug
("%s: cÆÀdÅoÿóæy!\n", 
__func__
);

764  -
ENOENT
;

767 i‡(!
desc
) {

768 
	`¥_debug
("%s: invÆid gpiÿdes¸ùt‹\n", 
__func__
);

769  -
EINVAL
;

772 
	`muãx_lock
(&
sysfs_lock
);

774 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

775 i‡(!
	`ã°_bô
(
FLAG_REQUESTED
, &
desc
->
Êags
) ||

776 
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
)) {

777 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

778 
	`¥_debug
("%s: gpio %d unavailable (requested=%d,Éxported=%d)\n",

779 
__func__
, 
	`desc_to_gpio
(
desc
),

780 
	`ã°_bô
(
FLAG_REQUESTED
, &
desc
->
Êags
),

781 
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
));

782 
°©us
 = -
EPERM
;

783 
Áû_u∆ock
;

786 i‡(!
desc
->
chù
->
dúe˘i⁄_öput
 || !desc->chù->
dúe˘i⁄_ouçut
)

787 
dúe˘i⁄_may_ch™ge
 = 
Ál£
;

788 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

790 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

791 i‡(
desc
->
chù
->
«mes
 && desc->chù->«mes[
off£t
])

792 
i⁄ame
 = 
desc
->
chù
->
«mes
[
off£t
];

794 
dev
 = 
	`devi˚_¸óã
(&
gpio_˛ass
, 
desc
->
chù
->dev, 
	`MKDEV
(0, 0),

795 
desc
, 
i⁄ame
 ? ioname : "gpio%u",

796 
	`desc_to_gpio
(
desc
));

797 i‡(
	`IS_ERR
(
dev
)) {

798 
°©us
 = 
	`PTR_ERR
(
dev
);

799 
Áû_u∆ock
;

802 
°©us
 = 
	`sysfs_¸óã_group
(&
dev
->
kobj
, &
gpio_©å_group
);

803 i‡(
°©us
)

804 
Áû_uƒegi°î_devi˚
;

806 i‡(
dúe˘i⁄_may_ch™ge
) {

807 
°©us
 = 
	`devi˚_¸óã_fûe
(
dev
, &
dev_©å_dúe˘i⁄
);

808 i‡(
°©us
)

809 
Áû_uƒegi°î_devi˚
;

812 i‡(
	`gpiod_to_úq
(
desc
Ë>0 && (
dúe˘i⁄_may_ch™ge
 ||

813 !
	`ã°_bô
(
FLAG_IS_OUT
, &
desc
->
Êags
))) {

814 
°©us
 = 
	`devi˚_¸óã_fûe
(
dev
, &
dev_©å_edge
);

815 i‡(
°©us
)

816 
Áû_uƒegi°î_devi˚
;

819 
	`£t_bô
(
FLAG_EXPORT
, &
desc
->
Êags
);

820 
	`muãx_u∆ock
(&
sysfs_lock
);

823 
Áû_uƒegi°î_devi˚
:

824 
	`devi˚_uƒegi°î
(
dev
);

825 
Áû_u∆ock
:

826 
	`muãx_u∆ock
(&
sysfs_lock
);

827 
	`¥_debug
("%s: gpio%d sètu†%d\n", 
__func__
, 
	`desc_to_gpio
(
desc
),

828 
°©us
);

829  
°©us
;

830 
	}
}

832 
	$gpio_exp‹t
(
gpio
, 
boﬁ
 
dúe˘i⁄_may_ch™ge
)

834  
	`gpiod_exp‹t
(
	`gpio_to_desc
(
gpio
), 
dúe˘i⁄_may_ch™ge
);

835 
	}
}

836 
EXPORT_SYMBOL_GPL
(
gpio_exp‹t
);

838 
	$m©ch_exp‹t
(
devi˚
 *
dev
, c⁄° *
d©a
)

840  
	`dev_gë_drvd©a
(
dev
Ë=
d©a
;

841 
	}
}

854 
	$gpiod_exp‹t_lök
(
devi˚
 *
dev
, c⁄° *
«me
,

855 
gpio_desc
 *
desc
)

857 
°©us
 = -
EINVAL
;

859 i‡(!
desc
) {

860 
	`¥_w¨n
("%s: invÆid GPIO\n", 
__func__
);

861  -
EINVAL
;

864 
	`muãx_lock
(&
sysfs_lock
);

866 i‡(
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
)) {

867 
devi˚
 *
tdev
;

869 
tdev
 = 
	`˛ass_föd_devi˚
(&
gpio_˛ass
, 
NULL
, 
desc
, 
m©ch_exp‹t
);

870 i‡(
tdev
 !
NULL
) {

871 
°©us
 = 
	`sysfs_¸óã_lök
(&
dev
->
kobj
, &
tdev
->kobj,

872 
«me
);

874 
°©us
 = -
ENODEV
;

878 
	`muãx_u∆ock
(&
sysfs_lock
);

880 i‡(
°©us
)

881 
	`¥_debug
("%s: gpio%d sètu†%d\n", 
__func__
, 
	`desc_to_gpio
(
desc
),

882 
°©us
);

884  
°©us
;

885 
	}
}

887 
	$gpio_exp‹t_lök
(
devi˚
 *
dev
, c⁄° *
«me
, 
gpio
)

889  
	`gpiod_exp‹t_lök
(
dev
, 
«me
, 
	`gpio_to_desc
(
gpio
));

890 
	}
}

891 
EXPORT_SYMBOL_GPL
(
gpio_exp‹t_lök
);

905 
	$gpiod_sysfs_£t_a˘ive_low
(
gpio_desc
 *
desc
, 
vÆue
)

907 
devi˚
 *
dev
 = 
NULL
;

908 
°©us
 = -
EINVAL
;

910 i‡(!
desc
) {

911 
	`¥_w¨n
("%s: invÆid GPIO\n", 
__func__
);

912  -
EINVAL
;

915 
	`muãx_lock
(&
sysfs_lock
);

917 i‡(
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
)) {

918 
dev
 = 
	`˛ass_föd_devi˚
(&
gpio_˛ass
, 
NULL
, 
desc
, 
m©ch_exp‹t
);

919 i‡(
dev
 =
NULL
) {

920 
°©us
 = -
ENODEV
;

921 
u∆ock
;

925 
°©us
 = 
	`sysfs_£t_a˘ive_low
(
desc
, 
dev
, 
vÆue
);

927 
u∆ock
:

928 
	`muãx_u∆ock
(&
sysfs_lock
);

930 i‡(
°©us
)

931 
	`¥_debug
("%s: gpio%d sètu†%d\n", 
__func__
, 
	`desc_to_gpio
(
desc
),

932 
°©us
);

934  
°©us
;

935 
	}
}

937 
	$gpio_sysfs_£t_a˘ive_low
(
gpio
, 
vÆue
)

939  
	`gpiod_sysfs_£t_a˘ive_low
(
	`gpio_to_desc
(
gpio
), 
vÆue
);

940 
	}
}

941 
EXPORT_SYMBOL_GPL
(
gpio_sysfs_£t_a˘ive_low
);

949 
	$gpiod_u√xp‹t
(
gpio_desc
 *
desc
)

951 
°©us
 = 0;

952 
devi˚
 *
dev
 = 
NULL
;

954 i‡(!
desc
) {

955 
	`¥_w¨n
("%s: invÆid GPIO\n", 
__func__
);

959 
	`muãx_lock
(&
sysfs_lock
);

961 i‡(
	`ã°_bô
(
FLAG_EXPORT
, &
desc
->
Êags
)) {

963 
dev
 = 
	`˛ass_föd_devi˚
(&
gpio_˛ass
, 
NULL
, 
desc
, 
m©ch_exp‹t
);

964 i‡(
dev
) {

965 
	`gpio_£tup_úq
(
desc
, 
dev
, 0);

966 
	`˛ór_bô
(
FLAG_EXPORT
, &
desc
->
Êags
);

968 
°©us
 = -
ENODEV
;

971 
	`muãx_u∆ock
(&
sysfs_lock
);

973 i‡(
dev
) {

974 
	`devi˚_uƒegi°î
(
dev
);

975 
	`put_devi˚
(
dev
);

978 i‡(
°©us
)

979 
	`¥_debug
("%s: gpio%d sètu†%d\n", 
__func__
, 
	`desc_to_gpio
(
desc
),

980 
°©us
);

981 
	}
}

983 
	$gpio_u√xp‹t
(
gpio
)

985 
	`gpiod_u√xp‹t
(
	`gpio_to_desc
(
gpio
));

986 
	}
}

987 
EXPORT_SYMBOL_GPL
(
gpio_u√xp‹t
);

989 
	$gpiochù_exp‹t
(
gpio_chù
 *
chù
)

991 
°©us
;

992 
devi˚
 *
dev
;

999 i‡(!
gpio_˛ass
.
p
)

1003 
	`muãx_lock
(&
sysfs_lock
);

1004 
dev
 = 
	`devi˚_¸óã
(&
gpio_˛ass
, 
chù
->dev, 
	`MKDEV
(0, 0), chip,

1005 "gpiochù%d", 
chù
->
ba£
);

1006 i‡(!
	`IS_ERR
(
dev
)) {

1007 
°©us
 = 
	`sysfs_¸óã_group
(&
dev
->
kobj
,

1008 &
gpiochù_©å_group
);

1010 
°©us
 = 
	`PTR_ERR
(
dev
);

1011 
chù
->
exp‹ãd
 = (
°©us
 == 0);

1012 
	`muãx_u∆ock
(&
sysfs_lock
);

1014 i‡(
°©us
) {

1015 
Êags
;

1016 
gpio
;

1018 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1019 
gpio
 = 0;

1020 
gpio
 < 
chù
->
ngpio
)

1021 
chù
->
desc
[
gpio
++].chù = 
NULL
;

1022 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1024 
	`¥_debug
("%s: chù %†°©u†%d\n", 
__func__
,

1025 
chù
->
œbñ
, 
°©us
);

1028  
°©us
;

1029 
	}
}

1031 
	$gpiochù_u√xp‹t
(
gpio_chù
 *
chù
)

1033 
°©us
;

1034 
devi˚
 *
dev
;

1036 
	`muãx_lock
(&
sysfs_lock
);

1037 
dev
 = 
	`˛ass_föd_devi˚
(&
gpio_˛ass
, 
NULL
, 
chù
, 
m©ch_exp‹t
);

1038 i‡(
dev
) {

1039 
	`put_devi˚
(
dev
);

1040 
	`devi˚_uƒegi°î
(
dev
);

1041 
chù
->
exp‹ãd
 = 0;

1042 
°©us
 = 0;

1044 
°©us
 = -
ENODEV
;

1045 
	`muãx_u∆ock
(&
sysfs_lock
);

1047 i‡(
°©us
)

1048 
	`¥_debug
("%s: chù %†°©u†%d\n", 
__func__
,

1049 
chù
->
œbñ
, 
°©us
);

1050 
	}
}

1052 
__öô
 
	$gpiﬁib_sysfs_öô
()

1054 
°©us
;

1055 
Êags
;

1056 
gpio_chù
 *
chù
;

1058 
°©us
 = 
	`˛ass_ªgi°î
(&
gpio_˛ass
);

1059 i‡(
°©us
 < 0)

1060  
°©us
;

1068 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1069 
	`li°_f‹_óch_íåy
(
chù
, &
gpio_chùs
, 
li°
) {

1070 i‡(!
chù
 || chù->
exp‹ãd
)

1073 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1074 
°©us
 = 
	`gpiochù_exp‹t
(
chù
);

1075 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1077 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1080  
°©us
;

1081 
	}
}

1082 
po°c‹e_öôˇŒ
(
gpiﬁib_sysfs_öô
);

1085 
ölöe
 
	$gpiochù_exp‹t
(
gpio_chù
 *
chù
)

1088 
	}
}

1090 
ölöe
 
	$gpiochù_u√xp‹t
(
gpio_chù
 *
chù
)

1092 
	}
}

1094 
ölöe
 
	$gpiod_exp‹t
(
gpio_desc
 *
desc
,

1095 
boﬁ
 
dúe˘i⁄_may_ch™ge
)

1097  -
ENOSYS
;

1098 
	}
}

1100 
ölöe
 
	$gpiod_exp‹t_lök
(
devi˚
 *
dev
, c⁄° *
«me
,

1101 
gpio_desc
 *
desc
)

1103  -
ENOSYS
;

1104 
	}
}

1106 
ölöe
 
	$gpiod_sysfs_£t_a˘ive_low
(
gpio_desc
 *
desc
, 
vÆue
)

1108  -
ENOSYS
;

1109 
	}
}

1111 
ölöe
 
	$gpiod_u√xp‹t
(
gpio_desc
 *
desc
)

1113 
	}
}

1124 
	$gpiochù_add_to_li°
(
gpio_chù
 *
chù
)

1126 
li°_hód
 *
pos
 = &
gpio_chùs
;

1127 
gpio_chù
 *
_chù
;

1128 
îr
 = 0;

1131 
	`li°_f‹_óch
(
pos
, &
gpio_chùs
) {

1132 
_chù
 = 
	`li°_íåy
(
pos
, 
gpio_chù
, 
li°
);

1134 i‡(
_chù
->
ba£
 >
chù
->ba£ + chù->
ngpio
)

1139 i‡(
pos
 !&
gpio_chùs
 &&Öos->
¥ev
 != &gpio_chips) {

1140 
_chù
 = 
	`li°_íåy
(
pos
->
¥ev
, 
gpio_chù
, 
li°
);

1141 i‡(
_chù
->
ba£
 + _chù->
ngpio
 > 
chù
->base) {

1142 
	`dev_îr
(
chù
->
dev
,

1144 
îr
 = -
EBUSY
;

1148 i‡(!
îr
)

1149 
	`li°_add_èû
(&
chù
->
li°
, 
pos
);

1151  
îr
;

1152 
	}
}

1171 
	$gpiochù_add
(
gpio_chù
 *
chù
)

1173 
Êags
;

1174 
°©us
 = 0;

1175 
id
;

1176 
ba£
 = 
chù
->base;

1178 i‡((!
	`gpio_is_vÆid
(
ba£
Ë|| !gpio_is_vÆid(ba£ + 
chù
->
ngpio
 - 1))

1179 && 
ba£
 >= 0) {

1180 
°©us
 = -
EINVAL
;

1181 
Áû
;

1184 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1186 i‡(
ba£
 < 0) {

1187 
ba£
 = 
	`gpiochù_föd_ba£
(
chù
->
ngpio
);

1188 i‡(
ba£
 < 0) {

1189 
°©us
 = 
ba£
;

1190 
u∆ock
;

1192 
chù
->
ba£
 = base;

1195 
°©us
 = 
	`gpiochù_add_to_li°
(
chù
);

1197 i‡(
°©us
 == 0) {

1198 
chù
->
desc
 = &
gpio_desc
[chù->
ba£
];

1200 
id
 = 0; id < 
chù
->
ngpio
; id++) {

1201 
gpio_desc
 *
desc
 = &
chù
->desc[
id
];

1202 
desc
->
chù
 = chip;

1211 
desc
->
Êags
 = !
chù
->
dúe˘i⁄_öput


1212 ? (1 << 
FLAG_IS_OUT
)

1217 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1219 #ifde‡
CONFIG_PINCTRL


1220 
	`INIT_LIST_HEAD
(&
chù
->
pö_ønges
);

1223 
	`of_gpiochù_add
(
chù
);

1225 i‡(
°©us
)

1226 
Áû
;

1228 
°©us
 = 
	`gpiochù_exp‹t
(
chù
);

1229 i‡(
°©us
)

1230 
Áû
;

1232 
	`¥_debug
("gpiochip_add:Ñegistered GPIOs %dÅo %d on device: %s\n",

1233 
chù
->
ba£
, chù->ba£ + chù->
ngpio
 - 1,

1234 
chù
->
œbñ
 ? : "generic");

1238 
u∆ock
:

1239 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1240 
Áû
:

1242 
	`¥_îr
("gpiochip_add: gpios %d..%d (%s) failedÅoÑegister\n",

1243 
chù
->
ba£
, chù->ba£ + chù->
ngpio
 - 1,

1244 
chù
->
œbñ
 ? : "generic");

1245  
°©us
;

1246 
	}
}

1247 
EXPORT_SYMBOL_GPL
(
gpiochù_add
);

1255 
	$gpiochù_ªmove
(
gpio_chù
 *
chù
)

1257 
Êags
;

1258 
°©us
 = 0;

1259 
id
;

1261 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1263 
	`gpiochù_ªmove_pö_ønges
(
chù
);

1264 
	`of_gpiochù_ªmove
(
chù
);

1266 
id
 = 0; id < 
chù
->
ngpio
; id++) {

1267 i‡(
	`ã°_bô
(
FLAG_REQUESTED
, &
chù
->
desc
[
id
].
Êags
)) {

1268 
°©us
 = -
EBUSY
;

1272 i‡(
°©us
 == 0) {

1273 
id
 = 0; id < 
chù
->
ngpio
; id++)

1274 
chù
->
desc
[
id
].chù = 
NULL
;

1276 
	`li°_dñ
(&
chù
->
li°
);

1279 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1281 i‡(
°©us
 == 0)

1282 
	`gpiochù_u√xp‹t
(
chù
);

1284  
°©us
;

1285 
	}
}

1286 
EXPORT_SYMBOL_GPL
(
gpiochù_ªmove
);

1299 
gpio_chù
 *
gpiochù_föd
(*
d©a
,

1300 (*
m©ch
)(
gpio_chù
 *
chù
,

1301 *
d©a
))

1303 
gpio_chù
 *
chù
;

1304 
Êags
;

1306 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1307 
	`li°_f‹_óch_íåy
(
chù
, &
gpio_chùs
, 
li°
)

1308 i‡(
	`m©ch
(
chù
, 
d©a
))

1312 i‡(&
chù
->
li°
 =&
gpio_chùs
)

1313 
chù
 = 
NULL
;

1314 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1316  
chù
;

1317 
	}
}

1318 
EXPORT_SYMBOL_GPL
(
gpiochù_föd
);

1320 #ifde‡
CONFIG_PINCTRL


1331 
	$gpiochù_add_pö_ønge
(
gpio_chù
 *
chù
, c⁄° *
pö˘l_«me
,

1332 
gpio_off£t
, 
pö_off£t
,

1333 
≈ös
)

1335 
gpio_pö_ønge
 *
pö_ønge
;

1336 
ªt
;

1338 
pö_ønge
 = 
	`kzÆloc
((*pö_ønge), 
GFP_KERNEL
);

1339 i‡(!
pö_ønge
) {

1340 
	`¥_îr
("%s: GPIO chip: failedÅoállocateÖinÑanges\n",

1341 
chù
->
œbñ
);

1342  -
ENOMEM
;

1346 
pö_ønge
->
ønge
.
id
 = 
gpio_off£t
;

1347 
pö_ønge
->
ønge
.
gc
 = 
chù
;

1348 
pö_ønge
->
ønge
.
«me
 = 
chù
->
œbñ
;

1349 
pö_ønge
->
ønge
.
ba£
 = 
chù
->ba£ + 
gpio_off£t
;

1350 
pö_ønge
->
ønge
.
pö_ba£
 = 
pö_off£t
;

1351 
pö_ønge
->
ønge
.
≈ös
 =Çpins;

1352 
pö_ønge
->
p˘ldev
 = 
	`pö˘æ_föd_™d_add_gpio_ønge
(
pö˘l_«me
,

1353 &
pö_ønge
->
ønge
);

1354 i‡(
	`IS_ERR
(
pö_ønge
->
p˘ldev
)) {

1355 
ªt
 = 
	`PTR_ERR
(
pö_ønge
->
p˘ldev
);

1356 
	`¥_îr
("%s: GPIO chip: couldÇot createÖinÑange\n",

1357 
chù
->
œbñ
);

1358 
	`k‰ì
(
pö_ønge
);

1359  
ªt
;

1361 
	`¥_debug
("GPIO chip %s: created GPIOÑange %d->%d ==> %s PIN %d->%d\n",

1362 
chù
->
œbñ
, 
gpio_off£t
, gpio_off£à+ 
≈ös
 - 1,

1363 
pö˘l_«me
,

1364 
pö_off£t
,Öö_off£à+ 
≈ös
 - 1);

1366 
	`li°_add_èû
(&
pö_ønge
->
node
, &
chù
->
pö_ønges
);

1369 
	}
}

1370 
EXPORT_SYMBOL_GPL
(
gpiochù_add_pö_ønge
);

1376 
	$gpiochù_ªmove_pö_ønges
(
gpio_chù
 *
chù
)

1378 
gpio_pö_ønge
 *
pö_ønge
, *
tmp
;

1380 
	`li°_f‹_óch_íåy_ß„
(
pö_ønge
, 
tmp
, &
chù
->
pö_ønges
, 
node
) {

1381 
	`li°_dñ
(&
pö_ønge
->
node
);

1382 
	`pö˘æ_ªmove_gpio_ønge
(
pö_ønge
->
p˘ldev
,

1383 &
pö_ønge
->
ønge
);

1384 
	`k‰ì
(
pö_ønge
);

1386 
	}
}

1387 
EXPORT_SYMBOL_GPL
(
gpiochù_ªmove_pö_ønges
);

1395 
	$gpiod_ªque°
(
gpio_desc
 *
desc
, c⁄° *
œbñ
)

1397 
gpio_chù
 *
chù
;

1398 
°©us
 = -
EPROBE_DEFER
;

1399 
Êags
;

1401 i‡(!
desc
) {

1402 
	`¥_w¨n
("%s: invÆid GPIO\n", 
__func__
);

1403  -
EINVAL
;

1406 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1408 
chù
 = 
desc
->chip;

1409 i‡(
chù
 =
NULL
)

1410 
d⁄e
;

1412 i‡(!
	`åy_moduÀ_gë
(
chù
->
ow√r
))

1413 
d⁄e
;

1419 i‡(
	`ã°_™d_£t_bô
(
FLAG_REQUESTED
, &
desc
->
Êags
) == 0) {

1420 
	`desc_£t_œbñ
(
desc
, 
œbñ
 ? : "?");

1421 
°©us
 = 0;

1423 
°©us
 = -
EBUSY
;

1424 
	`moduÀ_put
(
chù
->
ow√r
);

1425 
d⁄e
;

1428 i‡(
chù
->
ªque°
) {

1430 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1431 
°©us
 = 
chù
->
	`ªque°
(chù, 
	`gpio_chù_hwgpio
(
desc
));

1432 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1434 i‡(
°©us
 < 0) {

1435 
	`desc_£t_œbñ
(
desc
, 
NULL
);

1436 
	`moduÀ_put
(
chù
->
ow√r
);

1437 
	`˛ór_bô
(
FLAG_REQUESTED
, &
desc
->
Êags
);

1438 
d⁄e
;

1441 i‡(
chù
->
gë_dúe˘i⁄
) {

1443 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1444 
	`gpiod_gë_dúe˘i⁄
(
desc
);

1445 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1447 
d⁄e
:

1448 i‡(
°©us
)

1449 
	`¥_debug
("_gpio_request: gpio-%d (%s) status %d\n",

1450 
	`desc_to_gpio
(
desc
), 
œbñ
 ? : "?", 
°©us
);

1451 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1452  
°©us
;

1453 
	}
}

1455 
	$gpio_ªque°
(
gpio
, c⁄° *
œbñ
)

1457  
	`gpiod_ªque°
(
	`gpio_to_desc
(
gpio
), 
œbñ
);

1458 
	}
}

1459 
EXPORT_SYMBOL_GPL
(
gpio_ªque°
);

1461 
	$gpiod_‰ì
(
gpio_desc
 *
desc
)

1463 
Êags
;

1464 
gpio_chù
 *
chù
;

1466 
	`might_¶ìp
();

1468 i‡(!
desc
) {

1469 
	`WARN_ON
(
exåa_checks
);

1473 
	`gpiod_u√xp‹t
(
desc
);

1475 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1477 
chù
 = 
desc
->chip;

1478 i‡(
chù
 && 
	`ã°_bô
(
FLAG_REQUESTED
, &
desc
->
Êags
)) {

1479 i‡(
chù
->
‰ì
) {

1480 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1481 
	`might_¶ìp_if
(
chù
->
ˇn_¶ìp
);

1482 
chù
->
	`‰ì
(chù, 
	`gpio_chù_hwgpio
(
desc
));

1483 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1485 
	`desc_£t_œbñ
(
desc
, 
NULL
);

1486 
	`moduÀ_put
(
desc
->
chù
->
ow√r
);

1487 
	`˛ór_bô
(
FLAG_ACTIVE_LOW
, &
desc
->
Êags
);

1488 
	`˛ór_bô
(
FLAG_REQUESTED
, &
desc
->
Êags
);

1489 
	`˛ór_bô
(
FLAG_OPEN_DRAIN
, &
desc
->
Êags
);

1490 
	`˛ór_bô
(
FLAG_OPEN_SOURCE
, &
desc
->
Êags
);

1492 
	`WARN_ON
(
exåa_checks
);

1494 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1495 
	}
}

1497 
	$gpio_‰ì
(
gpio
)

1499 
	`gpiod_‰ì
(
	`gpio_to_desc
(
gpio
));

1500 
	}
}

1501 
EXPORT_SYMBOL_GPL
(
gpio_‰ì
);

1509 
	$gpio_ªque°_⁄e
(
gpio
, 
Êags
, c⁄° *
œbñ
)

1511 
gpio_desc
 *
desc
;

1512 
îr
;

1514 
desc
 = 
	`gpio_to_desc
(
gpio
);

1516 
îr
 = 
	`gpiod_ªque°
(
desc
, 
œbñ
);

1517 i‡(
îr
)

1518  
îr
;

1520 i‡(
Êags
 & 
GPIOF_OPEN_DRAIN
)

1521 
	`£t_bô
(
FLAG_OPEN_DRAIN
, &
desc
->
Êags
);

1523 i‡(
Êags
 & 
GPIOF_OPEN_SOURCE
)

1524 
	`£t_bô
(
FLAG_OPEN_SOURCE
, &
desc
->
Êags
);

1526 i‡(
Êags
 & 
GPIOF_DIR_IN
)

1527 
îr
 = 
	`gpiod_dúe˘i⁄_öput
(
desc
);

1529 
îr
 = 
	`gpiod_dúe˘i⁄_ouçut
(
desc
,

1530 (
Êags
 & 
GPIOF_INIT_HIGH
) ? 1 : 0);

1532 i‡(
îr
)

1533 
‰ì_gpio
;

1535 i‡(
Êags
 & 
GPIOF_EXPORT
) {

1536 
îr
 = 
	`gpiod_exp‹t
(
desc
, 
Êags
 & 
GPIOF_EXPORT_CHANGEABLE
);

1537 i‡(
îr
)

1538 
‰ì_gpio
;

1543 
‰ì_gpio
:

1544 
	`gpiod_‰ì
(
desc
);

1545  
îr
;

1546 
	}
}

1547 
EXPORT_SYMBOL_GPL
(
gpio_ªque°_⁄e
);

1554 
	$gpio_ªque°_¨øy
(c⁄° 
gpio
 *
¨øy
, 
size_t
 
num
)

1556 
i
, 
îr
;

1558 
i
 = 0; i < 
num
; i++, 
¨øy
++) {

1559 
îr
 = 
	`gpio_ªque°_⁄e
(
¨øy
->
gpio
,áºay->
Êags
,áºay->
œbñ
);

1560 i‡(
îr
)

1561 
îr_‰ì
;

1565 
îr_‰ì
:

1566 
i
--)

1567 
	`gpio_‰ì
((--
¨øy
)->
gpio
);

1568  
îr
;

1569 
	}
}

1570 
EXPORT_SYMBOL_GPL
(
gpio_ªque°_¨øy
);

1577 
	$gpio_‰ì_¨øy
(c⁄° 
gpio
 *
¨øy
, 
size_t
 
num
)

1579 
num
--)

1580 
	`gpio_‰ì
((
¨øy
++)->
gpio
);

1581 
	}
}

1582 
EXPORT_SYMBOL_GPL
(
gpio_‰ì_¨øy
);

1597 c⁄° *
	$gpiochù_is_ªque°ed
(
gpio_chù
 *
chù
, 
off£t
)

1599 
gpio_desc
 *
desc
;

1601 i‡(!
	`GPIO_OFFSET_VALID
(
chù
, 
off£t
))

1602  
NULL
;

1604 
desc
 = &
chù
->desc[
off£t
];

1606 i‡(
	`ã°_bô
(
FLAG_REQUESTED
, &
desc
->
Êags
) == 0)

1607  
NULL
;

1608 #ifde‡
CONFIG_DEBUG_FS


1609  
desc
->
œbñ
;

1613 
	}
}

1614 
EXPORT_SYMBOL_GPL
(
gpiochù_is_ªque°ed
);

1626 
	$gpiod_dúe˘i⁄_öput
(
gpio_desc
 *
desc
)

1628 
Êags
;

1629 
gpio_chù
 *
chù
;

1630 
°©us
 = -
EINVAL
;

1631 
off£t
;

1633 i‡(!
desc
) {

1634 
	`¥_w¨n
("%s: invÆid GPIO\n", 
__func__
);

1635  -
EINVAL
;

1638 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1640 
chù
 = 
desc
->chip;

1641 i‡(!
chù
 || !chù->
gë
 || !chù->
dúe˘i⁄_öput
)

1642 
Áû
;

1643 
°©us
 = 
	`gpio_ísuª_ªque°ed
(
desc
);

1644 i‡(
°©us
 < 0)

1645 
Áû
;

1649 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1651 
	`might_¶ìp_if
(
chù
->
ˇn_¶ìp
);

1653 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

1654 i‡(
°©us
) {

1655 
°©us
 = 
chù
->
	`ªque°
(chù, 
off£t
);

1656 i‡(
°©us
 < 0) {

1657 
	`¥_debug
("GPIO-%d: chipÑequest fail, %d\n",

1658 
	`desc_to_gpio
(
desc
), 
°©us
);

1662 
lo£
;

1666 
°©us
 = 
chù
->
	`dúe˘i⁄_öput
(chù, 
off£t
);

1667 i‡(
°©us
 == 0)

1668 
	`˛ór_bô
(
FLAG_IS_OUT
, &
desc
->
Êags
);

1670 
	`åa˚_gpio_dúe˘i⁄
(
	`desc_to_gpio
(
desc
), 1, 
°©us
);

1671 
lo£
:

1672  
°©us
;

1673 
Áû
:

1674 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1675 i‡(
°©us
)

1676 
	`¥_debug
("%s: gpio-%d sètu†%d\n", 
__func__
,

1677 
	`desc_to_gpio
(
desc
), 
°©us
);

1678  
°©us
;

1679 
	}
}

1681 
	$gpio_dúe˘i⁄_öput
(
gpio
)

1683  
	`gpiod_dúe˘i⁄_öput
(
	`gpio_to_desc
(
gpio
));

1684 
	}
}

1685 
EXPORT_SYMBOL_GPL
(
gpio_dúe˘i⁄_öput
);

1687 
	$gpiod_dúe˘i⁄_ouçut
(
gpio_desc
 *
desc
, 
vÆue
)

1689 
Êags
;

1690 
gpio_chù
 *
chù
;

1691 
°©us
 = -
EINVAL
;

1692 
off£t
;

1694 i‡(!
desc
) {

1695 
	`¥_w¨n
("%s: invÆid GPIO\n", 
__func__
);

1696  -
EINVAL
;

1700 i‡(
vÆue
 && 
	`ã°_bô
(
FLAG_OPEN_DRAIN
, &
desc
->
Êags
))

1701  
	`gpiod_dúe˘i⁄_öput
(
desc
);

1704 i‡(!
vÆue
 && 
	`ã°_bô
(
FLAG_OPEN_SOURCE
, &
desc
->
Êags
))

1705  
	`gpiod_dúe˘i⁄_öput
(
desc
);

1707 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1709 
chù
 = 
desc
->chip;

1710 i‡(!
chù
 || !chù->
£t
 || !chù->
dúe˘i⁄_ouçut
)

1711 
Áû
;

1712 
°©us
 = 
	`gpio_ísuª_ªque°ed
(
desc
);

1713 i‡(
°©us
 < 0)

1714 
Áû
;

1718 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1720 
	`might_¶ìp_if
(
chù
->
ˇn_¶ìp
);

1722 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

1723 i‡(
°©us
) {

1724 
°©us
 = 
chù
->
	`ªque°
(chù, 
off£t
);

1725 i‡(
°©us
 < 0) {

1726 
	`¥_debug
("GPIO-%d: chipÑequest fail, %d\n",

1727 
	`desc_to_gpio
(
desc
), 
°©us
);

1731 
lo£
;

1735 
°©us
 = 
chù
->
	`dúe˘i⁄_ouçut
(chù, 
off£t
, 
vÆue
);

1736 i‡(
°©us
 == 0)

1737 
	`£t_bô
(
FLAG_IS_OUT
, &
desc
->
Êags
);

1738 
	`åa˚_gpio_vÆue
(
	`desc_to_gpio
(
desc
), 0, 
vÆue
);

1739 
	`åa˚_gpio_dúe˘i⁄
(
	`desc_to_gpio
(
desc
), 0, 
°©us
);

1740 
lo£
:

1741  
°©us
;

1742 
Áû
:

1743 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1744 i‡(
°©us
)

1745 
	`¥_debug
("%s: gpio-%d sètu†%d\n", 
__func__
,

1746 
	`desc_to_gpio
(
desc
), 
°©us
);

1747  
°©us
;

1748 
	}
}

1750 
	$gpio_dúe˘i⁄_ouçut
(
gpio
, 
vÆue
)

1752  
	`gpiod_dúe˘i⁄_ouçut
(
	`gpio_to_desc
(
gpio
), 
vÆue
);

1753 
	}
}

1754 
EXPORT_SYMBOL_GPL
(
gpio_dúe˘i⁄_ouçut
);

1761 
	$gpiod_£t_deboun˚
(
gpio_desc
 *
desc
, 
deboun˚
)

1763 
Êags
;

1764 
gpio_chù
 *
chù
;

1765 
°©us
 = -
EINVAL
;

1766 
off£t
;

1768 i‡(!
desc
) {

1769 
	`¥_w¨n
("%s: invÆid GPIO\n", 
__func__
);

1770  -
EINVAL
;

1773 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

1775 
chù
 = 
desc
->chip;

1776 i‡(!
chù
 || !chù->
£t
 || !chù->
£t_deboun˚
)

1777 
Áû
;

1779 
°©us
 = 
	`gpio_ísuª_ªque°ed
(
desc
);

1780 i‡(
°©us
 < 0)

1781 
Áû
;

1785 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1787 
	`might_¶ìp_if
(
chù
->
ˇn_¶ìp
);

1789 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

1790  
chù
->
	`£t_deboun˚
(chù, 
off£t
, 
deboun˚
);

1792 
Áû
:

1793 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

1794 i‡(
°©us
)

1795 
	`¥_debug
("%s: gpio-%d sètu†%d\n", 
__func__
,

1796 
	`desc_to_gpio
(
desc
), 
°©us
);

1798  
°©us
;

1799 
	}
}

1801 
	$gpio_£t_deboun˚
(
gpio
, 
deboun˚
)

1803  
	`gpiod_£t_deboun˚
(
	`gpio_to_desc
(
gpio
), 
deboun˚
);

1804 
	}
}

1805 
EXPORT_SYMBOL_GPL
(
gpio_£t_deboun˚
);

1838 
	$gpiod_gë_vÆue
(c⁄° 
gpio_desc
 *
desc
)

1840 
gpio_chù
 *
chù
;

1841 
vÆue
;

1842 
off£t
;

1844 i‡(!
desc
)

1846 
chù
 = 
desc
->chip;

1847 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

1849 
	`WARN_ON
(
chù
->
ˇn_¶ìp
);

1850 
vÆue
 = 
chù
->
gë
 ? chù->
	`gë
(chù, 
off£t
) : 0;

1851 
	`åa˚_gpio_vÆue
(
	`desc_to_gpio
(
desc
), 1, 
vÆue
);

1852  
vÆue
;

1853 
	}
}

1855 
	$__gpio_gë_vÆue
(
gpio
)

1857  
	`gpiod_gë_vÆue
(
	`gpio_to_desc
(
gpio
));

1858 
	}
}

1859 
EXPORT_SYMBOL_GPL
(
__gpio_gë_vÆue
);

1867 
	$_gpio_£t_›í_døö_vÆue
(
gpio_desc
 *
desc
, 
vÆue
)

1869 
îr
 = 0;

1870 
gpio_chù
 *
chù
 = 
desc
->chip;

1871 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

1873 i‡(
vÆue
) {

1874 
îr
 = 
chù
->
	`dúe˘i⁄_öput
(chù, 
off£t
);

1875 i‡(!
îr
)

1876 
	`˛ór_bô
(
FLAG_IS_OUT
, &
desc
->
Êags
);

1878 
îr
 = 
chù
->
	`dúe˘i⁄_ouçut
(chù, 
off£t
, 0);

1879 i‡(!
îr
)

1880 
	`£t_bô
(
FLAG_IS_OUT
, &
desc
->
Êags
);

1882 
	`åa˚_gpio_dúe˘i⁄
(
	`desc_to_gpio
(
desc
), 
vÆue
, 
îr
);

1883 i‡(
îr
 < 0)

1884 
	`¥_îr
("%s: Error in set_value for open drain gpio%dÉrr %d\n",

1885 
__func__
, 
	`desc_to_gpio
(
desc
), 
îr
);

1886 
	}
}

1894 
	$_gpio_£t_›í_sour˚_vÆue
(
gpio_desc
 *
desc
, 
vÆue
)

1896 
îr
 = 0;

1897 
gpio_chù
 *
chù
 = 
desc
->chip;

1898 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

1900 i‡(
vÆue
) {

1901 
îr
 = 
chù
->
	`dúe˘i⁄_ouçut
(chù, 
off£t
, 1);

1902 i‡(!
îr
)

1903 
	`£t_bô
(
FLAG_IS_OUT
, &
desc
->
Êags
);

1905 
îr
 = 
chù
->
	`dúe˘i⁄_öput
(chù, 
off£t
);

1906 i‡(!
îr
)

1907 
	`˛ór_bô
(
FLAG_IS_OUT
, &
desc
->
Êags
);

1909 
	`åa˚_gpio_dúe˘i⁄
(
	`desc_to_gpio
(
desc
), !
vÆue
, 
îr
);

1910 i‡(
îr
 < 0)

1911 
	`¥_îr
("%s: Error in set_value for open source gpio%dÉrr %d\n",

1912 
__func__
, 
	`desc_to_gpio
(
desc
), 
îr
);

1913 
	}
}

1924 
	$gpiod_£t_vÆue
(
gpio_desc
 *
desc
, 
vÆue
)

1926 
gpio_chù
 *
chù
;

1928 i‡(!
desc
)

1930 
chù
 = 
desc
->chip;

1932 
	`WARN_ON
(
chù
->
ˇn_¶ìp
);

1933 
	`åa˚_gpio_vÆue
(
	`desc_to_gpio
(
desc
), 0, 
vÆue
);

1934 i‡(
	`ã°_bô
(
FLAG_OPEN_DRAIN
, &
desc
->
Êags
))

1935 
	`_gpio_£t_›í_døö_vÆue
(
desc
, 
vÆue
);

1936 i‡(
	`ã°_bô
(
FLAG_OPEN_SOURCE
, &
desc
->
Êags
))

1937 
	`_gpio_£t_›í_sour˚_vÆue
(
desc
, 
vÆue
);

1939 
chù
->
	`£t
(chù, 
	`gpio_chù_hwgpio
(
desc
), 
vÆue
);

1940 
	}
}

1942 
	$__gpio_£t_vÆue
(
gpio
, 
vÆue
)

1944  
	`gpiod_£t_vÆue
(
	`gpio_to_desc
(
gpio
), 
vÆue
);

1945 
	}
}

1946 
EXPORT_SYMBOL_GPL
(
__gpio_£t_vÆue
);

1956 
	$gpiod_ˇn¶ìp
(c⁄° 
gpio_desc
 *
desc
)

1958 i‡(!
desc
)

1961  
desc
->
chù
->
ˇn_¶ìp
;

1962 
	}
}

1964 
	$__gpio_ˇn¶ìp
(
gpio
)

1966  
	`gpiod_ˇn¶ìp
(
	`gpio_to_desc
(
gpio
));

1967 
	}
}

1968 
EXPORT_SYMBOL_GPL
(
__gpio_ˇn¶ìp
);

1979 
	$gpiod_to_úq
(c⁄° 
gpio_desc
 *
desc
)

1981 
gpio_chù
 *
chù
;

1982 
off£t
;

1984 i‡(!
desc
)

1985  -
EINVAL
;

1986 
chù
 = 
desc
->chip;

1987 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

1988  
chù
->
to_úq
 ? chù->
	`to_úq
(chù, 
off£t
Ë: -
ENXIO
;

1989 
	}
}

1991 
	$__gpio_to_úq
(
gpio
)

1993  
	`gpiod_to_úq
(
	`gpio_to_desc
(
gpio
));

1994 
	}
}

1995 
EXPORT_SYMBOL_GPL
(
__gpio_to_úq
);

2002 
	$gpiod_gë_vÆue_ˇn¶ìp
(c⁄° 
gpio_desc
 *
desc
)

2004 
gpio_chù
 *
chù
;

2005 
vÆue
;

2006 
off£t
;

2008 
	`might_¶ìp_if
(
exåa_checks
);

2009 i‡(!
desc
)

2011 
chù
 = 
desc
->chip;

2012 
off£t
 = 
	`gpio_chù_hwgpio
(
desc
);

2013 
vÆue
 = 
chù
->
gë
 ? chù->
	`gë
(chù, 
off£t
) : 0;

2014 
	`åa˚_gpio_vÆue
(
	`desc_to_gpio
(
desc
), 1, 
vÆue
);

2015  
vÆue
;

2016 
	}
}

2018 
	$gpio_gë_vÆue_ˇn¶ìp
(
gpio
)

2020  
	`gpiod_gë_vÆue_ˇn¶ìp
(
	`gpio_to_desc
(
gpio
));

2021 
	}
}

2022 
EXPORT_SYMBOL_GPL
(
gpio_gë_vÆue_ˇn¶ìp
);

2024 
	$gpiod_£t_vÆue_ˇn¶ìp
(
gpio_desc
 *
desc
, 
vÆue
)

2026 
gpio_chù
 *
chù
;

2028 
	`might_¶ìp_if
(
exåa_checks
);

2029 i‡(!
desc
)

2031 
chù
 = 
desc
->chip;

2032 
	`åa˚_gpio_vÆue
(
	`desc_to_gpio
(
desc
), 0, 
vÆue
);

2033 i‡(
	`ã°_bô
(
FLAG_OPEN_DRAIN
, &
desc
->
Êags
))

2034 
	`_gpio_£t_›í_døö_vÆue
(
desc
, 
vÆue
);

2035 i‡(
	`ã°_bô
(
FLAG_OPEN_SOURCE
, &
desc
->
Êags
))

2036 
	`_gpio_£t_›í_sour˚_vÆue
(
desc
, 
vÆue
);

2038 
chù
->
	`£t
(chù, 
	`gpio_chù_hwgpio
(
desc
), 
vÆue
);

2039 
	}
}

2041 
	$gpio_£t_vÆue_ˇn¶ìp
(
gpio
, 
vÆue
)

2043  
	`gpiod_£t_vÆue_ˇn¶ìp
(
	`gpio_to_desc
(
gpio
), 
vÆue
);

2044 
	}
}

2045 
EXPORT_SYMBOL_GPL
(
gpio_£t_vÆue_ˇn¶ìp
);

2047 #ifde‡
CONFIG_DEBUG_FS


2049 
	$gpiﬁib_dbg_show
(
£q_fûe
 *
s
, 
gpio_chù
 *
chù
)

2051 
i
;

2052 
gpio
 = 
chù
->
ba£
;

2053 
gpio_desc
 *
gdesc
 = &
chù
->
desc
[0];

2054 
is_out
;

2056 
i
 = 0; i < 
chù
->
ngpio
; i++, 
gpio
++, 
gdesc
++) {

2057 i‡(!
	`ã°_bô
(
FLAG_REQUESTED
, &
gdesc
->
Êags
))

2060 
	`gpiod_gë_dúe˘i⁄
(
gdesc
);

2061 
is_out
 = 
	`ã°_bô
(
FLAG_IS_OUT
, &
gdesc
->
Êags
);

2062 
	`£q_¥ötf
(
s
, " gpio-%-3d (%-20.20s) %s %s",

2063 
gpio
, 
gdesc
->
œbñ
,

2064 
is_out
 ? "out" : "in ",

2065 
chù
->
gë


2066 ? (
chù
->
	`gë
(chù, 
i
) ? "hi" : "lo")

2068 
	`£q_¥ötf
(
s
, "\n");

2070 
	}
}

2072 *
	$gpiﬁib_£q_°¨t
(
£q_fûe
 *
s
, 
loff_t
 *
pos
)

2074 
Êags
;

2075 
gpio_chù
 *
chù
 = 
NULL
;

2076 
loff_t
 
ödex
 = *
pos
;

2078 
s
->
¥iv©e
 = "";

2080 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

2081 
	`li°_f‹_óch_íåy
(
chù
, &
gpio_chùs
, 
li°
)

2082 i‡(
ödex
-- == 0) {

2083 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

2084  
chù
;

2086 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

2088  
NULL
;

2089 
	}
}

2091 *
	$gpiﬁib_£q_√xt
(
£q_fûe
 *
s
, *
v
, 
loff_t
 *
pos
)

2093 
Êags
;

2094 
gpio_chù
 *
chù
 = 
v
;

2095 *
ªt
 = 
NULL
;

2097 
	`•ö_lock_úqßve
(&
gpio_lock
, 
Êags
);

2098 i‡(
	`li°_is_œ°
(&
chù
->
li°
, &
gpio_chùs
))

2099 
ªt
 = 
NULL
;

2101 
ªt
 = 
	`li°_íåy
(
chù
->
li°
.
√xt
, 
gpio_chù
,Üist);

2102 
	`•ö_u∆ock_úqª°‹e
(&
gpio_lock
, 
Êags
);

2104 
s
->
¥iv©e
 = "\n";

2105 ++*
pos
;

2107  
ªt
;

2108 
	}
}

2110 
	$gpiﬁib_£q_°›
(
£q_fûe
 *
s
, *
v
)

2112 
	}
}

2114 
	$gpiﬁib_£q_show
(
£q_fûe
 *
s
, *
v
)

2116 
gpio_chù
 *
chù
 = 
v
;

2117 
devi˚
 *
dev
;

2119 
	`£q_¥ötf
(
s
, "%sGPIO†%d-%d", (*)s->
¥iv©e
,

2120 
chù
->
ba£
, chù->ba£ + chù->
ngpio
 - 1);

2121 
dev
 = 
chù
->dev;

2122 i‡(
dev
)

2123 
	`£q_¥ötf
(
s
, ", %s/%s", 
dev
->
bus
 ? dev->bus->
«me
 : "no-bus",

2124 
	`dev_«me
(
dev
));

2125 i‡(
chù
->
œbñ
)

2126 
	`£q_¥ötf
(
s
, ", %s", 
chù
->
œbñ
);

2127 i‡(
chù
->
ˇn_¶ìp
)

2128 
	`£q_¥ötf
(
s
, ", can sleep");

2129 
	`£q_¥ötf
(
s
, ":\n");

2131 i‡(
chù
->
dbg_show
)

2132 
chù
->
	`dbg_show
(
s
, chip);

2134 
	`gpiﬁib_dbg_show
(
s
, 
chù
);

2137 
	}
}

2139 c⁄° 
£q_›î©i⁄s
 
	ggpiﬁib_£q_›s
 = {

2140 .
°¨t
 = 
gpiﬁib_£q_°¨t
,

2141 .
	g√xt
 = 
gpiﬁib_£q_√xt
,

2142 .
	g°›
 = 
gpiﬁib_£q_°›
,

2143 .
	gshow
 = 
gpiﬁib_£q_show
,

2146 
	$gpiﬁib_›í
(
öode
 *öode, 
fûe
 *file)

2148  
	`£q_›í
(
fûe
, &
gpiﬁib_£q_›s
);

2149 
	}
}

2151 c⁄° 
fûe_›î©i⁄s
 
	ggpiﬁib_›î©i⁄s
 = {

2152 .
ow√r
 = 
THIS_MODULE
,

2153 .
	g›í
 = 
gpiﬁib_›í
,

2154 .
	gªad
 = 
£q_ªad
,

2155 .
	gŒ£ek
 = 
£q_l£ek
,

2156 .
	gªÀa£
 = 
£q_ªÀa£
,

2159 
__öô
 
	$gpiﬁib_debugfs_öô
()

2162 (Ë
	`debugfs_¸óã_fûe
("gpio", 
S_IFREG
 | 
S_IRUGO
,

2163 
NULL
, NULL, &
gpiﬁib_›î©i⁄s
);

2165 
	}
}

2166 
subsys_öôˇŒ
(
gpiﬁib_debugfs_öô
);

	@../media/pci/bt8xx/bt848.h

21 #i‚de‡
_BT848_H_


22 
	#_BT848_H_


	)

24 #i‚de‡
PCI_VENDOR_ID_BROOKTREE


25 
	#PCI_VENDOR_ID_BROOKTREE
 0x109e

	)

27 #i‚de‡
PCI_DEVICE_ID_BT848


28 
	#PCI_DEVICE_ID_BT848
 0x350

	)

30 #i‚de‡
PCI_DEVICE_ID_BT849


31 
	#PCI_DEVICE_ID_BT849
 0x351

	)

33 #i‚de‡
PCI_DEVICE_ID_FUSION879


34 
	#PCI_DEVICE_ID_FUSION879
 0x36c

	)

37 #i‚de‡
PCI_DEVICE_ID_BT878


38 
	#PCI_DEVICE_ID_BT878
 0x36e

	)

40 #i‚de‡
PCI_DEVICE_ID_BT879


41 
	#PCI_DEVICE_ID_BT879
 0x36f

	)

46 
	#BT848_DSTATUS
 0x000

	)

47 
	#BT848_DSTATUS_PRES
 (1<<7)

	)

48 
	#BT848_DSTATUS_HLOC
 (1<<6)

	)

49 
	#BT848_DSTATUS_FIELD
 (1<<5)

	)

50 
	#BT848_DSTATUS_NUML
 (1<<4)

	)

51 
	#BT848_DSTATUS_CSEL
 (1<<3)

	)

52 
	#BT848_DSTATUS_PLOCK
 (1<<2)

	)

53 
	#BT848_DSTATUS_LOF
 (1<<1)

	)

54 
	#BT848_DSTATUS_COF
 (1<<0)

	)

56 
	#BT848_IFORM
 0x004

	)

57 
	#BT848_IFORM_HACTIVE
 (1<<7)

	)

58 
	#BT848_IFORM_MUXSEL
 (3<<5)

	)

59 
	#BT848_IFORM_MUX0
 (2<<5)

	)

60 
	#BT848_IFORM_MUX1
 (3<<5)

	)

61 
	#BT848_IFORM_MUX2
 (1<<5)

	)

62 
	#BT848_IFORM_XTSEL
 (3<<3)

	)

63 
	#BT848_IFORM_XT0
 (1<<3)

	)

64 
	#BT848_IFORM_XT1
 (2<<3)

	)

65 
	#BT848_IFORM_XTAUTO
 (3<<3)

	)

66 
	#BT848_IFORM_XTBOTH
 (3<<3)

	)

67 
	#BT848_IFORM_NTSC
 1

	)

68 
	#BT848_IFORM_NTSC_J
 2

	)

69 
	#BT848_IFORM_PAL_BDGHI
 3

	)

70 
	#BT848_IFORM_PAL_M
 4

	)

71 
	#BT848_IFORM_PAL_N
 5

	)

72 
	#BT848_IFORM_SECAM
 6

	)

73 
	#BT848_IFORM_PAL_NC
 7

	)

74 
	#BT848_IFORM_AUTO
 0

	)

75 
	#BT848_IFORM_NORM
 7

	)

77 
	#BT848_TDEC
 0x008

	)

78 
	#BT848_TDEC_DEC_FIELD
 (1<<7)

	)

79 
	#BT848_TDEC_FLDALIGN
 (1<<6)

	)

80 
	#BT848_TDEC_DEC_RAT
 (0x1f)

	)

82 
	#BT848_E_CROP
 0x00C

	)

83 
	#BT848_O_CROP
 0x08C

	)

85 
	#BT848_E_VDELAY_LO
 0x010

	)

86 
	#BT848_O_VDELAY_LO
 0x090

	)

88 
	#BT848_E_VACTIVE_LO
 0x014

	)

89 
	#BT848_O_VACTIVE_LO
 0x094

	)

91 
	#BT848_E_HDELAY_LO
 0x018

	)

92 
	#BT848_O_HDELAY_LO
 0x098

	)

94 
	#BT848_E_HACTIVE_LO
 0x01C

	)

95 
	#BT848_O_HACTIVE_LO
 0x09C

	)

97 
	#BT848_E_HSCALE_HI
 0x020

	)

98 
	#BT848_O_HSCALE_HI
 0x0A0

	)

100 
	#BT848_E_HSCALE_LO
 0x024

	)

101 
	#BT848_O_HSCALE_LO
 0x0A4

	)

103 
	#BT848_BRIGHT
 0x028

	)

105 
	#BT848_E_CONTROL
 0x02C

	)

106 
	#BT848_O_CONTROL
 0x0AC

	)

107 
	#BT848_CONTROL_LNOTCH
 (1<<7)

	)

108 
	#BT848_CONTROL_COMP
 (1<<6)

	)

109 
	#BT848_CONTROL_LDEC
 (1<<5)

	)

110 
	#BT848_CONTROL_CBSENSE
 (1<<4)

	)

111 
	#BT848_CONTROL_CON_MSB
 (1<<2)

	)

112 
	#BT848_CONTROL_SAT_U_MSB
 (1<<1)

	)

113 
	#BT848_CONTROL_SAT_V_MSB
 (1<<0)

	)

115 
	#BT848_CONTRAST_LO
 0x030

	)

116 
	#BT848_SAT_U_LO
 0x034

	)

117 
	#BT848_SAT_V_LO
 0x038

	)

118 
	#BT848_HUE
 0x03C

	)

120 
	#BT848_E_SCLOOP
 0x040

	)

121 
	#BT848_O_SCLOOP
 0x0C0

	)

122 
	#BT848_SCLOOP_CAGC
 (1<<6)

	)

123 
	#BT848_SCLOOP_CKILL
 (1<<5)

	)

124 
	#BT848_SCLOOP_HFILT_AUTO
 (0<<3)

	)

125 
	#BT848_SCLOOP_HFILT_CIF
 (1<<3)

	)

126 
	#BT848_SCLOOP_HFILT_QCIF
 (2<<3)

	)

127 
	#BT848_SCLOOP_HFILT_ICON
 (3<<3)

	)

129 
	#BT848_SCLOOP_PEAK
 (1<<7)

	)

130 
	#BT848_SCLOOP_HFILT_MINP
 (1<<3)

	)

131 
	#BT848_SCLOOP_HFILT_MEDP
 (2<<3)

	)

132 
	#BT848_SCLOOP_HFILT_MAXP
 (3<<3)

	)

135 
	#BT848_OFORM
 0x048

	)

136 
	#BT848_OFORM_RANGE
 (1<<7)

	)

137 
	#BT848_OFORM_CORE0
 (0<<5)

	)

138 
	#BT848_OFORM_CORE8
 (1<<5)

	)

139 
	#BT848_OFORM_CORE16
 (2<<5)

	)

140 
	#BT848_OFORM_CORE32
 (3<<5)

	)

142 
	#BT848_E_VSCALE_HI
 0x04C

	)

143 
	#BT848_O_VSCALE_HI
 0x0CC

	)

144 
	#BT848_VSCALE_YCOMB
 (1<<7)

	)

145 
	#BT848_VSCALE_COMB
 (1<<6)

	)

146 
	#BT848_VSCALE_INT
 (1<<5)

	)

147 
	#BT848_VSCALE_HI
 15

	)

149 
	#BT848_E_VSCALE_LO
 0x050

	)

150 
	#BT848_O_VSCALE_LO
 0x0D0

	)

151 
	#BT848_TEST
 0x054

	)

152 
	#BT848_ADELAY
 0x060

	)

153 
	#BT848_BDELAY
 0x064

	)

155 
	#BT848_ADC
 0x068

	)

156 
	#BT848_ADC_RESERVED
 (2<<6)

	)

157 
	#BT848_ADC_SYNC_T
 (1<<5)

	)

158 
	#BT848_ADC_AGC_EN
 (1<<4)

	)

159 
	#BT848_ADC_CLK_SLEEP
 (1<<3)

	)

160 
	#BT848_ADC_Y_SLEEP
 (1<<2)

	)

161 
	#BT848_ADC_C_SLEEP
 (1<<1)

	)

162 
	#BT848_ADC_CRUSH
 (1<<0)

	)

164 
	#BT848_WC_UP
 0x044

	)

165 
	#BT848_WC_DOWN
 0x078

	)

167 
	#BT848_E_VTC
 0x06C

	)

168 
	#BT848_O_VTC
 0x0EC

	)

169 
	#BT848_VTC_HSFMT
 (1<<7)

	)

170 
	#BT848_VTC_VFILT_2TAP
 0

	)

171 
	#BT848_VTC_VFILT_3TAP
 1

	)

172 
	#BT848_VTC_VFILT_4TAP
 2

	)

173 
	#BT848_VTC_VFILT_5TAP
 3

	)

175 
	#BT848_SRESET
 0x07C

	)

177 
	#BT848_COLOR_FMT
 0x0D4

	)

178 
	#BT848_COLOR_FMT_O_RGB32
 (0<<4)

	)

179 
	#BT848_COLOR_FMT_O_RGB24
 (1<<4)

	)

180 
	#BT848_COLOR_FMT_O_RGB16
 (2<<4)

	)

181 
	#BT848_COLOR_FMT_O_RGB15
 (3<<4)

	)

182 
	#BT848_COLOR_FMT_O_YUY2
 (4<<4)

	)

183 
	#BT848_COLOR_FMT_O_BtYUV
 (5<<4)

	)

184 
	#BT848_COLOR_FMT_O_Y8
 (6<<4)

	)

185 
	#BT848_COLOR_FMT_O_RGB8
 (7<<4)

	)

186 
	#BT848_COLOR_FMT_O_YCrCb422
 (8<<4)

	)

187 
	#BT848_COLOR_FMT_O_YCrCb411
 (9<<4)

	)

188 
	#BT848_COLOR_FMT_O_RAW
 (14<<4)

	)

189 
	#BT848_COLOR_FMT_E_RGB32
 0

	)

190 
	#BT848_COLOR_FMT_E_RGB24
 1

	)

191 
	#BT848_COLOR_FMT_E_RGB16
 2

	)

192 
	#BT848_COLOR_FMT_E_RGB15
 3

	)

193 
	#BT848_COLOR_FMT_E_YUY2
 4

	)

194 
	#BT848_COLOR_FMT_E_BtYUV
 5

	)

195 
	#BT848_COLOR_FMT_E_Y8
 6

	)

196 
	#BT848_COLOR_FMT_E_RGB8
 7

	)

197 
	#BT848_COLOR_FMT_E_YCrCb422
 8

	)

198 
	#BT848_COLOR_FMT_E_YCrCb411
 9

	)

199 
	#BT848_COLOR_FMT_E_RAW
 14

	)

201 
	#BT848_COLOR_FMT_RGB32
 0x00

	)

202 
	#BT848_COLOR_FMT_RGB24
 0x11

	)

203 
	#BT848_COLOR_FMT_RGB16
 0x22

	)

204 
	#BT848_COLOR_FMT_RGB15
 0x33

	)

205 
	#BT848_COLOR_FMT_YUY2
 0x44

	)

206 
	#BT848_COLOR_FMT_BtYUV
 0x55

	)

207 
	#BT848_COLOR_FMT_Y8
 0x66

	)

208 
	#BT848_COLOR_FMT_RGB8
 0x77

	)

209 
	#BT848_COLOR_FMT_YCrCb422
 0x88

	)

210 
	#BT848_COLOR_FMT_YCrCb411
 0x99

	)

211 
	#BT848_COLOR_FMT_RAW
 0xì

	)

213 
	#BT848_VTOTAL_LO
 0xB0

	)

214 
	#BT848_VTOTAL_HI
 0xB4

	)

216 
	#BT848_COLOR_CTL
 0x0D8

	)

217 
	#BT848_COLOR_CTL_EXT_FRMRATE
 (1<<7)

	)

218 
	#BT848_COLOR_CTL_COLOR_BARS
 (1<<6)

	)

219 
	#BT848_COLOR_CTL_RGB_DED
 (1<<5)

	)

220 
	#BT848_COLOR_CTL_GAMMA
 (1<<4)

	)

221 
	#BT848_COLOR_CTL_WSWAP_ODD
 (1<<3)

	)

222 
	#BT848_COLOR_CTL_WSWAP_EVEN
 (1<<2)

	)

223 
	#BT848_COLOR_CTL_BSWAP_ODD
 (1<<1)

	)

224 
	#BT848_COLOR_CTL_BSWAP_EVEN
 (1<<0)

	)

226 
	#BT848_CAP_CTL
 0x0DC

	)

227 
	#BT848_CAP_CTL_DITH_FRAME
 (1<<4)

	)

228 
	#BT848_CAP_CTL_CAPTURE_VBI_ODD
 (1<<3)

	)

229 
	#BT848_CAP_CTL_CAPTURE_VBI_EVEN
 (1<<2)

	)

230 
	#BT848_CAP_CTL_CAPTURE_ODD
 (1<<1)

	)

231 
	#BT848_CAP_CTL_CAPTURE_EVEN
 (1<<0)

	)

233 
	#BT848_VBI_PACK_SIZE
 0x0E0

	)

235 
	#BT848_VBI_PACK_DEL
 0x0E4

	)

236 
	#BT848_VBI_PACK_DEL_VBI_HDELAY
 0xfc

	)

237 
	#BT848_VBI_PACK_DEL_EXT_FRAME
 2

	)

238 
	#BT848_VBI_PACK_DEL_VBI_PKT_HI
 1

	)

241 
	#BT848_INT_STAT
 0x100

	)

242 
	#BT848_INT_MASK
 0x104

	)

244 
	#BT848_INT_ETBF
 (1<<23)

	)

246 
	#BT848_INT_RISCS
 (0xf<<28)

	)

247 
	#BT848_INT_RISC_EN
 (1<<27)

	)

248 
	#BT848_INT_RACK
 (1<<25)

	)

249 
	#BT848_INT_FIELD
 (1<<24)

	)

250 
	#BT848_INT_SCERR
 (1<<19)

	)

251 
	#BT848_INT_OCERR
 (1<<18)

	)

252 
	#BT848_INT_PABORT
 (1<<17)

	)

253 
	#BT848_INT_RIPERR
 (1<<16)

	)

254 
	#BT848_INT_PPERR
 (1<<15)

	)

255 
	#BT848_INT_FDSR
 (1<<14)

	)

256 
	#BT848_INT_FTRGT
 (1<<13)

	)

257 
	#BT848_INT_FBUS
 (1<<12)

	)

258 
	#BT848_INT_RISCI
 (1<<11)

	)

259 
	#BT848_INT_GPINT
 (1<<9)

	)

260 
	#BT848_INT_I2CDONE
 (1<<8)

	)

261 
	#BT848_INT_VPRES
 (1<<5)

	)

262 
	#BT848_INT_HLOCK
 (1<<4)

	)

263 
	#BT848_INT_OFLOW
 (1<<3)

	)

264 
	#BT848_INT_HSYNC
 (1<<2)

	)

265 
	#BT848_INT_VSYNC
 (1<<1)

	)

266 
	#BT848_INT_FMTCHG
 (1<<0)

	)

269 
	#BT848_GPIO_DMA_CTL
 0x10C

	)

270 
	#BT848_GPIO_DMA_CTL_GPINTC
 (1<<15)

	)

271 
	#BT848_GPIO_DMA_CTL_GPINTI
 (1<<14)

	)

272 
	#BT848_GPIO_DMA_CTL_GPWEC
 (1<<13)

	)

273 
	#BT848_GPIO_DMA_CTL_GPIOMODE
 (3<<11)

	)

274 
	#BT848_GPIO_DMA_CTL_GPCLKMODE
 (1<<10)

	)

275 
	#BT848_GPIO_DMA_CTL_PLTP23_4
 (0<<6)

	)

276 
	#BT848_GPIO_DMA_CTL_PLTP23_8
 (1<<6)

	)

277 
	#BT848_GPIO_DMA_CTL_PLTP23_16
 (2<<6)

	)

278 
	#BT848_GPIO_DMA_CTL_PLTP23_32
 (3<<6)

	)

279 
	#BT848_GPIO_DMA_CTL_PLTP1_4
 (0<<4)

	)

280 
	#BT848_GPIO_DMA_CTL_PLTP1_8
 (1<<4)

	)

281 
	#BT848_GPIO_DMA_CTL_PLTP1_16
 (2<<4)

	)

282 
	#BT848_GPIO_DMA_CTL_PLTP1_32
 (3<<4)

	)

283 
	#BT848_GPIO_DMA_CTL_PKTP_4
 (0<<2)

	)

284 
	#BT848_GPIO_DMA_CTL_PKTP_8
 (1<<2)

	)

285 
	#BT848_GPIO_DMA_CTL_PKTP_16
 (2<<2)

	)

286 
	#BT848_GPIO_DMA_CTL_PKTP_32
 (3<<2)

	)

287 
	#BT848_GPIO_DMA_CTL_RISC_ENABLE
 (1<<1)

	)

288 
	#BT848_GPIO_DMA_CTL_FIFO_ENABLE
 (1<<0)

	)

290 
	#BT848_I2C
 0x110

	)

291 
	#BT878_I2C_MODE
 (1<<7)

	)

292 
	#BT878_I2C_RATE
 (1<<6)

	)

293 
	#BT878_I2C_NOSTOP
 (1<<5)

	)

294 
	#BT878_I2C_NOSTART
 (1<<4)

	)

295 
	#BT848_I2C_DIV
 (0xf<<4)

	)

296 
	#BT848_I2C_SYNC
 (1<<3)

	)

297 
	#BT848_I2C_W3B
 (1<<2)

	)

298 
	#BT848_I2C_SCL
 (1<<1)

	)

299 
	#BT848_I2C_SDA
 (1<<0)

	)

301 
	#BT848_RISC_STRT_ADD
 0x114

	)

302 
	#BT848_GPIO_OUT_EN
 0x118

	)

303 
	#BT848_GPIO_REG_INP
 0x11C

	)

304 
	#BT848_RISC_COUNT
 0x120

	)

305 
	#BT848_GPIO_DATA
 0x200

	)

311 
	#BT848_FIFO_STATUS_FM1
 0x06

	)

312 
	#BT848_FIFO_STATUS_FM3
 0x0e

	)

313 
	#BT848_FIFO_STATUS_SOL
 0x02

	)

314 
	#BT848_FIFO_STATUS_EOL4
 0x01

	)

315 
	#BT848_FIFO_STATUS_EOL3
 0x0d

	)

316 
	#BT848_FIFO_STATUS_EOL2
 0x09

	)

317 
	#BT848_FIFO_STATUS_EOL1
 0x05

	)

318 
	#BT848_FIFO_STATUS_VRE
 0x04

	)

319 
	#BT848_FIFO_STATUS_VRO
 0x0c

	)

320 
	#BT848_FIFO_STATUS_PXV
 0x00

	)

322 
	#BT848_RISC_RESYNC
 (1<<15)

	)

326 
	#BT848_RISC_BYTE0
 (1U<<12)

	)

327 
	#BT848_RISC_BYTE1
 (1U<<13)

	)

328 
	#BT848_RISC_BYTE2
 (1U<<14)

	)

329 
	#BT848_RISC_BYTE3
 (1U<<15)

	)

330 
	#BT848_RISC_BYTE_ALL
 (0x0fU<<12)

	)

331 
	#BT848_RISC_BYTE_NONE
 0

	)

333 
	#BT848_RISC_IRQ
 (1U<<24)

	)

335 
	#BT848_RISC_EOL
 (1U<<26)

	)

337 
	#BT848_RISC_SOL
 (1U<<27)

	)

339 
	#BT848_RISC_WRITE
 (0x01U<<28)

	)

340 
	#BT848_RISC_SKIP
 (0x02U<<28)

	)

341 
	#BT848_RISC_WRITEC
 (0x05U<<28)

	)

342 
	#BT848_RISC_JUMP
 (0x07U<<28)

	)

343 
	#BT848_RISC_SYNC
 (0x08U<<28)

	)

345 
	#BT848_RISC_WRITE123
 (0x09U<<28)

	)

346 
	#BT848_RISC_SKIP123
 (0x0aU<<28)

	)

347 
	#BT848_RISC_WRITE1S23
 (0x0bU<<28)

	)

351 
	#BT848_TGLB
 0x080

	)

352 
	#BT848_TGCTRL
 0x084

	)

353 
	#BT848_FCAP
 0x0E8

	)

354 
	#BT848_PLL_F_LO
 0x0F0

	)

355 
	#BT848_PLL_F_HI
 0x0F4

	)

357 
	#BT848_PLL_XCI
 0x0F8

	)

358 
	#BT848_PLL_X
 (1<<7)

	)

359 
	#BT848_PLL_C
 (1<<6)

	)

361 
	#BT848_DVSIF
 0x0FC

	)

365 
	#BT878_DEVCTRL
 0x40

	)

366 
	#BT878_EN_TBFX
 0x02

	)

367 
	#BT878_EN_VSFX
 0x04

	)

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/msr.h

1 #i‚de‡
_ASM_X86_MSR_H


2 
	#_ASM_X86_MSR_H


	)

4 
	~<asm/m§-ödex.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/ty≥s.h
>

9 
	~<löux/io˘l.h
>

11 
	#X86_IOC_RDMSR_REGS
 
	`_IOWR
('c', 0xA0, 
__u32
[8])

	)

12 
	#X86_IOC_WRMSR_REGS
 
	`_IOWR
('c', 0xA1, 
__u32
[8])

	)

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/blk_ty≥s.h
>

12 
	~<löux/ty≥s.h
>

25 #unde‡
NR_OPEN


26 
	#INR_OPEN_CUR
 1024

	)

27 
	#INR_OPEN_MAX
 4096

	)

29 
	#BLOCK_SIZE_BITS
 10

	)

30 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

32 
	#SEEK_SET
 0

	)

33 
	#SEEK_CUR
 1

	)

34 
	#SEEK_END
 2

	)

35 
	#SEEK_DATA
 3

	)

36 
	#SEEK_HOLE
 4

	)

37 
	#SEEK_MAX
 
SEEK_HOLE


	)

39 
	sf°rim_ønge
 {

40 
__u64
 
	m°¨t
;

41 
__u64
 
	mÀn
;

42 
__u64
 
	mmöÀn
;

46 
	sfûes_°©_°ru˘
 {

47 
	mƒ_fûes
;

48 
	mƒ_‰ì_fûes
;

49 
	mmax_fûes
;

52 
	söodes_°©_t
 {

53 
	mƒ_öodes
;

54 
	mƒ_unu£d
;

55 
	mdummy
[5];

59 
	#NR_FILE
 8192

	)

61 
	#MAY_EXEC
 0x00000001

	)

62 
	#MAY_WRITE
 0x00000002

	)

63 
	#MAY_READ
 0x00000004

	)

64 
	#MAY_APPEND
 0x00000008

	)

65 
	#MAY_ACCESS
 0x00000010

	)

66 
	#MAY_OPEN
 0x00000020

	)

67 
	#MAY_CHDIR
 0x00000040

	)

69 
	#MAY_NOT_BLOCK
 0x00000080

	)

77 
	#FMODE_READ
 ((
fmode_t
)0x1)

	)

79 
	#FMODE_WRITE
 ((
fmode_t
)0x2)

	)

81 
	#FMODE_LSEEK
 ((
fmode_t
)0x4)

	)

83 
	#FMODE_PREAD
 ((
fmode_t
)0x8)

	)

85 
	#FMODE_PWRITE
 ((
fmode_t
)0x10)

	)

87 
	#FMODE_EXEC
 ((
fmode_t
)0x20)

	)

89 
	#FMODE_NDELAY
 ((
fmode_t
)0x40)

	)

91 
	#FMODE_EXCL
 ((
fmode_t
)0x80)

	)

94 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)0x100)

	)

96 
	#FMODE_32BITHASH
 ((
fmode_t
)0x200)

	)

98 
	#FMODE_64BITHASH
 ((
fmode_t
)0x400)

	)

106 
	#FMODE_NOCMTIME
 ((
fmode_t
)0x800)

	)

109 
	#FMODE_RANDOM
 ((
fmode_t
)0x1000)

	)

112 
	#FMODE_UNSIGNED_OFFSET
 ((
fmode_t
)0x2000)

	)

115 
	#FMODE_PATH
 ((
fmode_t
)0x4000)

	)

118 
	#FMODE_NONOTIFY
 ((
fmode_t
)0x1000000)

	)

162 
	#RW_MASK
 
REQ_WRITE


	)

163 
	#RWA_MASK
 
REQ_RAHEAD


	)

165 
	#READ
 0

	)

166 
	#WRITE
 
RW_MASK


	)

167 
	#READA
 
RWA_MASK


	)

169 
	#READ_SYNC
 (
READ
 | 
REQ_SYNC
)

	)

170 
	#WRITE_SYNC
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
)

	)

171 
	#WRITE_ODIRECT
 (
WRITE
 | 
REQ_SYNC
)

	)

172 
	#WRITE_FLUSH
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
)

	)

173 
	#WRITE_FUA
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FUA
)

	)

174 
	#WRITE_FLUSH_FUA
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
)

	)

176 
	#SEL_IN
 1

	)

177 
	#SEL_OUT
 2

	)

178 
	#SEL_EX
 4

	)

181 
	#FS_REQUIRES_DEV
 1

	)

182 
	#FS_BINARY_MOUNTDATA
 2

	)

183 
	#FS_HAS_SUBTYPE
 4

	)

184 
	#FS_REVAL_DOT
 16384

	)

185 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

192 
	#MS_RDONLY
 1

	)

193 
	#MS_NOSUID
 2

	)

194 
	#MS_NODEV
 4

	)

195 
	#MS_NOEXEC
 8

	)

196 
	#MS_SYNCHRONOUS
 16

	)

197 
	#MS_REMOUNT
 32

	)

198 
	#MS_MANDLOCK
 64

	)

199 
	#MS_DIRSYNC
 128

	)

200 
	#MS_NOATIME
 1024

	)

201 
	#MS_NODIRATIME
 2048

	)

202 
	#MS_BIND
 4096

	)

203 
	#MS_MOVE
 8192

	)

204 
	#MS_REC
 16384

	)

205 
	#MS_VERBOSE
 32768

	)

207 
	#MS_SILENT
 32768

	)

208 
	#MS_POSIXACL
 (1<<16Ë

	)

209 
	#MS_UNBINDABLE
 (1<<17Ë

	)

210 
	#MS_PRIVATE
 (1<<18Ë

	)

211 
	#MS_SLAVE
 (1<<19Ë

	)

212 
	#MS_SHARED
 (1<<20Ë

	)

213 
	#MS_RELATIME
 (1<<21Ë

	)

214 
	#MS_KERNMOUNT
 (1<<22Ë

	)

215 
	#MS_I_VERSION
 (1<<23Ë

	)

216 
	#MS_STRICTATIME
 (1<<24Ë

	)

217 
	#MS_NOSEC
 (1<<28)

	)

218 
	#MS_BORN
 (1<<29)

	)

219 
	#MS_ACTIVE
 (1<<30)

	)

220 
	#MS_NOUSER
 (1<<31)

	)

225 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

230 
	#MS_MGC_VAL
 0xC0ED0000

	)

231 
	#MS_MGC_MSK
 0xffff0000

	)

235 
	#S_SYNC
 1

	)

236 
	#S_NOATIME
 2

	)

237 
	#S_APPEND
 4

	)

238 
	#S_IMMUTABLE
 8

	)

239 
	#S_DEAD
 16

	)

240 
	#S_NOQUOTA
 32

	)

241 
	#S_DIRSYNC
 64

	)

242 
	#S_NOCMTIME
 128

	)

243 
	#S_SWAPFILE
 256

	)

244 
	#S_PRIVATE
 512

	)

245 
	#S_IMA
 1024

	)

246 
	#S_AUTOMOUNT
 2048

	)

247 
	#S_NOSEC
 4096

	)

262 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

264 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

265 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

266 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

267 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

268 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

269 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

270 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

271 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

273 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

274 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

275 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

276 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

278 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

279 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

280 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

281 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

282 
	#IS_IMA
(
öode
Ë((öode)->
i_Êags
 & 
S_IMA
)

	)

283 
	#IS_AUTOMOUNT
(
öode
Ë((öode)->
i_Êags
 & 
S_AUTOMOUNT
)

	)

284 
	#IS_NOSEC
(
öode
Ë((öode)->
i_Êags
 & 
S_NOSEC
)

	)

289 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

290 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

291 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

292 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

293 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

294 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

295 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

296 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

297 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

298 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

299 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

300 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

302 
	#BLKPG
 
	`_IO
(0x12,105)

	)

306 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

307 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

312 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

313 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

314 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

315 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

316 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

317 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

318 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

319 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

320 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

321 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

322 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

323 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

324 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

325 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

327 
	#BMAP_IOCTL
 1

	)

328 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

329 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

330 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

331 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

332 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

334 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

335 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

336 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

337 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

338 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

339 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

340 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

341 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

342 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

347 
	#FS_SECRM_FL
 0x00000001

	)

348 
	#FS_UNRM_FL
 0x00000002

	)

349 
	#FS_COMPR_FL
 0x00000004

	)

350 
	#FS_SYNC_FL
 0x00000008

	)

351 
	#FS_IMMUTABLE_FL
 0x00000010

	)

352 
	#FS_APPEND_FL
 0x00000020

	)

353 
	#FS_NODUMP_FL
 0x00000040

	)

354 
	#FS_NOATIME_FL
 0x00000080

	)

356 
	#FS_DIRTY_FL
 0x00000100

	)

357 
	#FS_COMPRBLK_FL
 0x00000200

	)

358 
	#FS_NOCOMP_FL
 0x00000400

	)

359 
	#FS_ECOMPR_FL
 0x00000800

	)

361 
	#FS_BTREE_FL
 0x00001000

	)

362 
	#FS_INDEX_FL
 0x00001000

	)

363 
	#FS_IMAGIC_FL
 0x00002000

	)

364 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

365 
	#FS_NOTAIL_FL
 0x00008000

	)

366 
	#FS_DIRSYNC_FL
 0x00010000

	)

367 
	#FS_TOPDIR_FL
 0x00020000

	)

368 
	#FS_EXTENT_FL
 0x00080000

	)

369 
	#FS_DIRECTIO_FL
 0x00100000

	)

370 
	#FS_NOCOW_FL
 0x00800000

	)

371 
	#FS_RESERVED_FL
 0x80000000

	)

373 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

374 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

377 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

378 
	#SYNC_FILE_RANGE_WRITE
 2

	)

379 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/i2c.h

26 #i‚de‡
_LINUX_I2C_H


27 
	#_LINUX_I2C_H


	)

29 
	~<löux/ty≥s.h
>

67 
	si2c_msg
 {

68 
__u16
 
	maddr
;

69 
__u16
 
	mÊags
;

70 
	#I2C_M_TEN
 0x0010

	)

71 
	#I2C_M_RD
 0x0001

	)

72 
	#I2C_M_NOSTART
 0x4000

	)

73 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

74 
	#I2C_M_IGNORE_NAK
 0x1000

	)

75 
	#I2C_M_NO_RD_ACK
 0x0800

	)

76 
	#I2C_M_RECV_LEN
 0x0400

	)

77 
__u16
 
	mÀn
;

78 
__u8
 *
	mbuf
;

83 
	#I2C_FUNC_I2C
 0x00000001

	)

84 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

85 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

86 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

87 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

88 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

89 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

90 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

91 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

92 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

93 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

94 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

95 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

96 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

97 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

98 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

101 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

102 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

103 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

104 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

105 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

106 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

107 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

108 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

109 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

110 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

112 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

113 
I2C_FUNC_SMBUS_BYTE
 | \

114 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

115 
I2C_FUNC_SMBUS_WORD_DATA
 | \

116 
I2C_FUNC_SMBUS_PROC_CALL
 | \

117 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

118 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

119 
I2C_FUNC_SMBUS_PEC
)

	)

124 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

125 
	ui2c_smbus_d©a
 {

126 
__u8
 
	mbyã
;

127 
__u16
 
	mw‹d
;

128 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

133 
	#I2C_SMBUS_READ
 1

	)

134 
	#I2C_SMBUS_WRITE
 0

	)

138 
	#I2C_SMBUS_QUICK
 0

	)

139 
	#I2C_SMBUS_BYTE
 1

	)

140 
	#I2C_SMBUS_BYTE_DATA
 2

	)

141 
	#I2C_SMBUS_WORD_DATA
 3

	)

142 
	#I2C_SMBUS_PROC_CALL
 4

	)

143 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

144 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

145 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

146 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

7 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

8 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

11 
	#SI_LOAD_SHIFT
 16

	)

12 
	ssysöfo
 {

13 
	mu±ime
;

14 
	mlﬂds
[3];

15 
	mtŸÆøm
;

16 
	m‰ìøm
;

17 
	msh¨edøm
;

18 
	mbuf„ºam
;

19 
	mtŸÆsw≠
;

20 
	m‰ìsw≠
;

21 
	m¥ocs
;

22 
	m∑d
;

23 
	mtŸÆhigh
;

24 
	m‰ìhigh
;

25 
	mmem_unô
;

26 
	m_f
[20-2*()-()];

	@/usr/include/linux/pci.h

17 #i‚de‡
LINUX_PCI_H


18 
	#LINUX_PCI_H


	)

20 
	~<löux/pci_ªgs.h
>

30 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

31 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

32 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

35 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

36 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

37 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

38 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

39 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/msr-index.h

1 #i‚de‡
_ASM_X86_MSR_INDEX_H


2 
	#_ASM_X86_MSR_INDEX_H


	)

7 
	#MSR_EFER
 0xc0000080

	)

8 
	#MSR_STAR
 0xc0000081

	)

9 
	#MSR_LSTAR
 0xc0000082

	)

10 
	#MSR_CSTAR
 0xc0000083

	)

11 
	#MSR_SYSCALL_MASK
 0xc0000084

	)

12 
	#MSR_FS_BASE
 0xc0000100

	)

13 
	#MSR_GS_BASE
 0xc0000101

	)

14 
	#MSR_KERNEL_GS_BASE
 0xc0000102

	)

15 
	#MSR_TSC_AUX
 0xc0000103

	)

18 
	#_EFER_SCE
 0

	)

19 
	#_EFER_LME
 8

	)

20 
	#_EFER_LMA
 10

	)

21 
	#_EFER_NX
 11

	)

22 
	#_EFER_SVME
 12

	)

23 
	#_EFER_LMSLE
 13

	)

24 
	#_EFER_FFXSR
 14

	)

26 
	#EFER_SCE
 (1<<
_EFER_SCE
)

	)

27 
	#EFER_LME
 (1<<
_EFER_LME
)

	)

28 
	#EFER_LMA
 (1<<
_EFER_LMA
)

	)

29 
	#EFER_NX
 (1<<
_EFER_NX
)

	)

30 
	#EFER_SVME
 (1<<
_EFER_SVME
)

	)

31 
	#EFER_LMSLE
 (1<<
_EFER_LMSLE
)

	)

32 
	#EFER_FFXSR
 (1<<
_EFER_FFXSR
)

	)

35 
	#MSR_IA32_PERFCTR0
 0x000000c1

	)

36 
	#MSR_IA32_PERFCTR1
 0x000000c2

	)

37 
	#MSR_FSB_FREQ
 0x000000cd

	)

39 
	#MSR_NHM_SNB_PKG_CST_CFG_CTL
 0x000000e2

	)

40 
	#NHM_C3_AUTO_DEMOTE
 (1UL << 25)

	)

41 
	#NHM_C1_AUTO_DEMOTE
 (1UL << 26)

	)

42 
	#ATM_LNC_C6_AUTO_DEMOTE
 (1UL << 25)

	)

44 
	#MSR_MTRRˇp
 0x000000„

	)

45 
	#MSR_IA32_BBL_CR_CTL
 0x00000119

	)

46 
	#MSR_IA32_BBL_CR_CTL3
 0x0000011e

	)

48 
	#MSR_IA32_SYSENTER_CS
 0x00000174

	)

49 
	#MSR_IA32_SYSENTER_ESP
 0x00000175

	)

50 
	#MSR_IA32_SYSENTER_EIP
 0x00000176

	)

52 
	#MSR_IA32_MCG_CAP
 0x00000179

	)

53 
	#MSR_IA32_MCG_STATUS
 0x0000017a

	)

54 
	#MSR_IA32_MCG_CTL
 0x0000017b

	)

56 
	#MSR_OFFCORE_RSP_0
 0x000001a6

	)

57 
	#MSR_OFFCORE_RSP_1
 0x000001a7

	)

59 
	#MSR_IA32_PEBS_ENABLE
 0x000003f1

	)

60 
	#MSR_IA32_DS_AREA
 0x00000600

	)

61 
	#MSR_IA32_PERF_CAPABILITIES
 0x00000345

	)

63 
	#MSR_MTRRfix64K_00000
 0x00000250

	)

64 
	#MSR_MTRRfix16K_80000
 0x00000258

	)

65 
	#MSR_MTRRfix16K_A0000
 0x00000259

	)

66 
	#MSR_MTRRfix4K_C0000
 0x00000268

	)

67 
	#MSR_MTRRfix4K_C8000
 0x00000269

	)

68 
	#MSR_MTRRfix4K_D0000
 0x0000026a

	)

69 
	#MSR_MTRRfix4K_D8000
 0x0000026b

	)

70 
	#MSR_MTRRfix4K_E0000
 0x0000026c

	)

71 
	#MSR_MTRRfix4K_E8000
 0x0000026d

	)

72 
	#MSR_MTRRfix4K_F0000
 0x0000026e

	)

73 
	#MSR_MTRRfix4K_F8000
 0x0000026f

	)

74 
	#MSR_MTRRdefTy≥
 0x000002ff

	)

76 
	#MSR_IA32_CR_PAT
 0x00000277

	)

78 
	#MSR_IA32_DEBUGCTLMSR
 0x000001d9

	)

79 
	#MSR_IA32_LASTBRANCHFROMIP
 0x000001db

	)

80 
	#MSR_IA32_LASTBRANCHTOIP
 0x000001dc

	)

81 
	#MSR_IA32_LASTINTFROMIP
 0x000001dd

	)

82 
	#MSR_IA32_LASTINTTOIP
 0x000001de

	)

85 
	#DEBUGCTLMSR_LBR
 (1UL << 0Ë

	)

86 
	#DEBUGCTLMSR_BTF
 (1UL << 1Ë

	)

87 
	#DEBUGCTLMSR_TR
 (1UL << 6)

	)

88 
	#DEBUGCTLMSR_BTS
 (1UL << 7)

	)

89 
	#DEBUGCTLMSR_BTINT
 (1UL << 8)

	)

90 
	#DEBUGCTLMSR_BTS_OFF_OS
 (1UL << 9)

	)

91 
	#DEBUGCTLMSR_BTS_OFF_USR
 (1UL << 10)

	)

92 
	#DEBUGCTLMSR_FREEZE_LBRS_ON_PMI
 (1UL << 11)

	)

94 
	#MSR_IA32_MC0_CTL
 0x00000400

	)

95 
	#MSR_IA32_MC0_STATUS
 0x00000401

	)

96 
	#MSR_IA32_MC0_ADDR
 0x00000402

	)

97 
	#MSR_IA32_MC0_MISC
 0x00000403

	)

99 
	#MSR_AMD64_MC0_MASK
 0xc0010044

	)

101 
	#MSR_IA32_MCx_CTL
(
x
Ë(
MSR_IA32_MC0_CTL
 + 4*(x))

	)

102 
	#MSR_IA32_MCx_STATUS
(
x
Ë(
MSR_IA32_MC0_STATUS
 + 4*(x))

	)

103 
	#MSR_IA32_MCx_ADDR
(
x
Ë(
MSR_IA32_MC0_ADDR
 + 4*(x))

	)

104 
	#MSR_IA32_MCx_MISC
(
x
Ë(
MSR_IA32_MC0_MISC
 + 4*(x))

	)

106 
	#MSR_AMD64_MCx_MASK
(
x
Ë(
MSR_AMD64_MC0_MASK
 + (x))

	)

109 
	#MSR_IA32_MC0_CTL2
 0x00000280

	)

110 
	#MSR_IA32_MCx_CTL2
(
x
Ë(
MSR_IA32_MC0_CTL2
 + (x))

	)

112 
	#MSR_P6_PERFCTR0
 0x000000c1

	)

113 
	#MSR_P6_PERFCTR1
 0x000000c2

	)

114 
	#MSR_P6_EVNTSEL0
 0x00000186

	)

115 
	#MSR_P6_EVNTSEL1
 0x00000187

	)

120 
	#MSR_AMD64_PATCH_LEVEL
 0x0000008b

	)

121 
	#MSR_AMD64_TSC_RATIO
 0xc0000104

	)

122 
	#MSR_AMD64_NB_CFG
 0xc001001f

	)

123 
	#MSR_AMD64_PATCH_LOADER
 0xc0010020

	)

124 
	#MSR_AMD64_OSVW_ID_LENGTH
 0xc0010140

	)

125 
	#MSR_AMD64_OSVW_STATUS
 0xc0010141

	)

126 
	#MSR_AMD64_LS_CFG
 0xc0011020

	)

127 
	#MSR_AMD64_DC_CFG
 0xc0011022

	)

128 
	#MSR_AMD64_IBSFETCHCTL
 0xc0011030

	)

129 
	#MSR_AMD64_IBSFETCHLINAD
 0xc0011031

	)

130 
	#MSR_AMD64_IBSFETCHPHYSAD
 0xc0011032

	)

131 
	#MSR_AMD64_IBSOPCTL
 0xc0011033

	)

132 
	#MSR_AMD64_IBSOPRIP
 0xc0011034

	)

133 
	#MSR_AMD64_IBSOPDATA
 0xc0011035

	)

134 
	#MSR_AMD64_IBSOPDATA2
 0xc0011036

	)

135 
	#MSR_AMD64_IBSOPDATA3
 0xc0011037

	)

136 
	#MSR_AMD64_IBSDCLINAD
 0xc0011038

	)

137 
	#MSR_AMD64_IBSDCPHYSAD
 0xc0011039

	)

138 
	#MSR_AMD64_IBSCTL
 0xc001103a

	)

139 
	#MSR_AMD64_IBSBRTARGET
 0xc001103b

	)

142 
	#MSR_F15H_PERF_CTL
 0xc0010200

	)

143 
	#MSR_F15H_PERF_CTR
 0xc0010201

	)

146 
	#MSR_FAM10H_MMIO_CONF_BASE
 0xc0010058

	)

147 
	#FAM10H_MMIO_CONF_ENABLE
 (1<<0)

	)

148 
	#FAM10H_MMIO_CONF_BUSRANGE_MASK
 0xf

	)

149 
	#FAM10H_MMIO_CONF_BUSRANGE_SHIFT
 2

	)

150 
	#FAM10H_MMIO_CONF_BASE_MASK
 0xfffffffULL

	)

151 
	#FAM10H_MMIO_CONF_BASE_SHIFT
 20

	)

152 
	#MSR_FAM10H_NODE_ID
 0xc001100c

	)

155 
	#MSR_K8_TOP_MEM1
 0xc001001a

	)

156 
	#MSR_K8_TOP_MEM2
 0xc001001d

	)

157 
	#MSR_K8_SYSCFG
 0xc0010010

	)

158 
	#MSR_K8_INT_PENDING_MSG
 0xc0010055

	)

160 
	#K8_INTP_C1E_ACTIVE_MASK
 0x18000000

	)

161 
	#MSR_K8_TSEG_ADDR
 0xc0010112

	)

162 
	#K8_MTRRFIXRANGE_DRAM_ENABLE
 0x00040000

	)

163 
	#K8_MTRRFIXRANGE_DRAM_MODIFY
 0x00080000

	)

164 
	#K8_MTRR_RDMEM_WRMEM_MASK
 0x18181818

	)

167 
	#MSR_K7_EVNTSEL0
 0xc0010000

	)

168 
	#MSR_K7_PERFCTR0
 0xc0010004

	)

169 
	#MSR_K7_EVNTSEL1
 0xc0010001

	)

170 
	#MSR_K7_PERFCTR1
 0xc0010005

	)

171 
	#MSR_K7_EVNTSEL2
 0xc0010002

	)

172 
	#MSR_K7_PERFCTR2
 0xc0010006

	)

173 
	#MSR_K7_EVNTSEL3
 0xc0010003

	)

174 
	#MSR_K7_PERFCTR3
 0xc0010007

	)

175 
	#MSR_K7_CLK_CTL
 0xc001001b

	)

176 
	#MSR_K7_HWCR
 0xc0010015

	)

177 
	#MSR_K7_FID_VID_CTL
 0xc0010041

	)

178 
	#MSR_K7_FID_VID_STATUS
 0xc0010042

	)

181 
	#MSR_K6_WHCR
 0xc0000082

	)

182 
	#MSR_K6_UWCCR
 0xc0000085

	)

183 
	#MSR_K6_EPMR
 0xc0000086

	)

184 
	#MSR_K6_PSOR
 0xc0000087

	)

185 
	#MSR_K6_PFIR
 0xc0000088

	)

188 
	#MSR_IDT_FCR1
 0x00000107

	)

189 
	#MSR_IDT_FCR2
 0x00000108

	)

190 
	#MSR_IDT_FCR3
 0x00000109

	)

191 
	#MSR_IDT_FCR4
 0x0000010a

	)

193 
	#MSR_IDT_MCR0
 0x00000110

	)

194 
	#MSR_IDT_MCR1
 0x00000111

	)

195 
	#MSR_IDT_MCR2
 0x00000112

	)

196 
	#MSR_IDT_MCR3
 0x00000113

	)

197 
	#MSR_IDT_MCR4
 0x00000114

	)

198 
	#MSR_IDT_MCR5
 0x00000115

	)

199 
	#MSR_IDT_MCR6
 0x00000116

	)

200 
	#MSR_IDT_MCR7
 0x00000117

	)

201 
	#MSR_IDT_MCR_CTRL
 0x00000120

	)

204 
	#MSR_VIA_FCR
 0x00001107

	)

205 
	#MSR_VIA_LONGHAUL
 0x0000110a

	)

206 
	#MSR_VIA_RNG
 0x0000110b

	)

207 
	#MSR_VIA_BCR2
 0x00001147

	)

210 
	#MSR_TMTA_LONGRUN_CTRL
 0x80868010

	)

211 
	#MSR_TMTA_LONGRUN_FLAGS
 0x80868011

	)

212 
	#MSR_TMTA_LRTI_READOUT
 0x80868018

	)

213 
	#MSR_TMTA_LRTI_VOLT_MHZ
 0x8086801a

	)

216 
	#MSR_IA32_P5_MC_ADDR
 0x00000000

	)

217 
	#MSR_IA32_P5_MC_TYPE
 0x00000001

	)

218 
	#MSR_IA32_TSC
 0x00000010

	)

219 
	#MSR_IA32_PLATFORM_ID
 0x00000017

	)

220 
	#MSR_IA32_EBL_CR_POWERON
 0x0000002a

	)

221 
	#MSR_EBC_FREQUENCY_ID
 0x0000002c

	)

222 
	#MSR_IA32_FEATURE_CONTROL
 0x0000003a

	)

224 
	#FEATURE_CONTROL_LOCKED
 (1<<0)

	)

225 
	#FEATURE_CONTROL_VMXON_ENABLED_INSIDE_SMX
 (1<<1)

	)

226 
	#FEATURE_CONTROL_VMXON_ENABLED_OUTSIDE_SMX
 (1<<2)

	)

228 
	#MSR_IA32_APICBASE
 0x0000001b

	)

229 
	#MSR_IA32_APICBASE_BSP
 (1<<8)

	)

230 
	#MSR_IA32_APICBASE_ENABLE
 (1<<11)

	)

231 
	#MSR_IA32_APICBASE_BASE
 (0xfffff<<12)

	)

233 
	#MSR_IA32_TSCDEADLINE
 0x000006e0

	)

235 
	#MSR_IA32_UCODE_WRITE
 0x00000079

	)

236 
	#MSR_IA32_UCODE_REV
 0x0000008b

	)

238 
	#MSR_IA32_PERF_STATUS
 0x00000198

	)

239 
	#MSR_IA32_PERF_CTL
 0x00000199

	)

241 
	#MSR_IA32_MPERF
 0x000000e7

	)

242 
	#MSR_IA32_APERF
 0x000000e8

	)

244 
	#MSR_IA32_THERM_CONTROL
 0x0000019a

	)

245 
	#MSR_IA32_THERM_INTERRUPT
 0x0000019b

	)

247 
	#THERM_INT_HIGH_ENABLE
 (1 << 0)

	)

248 
	#THERM_INT_LOW_ENABLE
 (1 << 1)

	)

249 
	#THERM_INT_PLN_ENABLE
 (1 << 24)

	)

251 
	#MSR_IA32_THERM_STATUS
 0x0000019c

	)

253 
	#THERM_STATUS_PROCHOT
 (1 << 0)

	)

254 
	#THERM_STATUS_POWER_LIMIT
 (1 << 10)

	)

256 
	#MSR_THERM2_CTL
 0x0000019d

	)

258 
	#MSR_THERM2_CTL_TM_SELECT
 (1ULL << 16)

	)

260 
	#MSR_IA32_MISC_ENABLE
 0x000001a0

	)

262 
	#MSR_IA32_TEMPERATURE_TARGET
 0x000001a2

	)

264 
	#MSR_IA32_ENERGY_PERF_BIAS
 0x000001b0

	)

265 
	#ENERGY_PERF_BIAS_PERFORMANCE
 0

	)

266 
	#ENERGY_PERF_BIAS_NORMAL
 6

	)

267 
	#ENERGY_PERF_BIAS_POWERSAVE
 15

	)

269 
	#MSR_IA32_PACKAGE_THERM_STATUS
 0x000001b1

	)

271 
	#PACKAGE_THERM_STATUS_PROCHOT
 (1 << 0)

	)

272 
	#PACKAGE_THERM_STATUS_POWER_LIMIT
 (1 << 10)

	)

274 
	#MSR_IA32_PACKAGE_THERM_INTERRUPT
 0x000001b2

	)

276 
	#PACKAGE_THERM_INT_HIGH_ENABLE
 (1 << 0)

	)

277 
	#PACKAGE_THERM_INT_LOW_ENABLE
 (1 << 1)

	)

278 
	#PACKAGE_THERM_INT_PLN_ENABLE
 (1 << 24)

	)

281 
	#THERM_INT_THRESHOLD0_ENABLE
 (1 << 15)

	)

282 
	#THERM_SHIFT_THRESHOLD0
 8

	)

283 
	#THERM_MASK_THRESHOLD0
 (0x7‡<< 
THERM_SHIFT_THRESHOLD0
)

	)

284 
	#THERM_INT_THRESHOLD1_ENABLE
 (1 << 23)

	)

285 
	#THERM_SHIFT_THRESHOLD1
 16

	)

286 
	#THERM_MASK_THRESHOLD1
 (0x7‡<< 
THERM_SHIFT_THRESHOLD1
)

	)

287 
	#THERM_STATUS_THRESHOLD0
 (1 << 6)

	)

288 
	#THERM_LOG_THRESHOLD0
 (1 << 7)

	)

289 
	#THERM_STATUS_THRESHOLD1
 (1 << 8)

	)

290 
	#THERM_LOG_THRESHOLD1
 (1 << 9)

	)

293 
	#MSR_IA32_MISC_ENABLE_FAST_STRING
 (1ULL << 0)

	)

294 
	#MSR_IA32_MISC_ENABLE_TCC
 (1ULL << 1)

	)

295 
	#MSR_IA32_MISC_ENABLE_EMON
 (1ULL << 7)

	)

296 
	#MSR_IA32_MISC_ENABLE_BTS_UNAVAIL
 (1ULL << 11)

	)

297 
	#MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL
 (1ULL << 12)

	)

298 
	#MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP
 (1ULL << 16)

	)

299 
	#MSR_IA32_MISC_ENABLE_MWAIT
 (1ULL << 18)

	)

300 
	#MSR_IA32_MISC_ENABLE_LIMIT_CPUID
 (1ULL << 22)

	)

301 
	#MSR_IA32_MISC_ENABLE_XTPR_DISABLE
 (1ULL << 23)

	)

302 
	#MSR_IA32_MISC_ENABLE_XD_DISABLE
 (1ULL << 34)

	)

305 
	#MSR_IA32_MISC_ENABLE_X87_COMPAT
 (1ULL << 2)

	)

306 
	#MSR_IA32_MISC_ENABLE_TM1
 (1ULL << 3)

	)

307 
	#MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE
 (1ULL << 4)

	)

308 
	#MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE
 (1ULL << 6)

	)

309 
	#MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK
 (1ULL << 8)

	)

310 
	#MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE
 (1ULL << 9)

	)

311 
	#MSR_IA32_MISC_ENABLE_FERR
 (1ULL << 10)

	)

312 
	#MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX
 (1ULL << 10)

	)

313 
	#MSR_IA32_MISC_ENABLE_TM2
 (1ULL << 13)

	)

314 
	#MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE
 (1ULL << 19)

	)

315 
	#MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK
 (1ULL << 20)

	)

316 
	#MSR_IA32_MISC_ENABLE_L1D_CONTEXT
 (1ULL << 24)

	)

317 
	#MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE
 (1ULL << 37)

	)

318 
	#MSR_IA32_MISC_ENABLE_TURBO_DISABLE
 (1ULL << 38)

	)

319 
	#MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE
 (1ULL << 39)

	)

322 
	#MSR_IA32_MCG_EAX
 0x00000180

	)

323 
	#MSR_IA32_MCG_EBX
 0x00000181

	)

324 
	#MSR_IA32_MCG_ECX
 0x00000182

	)

325 
	#MSR_IA32_MCG_EDX
 0x00000183

	)

326 
	#MSR_IA32_MCG_ESI
 0x00000184

	)

327 
	#MSR_IA32_MCG_EDI
 0x00000185

	)

328 
	#MSR_IA32_MCG_EBP
 0x00000186

	)

329 
	#MSR_IA32_MCG_ESP
 0x00000187

	)

330 
	#MSR_IA32_MCG_EFLAGS
 0x00000188

	)

331 
	#MSR_IA32_MCG_EIP
 0x00000189

	)

332 
	#MSR_IA32_MCG_RESERVED
 0x0000018a

	)

335 
	#MSR_P4_BPU_PERFCTR0
 0x00000300

	)

336 
	#MSR_P4_BPU_PERFCTR1
 0x00000301

	)

337 
	#MSR_P4_BPU_PERFCTR2
 0x00000302

	)

338 
	#MSR_P4_BPU_PERFCTR3
 0x00000303

	)

339 
	#MSR_P4_MS_PERFCTR0
 0x00000304

	)

340 
	#MSR_P4_MS_PERFCTR1
 0x00000305

	)

341 
	#MSR_P4_MS_PERFCTR2
 0x00000306

	)

342 
	#MSR_P4_MS_PERFCTR3
 0x00000307

	)

343 
	#MSR_P4_FLAME_PERFCTR0
 0x00000308

	)

344 
	#MSR_P4_FLAME_PERFCTR1
 0x00000309

	)

345 
	#MSR_P4_FLAME_PERFCTR2
 0x0000030a

	)

346 
	#MSR_P4_FLAME_PERFCTR3
 0x0000030b

	)

347 
	#MSR_P4_IQ_PERFCTR0
 0x0000030c

	)

348 
	#MSR_P4_IQ_PERFCTR1
 0x0000030d

	)

349 
	#MSR_P4_IQ_PERFCTR2
 0x0000030e

	)

350 
	#MSR_P4_IQ_PERFCTR3
 0x0000030f

	)

351 
	#MSR_P4_IQ_PERFCTR4
 0x00000310

	)

352 
	#MSR_P4_IQ_PERFCTR5
 0x00000311

	)

353 
	#MSR_P4_BPU_CCCR0
 0x00000360

	)

354 
	#MSR_P4_BPU_CCCR1
 0x00000361

	)

355 
	#MSR_P4_BPU_CCCR2
 0x00000362

	)

356 
	#MSR_P4_BPU_CCCR3
 0x00000363

	)

357 
	#MSR_P4_MS_CCCR0
 0x00000364

	)

358 
	#MSR_P4_MS_CCCR1
 0x00000365

	)

359 
	#MSR_P4_MS_CCCR2
 0x00000366

	)

360 
	#MSR_P4_MS_CCCR3
 0x00000367

	)

361 
	#MSR_P4_FLAME_CCCR0
 0x00000368

	)

362 
	#MSR_P4_FLAME_CCCR1
 0x00000369

	)

363 
	#MSR_P4_FLAME_CCCR2
 0x0000036a

	)

364 
	#MSR_P4_FLAME_CCCR3
 0x0000036b

	)

365 
	#MSR_P4_IQ_CCCR0
 0x0000036c

	)

366 
	#MSR_P4_IQ_CCCR1
 0x0000036d

	)

367 
	#MSR_P4_IQ_CCCR2
 0x0000036e

	)

368 
	#MSR_P4_IQ_CCCR3
 0x0000036f

	)

369 
	#MSR_P4_IQ_CCCR4
 0x00000370

	)

370 
	#MSR_P4_IQ_CCCR5
 0x00000371

	)

371 
	#MSR_P4_ALF_ESCR0
 0x000003ˇ

	)

372 
	#MSR_P4_ALF_ESCR1
 0x000003cb

	)

373 
	#MSR_P4_BPU_ESCR0
 0x000003b2

	)

374 
	#MSR_P4_BPU_ESCR1
 0x000003b3

	)

375 
	#MSR_P4_BSU_ESCR0
 0x000003a0

	)

376 
	#MSR_P4_BSU_ESCR1
 0x000003a1

	)

377 
	#MSR_P4_CRU_ESCR0
 0x000003b8

	)

378 
	#MSR_P4_CRU_ESCR1
 0x000003b9

	)

379 
	#MSR_P4_CRU_ESCR2
 0x000003cc

	)

380 
	#MSR_P4_CRU_ESCR3
 0x000003cd

	)

381 
	#MSR_P4_CRU_ESCR4
 0x000003e0

	)

382 
	#MSR_P4_CRU_ESCR5
 0x000003e1

	)

383 
	#MSR_P4_DAC_ESCR0
 0x000003a8

	)

384 
	#MSR_P4_DAC_ESCR1
 0x000003a9

	)

385 
	#MSR_P4_FIRM_ESCR0
 0x000003a4

	)

386 
	#MSR_P4_FIRM_ESCR1
 0x000003a5

	)

387 
	#MSR_P4_FLAME_ESCR0
 0x000003a6

	)

388 
	#MSR_P4_FLAME_ESCR1
 0x000003a7

	)

389 
	#MSR_P4_FSB_ESCR0
 0x000003a2

	)

390 
	#MSR_P4_FSB_ESCR1
 0x000003a3

	)

391 
	#MSR_P4_IQ_ESCR0
 0x000003ba

	)

392 
	#MSR_P4_IQ_ESCR1
 0x000003bb

	)

393 
	#MSR_P4_IS_ESCR0
 0x000003b4

	)

394 
	#MSR_P4_IS_ESCR1
 0x000003b5

	)

395 
	#MSR_P4_ITLB_ESCR0
 0x000003b6

	)

396 
	#MSR_P4_ITLB_ESCR1
 0x000003b7

	)

397 
	#MSR_P4_IX_ESCR0
 0x000003c8

	)

398 
	#MSR_P4_IX_ESCR1
 0x000003c9

	)

399 
	#MSR_P4_MOB_ESCR0
 0x000003Ø

	)

400 
	#MSR_P4_MOB_ESCR1
 0x000003ab

	)

401 
	#MSR_P4_MS_ESCR0
 0x000003c0

	)

402 
	#MSR_P4_MS_ESCR1
 0x000003c1

	)

403 
	#MSR_P4_PMH_ESCR0
 0x000003ac

	)

404 
	#MSR_P4_PMH_ESCR1
 0x000003ad

	)

405 
	#MSR_P4_RAT_ESCR0
 0x000003bc

	)

406 
	#MSR_P4_RAT_ESCR1
 0x000003bd

	)

407 
	#MSR_P4_SAAT_ESCR0
 0x000003´

	)

408 
	#MSR_P4_SAAT_ESCR1
 0x000003af

	)

409 
	#MSR_P4_SSU_ESCR0
 0x000003be

	)

410 
	#MSR_P4_SSU_ESCR1
 0x000003b‡

	)

412 
	#MSR_P4_TBPU_ESCR0
 0x000003c2

	)

413 
	#MSR_P4_TBPU_ESCR1
 0x000003c3

	)

414 
	#MSR_P4_TC_ESCR0
 0x000003c4

	)

415 
	#MSR_P4_TC_ESCR1
 0x000003c5

	)

416 
	#MSR_P4_U2L_ESCR0
 0x000003b0

	)

417 
	#MSR_P4_U2L_ESCR1
 0x000003b1

	)

419 
	#MSR_P4_PEBS_MATRIX_VERT
 0x000003f2

	)

422 
	#MSR_CORE_PERF_FIXED_CTR0
 0x00000309

	)

423 
	#MSR_CORE_PERF_FIXED_CTR1
 0x0000030a

	)

424 
	#MSR_CORE_PERF_FIXED_CTR2
 0x0000030b

	)

425 
	#MSR_CORE_PERF_FIXED_CTR_CTRL
 0x0000038d

	)

426 
	#MSR_CORE_PERF_GLOBAL_STATUS
 0x0000038e

	)

427 
	#MSR_CORE_PERF_GLOBAL_CTRL
 0x0000038f

	)

428 
	#MSR_CORE_PERF_GLOBAL_OVF_CTRL
 0x00000390

	)

431 
	#MSR_GEODE_BUSCONT_CONF0
 0x00001900

	)

434 
	#MSR_IA32_VMX_BASIC
 0x00000480

	)

435 
	#MSR_IA32_VMX_PINBASED_CTLS
 0x00000481

	)

436 
	#MSR_IA32_VMX_PROCBASED_CTLS
 0x00000482

	)

437 
	#MSR_IA32_VMX_EXIT_CTLS
 0x00000483

	)

438 
	#MSR_IA32_VMX_ENTRY_CTLS
 0x00000484

	)

439 
	#MSR_IA32_VMX_MISC
 0x00000485

	)

440 
	#MSR_IA32_VMX_CR0_FIXED0
 0x00000486

	)

441 
	#MSR_IA32_VMX_CR0_FIXED1
 0x00000487

	)

442 
	#MSR_IA32_VMX_CR4_FIXED0
 0x00000488

	)

443 
	#MSR_IA32_VMX_CR4_FIXED1
 0x00000489

	)

444 
	#MSR_IA32_VMX_VMCS_ENUM
 0x0000048a

	)

445 
	#MSR_IA32_VMX_PROCBASED_CTLS2
 0x0000048b

	)

446 
	#MSR_IA32_VMX_EPT_VPID_CAP
 0x0000048c

	)

447 
	#MSR_IA32_VMX_TRUE_PINBASED_CTLS
 0x0000048d

	)

448 
	#MSR_IA32_VMX_TRUE_PROCBASED_CTLS
 0x0000048e

	)

449 
	#MSR_IA32_VMX_TRUE_EXIT_CTLS
 0x0000048f

	)

450 
	#MSR_IA32_VMX_TRUE_ENTRY_CTLS
 0x00000490

	)

453 
	#VMX_BASIC_VMCS_SIZE_SHIFT
 32

	)

454 
	#VMX_BASIC_64
 0x0001000000000000LLU

	)

455 
	#VMX_BASIC_MEM_TYPE_SHIFT
 50

	)

456 
	#VMX_BASIC_MEM_TYPE_MASK
 0x003c000000000000LLU

	)

457 
	#VMX_BASIC_MEM_TYPE_WB
 6LLU

	)

458 
	#VMX_BASIC_INOUT
 0x0040000000000000LLU

	)

462 
	#MSR_VM_CR
 0xc0010114

	)

463 
	#MSR_VM_IGNNE
 0xc0010115

	)

464 
	#MSR_VM_HSAVE_PA
 0xc0010117

	)

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/linux/blk_types.h

5 #i‚de‡
__LINUX_BLK_TYPES_H


6 
	#__LINUX_BLK_TYPES_H


	)

8 #ifde‡
CONFIG_BLOCK


10 
	~<löux/ty≥s.h
>

12 
	gbio_£t
;

13 
	gbio
;

14 
	gbio_öãgrôy_∑ylﬂd
;

15 
	g∑ge
;

16 
	gblock_devi˚
;

17 (
	tbio_íd_io_t
Ë(
	tbio
 *, );

18 (
	tbio_de°ru˘‹_t
Ë(
	tbio
 *);

23 
	sbio_vec
 {

24 
∑ge
 *
bv_∑ge
;

25 
bv_Àn
;

26 
bv_off£t
;

33 
	sbio
 {

34 
£˘‹_t
 
bi_£˘‹
;

36 
bio
 *
bi_√xt
;

37 
block_devi˚
 *
bi_bdev
;

38 
bi_Êags
;

39 
bi_rw
;

43 
bi_v˙t
;

44 
bi_idx
;

49 
bi_phys_£gmíts
;

51 
bi_size
;

57 
bi_£g_‰⁄t_size
;

58 
bi_£g_back_size
;

60 
bi_max_vecs
;

62 
©omic_t
 
bi_˙t
;

64 
bio_vec
 *
bi_io_vec
;

66 
bio_íd_io_t
 *
bi_íd_io
;

68 *
bi_¥iv©e
;

69 #i‡
	`deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

70 
bio_öãgrôy_∑ylﬂd
 *
bi_öãgrôy
;

73 
bio_de°ru˘‹_t
 *
bi_de°ru˘‹
;

80 
bio_vec
 
bi_ölöe_vecs
[0];

86 
	#BIO_UPTODATE
 0

	)

87 
	#BIO_RW_BLOCK
 1

	)

88 
	#BIO_EOF
 2

	)

89 
	#BIO_SEG_VALID
 3

	)

90 
	#BIO_CLONED
 4

	)

91 
	#BIO_BOUNCED
 5

	)

92 
	#BIO_USER_MAPPED
 6

	)

93 
	#BIO_EOPNOTSUPP
 7

	)

94 
	#BIO_NULL_MAPPED
 8

	)

95 
	#BIO_FS_INTEGRITY
 9

	)

96 
	#BIO_QUIET
 10

	)

97 
	#BIO_MAPPED_INTEGRITY
 11

	)

98 
	#bio_Êagged
(
bio
, 
Êag
Ë((bio)->
bi_Êags
 & (1 << (Êag)))

	)

103 
	#BIO_POOL_BITS
 (4)

	)

104 
	#BIO_POOL_NONE
 ((1UL << 
BIO_POOL_BITS
Ë- 1)

	)

105 
	#BIO_POOL_OFFSET
 (
BITS_PER_LONG
 - 
BIO_POOL_BITS
)

	)

106 
	#BIO_POOL_MASK
 (1UL << 
BIO_POOL_OFFSET
)

	)

107 
	#BIO_POOL_IDX
(
bio
Ë((bio)->
bi_Êags
 >> 
BIO_POOL_OFFSET
)

	)

115 
	erq_Êag_bôs
 {

117 
__REQ_WRITE
,

118 
__REQ_FAILFAST_DEV
,

119 
__REQ_FAILFAST_TRANSPORT
,

120 
__REQ_FAILFAST_DRIVER
,

122 
__REQ_SYNC
,

123 
__REQ_META
,

124 
__REQ_PRIO
,

125 
__REQ_DISCARD
,

126 
__REQ_SECURE
,

128 
__REQ_NOIDLE
,

129 
__REQ_FUA
,

130 
__REQ_FLUSH
,

133 
__REQ_RAHEAD
,

134 
__REQ_THROTTLED
,

138 
__REQ_SORTED
,

139 
__REQ_SOFTBARRIER
,

140 
__REQ_NOMERGE
,

141 
__REQ_STARTED
,

142 
__REQ_DONTPREP
,

143 
__REQ_QUEUED
,

144 
__REQ_ELVPRIV
,

145 
__REQ_FAILED
,

146 
__REQ_QUIET
,

147 
__REQ_PREEMPT
,

150 
__REQ_ALLOCED
,

151 
__REQ_COPY_USER
,

152 
__REQ_FLUSH_SEQ
,

153 
__REQ_IO_STAT
,

154 
__REQ_MIXED_MERGE
,

155 
__REQ_NR_BITS
,

158 
	#REQ_WRITE
 (1 << 
__REQ_WRITE
)

	)

159 
	#REQ_FAILFAST_DEV
 (1 << 
__REQ_FAILFAST_DEV
)

	)

160 
	#REQ_FAILFAST_TRANSPORT
 (1 << 
__REQ_FAILFAST_TRANSPORT
)

	)

161 
	#REQ_FAILFAST_DRIVER
 (1 << 
__REQ_FAILFAST_DRIVER
)

	)

162 
	#REQ_SYNC
 (1 << 
__REQ_SYNC
)

	)

163 
	#REQ_META
 (1 << 
__REQ_META
)

	)

164 
	#REQ_PRIO
 (1 << 
__REQ_PRIO
)

	)

165 
	#REQ_DISCARD
 (1 << 
__REQ_DISCARD
)

	)

166 
	#REQ_NOIDLE
 (1 << 
__REQ_NOIDLE
)

	)

168 
	#REQ_FAILFAST_MASK
 \

169 (
REQ_FAILFAST_DEV
 | 
REQ_FAILFAST_TRANSPORT
 | 
REQ_FAILFAST_DRIVER
)

	)

170 
	#REQ_COMMON_MASK
 \

171 (
REQ_WRITE
 | 
REQ_FAILFAST_MASK
 | 
REQ_SYNC
 | 
REQ_META
 | 
REQ_PRIO
 | \

172 
REQ_DISCARD
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
 | 
REQ_SECURE
)

	)

173 
	#REQ_CLONE_MASK
 
REQ_COMMON_MASK


	)

175 
	#REQ_RAHEAD
 (1 << 
__REQ_RAHEAD
)

	)

176 
	#REQ_THROTTLED
 (1 << 
__REQ_THROTTLED
)

	)

178 
	#REQ_SORTED
 (1 << 
__REQ_SORTED
)

	)

179 
	#REQ_SOFTBARRIER
 (1 << 
__REQ_SOFTBARRIER
)

	)

180 
	#REQ_FUA
 (1 << 
__REQ_FUA
)

	)

181 
	#REQ_NOMERGE
 (1 << 
__REQ_NOMERGE
)

	)

182 
	#REQ_STARTED
 (1 << 
__REQ_STARTED
)

	)

183 
	#REQ_DONTPREP
 (1 << 
__REQ_DONTPREP
)

	)

184 
	#REQ_QUEUED
 (1 << 
__REQ_QUEUED
)

	)

185 
	#REQ_ELVPRIV
 (1 << 
__REQ_ELVPRIV
)

	)

186 
	#REQ_FAILED
 (1 << 
__REQ_FAILED
)

	)

187 
	#REQ_QUIET
 (1 << 
__REQ_QUIET
)

	)

188 
	#REQ_PREEMPT
 (1 << 
__REQ_PREEMPT
)

	)

189 
	#REQ_ALLOCED
 (1 << 
__REQ_ALLOCED
)

	)

190 
	#REQ_COPY_USER
 (1 << 
__REQ_COPY_USER
)

	)

191 
	#REQ_FLUSH
 (1 << 
__REQ_FLUSH
)

	)

192 
	#REQ_FLUSH_SEQ
 (1 << 
__REQ_FLUSH_SEQ
)

	)

193 
	#REQ_IO_STAT
 (1 << 
__REQ_IO_STAT
)

	)

194 
	#REQ_MIXED_MERGE
 (1 << 
__REQ_MIXED_MERGE
)

	)

195 
	#REQ_SECURE
 (1 << 
__REQ_SECURE
)

	)

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_VENDOR_ID
 0x00

	)

30 
	#PCI_DEVICE_ID
 0x02

	)

31 
	#PCI_COMMAND
 0x04

	)

32 
	#PCI_COMMAND_IO
 0x1

	)

33 
	#PCI_COMMAND_MEMORY
 0x2

	)

34 
	#PCI_COMMAND_MASTER
 0x4

	)

35 
	#PCI_COMMAND_SPECIAL
 0x8

	)

36 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

37 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

38 
	#PCI_COMMAND_PARITY
 0x40

	)

39 
	#PCI_COMMAND_WAIT
 0x80

	)

40 
	#PCI_COMMAND_SERR
 0x100

	)

41 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

42 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

44 
	#PCI_STATUS
 0x06

	)

45 
	#PCI_STATUS_INTERRUPT
 0x08

	)

46 
	#PCI_STATUS_CAP_LIST
 0x10

	)

47 
	#PCI_STATUS_66MHZ
 0x20

	)

48 
	#PCI_STATUS_UDF
 0x40

	)

49 
	#PCI_STATUS_FAST_BACK
 0x80

	)

50 
	#PCI_STATUS_PARITY
 0x100

	)

51 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

52 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

53 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

54 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

55 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

56 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

57 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

58 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

59 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

61 
	#PCI_CLASS_REVISION
 0x08

	)

62 
	#PCI_REVISION_ID
 0x08

	)

63 
	#PCI_CLASS_PROG
 0x09

	)

64 
	#PCI_CLASS_DEVICE
 0x0®

	)

66 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

67 
	#PCI_LATENCY_TIMER
 0x0d

	)

68 
	#PCI_HEADER_TYPE
 0x0ê

	)

69 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

70 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

71 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

73 
	#PCI_BIST
 0x0‡

	)

74 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

75 
	#PCI_BIST_START
 0x40

	)

76 
	#PCI_BIST_CAPABLE
 0x80

	)

84 
	#PCI_BASE_ADDRESS_0
 0x10

	)

85 
	#PCI_BASE_ADDRESS_1
 0x14

	)

86 
	#PCI_BASE_ADDRESS_2
 0x18

	)

87 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

88 
	#PCI_BASE_ADDRESS_4
 0x20

	)

89 
	#PCI_BASE_ADDRESS_5
 0x24

	)

90 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

91 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

92 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

93 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

96 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

97 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

98 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

99 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

103 
	#PCI_CARDBUS_CIS
 0x28

	)

104 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

105 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

106 
	#PCI_ROM_ADDRESS
 0x30

	)

107 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

108 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

110 
	#PCI_CAPABILITY_LIST
 0x34

	)

113 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

114 
	#PCI_INTERRUPT_PIN
 0x3d

	)

115 
	#PCI_MIN_GNT
 0x3ê

	)

116 
	#PCI_MAX_LAT
 0x3‡

	)

119 
	#PCI_PRIMARY_BUS
 0x18

	)

120 
	#PCI_SECONDARY_BUS
 0x19

	)

121 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

122 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

123 
	#PCI_IO_BASE
 0x1¯

	)

124 
	#PCI_IO_LIMIT
 0x1d

	)

125 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

126 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

127 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

128 
	#PCI_IO_RANGE_MASK
 (~0x0fUL)

	)

129 
	#PCI_SEC_STATUS
 0x1ê

	)

130 
	#PCI_MEMORY_BASE
 0x20

	)

131 
	#PCI_MEMORY_LIMIT
 0x22

	)

132 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

133 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

134 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

135 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

136 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

137 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

138 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

139 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

140 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

141 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

142 
	#PCI_IO_BASE_UPPER16
 0x30

	)

143 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

146 
	#PCI_ROM_ADDRESS1
 0x38

	)

148 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

149 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

150 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

151 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

152 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

153 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

154 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

155 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

158 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

160 
	#PCI_CB_SEC_STATUS
 0x16

	)

161 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

162 
	#PCI_CB_CARD_BUS
 0x19

	)

163 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

164 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

165 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

166 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

167 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

168 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

169 
	#PCI_CB_IO_BASE_0
 0x2c

	)

170 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

171 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

172 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

173 
	#PCI_CB_IO_BASE_1
 0x34

	)

174 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

175 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

176 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

177 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

179 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

180 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

181 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

182 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

183 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

184 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

185 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

186 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

187 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

188 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

189 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

190 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

191 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

192 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

197 
	#PCI_CAP_LIST_ID
 0

	)

198 
	#PCI_CAP_ID_PM
 0x01

	)

199 
	#PCI_CAP_ID_AGP
 0x02

	)

200 
	#PCI_CAP_ID_VPD
 0x03

	)

201 
	#PCI_CAP_ID_SLOTID
 0x04

	)

202 
	#PCI_CAP_ID_MSI
 0x05

	)

203 
	#PCI_CAP_ID_CHSWP
 0x06

	)

204 
	#PCI_CAP_ID_PCIX
 0x07

	)

205 
	#PCI_CAP_ID_HT
 0x08

	)

206 
	#PCI_CAP_ID_VNDR
 0x09

	)

207 
	#PCI_CAP_ID_DBG
 0x0A

	)

208 
	#PCI_CAP_ID_CCRC
 0x0B

	)

209 
	#PCI_CAP_ID_SHPC
 0x0C

	)

210 
	#PCI_CAP_ID_SSVID
 0x0D

	)

211 
	#PCI_CAP_ID_AGP3
 0x0E

	)

212 
	#PCI_CAP_ID_EXP
 0x10

	)

213 
	#PCI_CAP_ID_MSIX
 0x11

	)

214 
	#PCI_CAP_ID_AF
 0x13

	)

215 
	#PCI_CAP_LIST_NEXT
 1

	)

216 
	#PCI_CAP_FLAGS
 2

	)

217 
	#PCI_CAP_SIZEOF
 4

	)

221 
	#PCI_PM_PMC
 2

	)

222 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

223 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

224 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

225 
	#PCI_PM_CAP_DSI
 0x0020

	)

226 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

227 
	#PCI_PM_CAP_D1
 0x0200

	)

228 
	#PCI_PM_CAP_D2
 0x0400

	)

229 
	#PCI_PM_CAP_PME
 0x0800

	)

230 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

231 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

232 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

233 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

234 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

235 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

236 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

237 
	#PCI_PM_CTRL
 4

	)

238 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

239 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

240 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

241 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

242 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

243 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

244 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

245 
	#PCI_PM_PPB_B2_B3
 0x40

	)

246 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

247 
	#PCI_PM_DATA_REGISTER
 7

	)

248 
	#PCI_PM_SIZEOF
 8

	)

252 
	#PCI_AGP_VERSION
 2

	)

253 
	#PCI_AGP_RFU
 3

	)

254 
	#PCI_AGP_STATUS
 4

	)

255 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

256 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

257 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

258 
	#PCI_AGP_STATUS_FW
 0x0010

	)

259 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

260 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

261 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

262 
	#PCI_AGP_COMMAND
 8

	)

263 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

264 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

265 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

266 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

267 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

268 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

269 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

270 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

271 
	#PCI_AGP_SIZEOF
 12

	)

275 
	#PCI_VPD_ADDR
 2

	)

276 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

277 
	#PCI_VPD_ADDR_F
 0x8000

	)

278 
	#PCI_VPD_DATA
 4

	)

282 
	#PCI_SID_ESR
 2

	)

283 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

284 
	#PCI_SID_ESR_FIC
 0x20

	)

285 
	#PCI_SID_CHASSIS_NR
 3

	)

289 
	#PCI_MSI_FLAGS
 2

	)

290 
	#PCI_MSI_FLAGS_64BIT
 0x80

	)

291 
	#PCI_MSI_FLAGS_QSIZE
 0x70

	)

292 
	#PCI_MSI_FLAGS_QMASK
 0x0ê

	)

293 
	#PCI_MSI_FLAGS_ENABLE
 0x01

	)

294 
	#PCI_MSI_FLAGS_MASKBIT
 0x100

	)

295 
	#PCI_MSI_RFU
 3

	)

296 
	#PCI_MSI_ADDRESS_LO
 4

	)

297 
	#PCI_MSI_ADDRESS_HI
 8

	)

298 
	#PCI_MSI_DATA_32
 8

	)

299 
	#PCI_MSI_MASK_32
 12

	)

300 
	#PCI_MSI_DATA_64
 12

	)

301 
	#PCI_MSI_MASK_64
 16

	)

304 
	#PCI_MSIX_FLAGS
 2

	)

305 
	#PCI_MSIX_FLAGS_QSIZE
 0x7FF

	)

306 
	#PCI_MSIX_FLAGS_ENABLE
 (1 << 15)

	)

307 
	#PCI_MSIX_FLAGS_MASKALL
 (1 << 14)

	)

308 
	#PCI_MSIX_TABLE
 4

	)

309 
	#PCI_MSIX_PBA
 8

	)

310 
	#PCI_MSIX_FLAGS_BIRMASK
 (7 << 0)

	)

313 
	#PCI_MSIX_ENTRY_SIZE
 16

	)

314 
	#PCI_MSIX_ENTRY_LOWER_ADDR
 0

	)

315 
	#PCI_MSIX_ENTRY_UPPER_ADDR
 4

	)

316 
	#PCI_MSIX_ENTRY_DATA
 8

	)

317 
	#PCI_MSIX_ENTRY_VECTOR_CTRL
 12

	)

318 
	#PCI_MSIX_ENTRY_CTRL_MASKBIT
 1

	)

322 
	#PCI_CHSWP_CSR
 2

	)

323 
	#PCI_CHSWP_DHA
 0x01

	)

324 
	#PCI_CHSWP_EIM
 0x02

	)

325 
	#PCI_CHSWP_PIE
 0x04

	)

326 
	#PCI_CHSWP_LOO
 0x08

	)

327 
	#PCI_CHSWP_PI
 0x30

	)

328 
	#PCI_CHSWP_EXT
 0x40

	)

329 
	#PCI_CHSWP_INS
 0x80

	)

333 
	#PCI_AF_LENGTH
 2

	)

334 
	#PCI_AF_CAP
 3

	)

335 
	#PCI_AF_CAP_TP
 0x01

	)

336 
	#PCI_AF_CAP_FLR
 0x02

	)

337 
	#PCI_AF_CTRL
 4

	)

338 
	#PCI_AF_CTRL_FLR
 0x01

	)

339 
	#PCI_AF_STATUS
 5

	)

340 
	#PCI_AF_STATUS_TP
 0x01

	)

344 
	#PCI_X_CMD
 2

	)

345 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

346 
	#PCI_X_CMD_ERO
 0x0002

	)

347 
	#PCI_X_CMD_READ_512
 0x0000

	)

348 
	#PCI_X_CMD_READ_1K
 0x0004

	)

349 
	#PCI_X_CMD_READ_2K
 0x0008

	)

350 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

351 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

353 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

354 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

355 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

356 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

357 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

358 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

359 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

360 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

361 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

362 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

363 
	#PCI_X_STATUS
 4

	)

364 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

365 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

366 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

367 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

368 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

369 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

370 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

371 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

372 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

373 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

374 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

375 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

376 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

380 
	#PCI_SSVID_VENDOR_ID
 4

	)

381 
	#PCI_SSVID_DEVICE_ID
 6

	)

385 
	#PCI_EXP_FLAGS
 2

	)

386 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

387 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

388 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

389 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

390 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

391 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

392 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

393 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

394 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

395 
	#PCI_EXP_TYPE_RC_EC
 0x®

	)

396 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

397 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

398 
	#PCI_EXP_DEVCAP
 4

	)

399 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x07

	)

400 
	#PCI_EXP_DEVCAP_PHANTOM
 0x18

	)

401 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x20

	)

402 
	#PCI_EXP_DEVCAP_L0S
 0x1c0

	)

403 
	#PCI_EXP_DEVCAP_L1
 0xe00

	)

404 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x1000

	)

405 
	#PCI_EXP_DEVCAP_ATN_IND
 0x2000

	)

406 
	#PCI_EXP_DEVCAP_PWR_IND
 0x4000

	)

407 
	#PCI_EXP_DEVCAP_RBER
 0x8000

	)

408 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x3fc0000

	)

409 
	#PCI_EXP_DEVCAP_PWR_SCL
 0xc000000

	)

410 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

411 
	#PCI_EXP_DEVCTL
 8

	)

412 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

413 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

414 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

415 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

416 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

417 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

418 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

419 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

420 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

421 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

422 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

423 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

424 
	#PCI_EXP_DEVSTA
 10

	)

425 
	#PCI_EXP_DEVSTA_CED
 0x01

	)

426 
	#PCI_EXP_DEVSTA_NFED
 0x02

	)

427 
	#PCI_EXP_DEVSTA_FED
 0x04

	)

428 
	#PCI_EXP_DEVSTA_URD
 0x08

	)

429 
	#PCI_EXP_DEVSTA_AUXPD
 0x10

	)

430 
	#PCI_EXP_DEVSTA_TRPND
 0x20

	)

431 
	#PCI_EXP_LNKCAP
 12

	)

432 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

433 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

434 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

435 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

436 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

437 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

438 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

439 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

440 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

441 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

442 
	#PCI_EXP_LNKCTL
 16

	)

443 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

444 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

445 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

446 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

447 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

448 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

449 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x100

	)

450 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

451 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

452 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

453 
	#PCI_EXP_LNKSTA
 18

	)

454 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

455 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x01

	)

456 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x02

	)

457 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

458 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

459 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

460 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

461 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

462 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

463 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

464 
	#PCI_EXP_SLTCAP
 20

	)

465 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

466 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

467 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

468 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

469 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

470 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

471 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

472 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

473 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

474 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

475 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

476 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

477 
	#PCI_EXP_SLTCTL
 24

	)

478 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

479 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

480 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

481 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

482 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

483 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

484 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

485 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

486 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

487 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

488 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

489 
	#PCI_EXP_SLTSTA
 26

	)

490 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

491 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

492 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

493 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

494 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

495 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

496 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

497 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

498 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

499 
	#PCI_EXP_RTCTL
 28

	)

500 
	#PCI_EXP_RTCTL_SECEE
 0x01

	)

501 
	#PCI_EXP_RTCTL_SENFEE
 0x02

	)

502 
	#PCI_EXP_RTCTL_SEFEE
 0x04

	)

503 
	#PCI_EXP_RTCTL_PMEIE
 0x08

	)

504 
	#PCI_EXP_RTCTL_CRSSVE
 0x10

	)

505 
	#PCI_EXP_RTCAP
 30

	)

506 
	#PCI_EXP_RTSTA
 32

	)

507 
	#PCI_EXP_RTSTA_PME
 0x10000

	)

508 
	#PCI_EXP_RTSTA_PENDING
 0x20000

	)

509 
	#PCI_EXP_DEVCAP2
 36

	)

510 
	#PCI_EXP_DEVCAP2_ARI
 0x20

	)

511 
	#PCI_EXP_DEVCAP2_LTR
 0x800

	)

512 
	#PCI_EXP_OBFF_MASK
 0xc0000

	)

513 
	#PCI_EXP_OBFF_MSG
 0x40000

	)

514 
	#PCI_EXP_OBFF_WAKE
 0x80000

	)

515 
	#PCI_EXP_DEVCTL2
 40

	)

516 
	#PCI_EXP_DEVCTL2_ARI
 0x20

	)

517 
	#PCI_EXP_IDO_REQ_EN
 0x100

	)

518 
	#PCI_EXP_IDO_CMP_EN
 0x200

	)

519 
	#PCI_EXP_LTR_EN
 0x400

	)

520 
	#PCI_EXP_OBFF_MSGA_EN
 0x2000

	)

521 
	#PCI_EXP_OBFF_MSGB_EN
 0x4000

	)

522 
	#PCI_EXP_OBFF_WAKE_EN
 0x6000

	)

523 
	#PCI_EXP_LNKCTL2
 48

	)

524 
	#PCI_EXP_SLTCTL2
 56

	)

527 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

528 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

529 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

531 
	#PCI_EXT_CAP_ID_ERR
 1

	)

532 
	#PCI_EXT_CAP_ID_VC
 2

	)

533 
	#PCI_EXT_CAP_ID_DSN
 3

	)

534 
	#PCI_EXT_CAP_ID_PWR
 4

	)

535 
	#PCI_EXT_CAP_ID_VNDR
 11

	)

536 
	#PCI_EXT_CAP_ID_ACS
 13

	)

537 
	#PCI_EXT_CAP_ID_ARI
 14

	)

538 
	#PCI_EXT_CAP_ID_ATS
 15

	)

539 
	#PCI_EXT_CAP_ID_SRIOV
 16

	)

540 
	#PCI_EXT_CAP_ID_LTR
 24

	)

543 
	#PCI_ERR_UNCOR_STATUS
 4

	)

544 
	#PCI_ERR_UNC_TRAIN
 0x00000001

	)

545 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

546 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

547 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

548 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

549 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

550 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

551 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

552 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

553 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

554 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

555 
	#PCI_ERR_UNCOR_MASK
 8

	)

557 
	#PCI_ERR_UNCOR_SEVER
 12

	)

559 
	#PCI_ERR_COR_STATUS
 16

	)

560 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

561 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

562 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

563 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

564 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

565 
	#PCI_ERR_COR_MASK
 20

	)

567 
	#PCI_ERR_CAP
 24

	)

568 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

569 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

570 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

571 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

572 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

573 
	#PCI_ERR_HEADER_LOG
 28

	)

574 
	#PCI_ERR_ROOT_COMMAND
 44

	)

576 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

578 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

580 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

581 
	#PCI_ERR_ROOT_STATUS
 48

	)

582 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

584 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

586 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

588 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

589 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

590 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

591 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

592 
	#PCI_ERR_ROOT_ERR_SRC
 52

	)

595 
	#PCI_VC_PORT_REG1
 4

	)

596 
	#PCI_VC_PORT_REG2
 8

	)

597 
	#PCI_VC_PORT_CTRL
 12

	)

598 
	#PCI_VC_PORT_STATUS
 14

	)

599 
	#PCI_VC_RES_CAP
 16

	)

600 
	#PCI_VC_RES_CTRL
 20

	)

601 
	#PCI_VC_RES_STATUS
 26

	)

604 
	#PCI_PWR_DSR
 4

	)

605 
	#PCI_PWR_DATA
 8

	)

606 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

607 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

608 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

609 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

610 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

611 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

612 
	#PCI_PWR_CAP
 12

	)

613 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

623 
	#HT_3BIT_CAP_MASK
 0xE0

	)

624 
	#HT_CAPTYPE_SLAVE
 0x00

	)

625 
	#HT_CAPTYPE_HOST
 0x20

	)

627 
	#HT_5BIT_CAP_MASK
 0xF8

	)

628 
	#HT_CAPTYPE_IRQ
 0x80

	)

629 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

630 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

631 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

632 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

633 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

634 
	#HT_MSI_FLAGS
 0x02

	)

635 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

636 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

637 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

638 
	#HT_MSI_ADDR_LO
 0x04

	)

639 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

640 
	#HT_MSI_ADDR_HI
 0x08

	)

641 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

642 
	#HT_CAPTYPE_VCSET
 0xB8

	)

643 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

644 
	#HT_CAPTYPE_GEN3
 0xD0

	)

645 
	#HT_CAPTYPE_PM
 0xE0

	)

648 
	#PCI_ARI_CAP
 0x04

	)

649 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

650 
	#PCI_ARI_CAP_ACS
 0x0002

	)

651 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

652 
	#PCI_ARI_CTRL
 0x06

	)

653 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

654 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

655 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

658 
	#PCI_ATS_CAP
 0x04

	)

659 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

660 
	#PCI_ATS_MAX_QDEP
 32

	)

661 
	#PCI_ATS_CTRL
 0x06

	)

662 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

663 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

664 
	#PCI_ATS_MIN_STU
 12

	)

667 
	#PCI_PRI_CAP
 0x13

	)

668 
	#PCI_PRI_CONTROL_OFF
 0x04

	)

669 
	#PCI_PRI_STATUS_OFF
 0x06

	)

670 
	#PCI_PRI_ENABLE
 0x0001

	)

671 
	#PCI_PRI_RESET
 0x0002

	)

672 
	#PCI_PRI_STATUS_RF
 0x0001

	)

673 
	#PCI_PRI_STATUS_UPRGI
 0x0002

	)

674 
	#PCI_PRI_STATUS_STOPPED
 0x0100

	)

675 
	#PCI_PRI_MAX_REQ_OFF
 0x08

	)

676 
	#PCI_PRI_ALLOC_REQ_OFF
 0x0¯

	)

679 
	#PCI_PASID_CAP
 0x1b

	)

680 
	#PCI_PASID_CAP_OFF
 0x04

	)

681 
	#PCI_PASID_CONTROL_OFF
 0x06

	)

682 
	#PCI_PASID_ENABLE
 0x01

	)

683 
	#PCI_PASID_EXEC
 0x02

	)

684 
	#PCI_PASID_PRIV
 0x04

	)

687 
	#PCI_SRIOV_CAP
 0x04

	)

688 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

689 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

690 
	#PCI_SRIOV_CTRL
 0x08

	)

691 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

692 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

693 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

694 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

695 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

696 
	#PCI_SRIOV_STATUS
 0x0®

	)

697 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

698 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

699 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

700 
	#PCI_SRIOV_NUM_VF
 0x10

	)

701 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

702 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

703 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

704 
	#PCI_SRIOV_VF_DID
 0x1®

	)

705 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

706 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

707 
	#PCI_SRIOV_BAR
 0x24

	)

708 
	#PCI_SRIOV_NUM_BARS
 6

	)

709 
	#PCI_SRIOV_VFM
 0x3¯

	)

710 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

711 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

712 
	#PCI_SRIOV_VFM_UA
 0x0

	)

713 
	#PCI_SRIOV_VFM_MI
 0x1

	)

714 
	#PCI_SRIOV_VFM_MO
 0x2

	)

715 
	#PCI_SRIOV_VFM_AV
 0x3

	)

717 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

718 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

719 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

720 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

721 
	#PCI_LTR_SCALE_SHIFT
 10

	)

724 
	#PCI_ACS_CAP
 0x04

	)

725 
	#PCI_ACS_SV
 0x01

	)

726 
	#PCI_ACS_TB
 0x02

	)

727 
	#PCI_ACS_RR
 0x04

	)

728 
	#PCI_ACS_CR
 0x08

	)

729 
	#PCI_ACS_UF
 0x10

	)

730 
	#PCI_ACS_EC
 0x20

	)

731 
	#PCI_ACS_DT
 0x40

	)

732 
	#PCI_ACS_CTRL
 0x06

	)

733 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

4 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__¨ch_swab16


49  
	`__¨ch_swab16
(
vÆ
);

51  
	`___c⁄°™t_swab16
(
vÆ
);

53 
	}
}

55 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

57 #ifde‡
__¨ch_swab32


58  
	`__¨ch_swab32
(
vÆ
);

60  
	`___c⁄°™t_swab32
(
vÆ
);

62 
	}
}

64 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

66 #ifde‡
__¨ch_swab64


67  
	`__¨ch_swab64
(
vÆ
);

68 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

69 
__u32
 
h
 = 
vÆ
 >> 32;

70 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

71  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

73  
	`___c⁄°™t_swab64
(
vÆ
);

75 
	}
}

77 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

79 #ifde‡
__¨ch_swahw32


80  
	`__¨ch_swahw32
(
vÆ
);

82  
	`___c⁄°™t_swahw32
(
vÆ
);

84 
	}
}

86 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

88 #ifde‡
__¨ch_swahb32


89  
	`__¨ch_swahb32
(
vÆ
);

91  
	`___c⁄°™t_swahb32
(
vÆ
);

93 
	}
}

99 
	#__swab16
(
x
) \

100 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

101 
	`___c⁄°™t_swab16
(
x
) : \

102 
	`__fswab16
(
x
))

	)

108 
	#__swab32
(
x
) \

109 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

110 
	`___c⁄°™t_swab32
(
x
) : \

111 
	`__fswab32
(
x
))

	)

117 
	#__swab64
(
x
) \

118 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

119 
	`___c⁄°™t_swab64
(
x
) : \

120 
	`__fswab64
(
x
))

	)

128 
	#__swahw32
(
x
) \

129 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

130 
	`___c⁄°™t_swahw32
(
x
) : \

131 
	`__fswahw32
(
x
))

	)

139 
	#__swahb32
(
x
) \

140 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

141 
	`___c⁄°™t_swahb32
(
x
) : \

142 
	`__fswahb32
(
x
))

	)

148 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

150 #ifde‡
__¨ch_swab16p


151  
	`__¨ch_swab16p
(
p
);

153  
	`__swab16
(*
p
);

155 
	}
}

161 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

163 #ifde‡
__¨ch_swab32p


164  
	`__¨ch_swab32p
(
p
);

166  
	`__swab32
(*
p
);

168 
	}
}

174 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

176 #ifde‡
__¨ch_swab64p


177  
	`__¨ch_swab64p
(
p
);

179  
	`__swab64
(*
p
);

181 
	}
}

189 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

191 #ifde‡
__¨ch_swahw32p


192  
	`__¨ch_swahw32p
(
p
);

194  
	`__swahw32
(*
p
);

196 
	}
}

204 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

206 #ifde‡
__¨ch_swahb32p


207  
	`__¨ch_swahb32p
(
p
);

209  
	`__swahb32
(*
p
);

211 
	}
}

217 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

219 #ifde‡
__¨ch_swab16s


220 
	`__¨ch_swab16s
(
p
);

222 *
p
 = 
	`__swab16p
(p);

224 
	}
}

229 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

231 #ifde‡
__¨ch_swab32s


232 
	`__¨ch_swab32s
(
p
);

234 *
p
 = 
	`__swab32p
(p);

236 
	}
}

242 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

244 #ifde‡
__¨ch_swab64s


245 
	`__¨ch_swab64s
(
p
);

247 *
p
 = 
	`__swab64p
(p);

249 
	}
}

257 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

259 #ifde‡
__¨ch_swahw32s


260 
	`__¨ch_swahw32s
(
p
);

262 *
p
 = 
	`__swahw32p
(p);

264 
	}
}

272 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

274 #ifde‡
__¨ch_swahb32s


275 
	`__¨ch_swahb32s
(
p
);

277 *
p
 = 
	`__swahb32p
(p);

279 
	}
}

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

30 
	t__kî√l_uid32_t
;

31 
	t__kî√l_gid32_t
;

33 
	t__kî√l_ﬁd_uid_t
;

34 
	t__kî√l_ﬁd_gid_t
;

35 
	t__kî√l_ﬁd_dev_t
;

37 #ifde‡
__GNUC__


38 
	t__kî√l_loff_t
;

42 
	mvÆ
[2];

43 } 
	t__kî√l_fsid_t
;

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

31 #ifde‡
__GNUC__


32 
	t__kî√l_loff_t
;

36 
	mvÆ
[2];

37 } 
	t__kî√l_fsid_t
;

39 
	t__kî√l_ﬁd_uid_t
;

40 
	t__kî√l_ﬁd_gid_t
;

41 
__kî√l_uid_t
 
	t__kî√l_uid32_t
;

42 
__kî√l_gid_t
 
	t__kî√l_gid32_t
;

44 
	t__kî√l_ﬁd_dev_t
;

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 #ifde‡
__i386__


10 #ifde‡
CONFIG_X86_BSWAP


11 
	`__asm__
("bsw≠ %0" : "Ù" (
vÆ
) : "0" (val));

13 
	`__asm__
("xchgb %b0,%h0\n\t"

16 : "=q" (
vÆ
)

17 : "0" (
vÆ
));

21 
	`__asm__
("bswapl %0"

22 : "Ù" (
vÆ
)

23 : "0" (
vÆ
));

25  
vÆ
;

26 
	}
}

27 
	#__¨ch_swab32
 
__¨ch_swab32


	)

29 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

31 #ifde‡
__i386__


34 
__u32
 
a
;

35 
__u32
 
b
;

36 } 
s
;

37 
__u64
 
u
;

38 } 
v
;

39 
v
.
u
 = 
vÆ
;

40 #ifde‡
CONFIG_X86_BSWAP


41 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

42 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

43 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

45 
v
.
s
.
a
 = 
	`__¨ch_swab32
(v.s.a);

46 
v
.
s
.
b
 = 
	`__¨ch_swab32
(v.s.b);

47 
	`__asm__
("xchgl %0,%1"

48 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

49 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

51  
v
.
u
;

53 
	`__asm__
("bswapq %0"

54 : "Ù" (
vÆ
)

55 : "0" (
vÆ
));

56  
vÆ
;

58 
	}
}

59 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


44 
	#__LEAF
 , 
__Àaf__


	)

45 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

47 
	#__LEAF


	)

48 
	#__LEAF_ATTR


	)

56 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

57 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

58 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

59 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

61 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

62 
	#__THROW
 
	`throw
 ()

	)

63 
	#__THROWNL
 
	`throw
 ()

	)

64 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

74 
	#__ölöe


	)

76 
	#__THROW


	)

77 
	#__THROWNL


	)

78 
	#__NTH
(
f˘
Ë
	)
fct

80 
	#__c⁄°
 c⁄°

	)

81 
	#__sig√d
 sig√d

	)

82 
	#__vﬁ©ûe
 vﬁ©ûe

	)

88 
	#__P
(
¨gs
Ë
	)
args

89 
	#__PMT
(
¨gs
Ë
	)
args

94 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

95 
	#__STRING
(
x
Ë#x

	)

98 
	#__±r_t
 *

	)

99 
	#__l⁄g_doubÀ_t
 

	)

103 #ifdef 
__˝lu•lus


104 
	#__BEGIN_DECLS
 "C" {

	)

105 
	#__END_DECLS
 }

	)

107 
	#__BEGIN_DECLS


	)

108 
	#__END_DECLS


	)

117 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


118 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

119 
	#__END_NAMESPACE_STD
 }

	)

120 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

121 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

122 
	#__END_NAMESPACE_C99
 }

	)

123 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

128 
	#__BEGIN_NAMESPACE_STD


	)

129 
	#__END_NAMESPACE_STD


	)

130 
	#__USING_NAMESPACE_STD
(
«me
)

	)

131 
	#__BEGIN_NAMESPACE_C99


	)

132 
	#__END_NAMESPACE_C99


	)

133 
	#__USING_NAMESPACE_C99
(
«me
)

	)

138 #i‚de‡
__BOUNDED_POINTERS__


139 
	#__bounded


	)

140 
	#__unbounded


	)

141 
	#__±rvÆue


	)

146 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

147 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

149 #i‡
__GNUC_PREREQ
 (4,3)

150 
	#__w¨nde˛
(
«me
, 
msg
) \

151 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

152 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

153 
	#__îr‹de˛
(
«me
, 
msg
) \

154 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

156 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 
	#__w¨«âr
(
msg
)

	)

158 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

162 #i‡
__GNUC_PREREQ
 (2,97)

164 
	#__Êex¨r
 []

	)

166 #ifde‡
__GNUC__


167 
	#__Êex¨r
 [0]

	)

169 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

170 
	#__Êex¨r
 []

	)

173 
	#__Êex¨r
 [1]

	)

189 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

191 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

192 #ifde‡
__˝lu•lus


193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

198 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

199 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

200 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

201 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

203 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

204 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

217 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

218 
	#__©åibuã__
(
xyz
Ë

	)

224 #i‡
__GNUC_PREREQ
 (2,96)

225 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

227 
	#__©åibuã_mÆloc__


	)

233 #i‡
__GNUC_PREREQ
 (2,96)

234 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

236 
	#__©åibuã_puª__


	)

240 #i‡
__GNUC_PREREQ
 (2,5)

241 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

243 
	#__©åibuã_c⁄°__


	)

249 #i‡
__GNUC_PREREQ
 (3,1)

250 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

251 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

253 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

254 
	#__©åibuã_noölöe__


	)

258 #i‡
__GNUC_PREREQ
 (3,2)

259 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

261 
	#__©åibuã_dïªˇãd__


	)

270 #i‡
__GNUC_PREREQ
 (2,8)

271 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

273 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

280 #i‡
__GNUC_PREREQ
 (2,97)

281 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

282 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

289 #i‡
__GNUC_PREREQ
 (3,3)

290 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

292 
	#__n⁄nuŒ
(
∑øms
)

	)

297 #i‡
__GNUC_PREREQ
 (3,4)

298 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

299 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

300 #i‡
__USE_FORTIFY_LEVEL
 > 0

301 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

304 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

306 #i‚de‡
__wur


307 
	#__wur


	)

311 #i‡
__GNUC_PREREQ
 (3,2)

312 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

320 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


321 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

322 #i‡
__GNUC_PREREQ
 (4,3)

323 
	#__exã∫_Æways_ölöe
 \

324 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

330 
	#__exã∫_ölöe
 
__ölöe


	)

331 #i‡
__GNUC_PREREQ
 (4,3)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

335 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #i‡
__GNUC_PREREQ
 (4,3)

343 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

344 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

351 #i‡!
__GNUC_PREREQ
 (2,8)

352 
	#__exãnsi⁄__


	)

356 #i‡!
__GNUC_PREREQ
 (2,92)

357 
	#__ª°ri˘


	)

363 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


364 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

366 #ifde‡
__GNUC__


367 
	#__ª°ri˘_¨r


	)

369 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

370 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

373 
	#__ª°ri˘_¨r


	)

378 
	~<bôs/w‹dsize.h
>

380 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


381 
	#__LDBL_COMPAT
 1

	)

382 #ifde‡
__REDIRECT


383 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

384 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

385 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

386 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

387 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

388 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

389 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

390 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

391 
	#__LDBL_REDIR_DECL
(
«me
) \

392 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

395 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

396 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

399 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


400 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

401 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

402 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

403 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

404 
	#__LDBL_REDIR_DECL
(
«me
)

	)

405 #ifde‡
__REDIRECT


406 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


60 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

61 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

62 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

69 #ifde‡
__USE_XOPEN


70 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

71 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

73 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

74 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

76 } 
	tfd_£t
;

79 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

81 #ifde‡
__USE_MISC


83 
__fd_mask
 
	tfd_mask
;

86 
	#NFDBITS
 
__NFDBITS


	)

91 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

92 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

93 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

94 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

97 
__BEGIN_DECLS


107 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

108 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

109 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

110 
timevÆ
 *
__ª°ri˘
 
__timeout
);

112 #ifde‡
__USE_XOPEN2K


119 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

120 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

121 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

122 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

123 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


129 
	~<bôs/£À˘2.h
>

132 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__BEGIN_DECLS


32 
__exãnsi⁄__


33 
	$gnu_dev_maj‹
 (
__dev
)

34 
__THROW
 
__©åibuã_c⁄°__
;

35 
__exãnsi⁄__


36 
	$gnu_dev_mö‹
 (
__dev
)

37 
__THROW
 
__©åibuã_c⁄°__
;

38 
__exãnsi⁄__


39 
	$gnu_dev_makedev
 (
__maj‹
,

40 
__mö‹
)

41 
__THROW
 
__©åibuã_c⁄°__
;

43 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

47  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

53  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

54 
	}
}

56 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

57 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

59  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

60 | (((Ë(
__mö‹
 & ~0xff)) << 12)

61 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

62 
	}
}

64 
	g__END_DECLS


67 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

68 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

69 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
) \

60 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
£t
) \

62 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
£t
) \

64 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

20 #i‚de‡
_SYS_SELECT_H


25 
__fdñt_chk
 (
__d
);

26 
	$__fdñt_w¨n
 (
__d
)

27 
	`__w¨«âr
 ("bit outside of fd_set selected");

28 #unde‡
__FD_ELT


29 
	#__FD_ELT
(
d
) \

30 
__exãnsi⁄__
 \

31 ({ 
__d
 = (
d
); \

32 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

33 ? (
__d
 >
__FD_SETSIZE
 \

34 ? 
	`__fdñt_w¨n
 (
__d
Ë: (__d / 
__NFDBITS
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


25 #i‚de‡
_STRUCT_TIMEVAL


26 
	#_STRUCT_TIMEVAL
 1

	)

27 
	~<bôs/ty≥s.h
>

31 
	stimevÆ


33 
__time_t
 
	mtv_£c
;

34 
__su£c⁄ds_t
 
	mtv_u£c
;

39 #i‚de‡
__√ed_timevÆ


40 #i‚de‡
_BITS_TIME_H


41 
	#_BITS_TIME_H
 1

	)

49 
	#CLOCKS_PER_SEC
 1000000l

	)

51 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/timex.h

19 #i‚def 
_BITS_TIMEX_H


20 
	#_BITS_TIMEX_H
 1

	)

24 
	stimex


26 
	mmodes
;

27 
	moff£t
;

28 
	m‰eq
;

29 
	mmaxîr‹
;

30 
	me°îr‹
;

31 
	m°©us
;

32 
	mc⁄°™t
;

33 
	m¥ecisi⁄
;

34 
	mtﬁî™˚
;

35 
timevÆ
 
	mtime
;

36 
	mtick
;

38 
	mµs‰eq
;

39 
	mjôãr
;

40 
	mshi·
;

41 
	m°abû
;

42 
	mjô˙t
;

43 
	mˇl˙t
;

44 
	mîr˙t
;

45 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@
1
.
1
/usr/include
148
3029
devres.c
gpio-74x164.c
gpio-adnp.c
gpio-adp5520.c
gpio-adp5588.c
gpio-amd8111.c
gpio-arizona.c
gpio-bt8xx.c
gpio-clps711x.c
gpio-cs5535.c
gpio-da9052.c
gpio-da9055.c
gpio-davinci.c
gpio-em.c
gpio-ep93xx.c
gpio-ge.c
gpio-generic.c
gpio-grgpio.c
gpio-ich.c
gpio-it8761e.c
gpio-janz-ttl.c
gpio-ks8695.c
gpio-langwell.c
gpio-lpc32xx.c
gpio-lynxpoint.c
gpio-max7300.c
gpio-max7301.c
gpio-max730x.c
gpio-max732x.c
gpio-mc33880.c
gpio-mc9s08dz60.c
gpio-mcp23s08.c
gpio-ml-ioh.c
gpio-mm-lantiq.c
gpio-mpc5200.c
gpio-mpc8xxx.c
gpio-msic.c
gpio-msm-v1.c
gpio-msm-v2.c
gpio-mvebu.c
gpio-mxc.c
gpio-mxs.c
gpio-omap.c
gpio-palmas.c
gpio-pca953x.c
gpio-pcf857x.c
gpio-pch.c
gpio-pl061.c
gpio-pxa.c
gpio-rc5t583.c
gpio-rcar.c
gpio-rdc321x.c
gpio-sa1100.c
gpio-samsung.c
gpio-sch.c
gpio-sodaville.c
gpio-spear-spics.c
gpio-sta2x11.c
gpio-stmpe.c
gpio-stp-xway.c
gpio-sx150x.c
gpio-tc3589x.c
gpio-tegra.c
gpio-timberdale.c
gpio-tnetv107x.c
gpio-tps6586x.c
gpio-tps65910.c
gpio-tps65912.c
gpio-ts5500.c
gpio-twl4030.c
gpio-twl6040.c
gpio-ucb1400.c
gpio-viperboard.c
gpio-vr41xx.c
gpio-vx855.c
gpio-wm831x.c
gpio-wm8350.c
gpio-wm8994.c
gpio-xilinx.c
gpiolib-acpi.c
gpiolib-of.c
gpiolib.c
../media/pci/bt8xx/bt848.h
/usr/include/asm/byteorder.h
/usr/include/asm/msr.h
/usr/include/linux/errno.h
/usr/include/linux/fs.h
/usr/include/linux/i2c.h
/usr/include/linux/kernel.h
/usr/include/linux/pci.h
/usr/include/linux/stddef.h
/usr/include/linux/string.h
/usr/include/linux/types.h
/usr/include/asm/errno.h
/usr/include/asm/msr-index.h
/usr/include/asm/types.h
/usr/include/linux/blk_types.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/string.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctl.h
/usr/include/asm/posix_types.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/features.h
/usr/include/linux/swab.h
/usr/include/xlocale.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/swab.h
/usr/include/bits/predefs.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdlib.h
/usr/include/sys/cdefs.h
/usr/include/alloca.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/typesizes.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/sys/types.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/bits/pthreadtypes.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/bits/timex.h
